// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) return 0; }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) Runtime.stackRestore(stack);
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the a given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;


var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}



// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');


var buffer = new ArrayBuffer(TOTAL_MEMORY);

HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 629552;
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,205,204,204,204,204,204,220,63,0,0,0,0,0,0,18,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,13,198,136,68,161,101,218,63,24,9,109,57,151,226,214,63,88,29,57,210,25,24,199,63,246,95,231,166,205,56,203,63,24,9,109,57,151,226,230,63,85,247,200,230,170,121,178,63,75,175,205,198,74,204,147,63,56,129,233,180,110,131,190,63,145,214,24,116,66,104,238,63,22,81,115,63,0,0,128,63,75,92,139,63,0,0,0,0,2,1,1,3,2,3,2,0,3,2,3,0,1,2,1,0,0,3,0,2,0,1,3,1,0,1,1,2,0,3,3,2,2,3,3,2,3,1,1,3,3,1,2,1,2,0,0,3,0,1,0,1,0,2,0,2,2,0,3,0,1,3,2,1,3,1,1,2,0,1,0,2,1,3,1,3,0,1,3,0,2,0,0,3,3,2,3,1,2,0,2,0,3,2,2,1,2,3,3,1,2,1,2,1,2,1,1,2,3,0,0,1,1,0,0,2,3,0,0,3,0,3,0,3,2,1,2,3,2,3,3,1,1,2,1,0,3,2,3,0,2,3,1,3,1,0,2,0,3,0,3,2,0,1,1,2,0,1,0,2,0,1,1,3,3,2,2,1,1,3,3,0,2,1,3,2,2,3,2,0,0,1,3,0,2,0,1,2,3,0,1,0,1,3,1,2,3,2,3,2,0,2,0,1,1,0,3,0,0,2,0,3,1,0,0,1,1,3,3,2,3,2,2,1,2,1,3,2,3,1,2,1,0,3,0,2,0,2,0,2,0,3,1,0,0,2,0,3,2,1,3,1,1,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,115,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,105,110,32,37,115,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,115,58,32,0,0,0,0,0,0,0,0,0,0,0,0,85,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,102,105,108,101,10,0,67,111,114,114,117,112,116,32,100,97,116,97,32,110,101,97,114,32,48,120,37,108,108,120,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([155,2,102,1,141,1,53,2,196,1,219,2,134,1,111,1,243,1,5,2,95,4,140,1,92,1,192,1,25,2,119,5,229,1,175,1,252,1,176,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,255,190,2,170,248,86,9,69,7,187,250,137,3,119,254,80,254,176,3,57,10,199,247,77,251,179,6,144,251,112,6,108,5,148,252,11,1,245,0,151,249,105,8,81,15,175,242,153,253,103,4,229,249,27,8,157,5,99,252,253,1,3,0,12,253,244,4,215,9,41,248,66,255,190,2,162,248,94,9,105,8,151,249,251,2,5,255,60,254,196,3,224,11,32,246,66,255,190,2,170,248,86,9,69,7,187,250,137,3,119,254,80,254,176,3,57,10,199,247,217,252,39,5,7,249,249,8,108,5,148,252,1,3,255,254,26,255,230,2,19,8,237,249,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,4,121,4,104,4,85,4,154,4,125,4,104,4,85,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,97,107,101,95,100,101,99,111,100,101,114,40,41,0,0,0,1,4,2,3,1,2,0,0,0,0,0,0,0,0,0,4,3,5,6,2,7,1,8,9,0,10,11,255,0,2,2,3,1,1,1,1,2,0,0,0,0,0,0,0,3,2,4,1,5,0,6,7,9,8,10,11,255,0,0,6,3,1,1,2,0,0,0,0,0,0,0,0,0,6,5,7,4,8,3,9,2,0,10,1,11,255,0,0,2,2,2,1,4,2,1,2,5,1,1,0,0,0,139,3,4,2,5,1,6,7,8,18,19,17,20,9,21,34,0,33,22,10,240,35,23,36,49,50,24,25,51,37,65,52,66,53,81,54,55,56,41,121,38,26,57,86,87,40,39,82,85,88,67,118,89,119,84,97,249,113,120,117,150,151,73,183,83,215,116,182,152,71,72,149,105,153,145,250,184,104,181,185,214,247,216,103,70,69,148,137,248,129,213,246,180,136,177,42,68,114,217,135,102,212,245,58,167,115,169,168,134,98,199,101,200,201,161,244,209,233,90,146,133,166,231,147,232,193,198,122,100,225,74,106,230,179,241,211,165,138,178,154,186,132,164,99,229,197,243,210,196,130,170,218,228,242,202,131,163,162,195,234,194,226,227,255,255,0,2,2,1,4,1,4,1,3,3,1,0,0,0,0,140,2,3,1,4,5,18,17,6,19,7,8,20,34,9,33,0,35,21,49,50,10,22,240,36,51,65,66,25,23,37,24,81,52,67,82,41,53,97,57,113,98,54,83,38,56,26,55,129,39,145,121,85,69,40,114,89,161,177,68,105,84,88,209,250,87,225,241,185,73,71,99,106,249,86,70,168,42,74,120,153,58,117,116,134,101,193,118,182,150,214,137,133,201,245,149,180,199,247,138,151,184,115,183,216,217,135,167,122,72,130,132,234,244,166,197,90,148,164,198,146,195,104,181,200,228,229,230,233,162,163,227,194,102,103,147,170,212,213,231,248,136,154,215,119,196,100,226,152,165,202,218,232,243,246,169,178,179,242,210,131,186,211,255,255,0,0,6,2,1,3,3,2,5,1,2,2,8,10,0,117,4,5,3,6,2,7,1,8,9,18,19,20,17,21,10,22,23,240,0,34,33,24,35,25,36,50,49,37,51,56,55,52,53,54,57,121,87,88,89,40,86,120,39,65,41,119,38,66,118,153,26,85,152,151,249,72,84,150,137,71,183,73,250,117,104,182,103,105,185,184,216,82,215,136,181,116,81,70,217,248,58,214,135,69,122,149,213,246,134,180,169,148,83,42,168,67,245,247,212,102,167,90,68,138,201,232,200,231,154,106,115,74,97,199,244,198,101,233,114,230,113,145,147,166,218,146,133,98,243,197,178,164,132,186,100,165,179,210,129,229,211,170,196,202,242,177,228,209,131,99,234,195,226,130,241,163,194,161,193,227,162,225,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,106,112,101,103,95,115,116,97,114,116,40,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,100,46,37,100,46,37,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,97,99,107,101,100,95,100,110,103,95,108,111,97,100,95,114,97,119,40,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,5,1,1,1,1,1,1,2,0,0,0,0,0,0,5,4,3,6,2,7,1,0,8,9,11,10,12,0,0,0,0,1,5,1,1,1,1,1,1,2,0,0,0,0,0,0,57,90,56,39,22,5,4,3,2,1,0,11,12,12,0,0,0,1,4,2,3,1,2,0,0,0,0,0,0,0,0,0,5,4,6,3,7,2,8,1,9,0,10,11,12,0,0,0,0,1,4,3,1,1,1,1,1,2,0,0,0,0,0,0,5,6,4,7,8,3,9,2,1,0,10,11,12,13,14,0,0,1,5,1,1,1,1,1,1,1,2,0,0,0,0,0,8,92,75,58,41,7,6,5,4,3,2,1,0,13,14,0,0,1,4,2,2,3,1,2,0,0,0,0,0,0,0,0,7,6,8,5,9,4,10,3,11,12,2,0,1,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,170,255,0,0,0,0,0,0,0,0,80,101,110,116,97,120,0,0,0,0,0,0,79,112,116,105,111,32,51,51,87,82,0,0,0,0,0,0,3,0,0,0,78,105,107,111,110,0,0,0,0,0,0,0,69,51,50,48,48,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,78,105,107,111,110,0,0,0,0,0,0,0,69,51,55,48,48,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,79,108,121,109,112,117,115,0,0,0,0,0,67,55,52,48,85,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,112,109,95,116,104,117,109,98,40,41,0,0,0,0,0,0,0,0,0,0,0,0,0,80,54,10,37,100,32,37,100,10,50,53,53,10,0,0,0,112,112,109,49,54,95,116,104,117,109,98,40,41,0,0,0,48,49,50,0,49,48,50,0,0,0,0,0,0,0,0,0,108,97,121,101,114,95,116,104,117,109,98,40,41,0,0,0,80,37,100,10,37,100,32,37,100,10,50,53,53,10,0,0,114,111,108,108,101,105,95,116,104,117,109,98,40,41,0,0,112,104,97,115,101,95,111,110,101,95,102,108,97,116,95,102,105,101,108,100,40,41,0,0,255,255,255,1,1,255,1,1,254,0,0,254,0,2,2,0,254,254,254,2,2,254,2,2,0,0,0,0,0,0,0,0,80,104,97,115,101,32,79,110,101,32,99,111,114,114,101,99,116,105,111,110,46,46,46,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,112,104,97,115,101,95,111,110,101,95,99,111,114,114,101,99,116,40,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,6,0,0,0,9,0,0,0,11,0,0,0,10,0,0,0,5,0,0,0,12,0,0,0,14,0,0,0,13,0,0,0,112,104,97,115,101,95,111,110,101,95,108,111,97,100,95,114,97,119,95,99,40,41,0,0,0,0,0,0,0,0,0,0,104,97,115,115,101,108,98,108,97,100,95,108,111,97,100,95,114,97,119,40,41], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+132032);
/* memory initializer */ allocate([108,101,97,102,95,104,100,114,95,108,111,97,100,95,114,97,119,40,41,0,0,0,0,0,115,105,110,97,114,95,52,115,104,111,116,95,108,111,97,100,95,114,97,119,40,41,0,0,110,111,107,105,97,95,108,111,97,100,95,114,97,119,40,41,0,0,0,0,0,0,0,0,79,109,110,105,86,105,115,105,111,110], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+142928);
/* memory initializer */ allocate([167,255,196,255,212,255,224,255,234,255,241,255,248,255,254,255,2,0,8,0,15,0,22,0,32,0,44,0,60,0,89,0,253,255,255,255,1,0,3,0,251,255,255,255,1,0,5,0,248,255,254,255,2,0,8,0,243,255,253,255,3,0,13,0,237,255,252,255,4,0,19,0,228,255,250,255,6,0,28,0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,0,69,0,70,0,71,0,72,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,0,86,0,88,0,90,0,92,0,94,0,97,0,99,0,101,0,103,0,105,0,107,0,110,0,112,0,114,0,116,0,118,0,120,0,123,0,125,0,127,0,129,0,131,0,134,0,136,0,138,0,140,0,142,0,144,0,147,0,149,0,151,0,153,0,155,0,158,0,160,0,162,0,164,0,166,0,168,0,171,0,173,0,175,0,177,0,179,0,181,0,184,0,186,0,188,0,190,0,192,0,195,0,197,0,199,0,201,0,203,0,205,0,208,0,210,0,212,0,214,0,216,0,218,0,221,0,223,0,226,0,230,0,235,0,239,0,244,0,248,0,252,0,1,1,5,1,9,1,14,1,18,1,22,1,27,1,31,1,35,1,40,1,44,1,49,1,53,1,57,1,62,1,66,1,70,1,75,1,79,1,83,1,88,1,92,1,96,1,101,1,105,1,109,1,114,1,118,1,123,1,127,1,131,1,136,1,140,1,144,1,149,1,153,1,157,1,162,1,166,1,170,1,175,1,179,1,184,1,188,1,192,1,197,1,201,1,205,1,210,1,214,1,218,1,223,1,227,1,231,1,236,1,240,1,244,1,252,1,7,2,19,2,30,2,41,2,52,2,63,2,75,2,86,2,97,2,108,2,119,2,131,2,142,2,153,2,164,2,175,2,186,2,198,2,209,2,220,2,231,2,242,2,254,2,9,3,20,3,31,3,42,3,54,3,65,3,76,3,87,3,98,3,110,3,121,3,132,3,143,3,154,3,165,3,177,3,188,3,199,3,210,3,221,3,233,3,244,3,255,3,1,1,2,3,3,4,4,2,5,7,6,5,7,6,7,8,1,0,2,1,3,3,4,4,5,2,6,7,7,6,8,5,8,8,2,1,2,3,3,0,3,2,3,4,4,6,5,5,6,7,6,8,2,0,2,1,2,3,3,2,4,4,5,6,6,7,7,5,7,8,2,1,2,4,3,0,3,2,3,3,4,7,5,5,6,6,6,8,2,3,3,1,3,2,3,4,3,5,3,6,4,7,5,0,5,8,2,3,2,6,3,0,3,1,4,4,4,5,4,7,5,2,5,8,2,4,2,7,3,3,3,6,4,1,4,2,4,5,5,0,5,8,2,6,3,1,3,3,3,5,3,7,3,8,4,0,5,2,5,4,2,0,2,1,3,2,3,3,4,4,4,5,5,6,5,7,4,8,1,0,2,2,2,254,1,253,1,3,2,239,2,251,2,5,2,17,2,249,2,2,2,9,2,18,2,238,2,247,2,254,2,7,2,228,2,28,3,207,3,247,3,9,4,49,5,177,5,79,2,255,2,13,2,26,3,39,4,240,5,55,6,219,6,76,2,230,2,243,2,1,3,217,4,16,5,201,6,180,6,37,0,0,0,0,16,0,16,0,16,0,0,0,0,0,0,0,0,5,64,5,16,9,32,14,0,13,64,31,255,15,255,63,255,255,255,63,0,0,0,0,0,0,0,0,162,0,0,0,192,0,0,0,187,0,0,0,92,0,0,0,0,0,0,0,124,2,0,0,168,1,0,0,212,0,0,0,101,105,103,104,116,95,98,105,116,95,108,111,97,100,95,114,97,119,40,41,0,0,0,0,107,111,100,97,107,95,99,51,51,48,95,108,111,97,100,95,114,97,119,40,41,0,0,0,107,111,100,97,107,95,99,54,48,51,95,108,111,97,100,95,114,97,119,40,41,0,0,0,0,1,5,1,1,2,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,0,3,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,0,0,0,0,107,111,100,97,107,95,50,54,50,95,108,111,97,100,95,114,97,119,40,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,15,16,15,15,14,14,13,13,12,12,11,11,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,3,0,3,2,2,1,2,0,0,0,0,115,111,110,121,95,97,114,119,50,95,108,111,97,100,95,114,97,119,40,41,0,0,0,0,4,3,7,3,6,2,5,2,3,4,0,6,9,7,10,8,11,9,12,10,13,10,1,5,8,4,2,4,0,0,0,0,50,48,52,0,0,0,0,0,49,50,48,0,0,0,0,0,48,50,50,52,52,54,56,0,48,50,52,52,54,54,56,0,7,7,0,0,63,55,47,39,31,23,15,7,0,7,7,0,0,63,55,47,39,31,23,15,7,0,3,3,0,0,63,47,31,15], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+159408);
/* memory initializer */ allocate([37,115,58,32,100,101,99,111,100,101,114,32,116,97,98,108,101,32,111,118,101,114,102,108,111,119,10,0,0,0,0,0,102,111,118,101,111,110,95,116,104,117,109,98,40,41,0,0,0,2,0,2,0,2,0,2,0,0,0,0,0,0,0,0,102,111,118,101,111,110,95,108,111,97,100,95,99,97,109,102,40,41,0,0,0,0,0,0,37,115,32,104,97,115,32,117,110,107,110,111,119,110,32,67,65,77,70,32,116,121,112,101,32,37,100,46,10,0,0,0,67,77,98,0,0,0,0,0,102,111,118,101,111,110,95,99,97,109,102,95,109,97,116,114,105,120,40,41,0,0,0,0,37,115,58,32,34,37,115,34,32,109,97,116,114,105,120,32,110,111,116,32,102,111,117,110,100,33,10,0,0,0,0,0,102,111,118,101,111,110,95,109,97,107,101,95,99,117,114,118,101,40,41,0,0,0,0,0,255,255,255,255,255,255,0,0,255,255,1,0,0,0,255,255,0,0,1,0,1,0,255,255,1,0,0,0,1,0,1,0,70,111,118,101,111,110,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0,0,0,0,0,0,0,0,68,97,114,107,83,104,105,101,108,100,67,111,108,82,97,110,103,101,0,0,0,0,0,0,80,111,115,116,80,111,108,121,77,97,116,114,105,120,0,0,83,97,116,117,114,97,116,105,111,110,76,101,118,101,108,0,75,101,101,112,73,109,97,103,101,65,114,101,97,0,0,0,65,99,116,105,118,101,73,109,97,103,101,65,114,101,97,0,67,104,114,111,109,97,68,81,0,0,0,0,0,0,0,0,73,110,99,108,117,100,101,66,108,111,99,107,115,0,0,0,67,111,108,111,114,68,81,0,67,111,108,111,114,68,81,67,97,109,82,71,66,0,0,0,67,111,108,117,109,110,70,105,108,116,101,114,0,0,0,0,68,97,114,107,68,114,105,102,116,0,0,0,0,0,0,0,68,97,114,107,83,104,105,101,108,100,66,111,116,116,111,109,0,0,0,0,0,0,0,0,68,97,114,107,83,104,105,101,108,100,84,111,112,0,0,0,87,104,105,116,101,66,97,108,97,110,99,101,73,108,108,117,109,105,110,97,110,116,115,0,37,115,58,32,73,110,118,97,108,105,100,32,119,104,105,116,101,32,98,97,108,97,110,99,101,32,34,37,115,34,10,0,87,104,105,116,101,66,97,108,97,110,99,101,67,111,114,114,101,99,116,105,111,110,115,0,37,115,82,71,66,78,101,117,116,114,97,108,0,0,0,0,83,112,97,116,105,97,108,71,97,105,110,0,0,0,0,0,66,97,100,80,105,120,101,108,115,0,0,0,0,0,0,0,102,111,118,101,111,110,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,67,50,0,0,0,0,0,114,0,0,0,0,0,0,0,47,46,98,97,100,112,105,120,101,108,115,0,0,0,0,0,37,100,32,37,100,32,37,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,105,120,101,100,32,100,101,97,100,32,112,105,120,101,108,115,32,97,116,58,0,0,0,32,37,100,44,37,100,0,0,114,98,0,0,0,0,0,0,37,115,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,80,71,77,32,102,105,108,101,33,10,0,0,0,0,37,115,32,104,97,115,32,116,104,101,32,119,114,111,110,103,32,100,105,109,101,110,115,105,111,110,115,33,10,0,0,0,115,117,98,116,114,97,99,116,40,41,0,0,0,0,0,0,232,217,76,63,49,8,140,62,107,43,246,61,178,157,111,61,32,99,238,60,108,9,121,60,111,18,3,60,224,45,144,59,87,97,118,101,108,101,116,32,100,101,110,111,105,115,105,110,103,46,46,46,10,0,0,0,0,0,0,0,0,0,0,0,119,97,118,101,108,101,116,95,100,101,110,111,105,115,101,40,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,115,58,32,67,97,110,110,111,116,32,117,115,101,32,99,97,109,101,114,97,32,119,104,105,116,101,32,98,97,108,97,110,99,101,46,10,0,0,0,83,99,97,108,105,110,103,32,119,105,116,104,32,100,97,114,107,110,101,115,115,32,37,100,44,32,115,97,116,117,114,97,116,105,111,110,32,37,100,44,32,97,110,100,10,109,117,108,116,105,112,108,105,101,114,115,0,0,0,0,0,0,0,0,32,37,102,0,0,0,0,0,67,111,114,114,101,99,116,105,110,103,32,99,104,114,111,109,97,116,105,99,32,97,98,101,114,114,97,116,105,111,110,46,46,46,10,0,0,0,0,0,115,99,97,108,101,95,99,111,108,111,114,115,40,41,0,0,112,114,101,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0,0,0,0,0,0,0,66,105,108,105,110,101,97,114,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,254,0,255,0,1,254,254,0,0,1,1,254,255,255,0,0,1,254,255,0,255,0,2,254,255,0,0,0,3,254,255,0,1,1,1,254,0,0,255,0,6,254,0,0,0,1,2,254,0,0,1,0,3,254,1,255,0,0,4,254,1,0,255,1,4,254,1,0,0,0,6,254,1,0,1,0,2,254,2,0,0,1,4,254,2,0,1,0,4,255,254,255,0,0,128,255,254,0,255,0,1,255,254,1,255,0,1,255,254,1,0,1,1,255,255,255,1,0,136,255,255,1,254,0,64,255,255,1,255,0,34,255,255,1,0,0,51,255,255,1,1,1,17,255,0,255,2,0,8,255,0,0,255,0,68,255,0,0,1,0,17,255,0,1,254,1,64,255,0,1,255,0,102,255,0,1,0,1,34,255,0,1,1,0,51,255,0,1,2,1,16,255,1,1,255,1,68,255,1,1,0,0,102,255,1,1,1,0,34,255,1,1,2,0,16,255,2,0,1,0,4,255,2,1,0,1,4,255,2,1,1,0,4,0,254,0,0,1,128,0,255,0,1,1,136,0,255,1,254,0,64,0,255,1,0,0,17,0,255,2,254,0,64,0,255,2,255,0,32,0,255,2,0,0,48,0,255,2,1,1,16,0,0,0,2,1,8,0,0,2,254,1,64,0,0,2,255,0,96,0,0,2,0,1,32,0,0,2,1,0,48,0,0,2,2,1,16,0,1,1,0,0,68,0,1,1,2,0,16,0,1,2,255,1,64,0,1,2,0,0,96,0,1,2,1,0,32,0,1,2,2,0,16,1,254,1,0,0,128,1,255,1,1,0,136,1,0,1,2,0,8,1,0,2,255,0,64,1,0,2,1,0,16,255,255,255,0,255,1,0,1,1,1,1,0,1,255,0,255,86,78,71,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0,0,0,118,110,103,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0,0,0,0,0,0,0,80,80,71,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+189856);
/* memory initializer */ allocate([1,0,0,0,0,0,1,0,255,255,0,0,0,0,255,255,1,0,0,0,0,0,1,0,0,0,1,0,0,0,255,255,2,0,0,0,255,255,0,0,1,0,1,0,1,0,255,255,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,1,0,0,0,254,255,0,0,1,0,1,0,254,255,254,255,1,0,255,255,255,255,1,0,1,0,0,2,1,2,255,1,37,100,45,112,97,115,115,32,88,45,84,114,97,110,115,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0,0,0,0,0,0,0,120,116,114,97,110,115,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0,0,0,0,255,255,255,255,1,0,0,0,0,254,255,255,0,2,0,0,65,72,68,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0,0,0,97,104,100,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0,0,0,0,0,0,0,1,2,4,5,7,8,0,1,3,4,6,7,1,2,4,5,7,8,0,3,5,8,4,7,3,6,1,4,2,5,4,7,4,2,6,4,4,2,0,0,77,101,100,105,97,110,32,102,105,108,116,101,114,32,112,97,115,115,32,37,100,46,46,46,10,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,215,179,221,63,215,179,221,191,0,0,0,0,0,0,0,0,0,0,128,191,0,0,128,191,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,191,0,0,128,63,0,0,128,191,0,0,128,63,0,0,128,63,0,0,128,191,0,0,128,191,0,0,128,63,0,0,128,191,0,0,128,191,0,0,128,63,0,0,128,63,215,179,93,63,0,0,0,191,0,0,0,0,0,0,128,63,215,179,93,191,0,0,0,191,0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,191,0,0,128,63,0,0,128,191,0,0,128,63,0,0,128,63,0,0,128,191,0,0,128,191,0,0,128,63,0,0,128,191,0,0,128,191,0,0,128,63,66,108,101,110,100,105,110,103,32,104,105,103,104,108,105,103,104,116,115,46,46,46,10,0,255,255,255,0,255,1,0,1,1,1,1,0,1,255,0,255,82,101,98,117,105,108,100,105,110,103,32,104,105,103,104,108,105,103,104,116,115,46,46,46,10,0,0,0,0,0,0,0,114,101,99,111,118,101,114,95,104,105,103,104,108,105,103,104,116,115,40,41,0,0,0,0,49,49,49,50,52,56,49,49,50,52,56,52,56,52,0,0,0,0,0,0,0,0,0,0,193,191,109,13,89,197,19,157,131,97,107,79,199,127,61,61,83,89,227,199,233,47,149,167,149,31,223,127,43,41,199,13,223,7,239,113,137,61,19,61,59,19,251,13,137,193,101,31,179,13,107,41,227,251,239,163,107,71,127,149,53,167,71,79,199,241,89,149,53,17,41,97,241,61,179,43,13,67,137,193,157,157,137,101,241,233,223,191,61,127,83,151,229,233,149,23,29,61,139,251,199,227,103,167,7,241,113,167,83,181,41,137,229,43,167,23,41,233,79,197,101,109,107,239,13,137,73,47,179,67,83,101,29,73,163,19,137,89,239,107,239,101,29,11,89,19,227,79,157,179,41,67,43,7,29,149,89,89,71,251,229,233,97,71,47,53,127,23,127,239,127,149,149,113,211,163,11,113,163,173,11,59,181,251,163,191,79,131,29,173,233,47,113,101,163,229,7,53,61,13,181,233,229,71,59,157,239,53,163,191,179,223,83,211,151,83,73,113,7,53,97,113,47,67,47,17,223,23,151,251,149,59,127,107,211,37,191,173,199,197,197,181,139,239,47,211,7,107,37,73,149,37,73,109,113,199,167,188,201,173,145,223,133,229,212,120,213,23,70,124,41,76,77,3,233,37,104,17,134,179,189,247,111,97,34,162,38,52,42,190,30,70,20,104,157,68,24,194,64,244,126,95,27,173,11,148,182,103,180,11,225,234,149,156,102,220,231,93,108,5,218,213,223,122,239,246,219,31,130,76,192,104,71,161,189,238,57,80,86,74,221,223,165,248,198,218,202,144,202,1,66,157,139,12,115,67,117,5,148,222,36,179,128,52,229,44,220,155,63,202,51,69,208,219,95,245,82,195,33,218,226,34,114,107,62,208,91,168,135,140,6,93,15,221,9,25,147,208,185,252,139,15,132,96,51,28,155,69,241,240,163,148,58,18,119,51,77,68,120,40,60,158,253,101,87,22,148,107,251,89,208,200,34,54,219,210,99,152,67,161,4,135,134,247,166,38,187,214,89,77,191,106,46,170,43,239,230,120,182,78,224,47,220,124,190,87,25,50,126,42,208,184,186,41,0,60,82,125,168,73,59,45,235,37,73,250,163,170,57,167,197,167,80,17,54,251,198,103,74,245,165,18,101,126,176,223,175,78,179,97,127,47,78,111,107,105,97,0,0,0,75,68,75,0,0,0,0,0,86,69,82,0,0,0,0,0,73,73,73,73,0,0,0,0,77,77,77,77,0,0,0,0,75,67,0,0,0,0,0,0,77,76,89,0,0,0,0,0,78,105,107,111,110,0,0,0,79,76,89,77,80,85,83,0,80,69,78,84,65,88,32,0,83,79,78,89,0,0,0,0,80,97,110,97,115,111,110,105,99,0,0,0,0,0,0,0,70,85,74,73,70,73,76,77,0,0,0,0,0,0,0,0,79,76,89,77,80,0,0,0,76,69,73,67,65,0,0,0,82,105,99,111,104,0,0,0,69,80,83,79,78,0,0,0,65,79,67,0,0,0,0,0,81,86,67,0,0,0,0,0,83,65,77,83,85,78,71,0,78,73,75,79,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,79,78,73,67,65,0,0,0,0,0,0,0,0,0,0,67,97,110,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,54,53,0,0,0,0,0,78,82,87,32,0,0,0,0,48,49,48,48,0,0,0,0,80,69,78,84,65,88,0,0,48,49,50,51,52,55,56,48,48,48,48,48,48,48,53,56,57,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,54,54,54,54,62,54,54,54,59,54,65,59,58,59,53,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,100,58,37,100,58,37,100,32,37,100,58,37,100,58,37,100,0,0,0,0,0,0,0,69,65,83,84,77,65,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,48,2,64,50,56,58,191,111,16,157,190,110,77,106,190,76,169,157,63,6,127,63,187,55,84,12,188,153,243,28,190,36,183,148,63,0,0,0,0,232,246,6,0,240,246,6,0,248,246,6,0,0,247,6,0,8,247,6,0,16,247,6,0,24,247,6,0,40,247,6,0,56,247,6,0,72,247,6,0,232,246,6,0,88,247,6,0,104,247,6,0,120,247,6,0,136,247,6,0,152,247,6,0,168,247,6,0,184,247,6,0,200,247,6,0,208,247,6,0,216,247,6,0,224,247,6,0,240,247,6,0,232,246,6,0,0,248,6,0,232,246,6,0,232,246,6,0,16,248,6,0,32,248,6,0,232,246,6,0,232,246,6,0,232,246,6,0,232,246,6,0,48,248,6,0,64,248,6,0,232,246,6,0,80,248,6,0,232,246,6,0,96,248,6,0,0,0,0,0,0,0,0,0,0,0,0,0,68,67,66,50,0,0,0,0,86,111,108,97,114,101,0,0,67,97,110,116,97,114,101,0,67,77,111,115,116,0,0,0,86,97,108,101,111,32,54,0,86,97,108,101,111,32,49,49,0,0,0,0,0,0,0,0,86,97,108,101,111,32,50,50,0,0,0,0,0,0,0,0,86,97,108,101,111,32,49,49,112,0,0,0,0,0,0,0,86,97,108,101,111,32,49,55,0,0,0,0,0,0,0,0,65,112,116,117,115,32,49,55,0,0,0,0,0,0,0,0,65,112,116,117,115,32,50,50,0,0,0,0,0,0,0,0,65,112,116,117,115,32,55,53,0,0,0,0,0,0,0,0,65,112,116,117,115,32,54,53,0,0,0,0,0,0,0,0,65,112,116,117,115,32,53,52,83,0,0,0,0,0,0,0,65,112,116,117,115,32,54,53,83,0,0,0,0,0,0,0,65,112,116,117,115,32,55,53,83,0,0,0,0,0,0,0,65,70,105,32,53,0,0,0,65,70,105,32,54,0,0,0,65,70,105,32,55,0,0,0,65,70,105,45,73,73,32,55,0,0,0,0,0,0,0,0,65,112,116,117,115,45,73,73,32,55,0,0,0,0,0,0,65,112,116,117,115,45,73,73,32,54,0,0,0,0,0,0,65,112,116,117,115,45,73,73,32,49,48,0,0,0,0,0,65,112,116,117,115,45,73,73,32,53,0,0,0,0,0,0,65,112,116,117,115,45,73,73,32,49,48,82,0,0,0,0,65,112,116,117,115,45,73,73,32,56,0,0,0,0,0,0,65,112,116,117,115,45,73,73,32,49,50,0,0,0,0,0,65,70,105,45,73,73,32,49,50,0,0,0,0,0,0,0,74,80,69,71,95,112,114,101,118,105,101,119,95,100,97,116,97,0,0,0,0,0,0,0,105,99,99,95,99,97,109,101,114,97,95,112,114,111,102,105,108,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,104,111,111,116,79,98,106,95,98,97,99,107,95,116,121,112,101,0,0,0,0,0,0,37,100,0,0,0,0,0,0,105,99,99,95,99,97,109,101,114,97,95,116,111,95,116,111,110,101,95,109,97,116,114,105,120,0,0,0,0,0,0,0,67,97,112,116,80,114,111,102,95,99,111,108,111,114,95,109,97,116,114,105,120,0,0,0,37,102,0,0,0,0,0,0,67,97,112,116,80,114,111,102,95,110,117,109,98,101,114,95,111,102,95,112,108,97,110,101,115,0,0,0,0,0,0,0,67,97,112,116,80,114,111,102,95,114,97,119,95,100,97,116,97,95,114,111,116,97,116,105,111,110,0,0,0,0,0,0,67,97,112,116,80,114,111,102,95,109,111,115,97,105,99,95,112,97,116,116,101,114,110,0,73,109,103,80,114,111,102,95,114,111,116,97,116,105,111,110,95,97,110,103,108,101,0,0,78,101,117,116,79,98,106,95,110,101,117,116,114,97,108,115,0,0,0,0,0,0,0,0,82,111,119,115,95,100,97,116,97,0,0,0,0,0,0,0,148,97,22,73,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,37,250,0,0,40,250,0,0,39,250,0,0,41,250,0,0,255,255,255,255,255,255,255,255,42,250,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,48,49,51,50,52,54,55,0,0,0,0,0,0,0,0,65,100,111,98,101,0,0,0,100,99,114,97,119,0,0,0,85,70,82,97,119,0,0,0,66,105,98,98,108,101,0,0,78,105,107,111,110,32,83,99,97,110,0,0,0,0,0,0,68,105,103,105,116,97,108,32,80,104,111,116,111,32,80,114,111,102,101,115,115,105,111,110,97,108,0,0,0,0,0,0,68,83,76,82,45,65,49,48,48,0,0,0,0,0,0,0,83,97,114,110,111,102,102,0,3,4,5,0,0,0,0,0,5,3,4,1,0,0,0,0,77,65,84,82,73,88,0,0,76,101,97,102,0,0,0,0,73,109,97,99,111,110,0,0,73,120,112,114,101,115,115,32,37,100,45,77,112,0,0,0,78,101,117,116,114,97,108,32,0,0,0,0,0,0,0,0,37,102,32,37,102,32,37,102,0,0,0,0,0,0,0,0,72,97,115,115,101,108,98,108,97,100,0,0,0,0,0,0,68,78,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,111,100,97,107,0,0,0,68,69,66,85,71,32,82,65,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,105,77,65,71,69,32,65,50,48,48,0,0,0,0,0,112,97,114,115,101,95,101,120,116,101,114,110,97,108,95,106,112,101,103,40,41,0,0,0,46,106,112,103,0,0,0,0,46,74,80,71,0,0,0,0,82,101,97,100,105,110,103,32,109,101,116,97,100,97,116,97,32,102,114,111,109,32,37,115,32,46,46,46,10,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,109,101,116,97,100,97,116,97,32,102,114,111,109,32,37,115,10,0,0,0,0,0,0,0,0,16,4,243,69,0,0,0,0,80,114,111,49,0,0,0,0,48,49,50,51,52,54,48,48,48,48,48,48,48,48,48,48,48,48,0,0,0,0,0,0,48,49,51,52,53,58,48,48,48,48,48,48,48,48,54,48,48,56,0,0,0,0,0,0,48,50,51,52,53,55,48,48,48,48,48,48,48,48,54,48,48,48,0,0,0,0,0,0,48,49,51,52,53,54,55,48,50,56,0,0,0,0,0,0,68,65,84,0,0,0,0,0,84,73,77,0,0,0,0,0,37,100,58,37,100,58,37,100,0,0,0,0,0,0,0,0,72,68,82,0,0,0,0,0,88,32,32,0,0,0,0,0,89,32,32,0,0,0,0,0,84,88,32,0,0,0,0,0,84,89,32,0,0,0,0,0,69,79,72,68,0,0,0,0,82,111,108,108,101,105,0,0,100,53,51,48,102,108,101,120,0,0,0,0,0,0,0,0,77,69,84,65,0,0,0,0,84,72,85,77,66,0,0,0,82,65,87,48,0,0,0,0,48,54,53,51,0,0,0,0,32,99,97,109,101,114,97,0,80,104,97,115,101,32,79,110,101,0,0,0,0,0,0,0,76,105,103,104,116,80,104,97,115,101,0,0,0,0,0,0,72,32,49,48,0,0,0,0,72,32,50,48,0,0,0,0,72,32,50,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,97,110,0,70,101,98,0,77,97,114,0,65,112,114,0,77,97,121,0,74,117,110,0,74,117,108,0,65,117,103,0,83,101,112,0,79,99,116,0,78,111,118,0,68,101,99,0,82,73,70,70,0,0,0,0,76,73,83,84,0,0,0,0,110,99,116,103,0,0,0,0,73,68,73,84,0,0,0,0,37,42,115,32,37,115,32,37,100,32,37,100,58,37,100,58,37,100,32,37,100,0,0,0,109,111,111,118,0,0,0,0,117,100,116,97,0,0,0,0,67,78,84,72,0,0,0,0,67,78,68,65,0,0,0,0,83,77,97,76,0,0,0,0,118,37,100,32,37,100,120,37,100,0,0,0,0,0,0,0,67,73,78,69,0,0,0,0,37,115,58,32,84,97,105,108,32,105,115,32,109,105,115,115,105,110,103,44,32,112,97,114,115,105,110,103,32,102,114,111,109,32,104,101,97,100,46,46,46,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,83,79,0,0,0,0,0,67,65,77,77,65,78,85,70,0,0,0,0,0,0,0,0,67,65,77,77,79,68,69,76,0,0,0,0,0,0,0,0,87,66,95,68,69,83,67,0,84,73,77,69,0,0,0,0,69,88,80,84,73,77,69,0,65,80,69,82,84,85,82,69,0,0,0,0,0,0,0,0,70,76,69,78,71,84,72,0,48,60,7,0,0,0,0,0,174,44,78,241,165,251,151,246,186,38,193,9,53,251,247,8,180,20,0,0,0,0,0,0,72,60,7,0,0,0,0,0,144,83,235,233,231,242,102,9,74,31,97,254,254,27,147,5,30,8,0,0,0,0,0,0,88,60,7,0,0,0,0,0,222,95,148,213,183,242,46,250,106,44,215,254,42,11,163,253,153,12,0,0,0,0,0,0,104,60,7,0,0,0,0,0,2,80,252,227,203,243,247,251,170,40,227,254,238,9,226,0,64,12,0,0,0,0,0,0,120,60,7,0,0,0,0,0,77,38,127,245,224,250,85,233,8,51,252,11,122,246,3,12,71,34,0,0,0,0,0,0,136,60,7,0,0,0,160,15,44,24,195,250,134,252,0,228,153,56,121,11,176,245,156,12,35,33,0,0,0,0,0,0,152,60,7,0,0,0,150,60,106,24,57,253,216,252,223,235,250,49,76,10,31,251,150,8,234,21,0,0,0,0,0,0,168,60,7,0,0,0,128,60,66,26,133,253,61,252,65,239,172,48,236,7,116,252,114,8,36,22,0,0,0,0,0,0,192,60,7,0,0,0,240,60,108,18,91,2,194,252,138,225,114,60,176,9,40,250,145,7,251,25,0,0,0,0,0,0,216,60,7,0,0,0,108,14,203,24,33,254,52,252,151,223,82,62,176,9,80,248,83,8,225,29,0,0,0,0,0,0,232,60,7,0,0,0,130,60,122,27,220,252,10,252,188,238,20,49,10,8,173,252,202,7,126,22,0,0,0,0,0,0,248,60,7,0,0,0,16,53,100,28,198,251,55,252,166,239,63,46,103,10,199,252,237,7,207,22,0,0,0,0,0,0,16,61,7,0,0,0,16,53,188,26,28,252,168,252,220,240,241,45,92,9,175,253,236,6,54,24,0,0,0,0,0,0,32,61,7,0,0,0,160,15,5,32,48,248,162,251,198,229,255,55,32,10,24,246,106,12,74,32,0,0,0,0,0,0,48,61,7,0,0,0,0,0,75,55,55,236,154,250,106,230,41,57,247,7,169,249,32,7,161,25,0,0,0,0,0,0,64,61,7,0,0,0,255,15,199,25,231,253,133,252,121,224,167,61,120,9,65,248,186,8,38,29,0,0,0,0,0,0,80,61,7,0,0,0,0,0,113,24,209,254,24,252,56,225,5,61,92,9,78,249,112,7,134,27,0,0,0,0,0,0,96,61,7,0,0,0,96,63,183,23,21,253,168,252,27,226,5,60,137,9,23,248,249,9,147,28,0,0,0,0,0,0,112,61,7,0,0,0,147,61,56,19,104,2,175,253,163,230,140,54,224,10,18,249,106,12,93,27,0,0,0,0,0,0,128,61,7,0,0,0,247,47,63,26,30,252,99,252,200,238,138,48,163,8,137,252,81,8,163,23,0,0,0,0,0,0,144,61,7,0,0,0,199,59,122,27,220,252,10,252,188,238,20,49,10,8,173,252,202,7,126,22,0,0,0,0,0,0,160,61,7,0,0,0,15,53,202,25,183,252,85,252,136,238,170,48,199,8,49,252,247,7,4,24,0,0,0,0,0,0,176,61,7,0,0,0,160,15,5,32,48,248,162,251,198,229,255,55,32,10,24,246,106,12,74,32,0,0,0,0,0,0,192,61,7,0,0,0,255,15,130,23,151,253,59,252,59,222,9,62,159,11,6,250,183,6,218,29,0,0,0,0,0,0,208,61,7,0,0,0,142,14,142,27,35,250,34,252,36,224,184,60,252,10,2,251,134,5,116,30,0,0,0,0,0,0,224,61,7,0,0,0,13,57,152,22,250,254,203,252,141,226,216,58,112,10,66,248,121,10,3,29,0,0,0,0,0,0,240,61,7,0,0,0,121,52,155,18,200,2,122,253,91,229,63,56,80,10,127,248,204,12,161,25,0,0,0,0,0,0,0,62,7,0,0,0,215,61,29,27,116,251,167,252,15,241,77,45,230,9,96,254,4,6,151,23,0,0,0,0,0,0,16,62,7,0,0,0,16,53,61,25,117,252,142,252,52,239,152,47,74,9,205,252,152,7,43,23,0,0,0,0,0,0,32,62,7,0,0,0,77,53,202,25,183,252,85,252,136,238,170,48,199,8,49,252,247,7,4,24,0,0,0,0,0,0,48,62,7,0,0,0,0,60,202,25,183,252,85,252,136,238,170,48,199,8,49,252,247,7,4,24,0,0,0,0,0,0,64,62,7,0,0,0,142,54,218,24,201,252,177,252,182,238,77,47,56,10,25,253,65,7,3,22,0,0,0,0,0,0,80,62,7,0,0,0,15,53,218,24,201,252,177,252,182,238,77,47,56,10,25,253,65,7,3,22,0,0,0,0,0,0,96,62,7,0,0,0,67,14,115,26,141,251,47,252,118,225,19,59,112,11,36,251,157,5,109,29,0,0,0,0,0,0,112,62,7,0,0,0,16,53,44,25,120,252,131,252,45,238,20,48,231,9,121,252,224,7,72,26,0,0,0,0,0,0,128,62,7,0,0,0,194,55,61,25,117,252,142,252,52,239,152,47,74,9,205,252,152,7,43,23,0,0,0,0,0,0,144,62,7,0,0,0,0,0,218,24,201,252,177,252,182,238,77,47,56,10,25,253,65,7,3,22,0,0,0,0,0,0,160,62,7,0,0,0,0,0,202,25,183,252,85,252,136,238,170,48,199,8,49,252,247,7,4,24,0,0,0,0,0,0,176,62,7,0,0,0,176,59,227,22,45,255,94,252,193,223,145,62,49,9,60,249,95,7,24,29,0,0,0,0,0,0,200,62,7,0,0,0,128,14,117,25,166,253,157,252,12,224,54,62,74,9,174,249,235,6,209,29,0,0,0,0,0,0,224,62,7,0,0,0,176,59,126,23,36,255,229,252,243,239,238,46,57,9,207,253,32,7,155,22,0,0,0,0,0,0,248,62,7,0,0,0,176,59,147,24,228,253,48,252,98,223,17,63,7,9,78,249,66,7,158,28,0,0,0,0,0,0,16,63,7,0,0,0,128,14,96,24,46,254,202,252,12,224,209,61,196,9,247,248,146,7,106,31,0,0,0,0,0,0,40,63,7,0,0,0,128,14,120,24,186,253,44,253,136,223,76,62,200,9,48,249,127,7,216,33,0,0,0,0,0,0,64,63,7,0,0,0,32,14,22,17,47,14,49,249,160,226,108,59,168,9,180,244,48,14,225,31,0,0,0,0,0,0,80,63,7,0,0,0,78,60,191,26,154,253,10,252,195,237,193,49,91,8,83,251,184,9,190,26,0,0,0,0,0,0,96,63,7,0,0,0,78,60,191,26,154,253,10,252,195,237,193,49,91,8,83,251,184,9,190,26,0,0,0,0,0,0,112,63,7,0,0,0,32,14,150,26,77,255,4,252,95,224,31,64,151,6,61,243,140,16,10,30,0,0,0,0,0,0,128,63,7,0,85,3,0,0,187,69,148,214,154,3,255,226,22,65,251,2,180,241,52,14,6,87,0,0,0,0,0,0,144,63,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,63,7,0,0,0,0,0,76,235,118,38,240,6,108,13,172,2,99,15,92,234,151,38,56,24,132,250,167,43,217,0,192,63,7,0,0,0,0,0,63,237,3,37,160,7,110,11,75,6,254,15,117,235,180,39,59,23,238,249,131,42,35,2,216,63,7,0,0,0,0,0,85,43,190,240,252,251,73,236,204,48,63,11,21,252,214,6,185,21,0,0,0,0,0,0,240,63,7,0,0,0,0,0,145,47,47,237,211,251,180,249,136,38,1,8,158,255,82,3,119,17,0,0,0,0,0,0,8,64,7,0,0,0,0,0,188,51,131,234,32,251,28,250,130,38,143,7,242,254,59,4,14,17,0,0,0,0,0,0,32,64,7,0,0,0,0,0,50,29,3,247,201,253,40,240,192,44,159,11,34,255,204,2,85,16,0,0,0,0,0,0,56,64,7,0,0,0,0,0,84,31,129,245,86,253,136,241,103,46,4,8,59,252,129,7,180,21,0,0,0,0,0,0,80,64,7,0,0,0,0,0,210,28,25,251,237,251,8,240,219,47,0,8,148,252,154,7,173,22,0,0,0,0,0,0,104,64,7,0,0,0,0,0,86,237,251,36,124,8,135,18,139,251,248,16,230,235,180,38,189,23,226,249,43,43,45,2,128,64,7,0,0,0,0,0,127,35,123,245,231,251,197,229,46,56,233,9,13,247,3,11,110,30,0,0,0,0,0,0,152,64,7,0,0,0,0,0,252,35,35,245,207,251,83,230,109,55,45,10,4,247,28,11,240,29,0,0,0,0,0,0,176,64,7,0,0,0,0,0,29,38,200,244,91,252,172,232,37,54,253,8,170,249,24,9,44,28,0,0,0,0,0,0,200,64,7,0,0,0,0,0,149,38,65,241,153,252,67,226,215,57,0,12,88,250,25,5,61,29,0,0,0,0,0,0,224,64,7,0,0,0,0,0,130,37,17,241,87,252,88,244,231,44,139,6,105,254,135,5,185,19,0,0,0,0,0,0,248,64,7,0,0,0,0,0,200,28,163,247,170,253,11,234,198,51,65,10,118,250,160,6,111,22,0,0,0,0,0,0,16,65,7,0,0,0,0,0,78,39,62,242,25,252,37,226,13,59,170,10,3,253,49,3,155,28,0,0,0,0,0,0,40,65,7,0,34,0,0,0,197,239,90,38,249,5,99,15,231,255,170,17,111,234,142,38,210,25,66,247,121,42,62,5,64,65,7,0,0,0,0,0,157,236,168,38,187,8,34,18,37,252,198,16,214,235,27,39,227,22,22,249,222,43,65,2,88,65,7,0,0,0,0,0,70,41,188,241,151,251,104,230,70,57,214,7,107,247,21,10,246,29,0,0,0,0,0,0,112,65,7,0,0,0,0,0,62,33,73,246,84,252,43,229,151,55,84,11,242,246,13,11,53,35,0,0,0,0,0,0,136,65,7,0,0,0,0,0,227,31,227,246,69,252,230,229,94,55,191,10,227,247,37,10,105,31,0,0,0,0,0,0,160,65,7,0,0,0,0,0,178,34,245,245,161,252,52,231,154,55,240,8,20,250,124,8,169,25,0,0,0,0,0,0,184,65,7,0,0,0,0,0,91,34,78,246,227,252,132,225,43,60,13,10,114,250,204,7,170,27,0,0,0,0,0,0,208,65,7,0,0,0,0,0,248,38,30,241,192,252,53,228,127,56,90,11,123,252,221,3,209,30,0,0,0,0,0,0,232,65,7,0,0,0,0,0,86,48,104,236,231,251,115,249,174,38,30,8,173,255,84,3,75,18,0,0,0,0,0,0,0,66,7,0,0,0,0,0,128,52,248,232,1,251,44,251,126,37,139,7,76,255,233,3,43,18,0,0,0,0,0,0,24,66,7,0,0,0,0,0,32,31,251,245,132,253,199,244,201,41,209,9,180,0,155,2,115,16,0,0,0,0,0,0,48,66,7,0,0,0,0,0,103,31,173,245,114,253,57,241,222,43,114,11,50,255,178,2,98,16,0,0,0,0,0,0,72,66,7,0,0,0,0,0,49,27,107,249,73,253,239,237,145,50,44,7,166,251,104,8,142,21,0,0,0,0,0,0,96,66,7,0,0,0,0,0,178,25,253,254,10,254,170,232,230,50,237,12,204,254,34,4,106,19,0,0,0,0,0,0,120,66,7,0,0,0,0,0,144,48,111,237,33,251,194,247,195,41,93,6,100,254,87,6,62,19,0,0,0,0,0,0,144,66,7,0,0,0,0,0,105,51,181,234,192,250,59,248,158,41,251,5,209,255,247,4,91,19,0,0,0,0,0,0,168,66,7,0,0,0,0,0,74,42,186,241,1,252,113,243,46,44,114,7,0,0,231,3,96,19,0,0,0,0,0,0,192,66,7,0,0,0,0,0,225,48,201,238,38,251,136,245,36,40,101,9,146,252,167,8,126,18,0,0,0,0,0,0,216,66,7,0,0,0,0,0,231,60,254,230,200,249,11,235,142,51,120,8,236,250,32,7,211,19,0,0,0,0,0,0,240,66,7,0,0,0,0,0,161,59,207,231,234,249,227,239,84,47,218,7,136,252,103,6,100,20,0,0,0,0,0,0,8,67,7,0,0,0,0,0,121,55,68,235,35,249,57,232,136,56,81,6,113,247,33,12,228,20,0,0,0,0,0,0,32,67,7,0,0,0,0,0,68,51,47,235,146,250,238,241,138,45,152,7,180,249,47,11,21,19,0,0,0,0,0,0,56,67,7,0,0,0,0,0,211,36,36,244,65,252,235,245,175,41,119,7,241,251,190,7,78,17,0,0,0,0,0,0,80,67,7,0,0,0,0,0,237,56,150,234,246,249,14,251,71,38,188,5,240,251,120,7,226,14,0,0,0,0,0,0,104,67,7,0,0,0,0,0,238,54,177,235,90,250,152,237,182,48,195,8,250,250,236,7,228,18,0,0,0,0,0,0,128,67,7,0,0,0,0,0,54,55,56,234,9,250,57,248,223,41,249,4,122,251,137,7,253,13,0,0,0,0,0,0,160,67,7,0,0,0,0,0,74,54,44,236,89,250,131,250,125,39,17,5,12,255,68,7,103,14,0,0,0,0,0,0,184,67,7,0,0,0,0,0,114,45,172,240,152,251,152,236,154,50,223,7,204,249,88,10,38,28,0,0,0,0,0,0,200,67,7,0,0,0,0,0,67,42,223,240,181,251,217,236,162,53,151,4,37,249,167,14,24,18,0,0,0,0,0,0,216,67,7,0,128,0,255,15,62,38,246,242,165,253,239,246,238,39,51,8,168,254,249,4,191,18,0,0,0,0,0,0,232,67,7,0,0,0,0,0,62,13,224,1,12,254,224,252,26,14,84,1,218,253,32,9,168,4,0,0,0,0,0,0,248,67,7,0,0,0,0,0,62,13,224,1,12,254,224,252,26,14,84,1,218,253,32,9,168,4,0,0,0,0,0,0,216,255,6,0,0,0,0,0,215,78,57,239,89,254,156,240,226,59,145,15,232,254,6,19,72,38,0,0,0,0,0,0,8,68,7,0,0,0,30,15,97,30,5,5,227,251,192,219,159,64,100,11,163,241,47,22,148,27,0,0,0,0,0,0,32,68,7,0,0,0,0,0,171,26,170,248,36,253,19,223,140,62,4,10,64,253,80,2,233,27,0,0,0,0,0,0,48,68,7,0,0,0,0,0,36,43,208,240,160,251,176,227,64,59,160,8,5,250,229,8,133,31,0,0,0,0,0,0,64,68,7,0,0,0,0,0,223,35,34,246,202,251,219,226,223,58,14,10,26,248,136,9,191,33,0,0,0,0,0,0,80,68,7,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,96,68,7,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,112,68,7,0,0,0,233,15,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,128,68,7,0,0,0,0,0,20,39,109,243,79,251,132,228,199,58,59,8,185,248,5,10,56,30,0,0,0,0,0,0,144,68,7,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,160,68,7,0,2,2,0,0,1,45,253,238,215,251,132,230,199,53,242,11,70,250,192,7,157,23,0,0,0,0,0,0,176,68,7,0,0,0,0,0,9,48,238,236,78,251,198,247,195,41,87,6,168,255,32,5,182,18,0,0,0,0,0,0,192,68,7,0,0,0,0,0,20,39,109,243,79,251,132,228,199,58,59,8,185,248,5,10,56,30,0,0,0,0,0,0,208,68,7,0,0,2,255,63,137,44,110,238,224,250,32,236,207,49,53,10,186,252,32,6,53,23,0,0,0,0,0,0,224,68,7,0,128,0,0,0,204,48,174,237,134,250,135,228,63,60,111,6,29,250,63,8,17,30,0,0,0,0,0,0,240,68,7,0,0,0,0,0,31,46,252,237,242,250,33,221,72,66,196,7,184,247,181,10,70,31,0,0,0,0,0,0,0,69,7,0,0,0,0,0,12,48,10,236,232,250,99,220,247,66,206,7,101,248,144,9,164,31,0,0,0,0,0,0,16,69,7,0,0,0,0,0,50,34,84,245,5,252,220,227,221,58,228,8,90,249,30,9,70,27,0,0,0,0,0,0,32,69,7,0,0,0,0,0,164,46,177,238,25,251,146,229,92,56,238,9,31,252,141,4,253,28,0,0,0,0,0,0,48,69,7,0,0,0,0,0,164,46,177,238,25,251,146,229,92,56,238,9,31,252,141,4,253,28,0,0,0,0,0,0,64,69,7,0,0,0,0,0,164,37,12,245,36,252,238,226,192,58,29,10,245,248,7,9,173,33,0,0,0,0,0,0,80,69,7,0,0,0,0,0,164,37,12,245,36,252,238,226,192,58,29,10,245,248,7,9,173,33,0,0,0,0,0,0,96,69,7,0,0,0,0,0,84,49,233,236,135,250,51,229,148,58,170,7,106,247,222,10,179,27,0,0,0,0,0,0,112,69,7,0,0,0,0,0,206,39,78,242,224,250,15,228,203,58,190,8,45,248,95,9,81,29,0,0,0,0,0,0,128,69,7,0,0,0,0,0,251,40,161,242,135,251,39,227,179,58,234,9,239,248,227,8,244,33,0,0,0,0,0,0,144,69,7,0,0,0,0,0,251,40,161,242,135,251,39,227,179,58,234,9,239,248,227,8,244,33,0,0,0,0,0,0,160,69,7,0,0,0,0,0,55,48,93,238,251,250,3,228,51,58,131,9,153,248,192,9,96,34,0,0,0,0,0,0,176,69,7,0,0,0,0,0,55,48,93,238,251,250,3,228,51,58,131,9,153,248,192,9,96,34,0,0,0,0,0,0,192,69,7,0,0,0,0,0,185,45,90,239,173,251,22,247,39,42,173,6,213,253,177,6,81,19,0,0,0,0,0,0,208,69,7,0,0,0,0,0,213,83,201,213,95,250,228,246,103,41,207,7,33,1,107,3,23,30,0,0,0,0,0,0,224,69,7,0,0,0,0,0,12,48,10,236,232,250,99,220,247,66,206,7,101,248,144,9,164,31,0,0,0,0,0,0,240,69,7,0,0,0,104,15,152,48,142,240,97,251,157,251,202,37,172,6,173,255,78,6,246,15,0,0,0,0,0,0,8,70,7,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,24,70,7,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,40,70,7,0,0,0,0,0,53,47,137,237,71,252,71,243,225,44,210,7,1,254,254,7,240,17,0,0,0,0,0,0,64,70,7,0,0,0,0,0,53,47,137,237,71,252,71,243,225,44,210,7,1,254,254,7,240,17,0,0,0,0,0,0,88,70,7,0,0,0,0,0,96,41,90,239,16,252,70,242,91,44,161,9,154,252,233,7,242,24,0,0,0,0,0,0,104,70,7,0,0,0,0,0,96,41,90,239,16,252,70,242,91,44,161,9,154,252,233,7,242,24,0,0,0,0,0,0,120,70,7,0,0,0,0,0,129,47,151,238,211,251,86,236,74,50,96,9,229,252,188,6,248,26,0,0,0,0,0,0,136,70,7,0,0,0,0,0,197,52,201,231,26,251,178,238,189,49,73,7,181,254,161,5,158,19,0,0,0,0,0,0,152,70,7,0,0,0,0,0,248,45,149,236,147,251,216,236,127,50,135,8,32,254,187,6,253,17,0,0,0,0,0,0,168,70,7,0,0,0,0,0,40,48,120,235,136,251,139,238,127,50,139,6,169,255,11,5,255,16,0,0,0,0,0,0,184,70,7,0,0,0,0,0,173,40,100,240,31,252,119,241,120,45,57,9,35,253,4,6,123,23,0,0,0,0,0,0,200,70,7,0,0,0,0,0,78,43,53,238,185,252,72,242,46,44,213,9,209,252,61,5,52,23,0,0,0,0,0,0,216,70,7,0,0,0,0,0,11,42,48,238,107,252,238,242,47,44,18,9,37,254,111,4,211,22,0,0,0,0,0,0,232,70,7,0,0,0,0,0,173,40,100,240,31,252,119,241,120,45,57,9,35,253,4,6,123,23,0,0,0,0,0,0,248,70,7,0,0,0,0,0,10,33,109,246,169,252,11,238,159,48,103,9,61,250,178,9,126,25,0,0,0,0,0,0,8,71,7,0,0,0,0,0,173,40,100,240,31,252,119,241,120,45,57,9,35,253,4,6,123,23,0,0,0,0,0,0,24,71,7,0,0,0,0,0,197,52,201,231,26,251,178,238,189,49,73,7,181,254,161,5,158,19,0,0,0,0,0,0,40,71,7,0,0,0,0,0,10,33,109,246,169,252,11,238,159,48,103,9,61,250,178,9,126,25,0,0,0,0,0,0,56,71,7,0,0,0,0,0,197,52,201,231,26,251,178,238,189,49,73,7,181,254,161,5,158,19,0,0,0,0,0,0,72,71,7,0,0,0,0,0,36,36,112,245,216,251,251,232,185,55,181,6,179,251,37,9,253,16,0,0,0,0,0,0,88,71,7,0,0,0,0,0,113,27,121,250,64,253,188,235,197,53,144,5,32,251,182,10,150,23,0,0,0,0,0,0,104,71,7,0,0,0,0,0,67,54,89,232,221,252,47,254,191,38,130,2,73,8,82,0,11,5,0,0,0,0,0,0,120,71,7,0,8,0,0,0,115,68,37,237,50,246,244,2,98,33,119,255,225,23,113,6,202,8,0,0,0,0,0,0,136,71,7,0,8,0,0,0,140,80,108,226,15,245,153,255,89,39,116,254,223,13,23,255,172,8,0,0,0,0,0,0,152,71,7,0,0,0,0,0,116,42,196,248,124,253,255,249,75,43,228,1,39,9,116,2,168,8,0,0,0,0,0,0,168,71,7,0,0,0,0,0,96,41,98,247,57,252,104,248,165,45,230,0,158,8,158,2,249,4,0,0,0,0,0,0,184,71,7,0,0,0,0,0,96,41,98,247,57,252,104,248,165,45,230,0,158,8,158,2,249,4,0,0,0,0,0,0,200,71,7,0,0,0,0,0,170,38,116,245,84,252,82,246,187,47,206,0,193,7,122,2,7,4,0,0,0,0,0,0,216,71,7,0,178,0,0,0,222,95,148,213,183,242,46,250,106,44,215,254,42,11,163,253,153,12,0,0,0,0,0,0,232,71,7,0,177,0,0,0,2,80,252,227,203,243,247,251,170,40,227,254,238,9,226,0,64,12,0,0,0,0,0,0,248,71,7,0,177,0,0,0,65,92,65,216,179,243,250,247,229,45,240,254,26,10,23,254,125,13,0,0,0,0,0,0,8,72,7,0,176,0,0,0,39,51,169,231,154,0,189,47,235,255,167,247,127,3,250,17,210,8,0,0,0,0,0,0,24,72,7,0,173,0,0,0,68,71,49,231,77,245,233,252,185,43,247,253,127,14,127,255,242,10,0,0,0,0,0,0,40,72,7,0,0,0,0,0,255,45,4,233,182,3,84,37,54,7,250,250,5,252,77,24,168,10,0,0,0,0,0,0,56,72,7,0,0,0,0,0,239,64,91,231,125,250,8,239,99,54,67,1,237,8,18,1,110,11,0,0,0,0,0,0,72,72,7,0,0,0,0,0,118,21,89,9,24,255,229,230,26,54,30,11,172,248,157,15,69,21,0,0,0,0,0,0,96,72,7], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+453936);
/* memory initializer */ allocate([118,21,89,9,24,255,229,230,26,54,30,11,172,248,157,15,69,21,0,0,0,0,0,0,120,72,7,0,0,0,0,0,111,30,56,12,248,252,116,222,74,64,247,7,105,246,166,15,54,24,0,0,0,0,0,0,144,72,7,0,0,0,0,0,30,64,84,232,66,250,29,242,237,50,217,1,241,9,122,0,84,19,0,0,0,0,0,0,168,72,7,0,0,0,0,0,187,82,132,223,154,244,109,252,11,43,91,255,149,13,76,255,114,16,0,0,0,0,0,0,184,72,7,0,0,0,0,0,186,37,14,243,201,252,213,235,151,49,208,10,194,250,51,7,156,23,0,0,0,0,0,0,200,72,7,0,0,0,124,15,15,41,4,241,178,251,222,228,251,56,254,9,55,250,0,7,102,24,0,0,0,0,0,0,216,72,7,0,0,0,255,15,5,50,202,237,160,250,200,226,163,59,56,9,166,249,146,8,224,30,0,0,0,0,0,0,232,72,7,0,0,0,0,0,49,44,25,242,179,251,203,240,115,46,209,8,66,251,94,9,44,19,0,0,0,0,0,0,0,73,7,0,0,0,0,0,185,49,147,237,92,251,169,250,227,35,22,10,18,1,92,3,59,17,0,0,0,0,0,0,24,73,7,0,0,0,237,15,229,45,48,240,227,250,181,248,76,41,209,5,118,255,169,5,170,17,0,0,0,0,0,0,48,73,7,0,0,0,241,14,1,44,66,239,32,252,170,237,55,48,87,10,190,251,243,5,71,21,0,0,0,0,0,0,72,73,7,0,0,0,0,0,112,15,141,8,193,1,211,229,249,56,227,8,72,238,181,28,136,25,0,0,0,0,0,0,88,73,7,0,0,0,0,0,112,15,141,8,193,1,211,229,249,56,227,8,72,238,181,28,136,25,0,0,0,0,0,0,104,73,7,0,0,0,0,0,44,32,210,6,222,250,197,223,81,62,124,9,167,241,154,22,139,22,0,0,0,0,0,0,120,73,7,0,0,0,0,0,234,30,134,5,90,251,183,221,198,64,232,8,5,245,253,17,186,21,0,0,0,0,0,0,136,73,7,0,0,0,0,0,234,30,134,5,90,251,183,221,198,64,232,8,5,245,253,17,186,21,0,0,0,0,0,0,200,252,6,0,0,0,0,0,44,32,210,6,222,250,197,223,81,62,124,9,167,241,154,22,139,22,0,0,0,0,0,0,152,73,7,0,0,0,0,0,221,29,19,10,173,250,15,222,77,65,223,7,128,241,53,23,73,23,0,0,0,0,0,0,168,73,7,0,110,0,0,0,55,65,79,241,153,247,155,0,210,37,163,0,105,13,183,3,40,19,0,0,0,0,0,0,184,73,7,0,0,0,125,15,23,35,130,244,61,252,100,230,140,56,189,8,134,246,71,11,78,31,0,0,0,0,0,0,208,73,7,0,0,0,125,15,104,44,202,240,38,251,135,230,22,56,35,9,85,246,240,11,117,28,0,0,0,0,0,0,232,73,7,0,0,0,125,15,184,35,39,245,26,252,236,229,220,56,233,8,90,246,203,11,64,30,0,0,0,0,0,0,0,74,7,0,0,0,139,15,58,36,13,246,113,251,228,223,195,63,151,7,31,247,160,10,148,32,0,0,0,0,0,0,24,74,7,0,0,0,0,0,112,33,73,246,38,252,80,224,175,60,211,10,71,251,44,5,63,30,0,0,0,0,0,0,48,74,7,0,0,0,143,15,137,35,90,245,227,251,119,224,146,60,202,10,58,252,213,3,83,30,0,0,0,0,0,0,72,74,7,0,0,0,0,0,16,44,20,242,166,250,209,237,86,48,234,8,113,250,120,8,20,21,0,0,0,0,0,0,96,74,7,0,0,0,251,15,44,40,45,243,194,251,235,224,146,61,12,9,195,252,114,3,244,25,0,0,0,0,0,0,112,74,7,0,0,0,251,15,255,39,224,243,181,251,155,224,111,61,147,9,97,252,157,3,215,26,0,0,0,0,0,0,128,74,7,0,0,0,0,0,194,34,35,252,247,251,36,243,99,45,138,6,107,253,106,12,96,20,0,0,0,0,0,0,144,74,7,0,0,0,0,0,14,23,91,252,242,252,233,220,79,65,50,9,134,250,175,5,64,25,0,0,0,0,0,0,160,74,7,0,0,0,0,0,153,29,138,247,98,252,226,226,232,60,142,7,183,246,248,10,158,33,0,0,0,0,0,0,176,74,7,0,0,0,0,0,22,30,59,247,49,252,102,220,90,67,83,7,137,245,239,11,73,33,0,0,0,0,0,0,192,74,7,0,0,0,0,0,132,65,138,237,163,247,69,226,97,61,180,7,226,244,166,13,49,37,0,0,0,0,0,0,208,74,7,0,0,0,188,15,175,32,56,247,5,253,202,221,63,64,118,9,9,250,14,6,117,31,0,0,0,0,0,0,224,74,7,0,0,0,0,0,78,22,123,252,153,253,110,222,233,64,232,7,97,244,24,16,174,26,0,0,0,0,0,0,240,74,7,0,0,0,0,0,247,39,47,245,25,251,147,223,28,62,248,9,227,252,168,2,236,27,0,0,0,0,0,0,0,75,7,0,0,0,0,0,32,34,102,246,89,252,141,220,254,65,203,8,182,250,218,4,71,32,0,0,0,0,0,0,16,75,7,0,0,0,0,0,231,30,137,247,211,252,49,235,94,51,104,9,248,250,179,9,32,31,0,0,0,0,0,0,32,75,7,0,0,0,185,15,101,27,128,250,133,253,108,235,102,50,80,10,66,250,241,10,211,28,0,0,0,0,0,0,48,75,7,0,0,0,0,0,76,27,152,250,54,253,1,234,98,52,143,9,51,250,156,8,150,28,0,0,0,0,0,0,64,75,7,0,0,0,0,0,70,35,56,248,53,253,239,222,174,63,207,8,127,245,145,12,133,31,0,0,0,0,0,0,80,75,7,0,0,0,0,0,3,28,62,248,120,253,107,224,195,60,158,10,134,247,208,9,33,29,0,0,0,0,0,0,96,75,7,0,0,0,0,0,124,34,154,246,74,253,246,236,59,49,237,9,108,253,229,5,163,29,0,0,0,0,0,0,112,75,7,0,0,0,0,0,203,31,133,247,105,253,213,221,157,64,247,8,123,248,216,7,157,31,0,0,0,0,0,0,128,75,7,0,0,0,0,0,115,34,17,246,113,252,191,220,32,66,103,8,207,250,189,4,1,33,0,0,0,0,0,0,144,75,7,0,0,0,0,0,80,27,124,249,218,252,54,224,132,61,239,9,150,252,82,3,217,30,0,0,0,0,0,0,160,75,7,0,0,0,0,0,150,33,224,244,167,252,14,234,38,53,147,8,22,252,237,6,225,27,0,0,0,0,0,0,176,75,7,0,0,0,0,0,150,33,224,244,167,252,14,234,38,53,147,8,22,252,237,6,225,27,0,0,0,0,0,0,192,75,7,0,0,0,0,0,150,33,224,244,167,252,14,234,38,53,147,8,22,252,237,6,225,27,0,0,0,0,0,0,208,75,7,0,0,0,0,15,141,28,133,250,249,253,230,222,136,62,62,10,127,246,10,11,128,31,0,0,0,0,0,0,224,75,7,0,0,0,230,61,6,32,65,247,44,253,249,236,101,48,238,10,237,251,2,8,13,28,0,0,0,0,0,0,240,75,7,0,0,0,0,0,130,32,216,243,233,251,33,231,6,56,131,8,36,252,102,6,250,24,0,0,0,0,0,0,0,76,7,0,0,0,0,0,76,27,152,250,54,253,1,234,98,52,143,9,51,250,156,8,150,28,0,0,0,0,0,0,16,76,7,0,0,0,0,0,117,34,134,244,239,252,174,239,110,47,239,8,200,252,115,6,204,26,0,0,0,0,0,0,32,76,7,0,0,0,0,0,52,30,138,246,235,252,210,223,12,62,194,9,165,252,15,3,162,28,0,0,0,0,0,0,48,76,7,0,0,0,7,62,242,31,59,247,159,253,7,237,106,48,216,10,73,251,38,8,130,28,0,0,0,0,0,0,64,76,7,0,0,0,0,0,242,31,59,247,159,253,7,237,106,48,216,10,73,251,38,8,130,28,0,0,0,0,0,0,80,76,7,0,0,0,0,0,32,34,102,246,89,252,141,220,254,65,203,8,182,250,218,4,71,32,0,0,0,0,0,0,96,76,7,0,0,0,0,0,6,32,65,247,44,253,249,236,101,48,238,10,237,251,2,8,13,28,0,0,0,0,0,0,112,76,7,0,0,0,0,0,130,32,216,243,233,251,33,231,6,56,131,8,36,252,102,6,250,24,0,0,0,0,0,0,128,76,7,0,0,0,0,0,130,32,216,243,233,251,33,231,6,56,131,8,36,252,102,6,250,24,0,0,0,0,0,0,144,76,7,0,0,0,0,0,60,35,182,244,53,253,73,238,148,48,44,9,90,252,127,7,174,27,0,0,0,0,0,0,160,76,7,0,0,0,0,0,203,31,133,247,105,253,213,221,157,64,247,8,123,248,216,7,157,31,0,0,0,0,0,0,176,76,7,0,0,0,0,0,52,30,138,246,235,252,210,223,12,62,194,9,165,252,15,3,162,28,0,0,0,0,0,0,192,76,7,0,0,0,0,0,153,36,133,243,233,252,120,238,142,48,253,8,131,252,4,7,216,26,0,0,0,0,0,0,208,76,7,0,0,0,0,0,186,30,196,247,213,253,251,236,195,48,121,10,104,251,21,8,77,29,0,0,0,0,0,0,224,76,7,0,0,0,0,0,181,33,150,246,141,252,161,220,44,66,123,8,46,250,83,5,72,33,0,0,0,0,0,0,240,76,7,0,0,0,0,15,141,28,133,250,249,253,230,222,136,62,62,10,126,246,10,11,128,31,0,0,0,0,0,0,0,77,7,0,0,0,221,3,94,241,115,41,129,6,149,37,58,249,66,8,171,246,170,27,248,11,78,13,228,23,12,255,16,77,7,0,0,0,221,3,94,241,115,41,129,6,149,37,58,249,66,8,171,246,170,27,248,11,78,13,228,23,12,255,32,77,7,0,0,0,221,3,94,241,115,41,129,6,149,37,58,249,66,8,171,246,170,27,248,11,78,13,228,23,12,255,48,77,7,0,0,0,0,0,85,234,242,45,141,8,182,22,210,253,14,13,196,236,112,38,61,23,176,2,123,35,96,0,64,77,7,0,0,0,0,0,86,51,200,239,196,249,209,237,86,48,234,8,23,249,136,10,55,26,0,0,0,0,0,0,80,77,7,0,0,0,0,0,85,234,242,45,141,8,182,22,210,253,14,13,196,236,112,38,61,23,176,2,123,35,96,0,96,77,7,0,0,0,0,0,118,38,219,247,5,252,50,243,101,43,122,8,250,252,86,8,113,22,0,0,0,0,0,0,112,77,7,0,0,0,0,0,16,44,20,242,166,250,209,237,86,48,234,8,113,250,120,8,20,21,0,0,0,0,0,0,128,77,7,0,0,0,0,0,85,234,242,45,141,8,182,22,210,253,14,13,196,236,112,38,61,23,176,2,123,35,96,0,144,77,7,0,0,0,0,0,85,234,242,45,141,8,182,22,210,253,14,13,196,236,112,38,61,23,176,2,123,35,96,0,160,77,7,0,0,0,0,0,133,36,85,244,23,252,17,225,150,61,218,8,206,247,120,10,183,26,0,0,0,0,0,0,176,77,7,0,0,0,0,0,8,235,214,44,64,9,161,21,143,255,76,12,151,236,37,39,150,22,10,3,68,35,211,0,192,77,7,0,0,0,0,0,162,30,240,246,32,252,38,224,102,61,39,10,182,251,62,5,136,29,0,0,0,0,0,0,208,77,7,0,0,0,0,0,41,33,233,245,244,251,141,224,223,60,83,10,229,250,127,5,186,28,0,0,0,0,0,0,224,77,7,0,0,0,0,0,35,31,246,246,111,252,253,222,146,61,78,11,94,250,240,5,186,29,0,0,0,0,0,0,240,77,7,0,0,0,0,0,6,32,65,247,44,253,249,236,101,48,238,10,237,251,2,8,13,28,0,0,0,0,0,0,0,78,7,0,200,0,0,0,81,40,176,240,93,252,66,245,138,43,32,7,70,254,9,6,163,21,0,0,0,0,0,0,24,78,7,0,200,0,0,0,81,40,176,240,93,252,66,245,138,43,32,7,70,254,9,6,163,21,0,0,0,0,0,0,48,78,7,0,0,0,0,0,226,37,217,242,110,252,158,237,40,49,64,9,187,252,200,3,169,22,0,0,0,0,0,0,72,78,7,0,0,0,0,0,168,44,161,241,169,251,159,243,231,43,154,8,233,252,100,5,103,17,0,0,0,0,0,0,96,78,7,0,0,0,0,0,45,43,83,239,0,252,72,248,198,39,40,8,242,253,239,4,117,17,0,0,0,0,0,0,120,78,7,0,200,0,0,0,81,40,176,240,93,252,66,245,138,43,32,7,70,254,9,6,163,21,0,0,0,0,0,0,144,78,7,0,200,0,0,0,81,40,176,240,93,252,66,245,138,43,32,7,70,254,9,6,163,21,0,0,0,0,0,0,168,78,7,0,0,0,0,0,70,23,233,249,197,253,75,240,189,44,123,11,134,253,12,6,223,19,0,0,0,0,0,0,184,78,7,0,0,0,0,0,70,23,233,249,197,253,75,240,189,44,123,11,134,253,12,6,223,19,0,0,0,0,0,0,200,78,7,0,0,0,0,0,61,10,168,252,244,1,137,238,57,34,79,22,215,250,84,10,169,46,0,0,0,0,0,0,216,78,7,0,200,0,0,0,212,25,194,250,150,253,246,242,47,43,63,10,82,255,0,7,211,19,0,0,0,0,0,0,232,78,7,0,0,0,0,0,188,25,231,250,75,253,51,243,235,42,74,10,157,254,224,7,242,19,0,0,0,0,0,0,248,78,7,0,0,0,0,0,188,25,231,250,75,253,51,243,235,42,74,10,157,254,224,7,242,19,0,0,0,0,0,0,8,79,7,0,0,0,0,0,188,25,231,250,75,253,51,243,235,42,74,10,157,254,224,7,242,19,0,0,0,0,0,0,24,79,7,0,0,0,0,0,34,35,149,245,159,252,14,238,36,48,248,9,69,253,250,6,116,24,0,0,0,0,0,0,40,79,7,0,0,0,0,0,12,41,204,243,7,251,65,232,214,55,109,7,139,249,2,9,93,24,0,0,0,0,0,0,56,79,7,0,0,0,0,0,205,40,222,242,229,250,18,226,74,61,10,8,145,251,152,4,178,29,0,0,0,0,0,0,72,79,7,0,0,0,0,0,12,40,53,242,185,251,54,228,2,58,132,9,85,250,187,6,221,24,0,0,0,0,0,0,88,79,7,0,0,0,0,0,41,42,49,241,134,251,182,226,73,59,184,9,146,250,41,6,153,28,0,0,0,0,0,0,104,79,7,0,0,0,0,0,158,33,51,246,10,252,210,223,98,61,143,10,82,252,211,3,80,30,0,0,0,0,0,0,120,79,7,0,0,0,252,15,201,49,108,238,120,250,82,232,206,56,44,6,114,248,208,8,203,25,0,0,0,0,0,0,136,79,7,0,0,0,0,0,70,46,97,237,79,252,141,228,6,62,65,4,117,245,26,16,119,32,0,0,0,0,0,0,152,79,7,0,0,0,252,15,117,51,132,237,37,250,81,233,212,54,103,7,3,248,148,9,230,27,0,0,0,0,0,0,168,79,7,0,0,0,0,0,148,30,31,249,164,254,100,233,247,54,38,7,219,244,166,17,157,25,0,0,0,0,0,0,184,79,7,0,0,0,0,0,1,35,87,246,196,251,213,224,118,62,19,8,241,246,219,11,57,32,0,0,0,0,0,0,200,79,7,0,0,0,188,15,208,31,187,248,169,251,173,225,22,62,137,7,183,248,238,9,183,29,0,0,0,0,0,0,216,79,7,0,0,0,153,15,15,37,197,244,165,251,147,226,246,60,218,7,174,249,52,8,221,28,0,0,0,0,0,0,232,79,7,0,0,0,0,0,25,24,53,250,235,255,61,228,169,57,232,9,168,244,252,13,120,33,0,0,0,0,0,0,248,79,7,0,0,0,106,15,152,34,234,245,254,251,175,225,150,61,34,8,39,248,15,10,45,29,0,0,0,0,0,0,8,80,7,0,0,0,215,15,42,34,135,246,185,251,86,226,252,60,25,8,12,249,5,9,248,28,0,0,0,0,0,0,24,80,7,0,0,0,210,15,41,34,135,246,185,251,86,226,253,60,25,8,12,249,5,9,248,28,0,0,0,0,0,0,40,80,7,0,0,0,0,0,200,31,80,248,213,254,151,234,174,53,79,7,4,246,109,16,230,25,0,0,0,0,0,0,56,80,7,0,0,0,106,15,81,34,31,246,247,251,41,226,8,61,64,8,9,249,252,8,137,30,0,0,0,0,0,0,72,80,7,0,0,0,210,15,152,32,238,246,4,252,84,226,19,61,0,8,44,249,221,8,119,28,0,0,0,0,0,0,88,80,7,0,0,0,236,14,192,43,57,241,211,250,32,238,49,49,158,8,73,253,206,6,80,29,0,0,0,0,0,0,104,80,7,0,0,0,175,15,5,33,106,247,188,251,71,226,65,61,216,7,67,249,33,9,144,30,0,0,0,0,0,0,120,80,7,0,0,0,175,15,5,33,106,247,188,251,71,226,65,61,216,7,67,249,33,9,144,30,0,0,0,0,0,0,136,80,7,0,0,0,253,15,151,32,254,247,3,252,221,225,89,61,55,8,217,248,76,9,43,32,0,0,0,0,0,0,152,80,7,0,0,0,253,15,151,32,254,247,3,252,221,225,89,61,55,8,217,248,76,9,43,32,0,0,0,0,0,0,168,80,7,0,0,0,0,0,151,29,145,247,197,253,118,241,77,44,165,10,102,250,3,11,127,24,0,0,0,0,0,0,184,80,7,0,0,0,0,0,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,200,80,7,0,0,0,0,0,145,44,224,240,143,250,36,238,213,49,211,7,59,253,18,7,247,28,0,0,0,0,0,0,216,80,7,0,0,0,0,0,144,44,63,239,65,251,66,239,97,48,70,8,125,254,187,5,107,30,0,0,0,0,0,0,232,80,7,0,0,0,243,12,182,58,80,234,242,248,109,240,99,48,231,6,176,253,134,6,111,27,0,0,0,0,0,0,248,80,7,0,0,0,0,0,151,29,145,247,197,253,118,241,77,44,165,10,102,250,3,11,127,24,0,0,0,0,0,0,8,81,7,0,0,0,203,15,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,24,81,7,0,0,0,0,0,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,40,81,7,0,0,0,0,0,237,35,138,243,109,253,210,245,78,42,247,7,54,254,226,4,82,21,0,0,0,0,0,0,56,81,7,0,0,0,0,0,151,29,145,247,197,253,118,241,77,44,165,10,102,250,3,11,127,24,0,0,0,0,0,0,72,81,7,0,0,0,0,0,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,88,81,7,0,0,0,0,0,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,104,81,7,0,0,0,0,0,7,30,64,248,162,253,25,239,152,46,161,10,155,250,35,9,52,25,0,0,0,0,0,0,120,81,7,0,0,0,0,0,206,36,70,243,57,253,161,245,146,42,223,7,0,254,74,5,136,21,0,0,0,0,0,0,144,81,7,0,0,0,225,15,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,160,81,7,0,0,0,0,0,172,39,159,242,203,251,205,245,169,43,88,6,127,254,56,6,216,19,0,0,0,0,0,0,176,81,7,0,0,0,0,0,46,47,28,237,211,251,241,229,226,55,18,10,238,252,171,3,250,28,0,0,0,0,0,0,192,81,7,0,0,0,0,0,246,45,163,238,213,251,11,229,85,56,147,10,251,251,193,4,148,29,0,0,0,0,0,0,208,81,7,0,0,0,255,15,21,37,169,242,102,253,165,235,46,48,188,12,244,249,214,8,82,25,0,0,0,0,0,0,224,81,7,0,0,0,254,15,97,41,233,241,14,252,7,233,71,51,12,12,80,251,13,7,65,26,0,0,0,0,0,0,240,81,7,0,0,0,254,15,77,45,90,240,231,251,200,234,255,49,141,11,251,251,214,6,116,25,0,0,0,0,0,0,0,82,7,0,0,0,249,15,163,42,163,241,42,252,45,234,186,50,95,11,112,251,176,7,79,24,0,0,0,0,0,0,16,82,7,0,0,0,0,0,2,45,52,240,134,251,128,237,140,47,88,11,36,252,37,7,151,23,0,0,0,0,0,0,32,82,7,0,0,0,0,0,168,32,140,246,144,252,168,240,65,48,203,6,155,250,112,9,53,20,0,0,0,0,0,0,48,82,7,0,0,0,0,0,162,44,193,239,154,251,238,247,182,41,57,6,136,255,47,5,134,19,0,0,0,0,0,0,64,82,7,0,0,0,0,0,49,38,101,242,99,252,186,244,33,44,8,7,166,253,127,6,14,20,0,0,0,0,0,0,80,82,7,0,0,0,0,0,149,42,1,240,206,251,139,251,248,35,245,8,194,255,137,5,38,20,0,0,0,0,0,0,96,82,7,0,0,0,0,0,49,38,101,242,99,252,186,244,33,44,8,7,166,253,127,6,14,20,0,0,0,0,0,0,160,46,2,0,0,0,0,0,238,49,37,240,133,254,34,254,106,35,133,5,60,5,233,5,56,20,0,0,0,0,0,0,112,82,7,0,0,0,0,0,8,41,122,246,91,251,101,222,79,63,227,9,2,252,95,3,210,47,0,0,0,0,0,0,128,82,7,0,0,0,0,0,77,42,234,244,165,251,109,223,201,61,136,10,187,252,168,2,163,46,0,0,0,0,0,0,144,82,7,0,0,0,0,0,8,41,122,246,91,251,101,222,79,63,227,9,2,252,95,3,210,47,0,0,0,0,0,0,160,82,7,0,0,0,0,0,131,40,227,246,74,251,16,222,103,63,42,10,50,251,92,4,18,44,0,0,0,0,0,0,176,82,7,0,0,0,0,0,179,37,245,247,91,251,79,221,128,64,183,9,76,250,65,5,191,41,0,0,0,0,0,0,192,82,7,0,0,0,0,0,94,37,209,244,221,252,254,227,68,59,64,8,206,252,35,3,233,37,0,0,0,0,0,0,208,82,7,0,0,0,0,0,87,43,171,243,212,250,71,223,218,61,160,10,172,251,179,3,168,45,0,0,0,0,0,0,224,82,7,0,0,0,0,0,211,36,102,245,156,252,187,226,220,62,93,5,105,247,192,12,12,28,0,0,0,0,0,0,240,82,7,0,0,0,0,0,226,35,138,245,117,252,11,222,133,64,212,8,151,251,70,4,76,33,0,0,0,0,0,0,0,83,7,0,0,0,0,0,49,43,236,241,125,251,224,235,246,50,25,9,230,254,119,1,168,31,0,0,0,0,0,0,16,83,7,0,0,0,0,0,49,43,236,241,125,251,224,235,246,50,25,9,230,254,119,1,168,31,0,0,0,0,0,0,32,83,7,0,0,0,0,0,139,34,235,244,143,253,95,236,100,49,108,10,101,254,210,4,242,28,0,0,0,0,0,0,48,83,7,0,0,0,0,0,167,38,251,243,174,252,72,235,235,50,217,9,141,252,232,6,24,27,0,0,0,0,0,0,64,83,7,0,0,0,0,0,247,28,252,247,47,253,190,235,244,49,122,10,90,250,109,8,117,26,0,0,0,0,0,0,80,83,7,0,0,0,0,0,234,31,91,245,129,253,168,238,241,46,184,10,253,252,185,5,199,25,0,0,0,0,0,0,96,83,7,0,0,0,0,0,9,34,239,244,25,253,10,239,124,46,212,10,46,253,7,6,103,24,0,0,0,0,0,0,112,83,7,0,0,0,0,0,182,35,125,244,90,253,56,222,71,66,127,6,80,247,82,11,167,33,0,0,0,0,0,0,128,83,7,0,0,0,0,0,64,33,117,243,237,252,185,239,190,46,183,9,130,253,8,5,166,23,0,0,0,0,0,0,144,83,7,0,0,0,0,0,202,20,109,247,41,0,151,241,198,34,180,18,166,252,39,7,33,31,0,0,0,0,0,0,160,83,7,0,0,0,0,0,195,50,39,234,173,251,169,248,155,39,235,7,192,255,209,4,55,19,0,0,0,0,0,0,176,83,7,0,0,0,0,62,150,41,247,241,122,251,255,242,179,45,39,7,101,253,58,11,143,24,0,0,0,0,0,0,192,83,7,0,15,0,0,0,66,34,134,243,204,252,201,244,17,44,11,7,255,253,16,6,82,17,0,0,0,0,0,0,216,83,7,0,0,0,127,15,26,35,61,245,222,252,59,231,7,53,5,12,60,250,96,8,235,24,0,0,0,0,0,0,240,83,7,0,0,0,0,0,204,38,12,244,89,252,79,233,19,52,193,10,13,251,107,8,199,21,0,0,0,0,0,0,8,84,7,0,15,0,150,15,125,39,96,242,31,252,220,234,12,50,100,11,231,250,92,8,167,21,0,0,0,0,0,0,32,84,7,0,0,0,148,15,224,42,67,240,139,251,18,225,131,60,40,10,122,249,23,8,54,32,0,0,0,0,0,0,56,84,7,0,15,0,0,0,210,38,36,245,134,252,4,238,105,48,176,9,163,251,0,9,12,18,0,0,0,0,0,0,80,84,7,0,15,0,0,0,71,53,97,234,165,250,94,249,161,37,126,9,60,1,128,4,12,16,0,0,0,0,0,0,104,84,7,0,0,0,0,0,226,30,107,245,174,253,169,231,39,52,148,12,126,248,71,10,137,25,0,0,0,0,0,0,128,84,7,0,15,0,0,0,12,45,28,239,214,251,185,246,95,42,213,6,204,253,163,6,255,16,0,0,0,0,0,0,152,84,7,0,0,0,0,0,226,30,107,245,174,253,169,231,39,52,148,12,126,248,71,10,137,25,0,0,0,0,0,0,168,84,7,0,15,0,150,15,89,31,106,248,230,251,16,225,32,62,52,8,104,246,189,11,127,27,0,0,0,0,0,0,192,84,7,0,0,0,127,15,118,31,163,248,255,251,99,223,239,63,248,7,11,245,214,13,205,29,0,0,0,0,0,0,216,84,7,0,0,0,127,15,118,31,163,248,255,251,99,223,239,63,248,7,11,245,214,13,205,29,0,0,0,0,0,0,232,84,7,0,0,0,0,0,76,44,27,240,5,251,125,226,162,59,144,9,112,244,98,13,5,30,0,0,0,0,0,0,0,85,7,0,0,0,0,0,76,44,27,240,5,251,125,226,162,59,144,9,112,244,98,13,5,30,0,0,0,0,0,0,16,85,7,0,15,0,0,0,140,34,46,242,0,253,131,241,242,45,152,8,70,253,0,7,100,20,0,0,0,0,0,0,40,85,7,0,15,0,0,0,140,34,46,242,0,253,131,241,242,45,152,8,70,253,0,7,100,20,0,0,0,0,0,0,64,85,7,0,15,0,0,0,163,36,61,243,208,252,101,243,40,45,89,7,98,252,136,7,220,20,0,0,0,0,0,0,88,85,7,0,15,0,0,0,163,36,61,243,208,252,101,243,40,45,89,7,98,252,136,7,220,20,0,0,0,0,0,0,112,85,7,0,0,0,127,15,208,41,165,239,50,251,134,223,80,62,197,9,104,252,177,3,223,34,0,0,0,0,0,0,136,85,7,0,0,0,127,15,208,41,165,239,50,251,134,223,80,62,197,9,104,252,177,3,223,34,0,0,0,0,0,0,152,85,7,0,0,0,0,0,112,31,6,245,145,253,206,230,207,52,200,12,92,249,98,8,137,27,0,0,0,0,0,0,176,85,7,0,0,0,0,0,112,31,6,245,145,253,206,230,207,52,200,12,92,249,98,8,137,27,0,0,0,0,0,0,192,85,7,0,15,0,0,0,192,31,148,245,113,253,10,232,251,51,89,12,10,249,8,10,195,23,0,0,0,0,0,0,216,85,7,0,15,0,0,0,192,31,148,245,113,253,10,232,251,51,89,12,10,249,8,10,195,23,0,0,0,0,0,0,232,85,7,0,15,0,0,0,157,42,57,239,76,252,203,250,90,36,95,9,22,0,202,6,230,17,0,0,0,0,0,0,0,86,7,0,15,0,0,0,157,42,57,239,76,252,203,250,90,36,95,9,22,0,202,6,230,17,0,0,0,0,0,0,16,86,7,0,15,0,0,0,164,39,97,241,33,252,235,244,102,44,123,6,67,253,101,7,35,19,0,0,0,0,0,0,40,86,7,0,15,0,0,0,164,39,97,241,33,252,235,244,102,44,123,6,67,253,101,7,35,19,0,0,0,0,0,0,56,86,7,0,15,0,0,0,150,30,120,245,5,253,3,243,147,45,74,7,127,253,176,6,216,18,0,0,0,0,0,0,80,86,7,0,15,0,0,0,150,30,120,245,5,253,3,243,147,45,74,7,127,253,176,6,216,18,0,0,0,0,0,0,104,86,7,0,15,0,255,15,69,63,254,231,31,249,167,246,13,42,77,7,110,1,190,8,128,20,0,0,0,0,0,0,128,86,7,0,15,0,255,15,69,63,254,231,31,249,167,246,13,42,77,7,110,1,190,8,128,20,0,0,0,0,0,0,144,86,7,0,15,0,255,15,128,46,67,238,91,251,205,246,147,42,126,6,216,254,50,6,193,16,0,0,0,0,0,0,168,86,7,0,15,0,255,15,128,46,67,238,91,251,205,246,147,42,126,6,216,254,50,6,193,16,0,0,0,0,0,0,184,86,7,0,15,0,255,15,176,31,253,245,28,253,110,241,8,46,149,8,83,252,27,8,69,19,0,0,0,0,0,0,208,86,7,0,15,0,255,15,176,31,253,245,28,253,110,241,8,46,149,8,83,252,27,8,69,19,0,0,0,0,0,0,224,86,7,0,15,0,255,15,122,35,165,244,99,252,25,232,65,52,242,11,251,248,81,10,233,21,0,0,0,0,0,0,248,86,7,0,0,0,0,0,129,39,184,242,166,251,99,237,139,49,13,9,135,254,157,5,54,26,0,0,0,0,0,0,16,87,7,0,15,0,148,15,7,32,239,247,224,251,68,224,28,63,241,7,102,246,206,11,52,28,0,0,0,0,0,0,40,87,7,0,15,0,60,15,129,39,184,242,166,251,99,237,139,49,13,9,135,254,157,5,54,26,0,0,0,0,0,0,64,87,7,0,15,0,255,15,107,26,129,248,161,252,228,240,251,44,124,10,64,251,83,9,247,22,0,0,0,0,0,0,88,87,7,0,15,0,255,15,118,30,254,245,28,253,217,240,64,45,53,10,225,251,200,8,58,21,0,0,0,0,0,0,112,87,7,0,15,0,255,15,102,32,181,244,117,253,227,240,70,45,35,10,97,251,219,8,232,20,0,0,0,0,0,0,136,87,7,0,15,0,146,15,208,30,146,248,13,252,86,224,213,62,51,8,207,246,50,11,162,28,0,0,0,0,0,0,160,87,7,0,15,0,255,15,208,30,146,248,13,252,86,224,213,62,51,8,207,246,50,11,162,28,0,0,0,0,0,0,184,87,7,0,15,0,255,15,91,35,92,246,76,251,164,235,220,51,73,8,83,251,206,9,234,26,0,0,0,0,0,0,208,87,7,0,15,0,255,15,36,32,127,244,108,253,158,240,16,46,126,9,186,251,230,8,161,22,0,0,0,0,0,0,232,87,7,0,15,0,0,0,194,31,15,245,78,252,64,242,25,44,248,9,222,250,207,9,159,22,0,0,0,0,0,0,0,88,7,0,15,0,0,0,186,29,36,245,192,253,250,237,163,47,173,10,161,250,89,9,90,25,0,0,0,0,0,0,24,88,7,0,15,0,146,15,155,24,70,250,236,253,121,230,28,54,153,11,229,246,40,12,96,23,0,0,0,0,0,0,48,88,7,0,15,0,149,15,100,30,150,246,218,252,183,240,204,45,180,9,6,252,86,9,178,20,0,0,0,0,0,0,72,88,7,0,15,0,0,0,159,25,40,249,21,254,168,241,143,44,26,10,62,252,83,7,10,20,0,0,0,0,0,0,96,88,7,0,15,0,0,0,210,27,196,247,0,254,173,243,193,43,183,8,227,253,143,5,181,19,0,0,0,0,0,0,120,88,7,0,15,0,0,0,114,26,153,248,24,253,144,235,89,51,255,8,128,249,131,10,71,22,0,0,0,0,0,0,144,88,7,0,15,0,0,0,46,32,84,243,89,253,175,240,38,46,80,9,188,252,230,7,220,22,0,0,0,0,0,0,168,88,7,0,15,0,0,0,107,26,129,248,161,252,228,240,251,44,124,10,64,251,83,9,247,22,0,0,0,0,0,0,192,88,7,0,15,0,0,0,186,29,36,245,192,253,250,237,163,47,173,10,161,250,89,9,90,25,0,0,0,0,0,0,216,88,7,0,15,0,0,0,159,33,250,244,216,252,85,241,154,46,1,8,204,252,12,8,104,20,0,0,0,0,0,0,240,88,7,0,15,0,0,0,159,33,250,244,216,252,85,241,154,46,1,8,204,252,12,8,104,20,0,0,0,0,0,0,8,89,7,0,15,0,0,0,98,34,193,243,235,252,177,243,204,44,112,7,218,253,209,6,202,18,0,0,0,0,0,0,32,89,7,0,15,0,0,0,98,34,193,243,235,252,177,243,204,44,112,7,218,253,209,6,202,18,0,0,0,0,0,0,56,89,7,0,0,0,0,0,33,5,63,7,147,255,197,229,36,62,40,3,185,254,48,7,132,23,0,0,0,0,0,0,72,89,7,0,0,0,0,0,89,11,220,2,19,255,58,224,242,64,196,5,34,244,157,16,93,29,0,0,0,0,0,0,88,89,7,0,0,0,0,0,89,11,220,2,19,255,58,224,242,64,196,5,34,244,157,16,93,29,0,0,0,0,0,0,104,89,7,0,0,0,0,0,164,17,11,255,219,255,148,228,128,58,125,8,122,243,63,18,175,27,0,0,0,0,0,0,120,89,7,0,0,0,0,0,189,19,232,255,139,255,204,233,252,54,166,6,197,245,140,17,217,22,0,0,0,0,0,0,136,89,7,0,0,0,0,0,99,31,179,1,62,252,143,232,48,54,16,9,121,251,249,11,58,21,0,0,0,0,0,0,152,89,7,0,0,0,0,0,99,31,179,1,62,252,143,232,48,54,16,9,121,251,249,11,58,21,0,0,0,0,0,0,168,89,7,0,0,0,0,0,11,57,230,239,240,253,238,248,66,38,225,7,215,254,203,10,48,23,0,0,0,0,0,0,184,89,7,0,192,2,255,255,22,82,45,225,203,245,16,244,169,47,88,3,101,247,5,20,106,31,0,0,0,0,0,0,192,89,7,0,0,0,0,62,194,34,62,246,30,252,184,243,64,44,18,8,8,253,101,5,224,17,0,0,0,0,0,0,208,89,7,0,0,0,255,7,152,41,199,240,225,251,26,248,77,41,132,6,20,254,75,6,134,18,0,0,0,0,0,0,224,89,7,0,0,0,0,0,133,29,38,246,29,253,185,237,149,50,102,7,184,252,241,6,191,20,0,0,0,0,0,0,248,89,7,0,0,0,0,0,102,20,84,251,218,253,116,230,57,57,217,7,126,249,3,11,25,22,0,0,0,0,0,0,8,90,7,0,0,0,0,0,124,31,139,244,7,253,104,238,90,50,226,6,138,253,209,5,107,20,0,0,0,0,0,0,24,90,7,0,0,0,0,0,133,29,38,246,29,253,185,237,149,50,102,7,184,252,241,6,191,20,0,0,0,0,0,0,40,90,7,0,0,0,0,0,133,29,38,246,29,253,185,237,149,50,102,7,184,252,241,6,191,20,0,0,0,0,0,0,56,90,7,0,0,0,255,15,21,27,36,247,15,253,199,236,75,52,111,6,221,252,105,6,208,23,0,0,0,0,0,0,72,90,7,0,0,0,0,0,21,27,36,247,15,253,199,236,75,52,111,6,221,252,105,6,208,23,0,0,0,0,0,0,88,90,7,0,0,0,0,0,21,27,36,247,15,253,199,236,75,52,111,6,221,252,105,6,208,23,0,0,0,0,0,0,104,90,7,0,0,0,0,0,92,40,94,243,112,251,33,232,47,57,240,5,184,250,87,10,139,32,0,0,0,0,0,0,120,90,7,0,0,0,0,0,92,40,94,243,112,251,33,232,47,57,240,5,184,250,87,10,139,32,0,0,0,0,0,0,136,90,7,0,0,0,0,0,190,41,54,240,228,251,245,241,182,51,20,1,48,254,235,4,43,23,0,0,0,0,0,0,152,90,7,0,0,0,0,0,92,40,94,243,112,251,33,232,47,57,240,5,184,250,87,10,139,32,0,0,0,0,0,0,168,90,7,0,0,0,0,0,190,41,54,240,228,251,245,241,182,51,20,1,48,254,235,4,43,23,0,0,0,0,0,0,184,90,7,0,0,0,255,15,61,47,27,242,125,251,24,252,62,37,197,6,234,255,251,6,224,17,0,0,0,0,0,0,200,90,7,0,0,0,0,0,8,41,122,246,91,251,101,222,79,63,227,9,2,252,95,3,210,47,0,0,0,0,0,0,216,90,7,0,0,0,0,0,211,36,102,245,156,252,187,226,220,62,93,5,105,247,192,12,12,28,0,0,0,0,0,0,232,90,7,0,0,0,0,0,109,46,128,240,63,250,138,239,11,48,124,7,189,252,119,6,173,21,0,0,0,0,0,0,248,90,7,0,0,0,0,0,58,64,116,244,138,246,195,244,96,47,238,2,144,251,178,23,207,17,0,0,0,0,0,0,0,91,7,0,0,0,0,0,244,30,138,248,247,252,222,223,99,60,182,11,19,250,151,8,162,26,182,227,137,44,153,13,16,91,7,0,0,2,0,0,64,33,175,245,74,253,150,224,54,61,222,9,227,248,69,8,246,28,0,0,0,0,0,0,32,91,7,0,0,0,0,0,87,29,245,245,76,253,42,225,240,58,244,11,76,252,87,4,192,31,0,0,0,0,0,0,48,91,7,0,200,0,0,0,196,25,225,247,206,253,82,237,216,50,141,7,54,252,45,6,61,20,0,0,0,0,0,0,64,91,7,0,200,0,0,0,203,33,62,245,223,251,120,242,175,47,93,5,200,253,118,5,82,17,0,0,0,0,0,0,80,91,7,0,200,0,0,0,23,26,223,248,23,253,73,236,200,51,161,7,212,249,118,9,63,20,0,0,0,0,0,0,96,91,7,0,128,0,0,0,200,24,180,249,50,254,1,237,189,48,121,10,159,252,250,6,243,26,0,0,0,0,0,0,112,91,7,0,0,0,235,15,221,36,5,245,250,252,43,223,87,63,242,8,58,253,84,2,13,28,0,0,0,0,0,0,128,91,7,0,0,0,0,0,150,23,52,250,189,253,71,220,106,65,208,9,149,252,234,2,50,28,0,0,0,0,0,0,144,91,7,0,0,0,0,0,119,38,237,243,96,252,219,222,217,63,177,8,53,253,83,2,191,27,0,0,0,0,0,0,160,91,7,0,0,0,0,0,119,38,237,243,96,252,219,222,217,63,177,8,53,253,83,2,191,27,0,0,0,0,0,0,176,91,7,0,0,0,0,0,119,38,237,243,95,252,219,222,218,63,177,8,54,253,83,2,191,27,0,0,0,0,0,0,192,91,7,0,0,0,252,15,150,23,52,250,190,253,70,220,106,65,209,9,149,252,234,2,49,28,0,0,0,0,0,0,208,91,7,0,0,0,0,0,150,23,52,250,189,253,71,220,106,65,208,9,149,252,234,2,50,28,0,0,0,0,0,0,224,91,7,0,0,0,0,0,150,23,52,250,189,253,71,220,106,65,208,9,149,252,234,2,50,28,0,0,0,0,0,0,240,91,7,0,128,0,235,15,86,19,188,253,153,255,148,235,254,48,213,11,59,253,155,5,203,28,0,0,0,0,0,0,0,92,7,0,128,0,235,15,44,23,44,250,101,254,51,237,253,47,40,11,27,253,244,5,83,26,0,0,0,0,0,0,16,92,7,0,128,0,235,15,158,23,153,251,234,254,58,234,20,51,226,10,77,253,139,5,201,29,0,0,0,0,0,0,32,92,7,0,128,0,235,15,86,19,188,253,153,255,148,235,254,48,213,11,59,253,155,5,203,28,0,0,0,0,0,0,48,92,7,0,128,0,0,0,143,22,219,252,153,254,130,222,167,63,87,9,105,248,37,9,81,28,0,0,0,0,0,0,64,92,7,0,128,0,0,0,37,21,118,251,147,254,223,233,42,51,50,11,160,253,155,4,248,32,0,0,0,0,0,0,80,92,7,0,128,0,0,0,89,20,208,251,115,254,115,221,248,62,103,11,174,249,11,7,206,33,0,0,0,0,0,0,96,92,7,0,128,0,0,0,103,23,60,249,69,254,252,239,213,46,77,9,64,253,187,5,104,23,0,0,0,0,0,0,112,92,7,0,128,0,0,0,151,20,56,253,165,254,247,231,85,53,203,10,191,249,62,9,74,28,0,0,0,0,0,0,128,92,7,0,128,0,0,0,206,22,106,250,10,255,87,242,213,44,249,8,20,253,93,7,146,22,0,0,0,0,0,0,144,92,7,0,128,0,0,0,49,19,227,253,54,255,14,232,201,52,90,11,228,249,103,8,15,28,0,0,0,0,0,0,160,92,7,0,128,0,0,0,151,20,56,253,165,254,247,231,85,53,203,10,191,249,62,9,74,28,0,0,0,0,0,0,176,92,7,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,192,92,7,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,208,92,7,0,128,0,0,0,241,23,247,249,94,254,190,236,202,48,183,10,47,252,157,6,215,25,0,0,0,0,0,0,224,92,7,0,128,0,0,0,241,23,247,249,94,254,190,236,202,48,183,10,47,252,157,6,215,25,0,0,0,0,0,0,240,92,7,0,128,0,0,0,241,23,247,249,94,254,190,236,202,48,183,10,47,252,157,6,215,25,0,0,0,0,0,0,0,93,7,0,138,0,0,0,251,26,24,251,123,253,180,236,77,49,16,9,82,249,21,10,86,24,0,0,0,0,0,0,16,93,7,0,116,0,0,0,151,26,186,250,170,254,136,239,129,45,7,10,191,251,209,7,20,25,0,0,0,0,0,0,0,93,7,0,128,0,0,0,149,25,242,249,76,254,240,236,147,48,193,10,170,252,76,7,64,27,0,0,0,0,0,0,16,93,7,0,128,0,0,0,149,25,242,249,76,254,240,236,147,48,193,10,170,252,76,7,64,27,0,0,0,0,0,0,32,93,7,0,128,0,0,0,241,23,247,249,94,254,190,236,202,48,183,10,47,252,157,6,215,25,0,0,0,0,0,0,48,93,7,0,128,0,0,0,115,21,88,251,149,254,169,236,54,48,132,11,113,252,186,6,24,28,0,0,0,0,0,0,64,93,7,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,80,93,7,0,128,0,0,0,181,23,59,251,146,254,155,235,235,49,174,10,0,252,18,8,178,26,0,0,0,0,0,0,96,93,7,0,128,0,0,0,98,23,174,249,97,254,51,238,44,46,48,12,87,253,124,5,59,27,0,0,0,0,0,0,112,93,7,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,128,93,7,0,128,0,0,0,44,23,44,250,101,254,51,237,253,47,40,11,27,253,244,5,83,26,0,0,0,0,0,0,144,93,7,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,160,93,7,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,176,93,7,0,128,0,0,0,115,21,88,251,149,254,169,236,54,48,132,11,113,252,186,6,24,28,0,0,0,0,0,0,192,93,7,0,128,0,0,0,115,21,88,251,149,254,169,236,54,48,132,11,113,252,186,6,24,28,0,0,0,0,0,0,208,93,7,0,128,0,0,0,200,24,180,249,50,254,1,237,189,48,121,10,159,252,250,6,243,26,0,0,0,0,0,0,65,103,102,97,80,104,111,116,111,32,68,67,45,56,51,51,109,0,0,0,0,0,0,0,65,112,112,108,101,32,81,117,105,99,107,84,97,107,101,0,67,97,110,111,110,32,69,79,83,32,68,50,48,48,48,0,67,97,110,111,110,32,69,79,83,32,68,54,48,48,48,0,67,97,110,111,110,32,69,79,83,32,68,51,48,0,0,0,67,97,110,111,110,32,69,79,83,32,68,54,48,0,0,0,67,97,110,111,110,32,69,79,83,32,53,68,83,0,0,0,67,97,110,111,110,32,69,79,83,32,53,68,32,77,97,114,107,32,73,73,73,0,0,0,67,97,110,111,110,32,69,79,83,32,53,68,32,77,97,114,107,32,73,73,0,0,0,0,67,97,110,111,110,32,69,79,83,32,53,68,0,0,0,0,67,97,110,111,110,32,69,79,83,32,54,68,0,0,0,0,67,97,110,111,110,32,69,79,83,32,55,68,32,77,97,114,107,32,73,73,0,0,0,0,67,97,110,111,110,32,69,79,83,32,55,68,0,0,0,0,67,97,110,111,110,32,69,79,83,32,49,48,68,0,0,0,67,97,110,111,110,32,69,79], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+464176);
/* memory initializer */ allocate([83,32,50,48,68,97,0,0,67,97,110,111,110,32,69,79,83,32,50,48,68,0,0,0,67,97,110,111,110,32,69,79,83,32,51,48,68,0,0,0,67,97,110,111,110,32,69,79,83,32,52,48,68,0,0,0,67,97,110,111,110,32,69,79,83,32,53,48,68,0,0,0,67,97,110,111,110,32,69,79,83,32,54,48,68,0,0,0,67,97,110,111,110,32,69,79,83,32,55,48,68,0,0,0,67,97,110,111,110,32,69,79,83,32,49,48,48,68,0,0,67,97,110,111,110,32,69,79,83,32,51,48,48,68,0,0,67,97,110,111,110,32,69,79,83,32,51,53,48,68,0,0,67,97,110,111,110,32,69,79,83,32,52,48,48,68,0,0,67,97,110,111,110,32,69,79,83,32,52,53,48,68,0,0,67,97,110,111,110,32,69,79,83,32,53,48,48,68,0,0,67,97,110,111,110,32,69,79,83,32,53,53,48,68,0,0,67,97,110,111,110,32,69,79,83,32,54,48,48,68,0,0,67,97,110,111,110,32,69,79,83,32,54,53,48,68,0,0,67,97,110,111,110,32,69,79,83,32,55,48,48,68,0,0,67,97,110,111,110,32,69,79,83,32,55,53,48,68,0,0,67,97,110,111,110,32,69,79,83,32,55,54,48,68,0,0,67,97,110,111,110,32,69,79,83,32,49,48,48,48,68,0,67,97,110,111,110,32,69,79,83,32,49,49,48,48,68,0,67,97,110,111,110,32,69,79,83,32,49,50,48,48,68,0,67,97,110,111,110,32,69,79,83,32,77,51,0,0,0,0,67,97,110,111,110,32,69,79,83,32,77,0,0,0,0,0,67,97,110,111,110,32,69,79,83,45,49,68,115,32,77,97,114,107,32,73,73,73,0,0,67,97,110,111,110,32,69,79,83,45,49,68,115,32,77,97,114,107,32,73,73,0,0,0,67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,86,0,0,0,0,67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,73,73,0,0,0,67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,73,32,78,0,0,67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,73,0,0,0,0,67,97,110,111,110,32,69,79,83,45,49,68,83,0,0,0,67,97,110,111,110,32,69,79,83,45,49,68,32,67,0,0,67,97,110,111,110,32,69,79,83,45,49,68,32,88,0,0,67,97,110,111,110,32,69,79,83,45,49,68,0,0,0,0,67,97,110,111,110,32,69,79,83,32,67,53,48,48,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,53,51,48,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,53,48,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,53,0,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,48,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,49,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,50,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,53,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,54,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,32,88,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,0,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,50,0,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,51,0,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,53,0,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,54,0,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,55,32,88,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,57,0,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,80,114,111,49,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,80,114,111,55,48,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,80,114,111,57,48,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,51,48,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,52,48,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,52,53,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,53,48,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,54,48,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,55,48,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,57,48,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,57,53,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,49,48,48,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,49,49,48,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,49,50,48,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,49,32,73,83,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,53,48,32,72,83,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,54,48,32,72,83,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,51,51,48,48,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,52,55,48,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,49,48,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,50,48,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,51,48,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,52,48,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,53,48,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,55,50,48,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,51,32,73,83,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,49,49,48,32,73,83,0,0,0,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,50,50,48,0,0,0,67,97,115,105,111,32,69,88,45,83,50,48,0,0,0,0,67,97,115,105,111,32,69,88,45,90,55,53,48,0,0,0,67,97,115,105,111,32,69,88,45,90,49,48,0,0,0,0,67,73,78,69,32,54,53,48,0,0,0,0,0,0,0,0,67,73,78,69,32,54,54,48,0,0,0,0,0,0,0,0,67,111,110,116,97,120,32,78,32,68,105,103,105,116,97,108,0,0,0,0,0,0,0,0,69,112,115,111,110,32,82,45,68,49,0,0,0,0,0,0,70,117,106,105,102,105,108,109,32,69,53,53,48,0,0,0,70,117,106,105,102,105,108,109,32,69,57,48,48,0,0,0,70,117,106,105,102,105,108,109,32,70,53,0,0,0,0,0,70,117,106,105,102,105,108,109,32,70,54,0,0,0,0,0,70,117,106,105,102,105,108,109,32,70,55,55,0,0,0,0,70,117,106,105,102,105,108,109,32,70,55,0,0,0,0,0,70,117,106,105,102,105,108,109,32,70,56,0,0,0,0,0,70,117,106,105,102,105,108,109,32,83,49,48,48,70,83,0,70,117,106,105,102,105,108,109,32,83,49,0,0,0,0,0,70,117,106,105,102,105,108,109,32,83,50,48,80,114,111,0,70,117,106,105,102,105,108,109,32,83,50,48,0,0,0,0,70,117,106,105,102,105,108,109,32,83,50,80,114,111,0,0,70,117,106,105,102,105,108,109,32,83,51,80,114,111,0,0,70,117,106,105,102,105,108,109,32,83,53,80,114,111,0,0,70,117,106,105,102,105,108,109,32,83,53,48,48,48,0,0,70,117,106,105,102,105,108,109,32,83,53,49,48,48,0,0,70,117,106,105,102,105,108,109,32,83,53,53,48,48,0,0,70,117,106,105,102,105,108,109,32,83,53,50,48,48,0,0,70,117,106,105,102,105,108,109,32,83,53,54,48,48,0,0,70,117,106,105,102,105,108,109,32,83,54,0,0,0,0,0,70,117,106,105,102,105,108,109,32,83,55,48,48,48,0,0,70,117,106,105,102,105,108,109,32,83,57,48,48,48,0,0,70,117,106,105,102,105,108,109,32,83,57,53,48,48,0,0,70,117,106,105,102,105,108,109,32,83,57,49,48,48,0,0,70,117,106,105,102,105,108,109,32,83,57,54,48,48,0,0,70,117,106,105,102,105,108,109,32,83,76,49,48,48,48,0,70,117,106,105,102,105,108,109,32,73,83,45,49,0,0,0,70,117,106,105,102,105,108,109,32,73,83,32,80,114,111,0,70,117,106,105,102,105,108,109,32,72,83,49,48,32,72,83,49,49,0,0,0,0,0,0,70,117,106,105,102,105,108,109,32,72,83,50,0,0,0,0,70,117,106,105,102,105,108,109,32,72,83,51,0,0,0,0,70,117,106,105,102,105,108,109,32,72,83,53,48,69,88,82,0,0,0,0,0,0,0,0,70,117,106,105,102,105,108,109,32,70,57,48,48,69,88,82,0,0,0,0,0,0,0,0,70,117,106,105,102,105,108,109,32,88,49,48,48,83,0,0,70,117,106,105,102,105,108,109,32,88,49,48,48,84,0,0,70,117,106,105,102,105,108,109,32,88,49,48,48,0,0,0,70,117,106,105,102,105,108,109,32,88,49,48,0,0,0,0,70,117,106,105,102,105,108,109,32,88,50,48,0,0,0,0,70,117,106,105,102,105,108,109,32,88,51,48,0,0,0,0,70,117,106,105,102,105,108,109,32,88,45,80,114,111,49,0,70,117,106,105,102,105,108,109,32,88,45,65,49,0,0,0,70,117,106,105,102,105,108,109,32,88,45,65,50,0,0,0,70,117,106,105,102,105,108,109,32,88,45,69,49,0,0,0,70,117,106,105,102,105,108,109,32,88,45,69,50,0,0,0,70,117,106,105,102,105,108,109,32,88,45,77,49,0,0,0,70,117,106,105,102,105,108,109,32,88,45,83,49,0,0,0,70,117,106,105,102,105,108,109,32,88,45,84,49,0,0,0,70,117,106,105,102,105,108,109,32,88,70,49,0,0,0,0,70,117,106,105,102,105,108,109,32,88,81,0,0,0,0,0,73,109,97,99,111,110,32,73,120,112,114,101,115,115,0,0,75,111,100,97,107,32,78,67,50,48,48,48,0,0,0,0,75,111,100,97,107,32,68,67,83,51,49,53,67,0,0,0,75,111,100,97,107,32,68,67,83,51,51,48,67,0,0,0,75,111,100,97,107,32,68,67,83,52,50,48,0,0,0,0,75,111,100,97,107,32,68,67,83,52,54,48,0,0,0,0,75,111,100,97,107,32,69,79,83,68,67,83,49,0,0,0,75,111,100,97,107,32,69,79,83,68,67,83,51,66,0,0,75,111,100,97,107,32,68,67,83,53,50,48,67,0,0,0,75,111,100,97,107,32,68,67,83,53,54,48,67,0,0,0,75,111,100,97,107,32,68,67,83,54,50,48,67,0,0,0,75,111,100,97,107,32,68,67,83,54,50,48,88,0,0,0,75,111,100,97,107,32,68,67,83,54,54,48,67,0,0,0,75,111,100,97,107,32,68,67,83,55,50,48,88,0,0,0,75,111,100,97,107,32,68,67,83,55,54,48,67,0,0,0,75,111,100,97,107,32,68,67,83,32,80,114,111,32,83,76,82,0,0,0,0,0,0,0,75,111,100,97,107,32,68,67,83,32,80,114,111,32,49,52,110,120,0,0,0,0,0,0,75,111,100,97,107,32,68,67,83,32,80,114,111,32,49,52,0,0,0,0,0,0,0,0,75,111,100,97,107,32,80,114,111,66,97,99,107,54,52,53,0,0,0,0,0,0,0,0,75,111,100,97,107,32,80,114,111,66,97,99,107,0,0,0,75,111,100,97,107,32,80,55,49,50,0,0,0,0,0,0,75,111,100,97,107,32,80,56,53,48,0,0,0,0,0,0,75,111,100,97,107,32,80,56,56,48,0,0,0,0,0,0,75,111,100,97,107,32,69,97,115,121,83,104,97,114,101,32,90,57,56,48,0,0,0,0,75,111,100,97,107,32,69,97,115,121,83,104,97,114,101,32,90,57,56,49,0,0,0,0,75,111,100,97,107,32,69,97,115,121,83,104,97,114,101,32,90,57,57,48,0,0,0,0,75,111,100,97,107,32,69,65,83,89,83,72,65,82,69,32,90,49,48,49,53,0,0,0,76,101,97,102,32,67,77,111,115,116,0,0,0,0,0,0,76,101,97,102,32,86,97,108,101,111,32,54,0,0,0,0,76,101,97,102,32,65,112,116,117,115,32,53,52,83,0,0,76,101,97,102,32,65,112,116,117,115,32,54,53,0,0,0,76,101,97,102,32,65,112,116,117,115,32,55,53,0,0,0,77,97,109,105,121,97,32,90,68,0,0,0,0,0,0,0,77,105,99,114,111,110,32,50,48,49,48,0,0,0,0,0,77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,53,0,0,0,0,0,0,0,0,77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,55,72,105,0,0,0,0,0,0,77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,55,0,0,0,0,0,0,0,0,77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,65,49,0,0,0,0,0,0,0,77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,65,50,48,48,0,0,0,0,0,77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,65,50,0,0,0,0,0,0,0,77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,90,50,0,0,0,0,0,0,0,77,105,110,111,108,116,97,32,68,89,78,65,88,32,53,0,77,105,110,111,108,116,97,32,68,89,78,65,88,32,55,0,77,111,116,111,114,111,108,97,32,80,73,88,76,0,0,0,78,105,107,111,110,32,68,49,48,48,0,0,0,0,0,0,78,105,107,111,110,32,68,49,72,0,0,0,0,0,0,0,78,105,107,111,110,32,68,49,88,0,0,0,0,0,0,0,78,105,107,111,110,32,68,49,0,0,0,0,0,0,0,0,78,105,107,111,110,32,68,50,48,48,0,0,0,0,0,0,78,105,107,111,110,32,68,50,72,0,0,0,0,0,0,0,78,105,107,111,110,32,68,50,88,0,0,0,0,0,0,0,78,105,107,111,110,32,68,51,48,48,48,0,0,0,0,0,78,105,107,111,110,32,68,51,49,48,48,0,0,0,0,0,78,105,107,111,110,32,68,51,50,48,48,0,0,0,0,0,78,105,107,111,110,32,68,51,51,48,48,0,0,0,0,0,78,105,107,111,110,32,68,51,48,48,0,0,0,0,0,0,78,105,107,111,110,32,68,51,88,0,0,0,0,0,0,0,78,105,107,111,110,32,68,51,83,0,0,0,0,0,0,0,78,105,107,111,110,32,68,51,0,0,0,0,0,0,0,0,78,105,107,111,110,32,68,52,48,88,0,0,0,0,0,0,78,105,107,111,110,32,68,52,48,0,0,0,0,0,0,0,78,105,107,111,110,32,68,52,83,0,0,0,0,0,0,0,78,105,107,111,110,32,68,52,0,0,0,0,0,0,0,0,78,105,107,111,110,32,68,102,0,0,0,0,0,0,0,0,78,105,107,111,110,32,68,53,48,48,48,0,0,0,0,0,78,105,107,111,110,32,68,53,49,48,48,0,0,0,0,0,78,105,107,111,110,32,68,53,50,48,48,0,0,0,0,0,78,105,107,111,110,32,68,53,51,48,48,0,0,0,0,0,78,105,107,111,110,32,68,53,53,48,48,0,0,0,0,0,78,105,107,111,110,32,68,53,48,0,0,0,0,0,0,0,78,105,107,111,110,32,68,54,48,48,0,0,0,0,0,0,78,105,107,111,110,32,68,54,49,48,0,0,0,0,0,0,78,105,107,111,110,32,68,54,48,0,0,0,0,0,0,0,78,105,107,111,110,32,68,55,48,48,48,0,0,0,0,0,78,105,107,111,110,32,68,55,49,48,48,0,0,0,0,0,78,105,107,111,110,32,68,55,50,48,48,0,0,0,0,0,78,105,107,111,110,32,68,55,53,48,0,0,0,0,0,0,78,105,107,111,110,32,68,55,48,48,0,0,0,0,0,0,78,105,107,111,110,32,68,55,48,0,0,0,0,0,0,0,78,105,107,111,110,32,68,56,49,48,0,0,0,0,0,0,78,105,107,111,110,32,68,56,48,48,0,0,0,0,0,0,78,105,107,111,110,32,68,56,48,0,0,0,0,0,0,0,78,105,107,111,110,32,68,57,48,0,0,0,0,0,0,0,78,105,107,111,110,32,69,55,48,48,0,0,0,0,0,0,78,105,107,111,110,32,69,56,48,48,0,0,0,0,0,0,78,105,107,111,110,32,69,57,53,48,0,0,0,0,0,0,78,105,107,111,110,32,69,57,57,53,0,0,0,0,0,0,78,105,107,111,110,32,69,50,49,48,48,0,0,0,0,0,78,105,107,111,110,32,69,50,53,48,48,0,0,0,0,0,78,105,107,111,110,32,69,51,50,48,48,0,0,0,0,0,78,105,107,111,110,32,69,52,51,48,48,0,0,0,0,0,78,105,107,111,110,32,69,52,53,48,48,0,0,0,0,0,78,105,107,111,110,32,69,53,48,48,48,0,0,0,0,0,78,105,107,111,110,32,69,53,52,48,48,0,0,0,0,0,78,105,107,111,110,32,69,53,55,48,48,0,0,0,0,0,78,105,107,111,110,32,69,56,52,48,48,0,0,0,0,0,78,105,107,111,110,32,69,56,55,48,48,0,0,0,0,0,78,105,107,111,110,32,69,56,56,48,48,0,0,0,0,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,65,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,80,51,51,48,0,0,0,0,0,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,80,51,52,48,0,0,0,0,0,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,80,54,48,48,48,0,0,0,0,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,80,55,48,48,48,0,0,0,0,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,80,55,49,48,48,0,0,0,0,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,80,55,55,48,48,0,0,0,0,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,80,55,56,48,48,0,0,0,0,0,78,105,107,111,110,32,49,32,86,51,0,0,0,0,0,0,78,105,107,111,110,32,49,32,74,52,0,0,0,0,0,0,78,105,107,111,110,32,49,32,74,53,0,0,0,0,0,0,78,105,107,111,110,32,49,32,83,50,0,0,0,0,0,0,78,105,107,111,110,32,49,32,86,50,0,0,0,0,0,0,78,105,107,111,110,32,49,32,74,51,0,0,0,0,0,0,78,105,107,111,110,32,49,32,65,87,49,0,0,0,0,0,78,105,107,111,110,32,49,32,0,0,0,0,0,0,0,0,79,108,121,109,112,117,115,32,67,53,48,53,48,0,0,0,79,108,121,109,112,117,115,32,67,53,48,54,48,0,0,0,79,108,121,109,112,117,115,32,67,55,48,55,48,0,0,0,79,108,121,109,112,117,115,32,67,55,48,0,0,0,0,0,79,108,121,109,112,117,115,32,67,56,48,0,0,0,0,0,79,108,121,109,112,117,115,32,69,45,49,48,0,0,0,0,79,108,121,109,112,117,115,32,69,45,49,0,0,0,0,0,79,108,121,109,112,117,115,32,69,45,50,48,0,0,0,0,79,108,121,109,112,117,115,32,69,45,51,48,48,0,0,0,79,108,121,109,112,117,115,32,69,45,51,51,48,0,0,0,79,108,121,109,112,117,115,32,69,45,51,48,0,0,0,0,79,108,121,109,112,117,115,32,69,45,51,0,0,0,0,0,79,108,121,109,112,117,115,32,69,45,52,48,48,0,0,0,79,108,121,109,112,117,115,32,69,45,52,49,48,0,0,0,79,108,121,109,112,117,115,32,69,45,52,50,48,0,0,0,79,108,121,109,112,117,115,32,69,45,52,53,48,0,0,0,79,108,121,109,112,117,115,32,69,45,53,48,48,0,0,0,79,108,121,109,112,117,115,32,69,45,53,49,48,0,0,0,79,108,121,109,112,117,115,32,69,45,53,50,48,0,0,0,79,108,121,109,112,117,115,32,69,45,53,0,0,0,0,0,79,108,121,109,112,117,115,32,69,45,54,48,48,0,0,0,79,108,121,109,112,117,115,32,69,45,54,50,48,0,0,0,79,108,121,109,112,117,115,32,69,45,80,49,0,0,0,0,79,108,121,109,112,117,115,32,69,45,80,50,0,0,0,0,79,108,121,109,112,117,115,32,69,45,80,51,0,0,0,0,79,108,121,109,112,117,115,32,69,45,80,53,0,0,0,0,79,108,121,109,112,117,115,32,69,45,80,76,49,115,0,0,79,108,121,109,112,117,115,32,69,45,80,76,49,0,0,0,79,108,121,109,112,117,115,32,69,45,80,76,50,0,0,0,79,108,121,109,112,117,115,32,69,45,80,76,51,0,0,0,79,108,121,109,112,117,115,32,69,45,80,76,53,0,0,0,79,108,121,109,112,117,115,32,69,45,80,76,54,0,0,0,79,108,121,109,112,117,115,32,69,45,80,76,55,0,0,0,79,108,121,109,112,117,115,32,69,45,80,77,49,0,0,0,79,108,121,109,112,117,115,32,69,45,80,77,50,0,0,0,79,108,121,109,112,117,115,32,69,45,77,49,48,0,0,0,79,108,121,109,112,117,115,32,69,45,77,49,0,0,0,0,79,108,121,109,112,117,115,32,69,45,77,53,77,97,114,107,73,73,0,0,0,0,0,0,79,108,121,109,112,117,115,32,69,45,77,53,0,0,0,0,79,108,121,109,112,117,115,32,83,72,45,50,0,0,0,0,79,108,121,109,112,117,115,32,83,80,51,53,48,0,0,0,79,108,121,109,112,117,115,32,83,80,51,0,0,0,0,0,79,108,121,109,112,117,115,32,83,80,53,48,48,85,90,0,79,108,121,109,112,117,115,32,83,80,53,49,48,85,90,0,79,108,121,109,112,117,115,32,83,80,53,53,48,85,90,0,79,108,121,109,112,117,115,32,83,80,53,54,48,85,90,0,79,108,121,109,112,117,115,32,83,80,53,55,48,85,90,0,79,108,121,109,112,117,115,32,83,84,89,76,85,83,49,0,79,108,121,109,112,117,115,32,84,71,45,52,0,0,0,0,79,108,121,109,112,117,115,32,88,90,45,49,48,0,0,0,79,108,121,109,112,117,115,32,88,90,45,49,0,0,0,0,79,108,121,109,112,117,115,32,88,90,45,50,0,0,0,0,80,101,110,116,97,120,32,42,105,115,116,32,68,76,50,0,80,101,110,116,97,120,32,42,105,115,116,32,68,76,0,0,80,101,110,116,97,120,32,42,105,115,116,32,68,83,50,0,80,101,110,116,97,120,32,42,105,115,116,32,68,83,0,0,80,101,110,116,97,120,32,42,105,115,116,32,68,0,0,0,80,101,110,116,97,120,32,75,49,48,68,0,0,0,0,0,80,101,110,116,97,120,32,75,49,0,0,0,0,0,0,0,80,101,110,116,97,120,32,75,50,48,68,0,0,0,0,0,80,101,110,116,97,120,32,75,50,48,48,68,0,0,0,0,80,101,110,116,97,120,32,75,50,48,48,48,0,0,0,0,80,101,110,116,97,120,32,75,45,109,0,0,0,0,0,0,80,101,110,116,97,120,32,75,45,120,0,0,0,0,0,0,80,101,110,116,97,120,32,75,45,114,0,0,0,0,0,0,80,101,110,116,97,120,32,75,45,51,0,0,0,0,0,0,80,101,110,116,97,120,32,75,45,53,32,73,73,0,0,0,80,101,110,116,97,120,32,75,45,53,0,0,0,0,0,0,80,101,110,116,97,120,32,75,45,55,0,0,0,0,0,0,80,101,110,116,97,120,32,75,45,83,49,0,0,0,0,0,80,101,110,116,97,120,32,75,45,83,50,0,0,0,0,0,80,101,110,116,97,120,32,81,45,83,49,0,0,0,0,0,80,101,110,116,97,120,32,54,52,53,68,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,67,77,49,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,56,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,56,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,50,56,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,51,48,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,51,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,52,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,53,48,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,55,0,0,0,0,0,0,0,76,101,105,99,97,32,86,45,76,85,88,49,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,49,48,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,49,0,0,0,0,0,0,0,0,76,101,105,99,97,32,68,73,71,73,76,85,88,32,51,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,67,49,0,0,0,0,0,0,0,76,101,105,99,97,32,68,73,71,73,76,85,88,32,50,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,49,48,48,0,0,0,0,0,76,101,105,99,97,32,68,45,76,85,88,32,40,84,121,112,32,49,48,57,41,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,70,49,0,0,0,0,0,0,0,76,101,105,99,97,32,67,32,40,84,121,112,32,49,49,50,41,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,49,0,0,0,0,0,0,0,76,101,105,99,97,32,68,45,76,85,88,50,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,50,0,0,0,0,0,0,0,76,101,105,99,97,32,68,45,76,85,88,51,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,51,0,0,0,0,0,0,0,76,101,105,99,97,32,68,45,76,85,88,32,52,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,53,0,0,0,0,0,0,0,76,101,105,99,97,32,68,45,76,85,88,32,53,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,55,0,0,0,0,0,0,0,76,101,105,99,97,32,68,45,76,85,88,32,54,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,48,48,48,0,0,0,0,76,101,105,99,97,32,86,45,76,85,88,32,40,84,121,112,32,49,49,52,41,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,48,48,0,0,0,0,0,76,101,105,99,97,32,86,45,76,85,88,32,50,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,53,48,0,0,0,0,0,76,101,105,99,97,32,86,45,76,85,88,32,51,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,50,48,48,0,0,0,0,0,76,101,105,99,97,32,86,45,76,85,88,32,52,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,88,49,53,48,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,49,48,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,49,0,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,50,0,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,51,0,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,53,0,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,54,0,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,49,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,50,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,51,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,53,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,54,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,55,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,72,49,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,72,50,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,72,51,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,72,52,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,77,49,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,77,53,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,88,49,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,88,55,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,84,90,54,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,90,83,52,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,84,90,55,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,90,83,53,0,0,0,0,0,0,0,80,104,97,115,101,32,79,110,101,32,72,32,50,48,0,0,80,104,97,115,101,32,79,110,101,32,72,32,50,53,0,0,80,104,97,115,101,32,79,110,101,32,80,32,50,0,0,0,80,104,97,115,101,32,79,110,101,32,80,32,51,48,0,0,80,104,97,115,101,32,79,110,101,32,80,32,52,53,0,0,80,104,97,115,101,32,79,110,101,32,80,52,48,0,0,0,80,104,97,115,101,32,79,110,101,32,80,54,53,0,0,0,80,104,111,116,114,111,110,32,66,67,50,45,72,68,0,0,82,101,100,32,79,110,101,0,83,97,109,115,117,110,103,32,69,88,49,0,0,0,0,0,83,97,109,115,117,110,103,32,69,88,50,70,0,0,0,0,83,97,109,115,117,110,103,32,69,75,45,71,78,49,50,48,0,0,0,0,0,0,0,0,83,97,109,115,117,110,103,32,78,88,32,109,105,110,105,0,83,97,109,115,117,110,103,32,78,88,51,48,48,48,0,0,83,97,109,115,117,110,103,32,78,88,51,48,0,0,0,0,83,97,109,115,117,110,103,32,78,88,50,48,48,48,0,0,83,97,109,115,117,110,103,32,78,88,50,0,0,0,0,0,83,97,109,115,117,110,103,32,78,88,49,48,48,48,0,0,83,97,109,115,117,110,103,32,78,88,49,49,48,48,0,0,83,97,109,115,117,110,103,32,78,88,49,49,0,0,0,0,83,97,109,115,117,110,103,32,78,88,49,48,0,0,0,0,83,97,109,115,117,110,103,32,78,88,53,48,48,0,0,0,83,97,109,115,117,110,103,32,78,88,53,0,0,0,0,0,83,97,109,115,117,110,103,32,78,88,49,0,0,0,0,0,83,97,109,115,117,110,103,32,87,66,50,48,48,48,0,0,83,97,109,115,117,110,103,32,71,88,45,49,0,0,0,0,83,97,109,115,117,110,103,32,71,88,50,48,0,0,0,0,83,97,109,115,117,110,103,32,83,56,53,0,0,0,0,0,83,105,110,97,114,0,0,0,83,111,110,121,32,68,83,67,45,70,56,50,56,0,0,0,83,111,110,121,32,68,83,67,45,82,49,0,0,0,0,0,83,111,110,121,32,68,83,67,45,86,51,0,0,0,0,0,83,111,110,121,32,68,83,67,45,82,88,49,48,48,77,0,83,111,110,121,32,68,83,67,45,82,88,49,48,48,0,0,83,111,110,121,32,68,83,67,45,82,88,49,48,0,0,0,83,111,110,121,32,68,83,67,45,82,88,49,0,0,0,0,83,111,110,121,32,68,83,76,82,45,65,49,48,48,0,0,83,111,110,121,32,68,83,76,82,45,65,50,57,48,0,0,83,111,110,121,32,68,83,76,82,45,65,50,0,0,0,0,83,111,110,121,32,68,83,76,82,45,65,51,48,48,0,0,83,111,110,121,32,68,83,76,82,45,65,51,51,48,0,0,83,111,110,121,32,68,83,76,82,45,65,51,53,48,0,0,83,111,110,121,32,68,83,76,82,45,65,51,56,48,0,0,83,111,110,121,32,68,83,76,82,45,65,51,57,48,0,0,83,111,110,121,32,68,83,76,82,45,65,52,53,48,0,0,83,111,110,121,32,68,83,76,82,45,65,53,56,48,0,0,83,111,110,121,32,68,83,76,82,45,65,53,48,48,0,0,83,111,110,121,32,68,83,76,82,45,65,53,0,0,0,0,83,111,110,121,32,68,83,76,82,45,65,55,48,48,0,0,83,111,110,121,32,68,83,76,82,45,65,56,53,48,0,0,83,111,110,121,32,68,83,76,82,45,65,57,48,48,0,0,83,111,110,121,32,73,76,67,65,45,55,55,77,50,0,0,83,111,110,121,32,73,76,67,69,45,55,77,50,0,0,0,83,111,110,121,32,73,76,67,69,45,55,83,0,0,0,0,83,111,110,121,32,73,76,67,69,45,55,82,0,0,0,0,83,111,110,121,32,73,76,67,69,45,55,0,0,0,0,0,83,111,110,121,32,73,76,67,69,0,0,0,0,0,0,0,83,111,110,121,32,78,69,88,45,53,78,0,0,0,0,0,83,111,110,121,32,78,69,88,45,53,82,0,0,0,0,0,83,111,110,121,32,78,69,88,45,53,84,0,0,0,0,0,83,111,110,121,32,78,69,88,45,51,78,0,0,0,0,0,83,111,110,121,32,78,69,88,45,51,0,0,0,0,0,0,83,111,110,121,32,78,69,88,45,53,0,0,0,0,0,0,83,111,110,121,32,78,69,88,45,54,0,0,0,0,0,0,83,111,110,121,32,78,69,88,45,55,0,0,0,0,0,0,83,111,110,121,32,78,69,88,0,0,0,0,0,0,0,0,83,111,110,121,32,83,76,84,45,65,51,51,0,0,0,0,83,111,110,121,32,83,76,84,45,65,51,53,0,0,0,0,83,111,110,121,32,83,76,84,45,65,51,55,0,0,0,0,83,111,110,121,32,83,76,84,45,65,53,53,0,0,0,0,83,111,110,121,32,83,76,84,45,65,53,55,0,0,0,0,83,111,110,121,32,83,76,84,45,65,53,56,0,0,0,0,83,111,110,121,32,83,76,84,45,65,54,53,0,0,0,0,83,111,110,121,32,83,76,84,45,65,55,55,0,0,0,0,83,111,110,121,32,83,76,84,45,65,57,57,0,0,0,0,37,115,32,37,115,0,0,0,15,156,179,63,84,116,100,190,169,19,208,189,153,187,6,191,18,165,189,63,150,67,139,60,52,128,55,188,226,233,149,60,245,74,105,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,64,63,0,0,224,191,0,0,128,190,0,0,128,190,0,0,64,63,0,0,64,63,0,0,128,190,0,0,128,190,0,0,224,191,0,0,64,63,0,0,16,64,211,77,242,63,25,4,214,190,70,182,243,190,164,112,253,190,170,241,226,63,4,86,142,190,14,45,130,191,20,174,39,191,12,2,43,64,0,0,0,0,0,0,0,0,0,0,0,0,6,216,247,191,235,116,230,63,253,103,185,191,144,101,37,64,0,227,179,63,115,99,6,191,155,3,148,190,129,62,209,62,75,60,154,191,240,136,138,63,91,63,60,64,83,203,232,191,58,12,207,6,4,0,0,0,250,255,0,0,58,12,7,8,4,0,0,0,250,255,0,0,58,12,15,9,4,0,0,0,250,255,0,0,98,12,55,8,18,0,0,0,214,255,20,0,98,12,63,9,18,0,13,0,214,255,235,255,105,12,63,9,0,0,0,0,255,255,0,0,232,12,154,9,0,0,0,0,255,255,0,0,2,13,159,9,9,0,0,0,251,255,0,0,2,13,175,9,9,0,0,0,239,255,4,0,42,13,107,7,15,0,0,0,212,255,20,0,42,13,187,8,15,0,0,0,212,255,20,0,42,13,207,9,15,0,10,0,212,255,235,255,106,14,191,10,3,0,0,0,248,255,253,255,126,14,191,10,0,0,0,0,253,255,0,0,140,14,146,9,0,0,0,0,0,0,254,255,186,14,183,9,17,0,0,0,212,255,19,0,186,14,239,10,17,0,15,0,212,255,237,255,40,15,122,8,6,0,0,0,250,255,0,0,220,15,202,11,0,0,0,0,0,0,254,255,194,16,87,9,3,0,0,0,248,255,255,255,234,16,135,9,17,0,15,0,212,255,237,255,156,17,146,11,0,0,0,0,253,255,252,255,156,17,2,13,0,0,0,0,253,255,250,255,0,0,0,0,152,7,136,5,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,96,8,24,6,4,0,8,0,52,0,2,0,0,0,0,0,0,0,25,0,0,0,176,8,176,5,48,0,6,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,72,9,192,6,12,0,6,0,52,0,2,0,0,0,0,0,0,0,0,0,0,0,112,10,176,7,12,0,6,0,44,0,2,0,0,0,0,0,0,0,0,0,0,0,80,12,20,8,64,0,12,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,88,12,40,9,44,0,12,0,4,0,4,0,0,0,0,0,0,0,0,0,0,0,16,13,180,9,4,0,6,0,52,0,6,0,0,0,0,0,0,0,0,0,0,0,188,13,24,9,42,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,14,56,9,74,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,14,224,10,52,0,12,0,8,0,12,0,0,0,0,0,0,0,0,0,0,0,104,15,62,10,30,0,18,0,6,0,2,0,0,0,0,0,0,0,0,0,0,0,108,15,62,10,42,0,18,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,144,15,62,10,76,0,20,0,0,0,2,0,14,0,0,0,0,0,0,0,0,0,8,16,232,11,48,0,12,0,24,0,12,0,0,0,0,0,0,0,0,0,0,0,20,16,130,8,4,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,16,212,10,192,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,16,52,12,104,0,11,0,8,0,65,0,0,0,0,0,0,0,0,0,0,0,80,16,246,11,96,0,17,0,8,0,0,0,0,0,16,0,0,0,7,0,73,0,96,16,246,11,96,0,17,0,24,0,0,0,0,0,16,0,0,0,0,0,73,0,216,16,60,11,22,0,18,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,17,58,11,62,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,17,138,11,90,0,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,17,20,13,12,0,10,0,36,0,12,0,0,0,0,0,0,0,18,0,73,0,128,17,38,13,80,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,17,38,13,80,0,50,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,160,18,188,13,96,0,16,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,224,18,132,12,62,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,18,156,12,62,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,19,21,13,98,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,246,12,142,0,45,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,160,20,200,13,72,0,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,20,188,13,142,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,20,0,14,126,0,100,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,240,20,188,13,158,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,21,124,14,72,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,126,14,96,0,17,0,0,0,0,0,0,0,16,0,0,0,0,0,73,0,80,22,190,14,62,0,20,0,10,0,2,0,0,0,0,0,0,0,0,0,0,0,160,22,220,14,158,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,23,110,15,122,0,80,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,208,23,216,15,72,0,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,34,32,23,160,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,1,69,79,83,32,49,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,69,79,83,45,49,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,1,69,79,83,32,50,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,116,1,69,79,83,45,49,68,32,77,97,114,107,32,73,73,0,0,0,0,0,0,52,2,69,79,83,32,51,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,50,2,69,79,83,45,49,68,32,77,97,114,107,32,73,73,32,78,0,0,0,0,144,1,69,79,83,32,52,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,105,1,69,79,83,45,49,68,32,77,97,114,107,32,73,73,73,0,0,0,0,0,97,2,69,79,83,32,53,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,129,2,69,79,83,45,49,68,32,77,97,114,107,32,73,86,0,0,0,0,0,0,135,2,69,79,83,32,54,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,103,1,69,79,83,45,49,68,83,0,0,0,0,0,0,0,0,0,0,0,0,0,37,3,69,79,83,32,55,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,112,1,69,79,83,32,51,48,48,68,0,0,0,0,0,0,0,0,0,0,0,0,136,1,69,79,83,45,49,68,115,32,77,97,114,107,32,73,73,0,0,0,0,0,118,1,69,79,83,32,52,53,48,68,0,0,0,0,0,0,0,0,0,0,0,0,21,2,69,79,83,45,49,68,115,32,77,97,114,107,32,73,73,73,0,0,0,0,137,1,69,79,83,32,51,53,48,68,0,0,0,0,0,0,0,0,0,0,0,0,36,3,69,79,83,45,49,68,32,67,0,0,0,0,0,0,0,0,0,0,0,0,54,2,69,79,83,32,52,48,48,68,0,0,0,0,0,0,0,0,0,0,0,0,105,2,69,79,83,45,49,68,32,88,0,0,0,0,0,0,0,0,0,0,0,0,82,2,69,79,83,32,53,48,48,68], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+474416);
/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,19,2,69,79,83,32,53,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,2,69,79,83,32,53,53,48,68,0,0,0,0,0,0,0,0,0,0,0,0,24,2,69,79,83,32,53,68,32,77,97,114,107,32,73,73,0,0,0,0,0,0,134,2,69,79,83,32,54,48,48,68,0,0,0,0,0,0,0,0,0,0,0,0,133,2,69,79,83,32,53,68,32,77,97,114,107,32,73,73,73,0,0,0,0,0,1,3,69,79,83,32,54,53,48,68,0,0,0,0,0,0,0,0,0,0,0,0,2,3,69,79,83,32,54,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,3,69,79,83,32,55,48,48,68,0,0,0,0,0,0,0,0,0,0,0,0,80,2,69,79,83,32,55,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,3,69,79,83,32,55,53,48,68,0,0,0,0,0,0,0,0,0,0,0,0,137,2,69,79,83,32,55,68,32,77,97,114,107,32,73,73,0,0,0,0,0,0,71,3,69,79,83,32,55,54,48,68,0,0,0,0,0,0,0,0,0,0,0,0,84,2,69,79,83,32,49,48,48,48,68,0,0,0,0,0,0,0,0,0,0,0,136,2,69,79,83,32,49,49,48,48,68,0,0,0,0,0,0,0,0,0,0,0,39,3,69,79,83,32,49,50,48,48,68,0,0,0,0,0,0,0,0,0,0,0,70,3,69,79,83,32,49,48,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,68,83,67,45,82,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,68,83,76,82,45,65,49,48,48,0,0,0,0,0,0,0,0,0,0,0,1,1,68,83,76,82,45,65,57,48,48,0,0,0,0,0,0,0,0,0,0,0,2,1,68,83,76,82,45,65,55,48,48,0,0,0,0,0,0,0,0,0,0,0,3,1,68,83,76,82,45,65,50,48,48,0,0,0,0,0,0,0,0,0,0,0,4,1,68,83,76,82,45,65,51,53,48,0,0,0,0,0,0,0,0,0,0,0,5,1,68,83,76,82,45,65,51,48,48,0,0,0,0,0,0,0,0,0,0,0,8,1,68,83,76,82,45,65,51,51,48,0,0,0,0,0,0,0,0,0,0,0,9,1,68,83,76,82,45,65,50,51,48,0,0,0,0,0,0,0,0,0,0,0,10,1,68,83,76,82,45,65,50,57,48,0,0,0,0,0,0,0,0,0,0,0,13,1,68,83,76,82,45,65,56,53,48,0,0,0,0,0,0,0,0,0,0,0,17,1,68,83,76,82,45,65,53,53,48,0,0,0,0,0,0,0,0,0,0,0,18,1,68,83,76,82,45,65,53,48,48,0,0,0,0,0,0,0,0,0,0,0,19,1,68,83,76,82,45,65,52,53,48,0,0,0,0,0,0,0,0,0,0,0,22,1,78,69,88,45,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,1,78,69,88,45,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,1,83,76,84,45,65,51,51,0,0,0,0,0,0,0,0,0,0,0,0,0,25,1,83,76,84,45,65,53,53,86,0,0,0,0,0,0,0,0,0,0,0,0,26,1,68,83,76,82,45,65,53,54,48,0,0,0,0,0,0,0,0,0,0,0,27,1,68,83,76,82,45,65,53,56,48,0,0,0,0,0,0,0,0,0,0,0,28,1,78,69,88,45,67,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,1,83,76,84,45,65,51,53,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,83,76,84,45,65,54,53,86,0,0,0,0,0,0,0,0,0,0,0,0,31,1,83,76,84,45,65,55,55,86,0,0,0,0,0,0,0,0,0,0,0,0,32,1,78,69,88,45,53,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,1,78,69,88,45,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,1,83,76,84,45,65,51,55,0,0,0,0,0,0,0,0,0,0,0,0,0,36,1,83,76,84,45,65,53,55,0,0,0,0,0,0,0,0,0,0,0,0,0,37,1,78,69,88,45,70,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,1,83,76,84,45,65,57,57,86,0,0,0,0,0,0,0,0,0,0,0,0,39,1,78,69,88,45,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,1,78,69,88,45,53,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,1,68,83,67,45,82,88,49,48,48,0,0,0,0,0,0,0,0,0,0,0,42,1,68,83,67,45,82,88,49,0,0,0,0,0,0,0,0,0,0,0,0,0,46,1,73,76,67,69,45,51,48,48,48,0,0,0,0,0,0,0,0,0,0,0,47,1,83,76,84,45,65,53,56,0,0,0,0,0,0,0,0,0,0,0,0,0,49,1,78,69,88,45,51,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,1,73,76,67,69,45,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,1,78,69,88,45,53,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,1,68,83,67,45,82,88,49,48,48,77,50,0,0,0,0,0,0,0,0,0,53,1,68,83,67,45,82,88,49,48,0,0,0,0,0,0,0,0,0,0,0,0,54,1,68,83,67,45,82,88,49,82,0,0,0,0,0,0,0,0,0,0,0,0,55,1,73,76,67,69,45,55,82,0,0,0,0,0,0,0,0,0,0,0,0,0,56,1,73,76,67,69,45,54,48,48,48,0,0,0,0,0,0,0,0,0,0,0,57,1,73,76,67,69,45,53,48,48,48,0,0,0,0,0,0,0,0,0,0,0,61,1,68,83,67,45,82,88,49,48,48,77,51,0,0,0,0,0,0,0,0,0,62,1,73,76,67,69,45,55,83,0,0,0,0,0,0,0,0,0,0,0,0,0,63,1,73,76,67,65,45,55,55,77,50,0,0,0,0,0,0,0,0,0,0,0,83,1,73,76,67,69,45,53,49,48,48,0,0,0,0,0,0,0,0,0,0,0,84,1,73,76,67,69,45,55,77,50,0,0,0,0,0,0,0,0,0,0,0,0,90,1,73,76,67,69,45,81,88,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,4,0,3,0,0,0,0,0,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,48,56,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,22,0,112,5,16,4,0,0,0,0,0,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,49,52,53,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,29,0,64,6,176,4,0,0,0,0,0,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,50,48,49,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,82,77,0,28,10,166,7,0,0,0,0,0,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,82,77,0,28,10,166,7,0,0,0,0,0,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,80,164,154,0,28,10,166,7,0,0,0,0,9,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,164,154,0,28,10,166,7,0,0,0,0,9,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,208,137,246,0,200,12,165,9,0,0,0,0,9,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,56,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,243,0,192,12,144,9,0,0,0,0,8,97,0,1,65,103,102,97,80,104,111,116,111,0,68,67,45,56,51,51,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,247,146,0,228,9,110,7,0,0,0,0,96,97,0,0,65,108,99,97,116,101,108,0,0,0,53,48,51,53,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,197,43,0,104,5,12,4,0,0,0,0,64,73,0,8,66,97,117,109,101,114,0,0,0,0,84,88,71,49,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,4,80,215,80,0,96,9,230,6,12,12,44,2,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,68,51,48,48,0,0,0,0,0,0,0,96,255,99,0,104,10,176,7,4,4,44,4,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,52,54,48,0,0,0,0,0,0,0,0,64,76,100,0,112,10,176,7,12,8,44,0,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,49,48,0,0,0,0,0,0,0,0,96,133,101,0,112,10,200,7,10,6,42,2,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,53,51,48,0,0,0,0,0,0,0,0,240,168,117,0,72,11,88,8,44,8,4,0,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,51,32,73,83,0,0,0,0,0,0,0,16,174,140,0,80,12,36,9,36,12,4,0,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,50,48,0,0,0,0,0,0,0,0,104,10,141,0,80,12,42,9,12,7,44,13,40,73,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,52,55,48,0,0,0,0,0,0,0,0,224,204,157,0,8,13,176,9,6,5,32,3,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,55,50,48,32,73,83,0,0,0,0,0,16,111,158,0,16,13,180,9,12,6,44,6,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,51,48,0,0,0,0,0,0,0,0,88,135,197,0,152,14,212,10,12,6,52,6,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,52,48,0,0,0,0,0,0,0,0,16,151,238,0,8,16,232,11,48,12,24,12,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,53,48,0,0,0,0,0,0,0,0,240,4,236,0,136,14,212,10,6,12,30,0,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,49,49,48,32,73,83,0,0,0,0,240,9,237,0,144,14,218,10,12,9,44,9,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,49,50,48,32,73,83,0,0,0,0,64,162,28,1,240,15,232,11,24,12,24,12,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,50,48,32,73,83,0,0,0,0,0,240,234,35,1,72,16,244,11,92,16,4,1,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,50,50,48,32,72,83,0,0,0,0,224,183,78,1,112,17,204,12,25,10,73,12,40,22,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,51,48,32,73,83,0,0,0,0,0,0,67,121,1,96,18,176,13,8,16,56,8,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,51,51,48,48,32,73,83,0,0,0,0,32,40,30,0,96,6,187,4,0,2,0,1,0,148,0,1,67,97,115,105,111,0,0,0,0,0,81,86,45,50,48,48,48,85,88,0,0,0,0,0,0,0,0,0,0,0,0,0,96,25,49,0,32,8,11,6,0,0,10,1,0,148,0,1,67,97,115,105,111,0,0,0,0,0,81,86,45,51,42,48,48,69,88,0,0,0,0,0,0,0,0,0,0,0,0,0,128,226,94,0,25,10,132,7,0,0,9,0,0,148,0,1,67,97,115,105,111,0,0,0,0,0,81,86,45,53,55,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,119,0,51,11,133,8,0,0,34,36,0,22,0,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,54,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,44,0,85,6,184,4,0,0,1,0,0,148,7,13,67,97,115,105,111,0,0,0,0,0,69,88,45,83,50,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,130,75,0,42,8,42,6,0,0,32,34,0,148,7,1,67,97,115,105,111,0,0,0,0,0,69,88,45,83,49,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,92,0,42,9,184,6,2,0,32,0,0,148,7,1,67,97,115,105,111,0,0,0,0,0,81,86,45,82,52,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,82,113,0,8,10,136,7,0,0,0,0,0,148,0,1,67,97,115,105,111,0,0,0,0,0,69,88,45,80,53,48,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,233,114,0,42,10,137,7,0,0,22,0,0,148,7,1,67,97,115,105,111,0,0,0,0,0,81,86,45,82,53,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,115,0,42,10,140,7,0,0,32,0,0,148,7,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,99,115,0,42,10,145,7,0,0,25,0,0,22,7,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,53,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,78,118,0,42,10,194,7,0,0,32,26,0,148,7,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,53,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,142,0,42,11,124,8,0,0,14,30,0,148,7,1,67,97,115,105,111,0,0,0,0,0,69,88,45,80,54,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,81,165,0,42,12,15,9,0,0,27,0,0,148,0,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,55,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,118,165,0,42,12,17,9,0,0,25,0,0,148,0,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,55,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,135,167,0,42,12,46,9,0,0,32,32,0,148,7,1,67,97,115,105,111,0,0,0,0,0,69,88,45,80,55,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,214,187,0,213,12,194,9,0,0,6,30,0,148,0,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,56,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,190,0,0,13,198,9,0,0,47,35,0,148,0,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,236,0,170,14,192,10,0,0,82,0,0,148,0,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,49,48,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,29,1,0,16,228,11,0,0,24,0,80,148,7,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,82,49,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,63,117,0,212,8,164,6,0,0,0,0,13,148,0,1,67,97,115,105,111,0,0,0,0,0,81,86,45,52,48,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,12,0,0,4,1,3,0,1,0,0,0,73,0,0,67,114,101,97,116,105,118,101,0,0,80,67,45,67,65,77,32,54,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,230,183,1,32,17,216,12,0,0,0,0,36,97,0,0,68,74,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,231,0,0,18,216,12,0,0,0,0,0,148,0,0,77,97,116,114,105,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,58,0,64,6,176,4,0,0,0,0,65,73,0,0,70,111,99,117,108,117,115,0,0,0,53,51,49,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,4,0,128,2,224,1,0,0,0,0,0,148,0,0,71,101,110,101,114,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,0,0,0,1,244,0,1,1,6,1,0,141,0,0,75,111,100,97,107,0,0,0,0,0,68,67,50,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,1,0,0,2,244,0,1,1,10,1,0,141,0,0,75,111,100,97,107,0,0,0,0,0,68,67,50,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,25,0,0,6,52,4,0,52,0,0,0,97,0,0,75,111,100,97,107,0,0,0,0,0,68,67,83,50,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,119,63,0,34,9,243,6,1,33,1,2,0,148,0,0,75,111,100,97,107,0,0,0,0,0,67,51,51,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,158,131,63,0,34,9,243,6,1,33,1,2,0,148,0,0,75,111,100,97,107,0,0,0,0,0,67,51,51,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,12,0,74,34,0,208,4,144,3,0,0,16,0,0,0,0,0,75,111,100,97,107,0,0,0,0,0,67,51,51,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,51,0,208,4,144,3,0,0,16,0,0,0,0,0,75,111,100,97,107,0,0,0,0,0,67,51,51,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,11,94,0,48,11,104,8,0,0,0,0,0,148,0,0,75,111,100,97,107,0,0,0,0,0,67,54,48,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,23,94,0,48,11,104,8,0,0,0,0,0,148,0,0,75,111,100,97,107,0,0,0,0,0,67,54,48,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,12,0,8,7,0,128,2,224,1,0,0,0,0,0,0,0,0,75,111,100,97,107,0,0,0,0,0,67,54,48,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,27,139,0,32,11,86,8,0,0,0,0,0,0,0,0,75,111,100,97,107,0,0,0,0,0,67,54,48,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,201,186,0,200,15,214,11,2,0,0,13,0,73,0,0,75,111,100,97,107,0,0,0,0,0,49,50,77,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,68,187,0,200,15,214,11,2,0,0,13,0,73,0,0,75,111,100,97,107,0,0,0,0,0,49,50,77,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,123,128,168,18,1,160,15,184,11,0,0,0,0,0,0,0,0,75,111,100,97,107,0,0,0,0,0,49,50,77,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,9,0,128,2,224,1,0,3,0,0,64,148,0,0,75,111,100,97,107,0,0,0,0,0,75,65,73,45,48,51,52,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,234,0,128,12,96,9,0,0,0,0,96,22,0,0,76,101,110,111,118,111,0,0,0,0,65,56,50,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,71,59,0,72,6,183,4,0,0,0,0,96,22,0,0,77,105,99,114,111,110,0,0,0,0,50,48,49,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,12,0,96,17,0,254,5,218,3,0,0,0,0,0,97,0,0,77,105,110,111,108,116,97,0,0,0,82,68,49,55,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,4,32,24,0,25,5,201,3,0,0,18,6,6,30,4,1,78,105,107,111,110,0,0,0,0,0,69,57,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,37,0,102,6,180,4,0,0,22,1,6,75,5,1,78,105,107,111,110,0,0,0,0,0,69,57,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,44,0,80,6,189,4,0,0,0,7,30,148,0,1,78,105,107,111,110,0,0,0,0,0,69,50,49,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,72,0,16,8,5,6,0,0,0,1,6,225,0,1,78,105,107,111,110,0,0,0,0,0,69,57,57,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,72,0,16,8,6,6,0,0,0,0,30,148,0,1,78,105,107,111,110,0,0,0,0,0,69,51,55,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,89,0,240,8,173,6,0,0,0,1,6,180,0,1,78,105,107,111,110,0,0,0,0,0,69,52,53,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,89,0,240,8,174,6,0,0,0,0,6,22,0,1,78,105,107,111,110,0,0,0,0,0,69,52,51,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,113,0,16,10,133,7,0,0,0,1,6,180,0,1,78,105,107,111,110,0,0,0,0,0,69,53,48,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,137,0,16,11,70,8,0,0,0,0,30,148,7,1,78,105,107,111,110,0,0,0,0,0,67,79,79,76,80,73,88,32,83,54,0,0,0,0,0,0,0,0,0,0,0,0,0,160,90,0,0,9,182,6,0,0,0,0,30,22,0,0,79,108,121,109,112,117,115,0,0,0,67,55,55,48,85,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,128,48,0,16,8,4,6,0,0,0,0,0,148,0,1,80,101,110,116,97,120,0,0,0,0,79,112,116,105,111,32,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,73,0,42,8,8,6,0,0,22,0,0,148,7,1,80,101,110,116,97,120,0,0,0,0,79,112,116,105,111,32,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,75,93,0,42,9,201,6,0,0,22,0,0,148,7,1,80,101,110,116,97,120,0,0,0,0,79,112,116,105,111,32,83,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,163,0,0,12,18,9,0,0,0,21,30,148,0,1,80,101,110,116,97,120,0,0,0,0,79,112,116,105,111,32,55,53,48,90,0,0,0,0,0,0,0,0,0,0,0,0,0,72,63,0,128,7,56,4,0,0,0,0,0,73,0,0,80,104,111,116,114,111,110,0,0,0,66,67,50,45,72,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,89,63,0,128,7,56,4,0,0,0,0,0,73,0,0,80,104,111,116,114,111,110,0,0,0,66,67,50,45,72,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,38,202,0,160,8,184,11,0,0,0,0,13,97,0,0,80,105,120,101,108,105,110,107,0,0,65,55,56,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,8,0,6,0,0,0,0,96,97,0,0,82,111,118,101,114,83,104,111,116,0,51,51,50,48,65,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,193,4,0,132,2,228,1,0,0,0,0,0,22,0,8,83,84,32,77,105,99,114,111,0,0,83,84,86,54,56,48,32,86,71,65,0,0,0,0,0,0,0,0,0,0,0,0,0,163,245,0,216,12,144,9,0,0,24,0,9,148,0,1,83,97,109,115,117,110,103,0,0,0,83,56,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,247,0,240,12,144,9,0,0,48,0,9,148,0,1,83,97,109,115,117,110,103,0,0,0,83,56,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,56,1,64,14,248,10,0,0,0,0,13,148,5,1,83,97,109,115,117,110,103,0,0,0,87,66,53,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,110,1,160,15,184,11,0,0,0,0,13,148,5,1,83,97,109,115,117,110,103,0,0,0,87,66,53,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,192,0,0,12,0,8,0,0,0,0,33,97,0,0,83,105,110,97,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,68,2,252,1,240,15,240,15,0,0,0,0,33,97,0,0,83,105,110,97,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,68,88,165,2,240,15,64,21,0,0,0,0,33,97,0,0,83,105,110,97,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,0,128,21,0,96,5,0,4,0,0,1,0,0,73,0,0,83,111,110,121,0,0,0,0,0,0,88,67,68,45,83,88,57,49,48,67,82,0,0,0,0,0,0,0,0,0,0,0,0,0,43,0,96,5,0,4,0,0,1,0,97,73,0,0,83,111,110,121,0,0,0,0,0,0,88,67,68,45,83,88,57,49,48,67,82,0,0,0,0,0,0,0,0,0,0,0,40,126,7,0,192,242,6,0,56,126,7,0,64,126,7,0,72,126,7,0,88,126,7,0,96,126,7,0,104,126,7,0,56,253,6,0,120,126,7,0,128,126,7,0,16,242,6,0,216,241,6,0,136,126,7,0,144,126,7,0,216,254,6,0,96,242,6,0,152,126,7,0,160,126,7,0,248,90,7,0,168,126,7,0,0,0,0,0,65,103,102,97,80,104,111,116,111,0,0,0,0,0,0,0,67,97,115,105,111,0,0,0,69,112,115,111,110,0,0,0,70,117,106,105,102,105,108,109,0,0,0,0,0,0,0,0,77,97,109,105,121,97,0,0,77,105,110,111,108,116,97,0,77,111,116,111,114,111,108,97,0,0,0,0,0,0,0,0,75,111,110,105,99,97,0,0,76,101,105,99,97,0,0,0,79,108,121,109,112,117,115,0,80,101,110,116,97,120,0,0,83,97,109,115,117,110,103,0,83,105,103,109,97,0,0,0,83,111,110,121,0,0,0,0,0,0,0,0,0,0,0,0,72,69,65,80,67,67,68,82,0,0,0,0,0,0,0,0,255,216,255,225,0,0,0,0,69,120,105,102,0,0,0,0,65,82,69,67,79,89,75,0,67,111,110,116,97,120,0,0,78,32,68,105,103,105,116,97,108,0,0,0,0,0,0,0,80,88,78,0,0,0,0,0,76,111,103,105,116,101,99,104,0,0,0,0,0,0,0,0,70,111,116,111,109,97,110,32,80,105,120,116,117,114,97,0,113,107,116,107,0,0,0,0,65,112,112,108,101,0,0,0,81,117,105,99,107,84,97,107,101,32,49,48,48,0,0,0,113,107,116,110,0,0,0,0,81,117,105,99,107,84,97,107,101,32,49,53,48,0,0,0,102,116,121,112,113,116,32,32,32,0,0,0,0,0,0,0,0,1,0,1,0,64,0,0,78,79,75,73,65,82,65,87,0,0,0,0,0,0,0,0,78,79,75,73,65,0,0,0,65,82,82,73,0,0,0,0,88,80,68,83,0,0,0,0,82,69,68,49,0,0,0,0,82,101,100,0,0,0,0,0,79,110,101,0,0,0,0,0,68,83,67,45,73,109,97,103,101,0,0,0,0,0,0,0,80,87,65,68,0,0,0,0,0,77,82,77,0,0,0,0,70,79,86,98,0,0,0,0,67,73,0,0,0,0,0,0,111,118,0,0,0,0,0,0,82,80,95,79,86,0,0,0,66,82,67,77,110,0,0,0,32,68,73,71,73,84,65,76,32,67,65,77,69,82,65,0,70,73,76,69,32,86,69,82,83,73,79,78,0,0,0,0,70,105,110,101,80,105,120,32,0,0,0,0,0,0,0,0,68,105,103,105,116,97,108,32,67,97,109,101,114,97,32,0,75,45,114,0,0,0,0,0,75,45,120,0,0,0,0,0,75,45,53,0,0,0,0,0,75,45,55,0,0,0,0,0,75,45,51,0,0,0,0,0,54,52,53,68,0,0,0,0,75,65,73,45,48,51,52,48,0,0,0,0,0,0,0,0,67,54,48,51,0,0,0,0,80,111,119,101,114,83,104,111,116,32,54,48,48,0,0,0,80,111,119,101,114,83,104,111,116,32,65,53,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,53,32,90,111,111,109,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,53,48,0,0,0,80,111,119,101,114,83,104,111,116,32,80,114,111,55,48,0,80,111,119,101,114,83,104,111,116,32,80,114,111,57,48,32,73,83,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,71,49,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,49,48,0,0,83,50,32,73,83,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,50,50,48,32,72,83,0,0,0,0,0,0,69,79,83,32,68,50,48,48,48,67,0,0,0,0,0,0,68,49,0,0,0,0,0,0,68,49,88,0,0,0,0,0,68,52,48,88,0,0,0,0,68,54,48,0,0,0,0,0,68,56,48,0,0,0,0,0,68,51,48,48,48,0,0,0,68,51,0,0,0,0,0,0,68,51,83,0,0,0,0,0,68,55,48,48,0,0,0,0,68,51,49,48,48,0,0,0,68,53,48,48,48,0,0,0,68,57,48,0,0,0,0,0,68,53,49,48,48,0,0,0,68,55,48,48,48,0,0,0,67,79,79,76,80,73,88,32,65,0,0,0,0,0,0,0,68,51,50,48,48,0,0,0,68,54,0,0,0,0,0,0,68,56,48,48,0,0,0,0,68,52,0,0,0,0,0,0,68,102,0,0,0,0,0,0,68,52,48,0,0,0,0,0,68,53,48,0,0,0,0,0,68,55,48,0,0,0,0,0,68,49,48,48,0,0,0,0,68,50,48,48,0,0,0,0,68,50,72,0,0,0,0,0,68,50,88,0,0,0,0,0,68,51,48,48,0,0,0,0,67,79,79,76,80,73,88,32,80,0,0,0,0,0,0,0,49,32,0,0,0,0,0,0,69,57,57,53,0,0,0,0,69,50,53,48,48,0,0,0,79,112,116,105,111,32,51,51,87,82,0,0,0,0,0,0,68,105,77,65,71,69,32,90,50,0,0,0,0,0,0,0,73,83,71,0,0,0,0,0,83,50,80,114,111,0,0,0,72,83,53,48,69,88,82,0,70,57,48,48,69,88,82,0,75,68,45,52,48,48,90,0,75,68,45,53,49,48,90,0,68,105,77,65,71,69,32,65,0,0,0,0,0,0,0,0,65,76,80,72,65,0,0,0,68,89,78,65,88,0,0,0,77,65,88,88,85,77,0,0,68,89,78,65,88,32,37,45,49,48,115,0,0,0,0,0,68,105,77,65,71,69,32,71,0,0,0,0,0,0,0,0,42,105,115,116,32,68,0,0,42,105,115,116,32,68,83,0,69,88,49,0,0,0,0,0,87,66,50,48,48,48,0,0,87,66,53,53,48,0,0,0,69,88,50,70,0,0,0,0,83,84,86,54,56,48,32,86,71,65,0,0,0,0,0,0,78,57,53,0,0,0,0,0,54,52,48,120,52,56,48,0,86,57,54,67,0,0,0,0,82,66,84,71,0,0,0,0,67,97,116,99,104,76,105,103,104,116,0,0,0,0,0,0,148,97,73,22,0,0,0,0,67,55,55,48,85,90,0,0,69,45,51,48,48,0,0,0,69,45,53,48,48,0,0,0,69,45,51,51,48,0,0,0,83,80,53,53,48,85,90,0,68,83,67,45,70,56,50,56,0,0,0,0,0,0,0,0,82,71,66,69,0,0,0,0,68,83,67,45,86,51,0,0,82,88,49,0,0,0,0,0,65,57,57,0,0,0,0,0,68,83,76,82,45,65,51,53,48,0,0,0,0,0,0,0,80,73,88,76,0,0,0,0,67,51,51,48,0,0,0,0,49,50,77,80,0,0,0,0,69,97,115,121,83,104,97,114,101,0,0,0,0,0,0,0,78,67,50,48,48,48,0,0,69,79,83,68,67,83,0,0,68,67,83,52,0,0,0,0,68,67,83,52,54,48,65,0,68,67,83,54,54,48,77,0,68,67,83,55,54,48,77,0,50,48,88,0,0,0,0,0,77,89,67,89,0,0,0,0,68,67,50,53,0,0,0,0,52,48,0,0,0,0,0,0,68,67,52,48,0,0,0,0,68,67,53,48,0,0,0,0,68,67,49,50,48,0,0,0,68,67,83,50,48,48,0,0,81,117,105,99,107,84,97,107,101,0,0,0,0,0,0,0,50,48,48,0,0,0,0,0,37,100,120,37,100,0,0,0,81,117,105,99,107,116,97,107,101,0,0,0,0,0,0,0,37,115,58,32,89,111,117,32,109,117,115,116,32,108,105,110,107,32,100,99,114,97,119,32,119,105,116,104,32,37,115,33,33,10,0,0,0,0,0,0,108,105,98,106,97,115,112,101,114,0,0,0,0,0,0,0,108,105,98,106,112,101,103,0,82,71,66,71,0,0,0,0,71,77,67,89,0,0,0,0,64,220,213,171,200,232,219,63,99,183,207,42,51,165,216,63,114,191,67,81,160,79,194,63,248,198,16,0,28,123,204,63,152,162,92,26,191,240,230,63,225,126,192,3,3,8,175,63,129,91,119,243,84,135,140,63,145,42,138,87,89,219,184,63,1,252,83,170,68,217,230,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,217,175,59,221,121,226,230,63,168,112,4,169,20,59,210,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,187,13,106,191,181,19,165,63,150,35,100,32,207,174,238,63,27,217,149,150,145,250,226,63,102,78,151,197,196,230,217,63,161,246,91,59,81,18,98,63,210,253,156,130,252,108,184,63,157,246,148,156,19,251,234,63,253,219,101,191,238,116,175,63,68,20,147,55,192,204,135,63,239,171,114,161,242,175,177,63,49,94,243,170,206,106,237,63,74,240,134,52,42,240,224,63,119,245,42,50,58,32,213,63,218,226,26,159,201,254,193,63,207,17,249,46,165,46,185,63,165,107,38,223,108,243,235,63,224,73,11,151,85,216,156,63,167,236,244,131,186,72,145,63,235,1,243,144,41,31,190,63,71,4,227,224,210,177,235,63,40,133,7,0,112,133,7,0,184,133,7,0,0,134,7,0,0,1,0,0,0,0,0,0,120,134,7,0,128,134,7,0,152,134,7,0,168,134,7,0,184,134,7,0,0,0,0,0,115,82,71,66,0,0,0,0,65,100,111,98,101,32,82,71,66,32,40,49,57,57,56,41,0,0,0,0,0,0,0,0,87,105,100,101,71,97,109,117,116,32,68,54,53,0,0,0,80,114,111,80,104,111,116,111,32,68,54,53,0,0,0,0,88,89,90,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,16,2,114,116,110,109,32,66,71,82,32,90,89,88,0,0,0,0,0,0,0,0,0,0,0,0,112,115,99,97,0,0,0,0,0,0,0,0,101,110,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,246,0,0,0,0,1,0,45,211,0,0,10,0,0,0,116,114,112,99,0,0,0,0,36,0,0,0,99,115,101,100,0,0,0,0,40,0,0,0,116,112,116,119,0,0,0,0,20,0,0,0,116,112,107,98,0,0,0,0,20,0,0,0,67,82,84,114,0,0,0,0,14,0,0,0,67,82,84,103,0,0,0,0,14,0,0,0,67,82,84,98,0,0,0,0,14,0,0,0,90,89,88,114,0,0,0,0,20,0,0,0,90,89,88,103,0,0,0,0,20,0,0,0,90,89,88,98,0,0,0,0,20,0,0,0,0,0,0,0,81,243,0,0,0,0,1,0,204,22,1,0,0,0,0,0,118,114,117,99,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,99,111,110,118,101,114,116,95,116,111,95,114,103,98,40,41,0,0,0,0,0,0,0,0,97,117,116,111,45,103,101,110,101,114,97,116,101,100,32,98,121,32,100,99,114,97,119,0,66,117,105,108,100,105,110,103,32,104,105,115,116,111,103,114,97,109,115,46,46,46,10,0,67,111,110,118,101,114,116,105,110,103,32,116,111,32,37,115,32,99,111,108,111,114,115,112,97,99,101,46,46,46,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+484656);
/* memory initializer */ allocate([82,111,116,97,116,105,110,103,32,105,109,97,103,101,32,52,53,32,100,101,103,114,101,101,115,46,46,46,10,0,0,0,102,117,106,105,95,114,111,116,97,116,101,40,41,0,0,0,83,116,114,101,116,99,104,105,110,103,32,116,104,101,32,105,109,97,103,101,46,46,46,10,0,0,0,0,0,0,0,0,115,116,114,101,116,99,104,40,41,0,0,0,0,0,0,0,100,99,114,97,119,32,118,57,46,50,54,0,0,0,0,0,37,48,52,100,58,37,48,50,100,58,37,48,50,100,32,37,48,50,100,58,37,48,50,100,58,37,48,50,100,0,0,0,49,50,52,51,53,56,54,55,0,0,0,0,0,0,0,0,106,112,101,103,95,116,104,117,109,98,40,41,0,0,0,0,255,225,32,32,69,120,105,102,0,0,0,0,0,0,0,0,119,114,105,116,101,95,112,112,109,95,116,105,102,102,40,41,0,0,0,0,0,0,0,0,80,55,10,87,73,68,84,72,32,37,100,10,72,69,73,71,72,84,32,37,100,10,68,69,80,84,72,32,37,100,10,77,65,88,86,65,76,32,37,100,10,84,85,80,76,84,89,80,69,32,37,115,10,69,78,68,72,68,82,10,0,0,0,0,80,37,100,10,37,100,32,37,100,10,37,100,10,0,0,0,84,90,61,85,84,67,0,0,10,82,97,119,32,112,104,111,116,111,32,100,101,99,111,100,101,114,32,34,100,99,114,97,119,34,32,118,37,115,0,0,57,46,50,54,0,0,0,0,10,98,121,32,68,97,118,101,32,67,111,102,102,105,110,44,32,100,99,111,102,102,105,110,32,97,32,99,121,98,101,114,99,111,109,32,111,32,110,101,116,10,0,0,0,0,0,0,10,85,115,97,103,101,58,32,32,37,115,32,91,79,80,84,73,79,78,93,46,46,46,32,91,70,73,76,69,93,46,46,46,10,10,0,0,0,0,0,45,118,32,32,32,32,32,32,32,32,80,114,105,110,116,32,118,101,114,98,111,115,101,32,109,101,115,115,97,103,101,115,0,0,0,0,0,0,0,0,45,99,32,32,32,32,32,32,32,32,87,114,105,116,101,32,105,109,97,103,101,32,100,97,116,97,32,116,111,32,115,116,97,110,100,97,114,100,32,111,117,116,112,117,116,0,0,0,45,101,32,32,32,32,32,32,32,32,69,120,116,114,97,99,116,32,101,109,98,101,100,100,101,100,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,0,0,0,0,0,0,45,105,32,32,32,32,32,32,32,32,73,100,101,110,116,105,102,121,32,102,105,108,101,115,32,119,105,116,104,111,117,116,32,100,101,99,111,100,105,110,103,32,116,104,101,109,0,0,45,105,32,45,118,32,32,32,32,32,73,100,101,110,116,105,102,121,32,102,105,108,101,115,32,97,110,100,32,115,104,111,119,32,109,101,116,97,100,97,116,97,0,0,0,0,0,0,45,122,32,32,32,32,32,32,32,32,67,104,97,110,103,101,32,102,105,108,101,32,100,97,116,101,115,32,116,111,32,99,97,109,101,114,97,32,116,105,109,101,115,116,97,109,112,0,45,119,32,32,32,32,32,32,32,32,85,115,101,32,99,97,109,101,114,97,32,119,104,105,116,101,32,98,97,108,97,110,99,101,44,32,105,102,32,112,111,115,115,105,98,108,101,0,45,97,32,32,32,32,32,32,32,32,65,118,101,114,97,103,101,32,116,104,101,32,119,104,111,108,101,32,105,109,97,103,101,32,102,111,114,32,119,104,105,116,101,32,98,97,108,97,110,99,101,0,0,0,0,0,45,65,32,60,120,32,121,32,119,32,104,62,32,65,118,101,114,97,103,101,32,97,32,103,114,101,121,32,98,111,120,32,102,111,114,32,119,104,105,116,101,32,98,97,108,97,110,99,101,0,0,0,0,0,0,0,45,114,32,60,114,32,103,32,98,32,103,62,32,83,101,116,32,99,117,115,116,111,109,32,119,104,105,116,101,32,98,97,108,97,110,99,101,0,0,0,43,77,47,45,77,32,32,32,32,32,85,115,101,47,100,111,110,39,116,32,117,115,101,32,97,110,32,101,109,98,101,100,100,101,100,32,99,111,108,111,114,32,109,97,116,114,105,120,0,0,0,0,0,0,0,0,45,67,32,60,114,32,98,62,32,32,67,111,114,114,101,99,116,32,99,104,114,111,109,97,116,105,99,32,97,98,101,114,114,97,116,105,111,110,0,0,45,80,32,60,102,105,108,101,62,32,70,105,120,32,116,104,101,32,100,101,97,100,32,112,105,120,101,108,115,32,108,105,115,116,101,100,32,105,110,32,116,104,105,115,32,102,105,108,101,0,0,0,0,0,0,0,45,75,32,60,102,105,108,101,62,32,83,117,98,116,114,97,99,116,32,100,97,114,107,32,102,114,97,109,101,32,40,49,54,45,98,105,116,32,114,97,119,32,80,71,77,41,0,0,45,107,32,60,110,117,109,62,32,32,83,101,116,32,116,104,101,32,100,97,114,107,110,101,115,115,32,108,101,118,101,108,0,0,0,0,0,0,0,0,45,83,32,60,110,117,109,62,32,32,83,101,116,32,116,104,101,32,115,97,116,117,114,97,116,105,111,110,32,108,101,118,101,108,0,0,0,0,0,0,45,110,32,60,110,117,109,62,32,32,83,101,116,32,116,104,114,101,115,104,111,108,100,32,102,111,114,32,119,97,118,101,108,101,116,32,100,101,110,111,105,115,105,110,103,0,0,0,45,72,32,91,48,45,57,93,32,32,72,105,103,104,108,105,103,104,116,32,109,111,100,101,32,40,48,61,99,108,105,112,44,32,49,61,117,110,99,108,105,112,44,32,50,61,98,108,101,110,100,44,32,51,43,61,114,101,98,117,105,108,100,41,0,0,0,0,0,0,0,0,45,116,32,91,48,45,55,93,32,32,70,108,105,112,32,105,109,97,103,101,32,40,48,61,110,111,110,101,44,32,51,61,49,56,48,44,32,53,61,57,48,67,67,87,44,32,54,61,57,48,67,87,41,0,0,0,45,111,32,91,48,45,53,93,32,32,79,117,116,112,117,116,32,99,111,108,111,114,115,112,97,99,101,32,40,114,97,119,44,115,82,71,66,44,65,100,111,98,101,44,87,105,100,101,44,80,114,111,80,104,111,116,111,44,88,89,90,41,0,0,45,100,32,32,32,32,32,32,32,32,68,111,99,117,109,101,110,116,32,109,111,100,101,32,40,110,111,32,99,111,108,111,114,44,32,110,111,32,105,110,116,101,114,112,111,108,97,116,105,111,110,41,0,0,0,0,45,68,32,32,32,32,32,32,32,32,68,111,99,117,109,101,110,116,32,109,111,100,101,32,119,105,116,104,111,117,116,32,115,99,97,108,105,110,103,32,40,116,111,116,97,108,108,121,32,114,97,119,41,0,0,0,45,106,32,32,32,32,32,32,32,32,68,111,110,39,116,32,115,116,114,101,116,99,104,32,111,114,32,114,111,116,97,116,101,32,114,97,119,32,112,105,120,101,108,115,0,0,0,0,45,87,32,32,32,32,32,32,32,32,68,111,110,39,116,32,97,117,116,111,109,97,116,105,99,97,108,108,121,32,98,114,105,103,104,116,101,110,32,116,104,101,32,105,109,97,103,101,0,0,0,0,0,0,0,0,45,98,32,60,110,117,109,62,32,32,65,100,106,117,115,116,32,98,114,105,103,104,116,110,101,115,115,32,40,100,101,102,97,117,108,116,32,61,32,49,46,48,41,0,0,0,0,0,45,103,32,60,112,32,116,115,62,32,83,101,116,32,99,117,115,116,111,109,32,103,97,109,109,97,32,99,117,114,118,101,32,40,100,101,102,97,117,108,116,32,61,32,50,46,50,50,50,32,52,46,53,41,0,0,45,113,32,91,48,45,51,93,32,32,83,101,116,32,116,104,101,32,105,110,116,101,114,112,111,108,97,116,105,111,110,32,113,117,97,108,105,116,121,0,45,104,32,32,32,32,32,32,32,32,72,97,108,102,45,115,105,122,101,32,99,111,108,111,114,32,105,109,97,103,101,32,40,116,119,105,99,101,32,97,115,32,102,97,115,116,32,97,115,32,34,45,113,32,48,34,41,0,0,0,0,0,0,0,45,102,32,32,32,32,32,32,32,32,73,110,116,101,114,112,111,108,97,116,101,32,82,71,71,66,32,97,115,32,102,111,117,114,32,99,111,108,111,114,115,0,0,0,0,0,0,0,45,109,32,60,110,117,109,62,32,32,65,112,112,108,121,32,97,32,51,120,51,32,109,101,100,105,97,110,32,102,105,108,116,101,114,32,116,111,32,82,45,71,32,97,110,100,32,66,45,71,0,0,0,0,0,0,45,115,32,91,48,46,46,78,45,49,93,32,83,101,108,101,99,116,32,111,110,101,32,114,97,119,32,105,109,97,103,101,32,111,114,32,34,97,108,108,34,32,102,114,111,109,32,101,97,99,104,32,102,105,108,101,0,0,0,0,0,0,0,0,45,54,32,32,32,32,32,32,32,32,87,114,105,116,101,32,49,54,45,98,105,116,32,105,110,115,116,101,97,100,32,111,102,32,56,45,98,105,116,0,45,52,32,32,32,32,32,32,32,32,76,105,110,101,97,114,32,49,54,45,98,105,116,44,32,115,97,109,101,32,97,115,32,34,45,54,32,45,87,32,45,103,32,49,32,49,34,0,45,84,32,32,32,32,32,32,32,32,87,114,105,116,101,32,84,73,70,70,32,105,110,115,116,101,97,100,32,111,102,32,80,80,77,0,0,0,0,0,110,98,114,107,83,116,113,109,72,65,67,103,0,0,0,0,49,49,52,49,49,49,49,49,49,52,50,50,0,0,0,0,78,111,110,45,110,117,109,101,114,105,99,32,97,114,103,117,109,101,110,116,32,116,111,32,34,45,37,99,34,10,0,0,97,108,108,0,0,0,0,0,85,110,107,110,111,119,110,32,111,112,116,105,111,110,32,34,45,37,99,34,46,10,0,0,78,111,32,102,105,108,101,115,32,116,111,32,112,114,111,99,101,115,115,46,10,0,0,0,87,105,108,108,32,110,111,116,32,119,114,105,116,101,32,97,110,32,105,109,97,103,101,32,116,111,32,116,104,101,32,116,101,114,109,105,110,97,108,33,10,0,0,0,0,0,0,0,37,115,32,104,97,115,32,110,111,32,116,105,109,101,115,116,97,109,112,46,10,0,0,0,37,49,48,108,100,37,49,48,100,32,37,115,10,0,0,0,37,115,32,116,105,109,101,32,115,101,116,32,116,111,32,37,100,46,10,0,0,0,0,0,0,0,0,0,0,0,0,0,37,115,32,104,97,115,32,110,111,32,116,104,117,109,98,110,97,105,108,46,10,0,0,0,10,70,105,108,101,110,97,109,101,58,32,37,115,10,0,0,84,105,109,101,115,116,97,109,112,58,32,37,115,0,0,0,67,97,109,101,114,97,58,32,37,115,32,37,115,10,0,0,79,119,110,101,114,58,32,37,115,10,0,0,0,0,0,0,68,78,71,32,86,101,114,115,105,111,110,58,32,0,0,0,37,100,37,99,0,0,0,0,73,83,79,32,115,112,101,101,100,58,32,37,100,10,0,0,83,104,117,116,116,101,114,58,32,0,0,0,0,0,0,0,49,47,0,0,0,0,0,0,37,48,46,49,102,32,115,101,99,10,0,0,0,0,0,0,65,112,101,114,116,117,114,101,58,32,102,47,37,48,46,49,102,10,0,0,0,0,0,0,70,111,99,97,108,32,108,101,110,103,116,104,58,32,37,48,46,49,102,32,109,109,10,0,69,109,98,101,100,100,101,100,32,73,67,67,32,112,114,111,102,105,108,101,58,32,37,115,10,0,0,0,0,0,0,0,121,101,115,0,0,0,0,0,110,111,0,0,0,0,0,0,78,117,109,98,101,114,32,111,102,32,114,97,119,32,105,109,97,103,101,115,58,32,37,100,10,0,0,0,0,0,0,0,80,105,120,101,108,32,65,115,112,101,99,116,32,82,97,116,105,111,58,32,37,48,46,54,102,10,0,0,0,0,0,0,84,104,117,109,98,32,115,105,122,101,58,32,32,37,52,100,32,120,32,37,100,10,0,0,70,117,108,108,32,115,105,122,101,58,32,32,32,37,52,100,32,120,32,37,100,10,0,0,67,97,110,110,111,116,32,100,101,99,111,100,101,32,102,105,108,101,32,37,115,10,0,0,73,109,97,103,101,32,115,105,122,101,58,32,32,37,52,100,32,120,32,37,100,10,0,0,79,117,116,112,117,116,32,115,105,122,101,58,32,37,52,100,32,120,32,37,100,10,0,0,82,97,119,32,99,111,108,111,114,115,58,32,37,100,0,0,10,70,105,108,116,101,114,32,112,97,116,116,101,114,110,58,32,0,0,0,0,0,0,0,10,68,97,121,108,105,103,104,116,32,109,117,108,116,105,112,108,105,101,114,115,58,0,0,10,67,97,109,101,114,97,32,109,117,108,116,105,112,108,105,101,114,115,58,0,0,0,0,37,115,32,105,115,32,97,32,37,115,32,37,115,32,105,109,97,103,101,46,10,0,0,0,109,97,105,110,40,41,0,0,76,111,97,100,105,110,103,32,37,115,32,37,115,32,105,109,97,103,101,32,102,114,111,109,32,37,115,32,46,46,46,10,0,0,0,0,0,0,0,0,37,115,58,32,34,45,115,32,37,100,34,32,114,101,113,117,101,115,116,115,32,97,32,110,111,110,101,120,105,115,116,101,110,116,32,105,109,97,103,101,33,10,0,0,0,0,0,0,46,116,105,102,102,0,0,0,46,112,103,109,0,46,112,112,109,0,46,112,112,109,0,46,112,97,109,0,0,0,0,0,115,116,97,110,100,97,114,100,32,111,117,116,112,117,116,0,95,37,48,42,100,0,0,0,46,116,104,117,109,98,0,0,119,98,0,0,0,0,0,0,87,114,105,116,105,110,103,32,100,97,116,97,32,116,111,32,37,115,32,46,46,46,10,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+624664);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  
  function _tmpnam(s, dir, prefix) {
      // char *tmpnam(char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpnam.html
      // NOTE: The dir and prefix arguments are for internal use only.
      dir = dir || '/tmp';
      var folder = FS.findObject(dir);
      if (!folder || !folder.isFolder) {
        dir = '/tmp';
        folder = FS.findObject(dir);
        if (!folder || !folder.isFolder) return 0;
      }
      var name = prefix || 'file';
      do {
        name += String.fromCharCode(65 + (Math.random() * 25)|0);
      } while (name in folder.contents);
      var result = dir + '/' + name;
      if (!_tmpnam.buffer) _tmpnam.buffer = _malloc(256);
      if (!s) s = _tmpnam.buffer;
      assert(result.length <= 255);
      writeAsciiToMemory(result, s);
      return s;
    }
  
  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }function _tmpfile() {
      // FILE *tmpfile(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpfile.html
      // TODO: Delete the created file on closing.
      if (!_tmpfile.mode) {
        _tmpfile.mode = allocate(intArrayFromString('w+'), 'i8', ALLOC_NORMAL);
      }
      return _fopen(_tmpnam(0), _tmpfile.mode);
    }

  
  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }


  var _emscripten_check_longjmp=true;

   
  Module["_strncpy"] = _strncpy;

  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  var _emscripten_cleanup_setjmp=true;

  var _emscripten_postinvoke=true;

  function _swab(src, dest, nbytes) {
      // void swab(const void *restrict src, void *restrict dest, ssize_t nbytes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/swab.html
      if (nbytes < 0) return;
      nbytes -= nbytes % 2;
      for (var i = 0; i < nbytes; i += 2) {
        var first = HEAP8[(((src)+(i))>>0)];
        var second = HEAP8[(((src)+(i + 1))>>0)];
        HEAP8[(((dest)+(i))>>0)]=second;
        HEAP8[(((dest)+(i + 1))>>0)]=first;
      }
    }


  
  function _htonl(value) {
      return ((value & 0xff) << 24) + ((value & 0xff00) << 8) +
             ((value & 0xff0000) >>> 8) + ((value & 0xff000000) >>> 24);
    }function _ntohl() {
  return _htonl.apply(null, arguments)
  }

  
  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;function _realloc(ptr, size) {
      // Very simple, inefficient implementation - if you use a real malloc, best to use
      // a real realloc with it
      if (!size) {
        if (ptr) _free(ptr);
        return 0;
      }
      var ret = _malloc(size);
      if (ptr) {
        _memcpy(ret, ptr, size); // might be some invalid reads
        _free(ptr);
      }
      return ret;
    }
  Module["_realloc"] = _realloc; 
  Module["_saveSetjmp"] = _saveSetjmp;

  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _mktime(tmPtr) {
      _tzset();
      var date = new Date(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
  
      // There's an ambiguous hour when the time goes back; the tm_isdst field is
      // used to disambiguate it.  Date() basically guesses, so we fix it up if it
      // guessed wrong, or fill in tm_isdst with the guess if it's -1.
      var dst = HEAP32[(((tmPtr)+(32))>>2)];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset); // DST is in December in South
      if (dst < 0) {
        HEAP32[(((tmPtr)+(32))>>2)]=Number(winterOffset != guessedOffset);
      } else if ((dst > 0) != (winterOffset != guessedOffset)) {
        var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
        var trueOffset = dst > 0 ? summerOffset : winterOffset;
        // Don't try setMinutes(date.getMinutes() + ...) -- it's messed up.
        date.setTime(date.getTime() + (trueOffset - guessedOffset)*60000);
      }
  
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
  
      return (date.getTime() / 1000)|0;
    }

  
  function _htons(value) {
      return ((value & 0xff) << 8) + ((value & 0xff00) >> 8);
    }function _ntohs() {
  return _htons.apply(null, arguments)
  }

  function _putc() {
  return _fputc.apply(null, arguments)
  }

  
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

   
  Module["_bitshift64Ashr"] = _bitshift64Ashr;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

   
  Module["_memset"] = _memset;

  var _emscripten_prep_setjmp=true;

  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getc_unlocked() {
  return _fgetc.apply(null, arguments)
  }

  var _BDtoIHigh=true;

  
  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }


  function _utime(path, times) {
      // int utime(const char *path, const struct utimbuf *times);
      // http://pubs.opengroup.org/onlinepubs/009695399/basedefs/utime.h.html
      var time;
      if (times) {
        // NOTE: We don't keep track of access timestamps.
        var offset = 4;
        time = HEAP32[(((times)+(offset))>>2)];
        time *= 1000;
      } else {
        time = Date.now();
      }
      path = Pointer_stringify(path);
      try {
        FS.utime(path, time, time);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }


  
  
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }
  
  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }
  
  function ___errno_location() {
      return ___errno_state;
    }function _perror(s) {
      // void perror(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/perror.html
      var stdout = HEAP32[((_stdout)>>2)];
      if (s) {
        _fputs(s, stdout);
        _fputc(58, stdout);
        _fputc(32, stdout);
      }
      var errnum = HEAP32[((___errno_location())>>2)];
      _puts(_strerror(errnum));
    }

  
  
  
  var ___tm_formatted=allocate(44, "i8", ALLOC_STATIC);function _asctime_r(tmPtr, buf) {
      var date = {
        tm_sec: HEAP32[((tmPtr)>>2)],
        tm_min: HEAP32[(((tmPtr)+(4))>>2)],
        tm_hour: HEAP32[(((tmPtr)+(8))>>2)],
        tm_mday: HEAP32[(((tmPtr)+(12))>>2)],
        tm_mon: HEAP32[(((tmPtr)+(16))>>2)],
        tm_year: HEAP32[(((tmPtr)+(20))>>2)],
        tm_wday: HEAP32[(((tmPtr)+(24))>>2)]
      };
      var days = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ];
      var months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                     "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
      var s = days[date.tm_wday] + ' ' + months[date.tm_mon] +
          (date.tm_mday < 10 ? '  ' : ' ') + date.tm_mday +
          (date.tm_hour < 10 ? ' 0' : ' ') + date.tm_hour +
          (date.tm_min < 10 ? ':0' : ':') + date.tm_min +
          (date.tm_sec < 10 ? ':0' : ':') + date.tm_sec +
          ' ' + (1900 + date.tm_year) + "\n";
      writeStringToMemory(s, buf);
      return buf;
    }function _ctime_r(time, buf) {
      var stack = Runtime.stackSave();
      var rv = _asctime_r(_localtime_r(time, Runtime.stackAlloc(44)), buf);
      Runtime.stackRestore(stack);
      return rv;
    }function _ctime(timer) {
      return _ctime_r(timer, ___tm_current);
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  
  
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)>>0)]=next;
                if (next === 0) return i > 0 ? fields : fields-1; // we failed to read the full length of this field
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
  
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
  
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
  
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
  
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)>>0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)>>0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
  
            // write out null-terminating character
            HEAP8[((argPtr++)>>0)]=0;
            formatIndex += match[0].length;
            
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var quarter = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
            if (format[formatIndex] == 'h') {
              quarter = true;
              formatIndex++;
            }
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return fields; // Stop here.
          if (suppressAssignment) continue;
  
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          var base = 10;
          switch (type) {
            case 'X': case 'x':
              base = 16;
            case 'd': case 'u': case 'i':
              if (quarter) {
                HEAP8[((argPtr)>>0)]=parseInt(text, base);
              } else if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, base);
              } else if (longLong) {
                (tempI64 = [parseInt(text, base)>>>0,(tempDouble=parseInt(text, base),(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, base);
              }
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text);
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text);
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))>>0)]=array[j];
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }
  
  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }function _fscanf(stream, format, varargs) {
      // int fscanf(FILE *restrict stream, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        return -1;
      }
      var buffer = [];
      function get() {
        var c = _fgetc(stream);
        buffer.push(c);
        return c;
      };
      function unget() {
        _ungetc(buffer.pop(), stream);
      };
      return __scanString(format, get, unget, varargs);
    }

  var _emscripten_preinvoke=true;

  var _BItoD=true;

  var _llvm_pow_f64=Math_pow;


  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }



  
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }function _ftello() {
  return _ftell.apply(null, arguments)
  }

   
  Module["_strcat"] = _strcat;


   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }


  function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return 0;
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))>>0)]=byte_;
      }
      HEAP8[(((s)+(i))>>0)]=0;
      return s;
    }

  function _isatty(fildes) {
      // int isatty(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/isatty.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      // HACK - implement tcgetattr
      if (!stream.tty) {
        ___setErrNo(ERRNO_CODES.ENOTTY);
        return 0;
      }
      return 1;
    }


  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.eof);
    }


  var _fabs=Math_abs;

  var _floor=Math_floor;


  function _getc() {
  return _fgetc.apply(null, arguments)
  }

  var _sqrt=Math_sqrt;


  var _abs=Math_abs;

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  var _emscripten_get_longjmp_result=true;


  function _getcwd(buf, size) {
      // char *getcwd(char *buf, size_t size);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getcwd.html
      if (size == 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var cwd = FS.cwd();
      if (size < cwd.length + 1) {
        ___setErrNo(ERRNO_CODES.ERANGE);
        return 0;
      } else {
        writeAsciiToMemory(cwd, buf);
        return buf;
      }
    }

  var _BDtoILow=true;

  var _log=Math_log;

  var _emscripten_setjmp=true;

  var _cos=Math_cos;

  function _fseeko() {
  return _fseek.apply(null, arguments)
  }

  function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP32[((_stdout)>>2)]);
    }

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }

   
  Module["_strcpy"] = _strcpy;

  var _exp=Math_exp;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }



FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_dd(x) { Module["printErr"]("Invalid function pointer called with signature 'dd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_dd(index,a1) {
  try {
    return Module["dynCall_dd"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_di": nullFunc_di, "nullFunc_vi": nullFunc_vi, "nullFunc_dd": nullFunc_dd, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iii": nullFunc_iii, "invoke_iiii": invoke_iiii, "invoke_di": invoke_di, "invoke_vi": invoke_vi, "invoke_dd": invoke_dd, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_iii": invoke_iii, "_fabs": _fabs, "_exp": _exp, "_llvm_pow_f64": _llvm_pow_f64, "_send": _send, "_fgetc": _fgetc, "_getcwd": _getcwd, "_ntohl": _ntohl, "_fread": _fread, "_ctime": _ctime, "_ctime_r": _ctime_r, "_lseek": _lseek, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_getc": _getc, "_putenv": _putenv, "_ungetc": _ungetc, "_feof": _feof, "_floor": _floor, "_ntohs": _ntohs, "___buildEnvironment": ___buildEnvironment, "_longjmp": _longjmp, "_fflush": _fflush, "_htonl": _htonl, "_time": _time, "_localtime": _localtime, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "__reallyNegative": __reallyNegative, "_localtime_r": _localtime_r, "_fscanf": _fscanf, "_open": _open, "_sbrk": _sbrk, "_tzset": _tzset, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_perror": _perror, "_sysconf": _sysconf, "_utime": _utime, "___setErrNo": ___setErrNo, "_putc": _putc, "_fseeko": _fseeko, "_putchar": _putchar, "_abort": _abort, "_cos": _cos, "_fseek": _fseek, "_asctime_r": _asctime_r, "_pread": _pread, "_getc_unlocked": _getc_unlocked, "_printf": _printf, "_fclose": _fclose, "_sqrt": _sqrt, "_log": _log, "_htons": _htons, "_write": _write, "_fsync": _fsync, "_ftell": _ftell, "___errno_location": ___errno_location, "_puts": _puts, "_recv": _recv, "_swab": _swab, "_ftello": _ftello, "_mkport": _mkport, "__scanString": __scanString, "_fgets": _fgets, "__getFloat": __getFloat, "_fputc": _fputc, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_isatty": _isatty, "_mktime": _mktime, "_fwrite": _fwrite, "_tmpnam": _tmpnam, "_fprintf": _fprintf, "_strerror": _strerror, "_emscripten_longjmp": _emscripten_longjmp, "_abs": _abs, "__formatString": __formatString, "_fputs": _fputs, "_tmpfile": _tmpfile, "_fopen": _fopen, "_close": _close, "_read": _read, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_dd=env.nullFunc_dd;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_di=env.invoke_di;
  var invoke_vi=env.invoke_vi;
  var invoke_dd=env.invoke_dd;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iii=env.invoke_iii;
  var _fabs=env._fabs;
  var _exp=env._exp;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _send=env._send;
  var _fgetc=env._fgetc;
  var _getcwd=env._getcwd;
  var _ntohl=env._ntohl;
  var _fread=env._fread;
  var _ctime=env._ctime;
  var _ctime_r=env._ctime_r;
  var _lseek=env._lseek;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _getc=env._getc;
  var _putenv=env._putenv;
  var _ungetc=env._ungetc;
  var _feof=env._feof;
  var _floor=env._floor;
  var _ntohs=env._ntohs;
  var ___buildEnvironment=env.___buildEnvironment;
  var _longjmp=env._longjmp;
  var _fflush=env._fflush;
  var _htonl=env._htonl;
  var _time=env._time;
  var _localtime=env._localtime;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var __reallyNegative=env.__reallyNegative;
  var _localtime_r=env._localtime_r;
  var _fscanf=env._fscanf;
  var _open=env._open;
  var _sbrk=env._sbrk;
  var _tzset=env._tzset;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _perror=env._perror;
  var _sysconf=env._sysconf;
  var _utime=env._utime;
  var ___setErrNo=env.___setErrNo;
  var _putc=env._putc;
  var _fseeko=env._fseeko;
  var _putchar=env._putchar;
  var _abort=env._abort;
  var _cos=env._cos;
  var _fseek=env._fseek;
  var _asctime_r=env._asctime_r;
  var _pread=env._pread;
  var _getc_unlocked=env._getc_unlocked;
  var _printf=env._printf;
  var _fclose=env._fclose;
  var _sqrt=env._sqrt;
  var _log=env._log;
  var _htons=env._htons;
  var _write=env._write;
  var _fsync=env._fsync;
  var _ftell=env._ftell;
  var ___errno_location=env.___errno_location;
  var _puts=env._puts;
  var _recv=env._recv;
  var _swab=env._swab;
  var _ftello=env._ftello;
  var _mkport=env._mkport;
  var __scanString=env.__scanString;
  var _fgets=env._fgets;
  var __getFloat=env.__getFloat;
  var _fputc=env._fputc;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _isatty=env._isatty;
  var _mktime=env._mktime;
  var _fwrite=env._fwrite;
  var _tmpnam=env._tmpnam;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var _abs=env._abs;
  var __formatString=env.__formatString;
  var _fputs=env._fputs;
  var _tmpfile=env._tmpfile;
  var _fopen=env._fopen;
  var _close=env._close;
  var _read=env._read;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _fcol($row,$col) {
 $row = $row|0;
 $col = $col|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $row;
 $2 = $col;
 $3 = HEAP32[600>>2]|0;
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = $2;
  $6 = HEAP16[608>>1]|0;
  $7 = $6&65535;
  $8 = (($5) + ($7))|0;
  $9 = $8 & 15;
  $10 = $1;
  $11 = HEAP16[616>>1]|0;
  $12 = $11&65535;
  $13 = (($10) + ($12))|0;
  $14 = $13 & 15;
  $15 = (344 + ($14<<4)|0);
  $16 = (($15) + ($9)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $0 = $18;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 $19 = HEAP32[600>>2]|0;
 $20 = ($19|0)==(9);
 if ($20) {
  $21 = $2;
  $22 = (($21) + 6)|0;
  $23 = (($22|0) % 6)&-1;
  $24 = $1;
  $25 = (($24) + 6)|0;
  $26 = (($25|0) % 6)&-1;
  $27 = (624 + (($26*6)|0)|0);
  $28 = (($27) + ($23)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29 << 24 >> 24;
  $0 = $30;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 } else {
  $31 = HEAP32[600>>2]|0;
  $32 = $1;
  $33 = $32 << 1;
  $34 = $33 & 14;
  $35 = $2;
  $36 = $35 & 1;
  $37 = (($34) + ($36))|0;
  $38 = $37 << 1;
  $39 = $31 >>> $38;
  $40 = $39 & 3;
  $0 = $40;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function _my_memmem($haystack,$haystacklen,$needle,$needlelen) {
 $haystack = $haystack|0;
 $haystacklen = $haystacklen|0;
 $needle = $needle|0;
 $needlelen = $needlelen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $haystack;
 $2 = $haystacklen;
 $3 = $needle;
 $4 = $needlelen;
 $5 = $1;
 $c = $5;
 while(1) {
  $6 = $c;
  $7 = $1;
  $8 = $2;
  $9 = (($7) + ($8)|0);
  $10 = $4;
  $11 = (0 - ($10))|0;
  $12 = (($9) + ($11)|0);
  $13 = ($6>>>0)<=($12>>>0);
  if (!($13)) {
   label = 7;
   break;
  }
  $14 = $c;
  $15 = $3;
  $16 = $4;
  $17 = (_memcmp($14,$15,$16)|0);
  $18 = ($17|0)!=(0);
  if (!($18)) {
   label = 4;
   break;
  }
  $20 = $c;
  $21 = (($20) + 1|0);
  $c = $21;
 }
 if ((label|0) == 4) {
  $19 = $c;
  $0 = $19;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _my_strcasestr($haystack,$needle) {
 $haystack = $haystack|0;
 $needle = $needle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $haystack;
 $2 = $needle;
 $3 = $1;
 $c = $3;
 while(1) {
  $4 = $c;
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)!=(0);
  if (!($6)) {
   label = 7;
   break;
  }
  $7 = $c;
  $8 = $2;
  $9 = $2;
  $10 = (_strlen(($9|0))|0);
  $11 = (_strncasecmp($7,$8,$10)|0);
  $12 = ($11|0)!=(0);
  if (!($12)) {
   label = 4;
   break;
  }
  $14 = $c;
  $15 = (($14) + 1|0);
  $c = $15;
 }
 if ((label|0) == 4) {
  $13 = $c;
  $0 = $13;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 7) {
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _merror($ptr,$where) {
 $ptr = $ptr|0;
 $where = $where|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $ptr;
 $1 = $where;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  $4 = HEAP32[_stderr>>2]|0;
  $5 = HEAP32[696>>2]|0;
  $6 = $1;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $6;
  (_fprintf(($4|0),(664|0),($vararg_buffer|0))|0);
  _longjmp((704|0),1);
  // unreachable;
 }
}
function _derror() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $0 = HEAP32[864>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  $17 = HEAP32[864>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[864>>2] = $18;
  STACKTOP = sp;return;
 }
 $2 = HEAP32[_stderr>>2]|0;
 $3 = HEAP32[696>>2]|0;
 HEAP32[$vararg_buffer>>2] = $3;
 (_fprintf(($2|0),(872|0),($vararg_buffer|0))|0);
 $4 = HEAP32[880>>2]|0;
 $5 = (_feof(($4|0))|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = HEAP32[_stderr>>2]|0;
  (_fprintf(($7|0),(888|0),($vararg_buffer1|0))|0);
 } else {
  $8 = HEAP32[_stderr>>2]|0;
  $9 = HEAP32[880>>2]|0;
  $10 = (_ftello(($9|0))|0);
  $11 = ($10|0)<(0);
  $12 = $11 << 31 >> 31;
  $13 = $vararg_buffer3;
  $14 = $13;
  HEAP32[$14>>2] = $10;
  $15 = (($13) + 4)|0;
  $16 = $15;
  HEAP32[$16>>2] = $12;
  (_fprintf(($8|0),(912|0),($vararg_buffer3|0))|0);
 }
 $17 = HEAP32[864>>2]|0;
 $18 = (($17) + 1)|0;
 HEAP32[864>>2] = $18;
 STACKTOP = sp;return;
}
function _sget2($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = HEAP16[944>>1]|0;
 $3 = $2 << 16 >> 16;
 $4 = ($3|0)==(18761);
 if ($4) {
  $5 = $1;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = $1;
  $9 = (($8) + 1|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $11 << 8;
  $13 = $7 | $12;
  $14 = $13&65535;
  $0 = $14;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 } else {
  $15 = $1;
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $17 << 8;
  $19 = $1;
  $20 = (($19) + 1|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $18 | $22;
  $24 = $23&65535;
  $0 = $24;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _get2() {
 var $0 = 0, $1 = 0, $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str = sp;
 ;HEAP8[$str+0>>0]=HEAP8[952+0>>0]|0;HEAP8[$str+1>>0]=HEAP8[952+1>>0]|0;
 $0 = HEAP32[880>>2]|0;
 (_fread(($str|0),1,2,($0|0))|0);
 $1 = (_sget2($str)|0);
 STACKTOP = sp;return ($1|0);
}
function _sget4($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = HEAP16[944>>1]|0;
 $3 = $2 << 16 >> 16;
 $4 = ($3|0)==(18761);
 if ($4) {
  $5 = $1;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = $1;
  $9 = (($8) + 1|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $11 << 8;
  $13 = $7 | $12;
  $14 = $1;
  $15 = (($14) + 2|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $17 << 16;
  $19 = $13 | $18;
  $20 = $1;
  $21 = (($20) + 3|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $23 << 24;
  $25 = $19 | $24;
  $0 = $25;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 } else {
  $26 = $1;
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = $28 << 24;
  $30 = $1;
  $31 = (($30) + 1|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = $33 << 16;
  $35 = $29 | $34;
  $36 = $1;
  $37 = (($36) + 2|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $39 << 8;
  $41 = $35 | $40;
  $42 = $1;
  $43 = (($42) + 3|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = $41 | $45;
  $0 = $46;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function _get4() {
 var $0 = 0, $1 = 0, $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str = sp;
 ;HEAP8[$str+0>>0]=HEAP8[960+0>>0]|0;HEAP8[$str+1>>0]=HEAP8[960+1>>0]|0;HEAP8[$str+2>>0]=HEAP8[960+2>>0]|0;HEAP8[$str+3>>0]=HEAP8[960+3>>0]|0;
 $0 = HEAP32[880>>2]|0;
 (_fread(($str|0),1,4,($0|0))|0);
 $1 = (_sget4($str)|0);
 STACKTOP = sp;return ($1|0);
}
function _getint($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $1 = $0;
 $2 = ($1|0)==(3);
 if ($2) {
  $3 = (_get2()|0);
  $4 = $3&65535;
  $6 = $4;
 } else {
  $5 = (_get4()|0);
  $6 = $5;
 }
 STACKTOP = sp;return ($6|0);
}
function _int_to_float($i) {
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $u = sp;
 $0 = $i;
 $1 = $0;
 HEAP32[$u>>2] = $1;
 $2 = +HEAPF32[$u>>2];
 STACKTOP = sp;return (+$2);
}
function _getreal($type) {
 $type = $type|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $i = 0, $rev = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $u = sp;
 $1 = $type;
 $2 = $1;
 switch ($2|0) {
 case 4:  {
  $5 = (_get4()|0);
  $6 = (+($5>>>0));
  $0 = $6;
  break;
 }
 case 11:  {
  $23 = (_get4()|0);
  $24 = (+_int_to_float($23));
  $25 = $24;
  $0 = $25;
  break;
 }
 case 12:  {
  $26 = HEAP16[944>>1]|0;
  $27 = $26 << 16 >> 16;
  $28 = ($27|0)==(18761);
  $29 = $28&1;
  $30 = (_ntohs(4660)|0);
  $31 = $30&65535;
  $32 = ($31|0)==(4660);
  $33 = $32&1;
  $34 = ($29|0)==($33|0);
  $35 = $34&1;
  $36 = ($35*7)|0;
  $rev = $36;
  $i = 0;
  while(1) {
   $37 = $i;
   $38 = ($37|0)<(8);
   if (!($38)) {
    break;
   }
   $39 = HEAP32[880>>2]|0;
   $40 = (_getc_unlocked(($39|0))|0);
   $41 = $40&255;
   $42 = $i;
   $43 = $rev;
   $44 = $42 ^ $43;
   $45 = (($u) + ($44)|0);
   HEAP8[$45>>0] = $41;
   $46 = $i;
   $47 = (($46) + 1)|0;
   $i = $47;
  }
  $48 = +HEAPF64[$u>>3];
  $0 = $48;
  break;
 }
 case 10:  {
  $17 = (_get4()|0);
  $18 = (+($17|0));
  HEAPF64[$u>>3] = $18;
  $19 = +HEAPF64[$u>>3];
  $20 = (_get4()|0);
  $21 = (+($20|0));
  $22 = $19 / $21;
  $0 = $22;
  break;
 }
 case 3:  {
  $3 = (_get2()|0);
  $4 = (+($3&65535));
  $0 = $4;
  break;
 }
 case 8:  {
  $13 = (_get2()|0);
  $14 = (+($13<<16>>16));
  $0 = $14;
  break;
 }
 case 9:  {
  $15 = (_get4()|0);
  $16 = (+($15|0));
  $0 = $16;
  break;
 }
 case 5:  {
  $7 = (_get4()|0);
  $8 = (+($7>>>0));
  HEAPF64[$u>>3] = $8;
  $9 = +HEAPF64[$u>>3];
  $10 = (_get4()|0);
  $11 = (+($10>>>0));
  $12 = $9 / $11;
  $0 = $12;
  break;
 }
 default: {
  $49 = HEAP32[880>>2]|0;
  $50 = (_getc_unlocked(($49|0))|0);
  $51 = (+($50|0));
  $0 = $51;
 }
 }
 $52 = $0;
 STACKTOP = sp;return (+$52);
}
function _read_shorts($pixel,$count) {
 $pixel = $pixel|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pixel;
 $1 = $count;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[880>>2]|0;
 $5 = (_fread(($2|0),2,($3|0),($4|0))|0);
 $6 = $1;
 $7 = ($5>>>0)<($6>>>0);
 if ($7) {
  _derror();
 }
 $8 = HEAP16[944>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = ($9|0)==(18761);
 $11 = $10&1;
 $12 = (_ntohs(4660)|0);
 $13 = $12&65535;
 $14 = ($13|0)==(4660);
 $15 = $14&1;
 $16 = ($11|0)==($15|0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $0;
 $18 = $0;
 $19 = $1;
 $20 = $19<<1;
 _swab(($17|0),($18|0),($20|0));
 STACKTOP = sp;return;
}
function _cubic_spline($x_,$y_,$len) {
 $x_ = $x_|0;
 $y_ = $y_|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0.0, $293 = 0, $294 = 0.0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0.0, $335 = 0.0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0;
 var $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0;
 var $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0, $392 = 0, $393 = 0.0, $394 = 0.0, $395 = 0, $396 = 0.0, $397 = 0.0, $398 = 0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $A = 0, $acc = 0.0, $b = 0, $c = 0, $d = 0, $i = 0, $j = 0;
 var $v = 0.0, $v1 = 0.0, $x = 0, $x_out = 0.0, $y = 0, $y_out = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x_;
 $1 = $y_;
 $2 = $len;
 $3 = $2;
 $4 = $3<<1;
 $5 = (($4) + 4)|0;
 $6 = $5<<2;
 $7 = (($6) + 4)|0;
 $8 = $2;
 $9 = $8<<1;
 $10 = (_calloc($7,$9)|0);
 $A = $10;
 $11 = $A;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $A;
 $14 = $2;
 $15 = $14<<1;
 $16 = (($13) + ($15<<2)|0);
 $17 = $A;
 HEAP32[$17>>2] = $16;
 $i = 1;
 while(1) {
  $18 = $i;
  $19 = $2;
  $20 = $19<<1;
  $21 = ($18|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = $A;
  $23 = HEAP32[$22>>2]|0;
  $24 = $2;
  $25 = $24<<1;
  $26 = $i;
  $27 = Math_imul($25, $26)|0;
  $28 = (($23) + ($27<<2)|0);
  $29 = $i;
  $30 = $A;
  $31 = (($30) + ($29<<2)|0);
  HEAP32[$31>>2] = $28;
  $32 = $i;
  $33 = (($32) + 1)|0;
  $i = $33;
 }
 $34 = $2;
 $35 = $i;
 $36 = $i;
 $37 = $i;
 $38 = $A;
 $39 = HEAP32[$38>>2]|0;
 $40 = $i;
 $41 = $i;
 $42 = Math_imul($40, $41)|0;
 $43 = (($39) + ($42<<2)|0);
 $b = $43;
 $44 = (($43) + ($37<<2)|0);
 $c = $44;
 $45 = (($44) + ($36<<2)|0);
 $d = $45;
 $46 = (($45) + ($35<<2)|0);
 $x = $46;
 $47 = (($46) + ($34<<2)|0);
 $y = $47;
 $i = 0;
 while(1) {
  $48 = $i;
  $49 = $2;
  $50 = ($48|0)<($49|0);
  if (!($50)) {
   break;
  }
  $51 = $i;
  $52 = $0;
  $53 = (($52) + ($51<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (+($54|0));
  $56 = $55 / 65535.0;
  $57 = $56;
  $58 = $i;
  $59 = $x;
  $60 = (($59) + ($58<<2)|0);
  HEAPF32[$60>>2] = $57;
  $61 = $i;
  $62 = $1;
  $63 = (($62) + ($61<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (+($64|0));
  $66 = $65 / 65535.0;
  $67 = $66;
  $68 = $i;
  $69 = $y;
  $70 = (($69) + ($68<<2)|0);
  HEAPF32[$70>>2] = $67;
  $71 = $i;
  $72 = (($71) + 1)|0;
  $i = $72;
 }
 $73 = $2;
 $74 = (($73) - 1)|0;
 $i = $74;
 while(1) {
  $75 = $i;
  $76 = ($75|0)>(0);
  if (!($76)) {
   break;
  }
  $77 = $i;
  $78 = $y;
  $79 = (($78) + ($77<<2)|0);
  $80 = +HEAPF32[$79>>2];
  $81 = $i;
  $82 = (($81) - 1)|0;
  $83 = $y;
  $84 = (($83) + ($82<<2)|0);
  $85 = +HEAPF32[$84>>2];
  $86 = $80 - $85;
  $87 = $i;
  $88 = $x;
  $89 = (($88) + ($87<<2)|0);
  $90 = +HEAPF32[$89>>2];
  $91 = $i;
  $92 = (($91) - 1)|0;
  $93 = $x;
  $94 = (($93) + ($92<<2)|0);
  $95 = +HEAPF32[$94>>2];
  $96 = $90 - $95;
  $97 = $86 / $96;
  $98 = $i;
  $99 = $b;
  $100 = (($99) + ($98<<2)|0);
  HEAPF32[$100>>2] = $97;
  $101 = $i;
  $102 = $x;
  $103 = (($102) + ($101<<2)|0);
  $104 = +HEAPF32[$103>>2];
  $105 = $i;
  $106 = (($105) - 1)|0;
  $107 = $x;
  $108 = (($107) + ($106<<2)|0);
  $109 = +HEAPF32[$108>>2];
  $110 = $104 - $109;
  $111 = $i;
  $112 = (($111) - 1)|0;
  $113 = $d;
  $114 = (($113) + ($112<<2)|0);
  HEAPF32[$114>>2] = $110;
  $115 = $i;
  $116 = (($115) + -1)|0;
  $i = $116;
 }
 $i = 1;
 while(1) {
  $117 = $i;
  $118 = $2;
  $119 = (($118) - 1)|0;
  $120 = ($117|0)<($119|0);
  if (!($120)) {
   break;
  }
  $121 = $i;
  $122 = (($121) - 1)|0;
  $123 = $d;
  $124 = (($123) + ($122<<2)|0);
  $125 = +HEAPF32[$124>>2];
  $126 = $i;
  $127 = $d;
  $128 = (($127) + ($126<<2)|0);
  $129 = +HEAPF32[$128>>2];
  $130 = $125 + $129;
  $131 = 2.0 * $130;
  $132 = $i;
  $133 = $i;
  $134 = $A;
  $135 = (($134) + ($133<<2)|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (($136) + ($132<<2)|0);
  HEAPF32[$137>>2] = $131;
  $138 = $i;
  $139 = ($138|0)>(1);
  if ($139) {
   $140 = $i;
   $141 = (($140) - 1)|0;
   $142 = $d;
   $143 = (($142) + ($141<<2)|0);
   $144 = +HEAPF32[$143>>2];
   $145 = $i;
   $146 = (($145) - 1)|0;
   $147 = $i;
   $148 = $A;
   $149 = (($148) + ($147<<2)|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = (($150) + ($146<<2)|0);
   HEAPF32[$151>>2] = $144;
   $152 = $i;
   $153 = (($152) - 1)|0;
   $154 = $d;
   $155 = (($154) + ($153<<2)|0);
   $156 = +HEAPF32[$155>>2];
   $157 = $i;
   $158 = $i;
   $159 = (($158) - 1)|0;
   $160 = $A;
   $161 = (($160) + ($159<<2)|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = (($162) + ($157<<2)|0);
   HEAPF32[$163>>2] = $156;
  }
  $164 = $i;
  $165 = (($164) + 1)|0;
  $166 = $b;
  $167 = (($166) + ($165<<2)|0);
  $168 = +HEAPF32[$167>>2];
  $169 = $i;
  $170 = $b;
  $171 = (($170) + ($169<<2)|0);
  $172 = +HEAPF32[$171>>2];
  $173 = $168 - $172;
  $174 = 6.0 * $173;
  $175 = $2;
  $176 = (($175) - 1)|0;
  $177 = $i;
  $178 = $A;
  $179 = (($178) + ($177<<2)|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = (($180) + ($176<<2)|0);
  HEAPF32[$181>>2] = $174;
  $182 = $i;
  $183 = (($182) + 1)|0;
  $i = $183;
 }
 $i = 1;
 while(1) {
  $184 = $i;
  $185 = $2;
  $186 = (($185) - 2)|0;
  $187 = ($184|0)<($186|0);
  if (!($187)) {
   break;
  }
  $188 = $i;
  $189 = $i;
  $190 = (($189) + 1)|0;
  $191 = $A;
  $192 = (($191) + ($190<<2)|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = (($193) + ($188<<2)|0);
  $195 = +HEAPF32[$194>>2];
  $196 = $i;
  $197 = $i;
  $198 = $A;
  $199 = (($198) + ($197<<2)|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = (($200) + ($196<<2)|0);
  $202 = +HEAPF32[$201>>2];
  $203 = $195 / $202;
  $v = $203;
  $j = 1;
  while(1) {
   $204 = $j;
   $205 = $2;
   $206 = (($205) - 1)|0;
   $207 = ($204|0)<=($206|0);
   if (!($207)) {
    break;
   }
   $208 = $v;
   $209 = $j;
   $210 = $i;
   $211 = $A;
   $212 = (($211) + ($210<<2)|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = (($213) + ($209<<2)|0);
   $215 = +HEAPF32[$214>>2];
   $216 = $208 * $215;
   $217 = $j;
   $218 = $i;
   $219 = (($218) + 1)|0;
   $220 = $A;
   $221 = (($220) + ($219<<2)|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = (($222) + ($217<<2)|0);
   $224 = +HEAPF32[$223>>2];
   $225 = $224 - $216;
   HEAPF32[$223>>2] = $225;
   $226 = $j;
   $227 = (($226) + 1)|0;
   $j = $227;
  }
  $228 = $i;
  $229 = (($228) + 1)|0;
  $i = $229;
 }
 $230 = $2;
 $231 = (($230) - 2)|0;
 $i = $231;
 while(1) {
  $232 = $i;
  $233 = ($232|0)>(0);
  if (!($233)) {
   break;
  }
  $acc = 0.0;
  $234 = $i;
  $j = $234;
  while(1) {
   $235 = $j;
   $236 = $2;
   $237 = (($236) - 2)|0;
   $238 = ($235|0)<=($237|0);
   if (!($238)) {
    break;
   }
   $239 = $j;
   $240 = $i;
   $241 = $A;
   $242 = (($241) + ($240<<2)|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = (($243) + ($239<<2)|0);
   $245 = +HEAPF32[$244>>2];
   $246 = $j;
   $247 = $c;
   $248 = (($247) + ($246<<2)|0);
   $249 = +HEAPF32[$248>>2];
   $250 = $245 * $249;
   $251 = $acc;
   $252 = $251 + $250;
   $acc = $252;
   $253 = $j;
   $254 = (($253) + 1)|0;
   $j = $254;
  }
  $255 = $2;
  $256 = (($255) - 1)|0;
  $257 = $i;
  $258 = $A;
  $259 = (($258) + ($257<<2)|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = (($260) + ($256<<2)|0);
  $262 = +HEAPF32[$261>>2];
  $263 = $acc;
  $264 = $262 - $263;
  $265 = $i;
  $266 = $i;
  $267 = $A;
  $268 = (($267) + ($266<<2)|0);
  $269 = HEAP32[$268>>2]|0;
  $270 = (($269) + ($265<<2)|0);
  $271 = +HEAPF32[$270>>2];
  $272 = $264 / $271;
  $273 = $i;
  $274 = $c;
  $275 = (($274) + ($273<<2)|0);
  HEAPF32[$275>>2] = $272;
  $276 = $i;
  $277 = (($276) + -1)|0;
  $i = $277;
 }
 $i = 0;
 while(1) {
  $278 = $i;
  $279 = ($278|0)<(65536);
  if (!($279)) {
   break;
  }
  $280 = $i;
  $281 = (+($280|0));
  $282 = $281 / 65535.0;
  $283 = $282;
  $x_out = $283;
  $y_out = 0.0;
  $j = 0;
  while(1) {
   $284 = $j;
   $285 = $2;
   $286 = (($285) - 1)|0;
   $287 = ($284|0)<($286|0);
   if (!($287)) {
    break;
   }
   $288 = $j;
   $289 = $x;
   $290 = (($289) + ($288<<2)|0);
   $291 = +HEAPF32[$290>>2];
   $292 = $x_out;
   $293 = $291 <= $292;
   if ($293) {
    $294 = $x_out;
    $295 = $j;
    $296 = (($295) + 1)|0;
    $297 = $x;
    $298 = (($297) + ($296<<2)|0);
    $299 = +HEAPF32[$298>>2];
    $300 = $294 <= $299;
    if ($300) {
     $301 = $x_out;
     $302 = $j;
     $303 = $x;
     $304 = (($303) + ($302<<2)|0);
     $305 = +HEAPF32[$304>>2];
     $306 = $301 - $305;
     $v1 = $306;
     $307 = $j;
     $308 = $y;
     $309 = (($308) + ($307<<2)|0);
     $310 = +HEAPF32[$309>>2];
     $311 = $j;
     $312 = (($311) + 1)|0;
     $313 = $y;
     $314 = (($313) + ($312<<2)|0);
     $315 = +HEAPF32[$314>>2];
     $316 = $j;
     $317 = $y;
     $318 = (($317) + ($316<<2)|0);
     $319 = +HEAPF32[$318>>2];
     $320 = $315 - $319;
     $321 = $j;
     $322 = $d;
     $323 = (($322) + ($321<<2)|0);
     $324 = +HEAPF32[$323>>2];
     $325 = $320 / $324;
     $326 = $j;
     $327 = $d;
     $328 = (($327) + ($326<<2)|0);
     $329 = +HEAPF32[$328>>2];
     $330 = 2.0 * $329;
     $331 = $j;
     $332 = $c;
     $333 = (($332) + ($331<<2)|0);
     $334 = +HEAPF32[$333>>2];
     $335 = $330 * $334;
     $336 = $j;
     $337 = (($336) + 1)|0;
     $338 = $c;
     $339 = (($338) + ($337<<2)|0);
     $340 = +HEAPF32[$339>>2];
     $341 = $j;
     $342 = $d;
     $343 = (($342) + ($341<<2)|0);
     $344 = +HEAPF32[$343>>2];
     $345 = $340 * $344;
     $346 = $335 + $345;
     $347 = $346 / 6.0;
     $348 = $325 - $347;
     $349 = $v1;
     $350 = $348 * $349;
     $351 = $310 + $350;
     $352 = $351;
     $353 = $j;
     $354 = $c;
     $355 = (($354) + ($353<<2)|0);
     $356 = +HEAPF32[$355>>2];
     $357 = $356;
     $358 = $357 * 0.5;
     $359 = $v1;
     $360 = $359;
     $361 = $358 * $360;
     $362 = $v1;
     $363 = $362;
     $364 = $361 * $363;
     $365 = $352 + $364;
     $366 = $j;
     $367 = (($366) + 1)|0;
     $368 = $c;
     $369 = (($368) + ($367<<2)|0);
     $370 = +HEAPF32[$369>>2];
     $371 = $j;
     $372 = $c;
     $373 = (($372) + ($371<<2)|0);
     $374 = +HEAPF32[$373>>2];
     $375 = $370 - $374;
     $376 = $j;
     $377 = $d;
     $378 = (($377) + ($376<<2)|0);
     $379 = +HEAPF32[$378>>2];
     $380 = 6.0 * $379;
     $381 = $375 / $380;
     $382 = $v1;
     $383 = $381 * $382;
     $384 = $v1;
     $385 = $383 * $384;
     $386 = $v1;
     $387 = $385 * $386;
     $388 = $387;
     $389 = $365 + $388;
     $390 = $389;
     $y_out = $390;
    }
   }
   $391 = $j;
   $392 = (($391) + 1)|0;
   $j = $392;
  }
  $393 = $y_out;
  $394 = $393;
  $395 = $394 < 0.0;
  if ($395) {
   $406 = 0;
  } else {
   $396 = $y_out;
   $397 = $396;
   $398 = $397 >= 1.0;
   if ($398) {
    $412 = 65535;
   } else {
    $399 = $y_out;
    $400 = $399;
    $401 = $400 * 65535.0;
    $402 = $401 + 0.5;
    $403 = (~~(($402))&65535);
    $404 = $403&65535;
    $412 = $404;
   }
   $406 = $412;
  }
  $405 = $406&65535;
  $407 = $i;
  $408 = (968 + ($407<<1)|0);
  HEAP16[$408>>1] = $405;
  $409 = $i;
  $410 = (($409) + 1)|0;
  $i = $410;
 }
 $411 = $A;
 _free($411);
 STACKTOP = sp;return;
}
function _canon_600_fixed_wb($temp) {
 $temp = $temp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $frac = 0.0, $hi = 0, $i = 0, $lo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $temp;
 $frac = 0.0;
 $lo = 4;
 while(1) {
  $1 = $lo;
  $2 = (($1) + -1)|0;
  $lo = $2;
  $3 = ($2|0)!=(0);
  if (!($3)) {
   break;
  }
  $4 = $lo;
  $5 = (132040 + (($4*10)|0)|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = $6 << 16 >> 16;
  $8 = $0;
  $9 = ($7|0)<=($8|0);
  if ($9) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
 }
 $hi = 0;
 while(1) {
  $10 = $hi;
  $11 = ($10|0)<(3);
  if (!($11)) {
   break;
  }
  $12 = $hi;
  $13 = (132040 + (($12*10)|0)|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14 << 16 >> 16;
  $16 = $0;
  $17 = ($15|0)>=($16|0);
  if ($17) {
   label = 9;
   break;
  }
  $18 = $hi;
  $19 = (($18) + 1)|0;
  $hi = $19;
 }
 if ((label|0) == 9) {
 }
 $20 = $lo;
 $21 = $hi;
 $22 = ($20|0)!=($21|0);
 if ($22) {
  $23 = $0;
  $24 = $lo;
  $25 = (132040 + (($24*10)|0)|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26 << 16 >> 16;
  $28 = (($23) - ($27))|0;
  $29 = (+($28|0));
  $30 = $hi;
  $31 = (132040 + (($30*10)|0)|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32 << 16 >> 16;
  $34 = $lo;
  $35 = (132040 + (($34*10)|0)|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36 << 16 >> 16;
  $38 = (($33) - ($37))|0;
  $39 = (+($38|0));
  $40 = $29 / $39;
  $frac = $40;
 }
 $i = 1;
 while(1) {
  $41 = $i;
  $42 = ($41|0)<(5);
  if (!($42)) {
   break;
  }
  $43 = $frac;
  $44 = $i;
  $45 = $hi;
  $46 = (132040 + (($45*10)|0)|0);
  $47 = (($46) + ($44<<1)|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = $48 << 16 >> 16;
  $50 = (+($49|0));
  $51 = $43 * $50;
  $52 = $frac;
  $53 = 1.0 - $52;
  $54 = $i;
  $55 = $lo;
  $56 = (132040 + (($55*10)|0)|0);
  $57 = (($56) + ($54<<1)|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58 << 16 >> 16;
  $60 = (+($59|0));
  $61 = $53 * $60;
  $62 = $51 + $61;
  $63 = 1.0 / $62;
  $64 = $i;
  $65 = (($64) - 1)|0;
  $66 = (132080 + ($65<<2)|0);
  HEAPF32[$66>>2] = $63;
  $67 = $i;
  $68 = (($67) + 1)|0;
  $i = $68;
 }
 STACKTOP = sp;return;
}
function _canon_600_color($ratio,$mar) {
 $ratio = $ratio|0;
 $mar = $mar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $clipped = 0, $miss = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ratio;
 $2 = $mar;
 $clipped = 0;
 $3 = +HEAPF32[132096>>2];
 $4 = $3 != 0.0;
 do {
  if ($4) {
   $5 = $1;
   $6 = (($5) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)<(-104);
   if ($8) {
    $9 = $1;
    $10 = (($9) + 4|0);
    HEAP32[$10>>2] = -104;
    $clipped = 1;
   }
   $11 = $1;
   $12 = (($11) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)>(12);
   if ($14) {
    $15 = $1;
    $16 = (($15) + 4|0);
    HEAP32[$16>>2] = 12;
    $clipped = 1;
   }
  } else {
   $17 = $1;
   $18 = (($17) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)<(-264);
   if (!($20)) {
    $21 = $1;
    $22 = (($21) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)>(461);
    if (!($24)) {
     $25 = $1;
     $26 = (($25) + 4|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)<(-50);
     if ($28) {
      $29 = $1;
      $30 = (($29) + 4|0);
      HEAP32[$30>>2] = -50;
      $clipped = 1;
     }
     $31 = $1;
     $32 = (($31) + 4|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)>(307);
     if ($34) {
      $35 = $1;
      $36 = (($35) + 4|0);
      HEAP32[$36>>2] = 307;
      $clipped = 1;
     }
     break;
    }
   }
   $0 = 2;
   $88 = $0;
   STACKTOP = sp;return ($88|0);
  }
 } while(0);
 $37 = +HEAPF32[132096>>2];
 $38 = $37 != 0.0;
 if ($38) {
  label = 17;
 } else {
  $39 = $1;
  $40 = (($39) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)<(197);
  if ($42) {
   label = 17;
  } else {
   $49 = $1;
   $50 = (($49) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51*48)|0;
   $53 = $52 >> 10;
   $54 = (-123 + ($53))|0;
   $55 = $54;
  }
 }
 if ((label|0) == 17) {
  $43 = $1;
  $44 = (($43) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45*398)|0;
  $47 = $46 >> 10;
  $48 = (-38 - ($47))|0;
  $55 = $48;
 }
 $target = $55;
 $56 = $target;
 $57 = $2;
 $58 = (($56) - ($57))|0;
 $59 = $1;
 $60 = HEAP32[$59>>2]|0;
 $61 = ($58|0)<=($60|0);
 if ($61) {
  $62 = $target;
  $63 = (($62) + 20)|0;
  $64 = $1;
  $65 = HEAP32[$64>>2]|0;
  $66 = ($63|0)>=($65|0);
  if ($66) {
   $67 = $clipped;
   $68 = ($67|0)!=(0);
   if (!($68)) {
    $0 = 0;
    $88 = $0;
    STACKTOP = sp;return ($88|0);
   }
  }
 }
 $69 = $target;
 $70 = $1;
 $71 = HEAP32[$70>>2]|0;
 $72 = (($69) - ($71))|0;
 $miss = $72;
 $73 = $miss;
 $74 = (Math_abs(($73|0))|0);
 $75 = $2;
 $76 = $75<<2;
 $77 = ($74|0)>=($76|0);
 if ($77) {
  $0 = 2;
  $88 = $0;
  STACKTOP = sp;return ($88|0);
 }
 $78 = $miss;
 $79 = ($78|0)<(-20);
 if ($79) {
  $miss = -20;
 }
 $80 = $miss;
 $81 = $2;
 $82 = ($80|0)>($81|0);
 if ($82) {
  $83 = $2;
  $miss = $83;
 }
 $84 = $target;
 $85 = $miss;
 $86 = (($84) - ($85))|0;
 $87 = $1;
 HEAP32[$87>>2] = $86;
 $0 = 1;
 $88 = $0;
 STACKTOP = sp;return ($88|0);
}
function _canon_600_auto_wb() {
 var $0 = 0.0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col = 0, $count = 0, $i = 0, $j = 0, $mar = 0, $ratio = 0, $row = 0, $st = 0, $stat = 0, $test = 0, $total = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $count = sp + 112|0;
 $test = sp + 80|0;
 $total = sp + 16|0;
 $ratio = sp;
 $stat = sp + 120|0;
 ;HEAP32[$count+0>>2]=0|0;HEAP32[$count+4>>2]=0|0;
 dest=$total+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = +HEAPF32[132104>>2];
 $1 = $0;
 $2 = $1 + 0.5;
 $3 = (~~(($2)));
 $i = $3;
 $4 = $i;
 $5 = ($4|0)<(10);
 if ($5) {
  $mar = 150;
 } else {
  $6 = $i;
  $7 = ($6|0)>(12);
  if ($7) {
   $mar = 20;
  } else {
   $8 = $i;
   $9 = ($8*20)|0;
   $10 = (280 - ($9))|0;
   $mar = $10;
  }
 }
 $11 = +HEAPF32[132096>>2];
 $12 = $11 != 0.0;
 if ($12) {
  $mar = 80;
 }
 $row = 14;
 while(1) {
  $13 = $row;
  $14 = HEAP16[132112>>1]|0;
  $15 = $14&65535;
  $16 = (($15) - 14)|0;
  $17 = ($13|0)<($16|0);
  if (!($17)) {
   break;
  }
  $col = 10;
  while(1) {
   $18 = $col;
   $19 = HEAP16[132120>>1]|0;
   $20 = $19&65535;
   $21 = ($18|0)<($20|0);
   if (!($21)) {
    break;
   }
   $i = 0;
   while(1) {
    $22 = $i;
    $23 = ($22|0)<(8);
    if (!($23)) {
     break;
    }
    $24 = HEAP32[600>>2]|0;
    $25 = $row;
    $26 = $i;
    $27 = $26 >> 1;
    $28 = (($25) + ($27))|0;
    $29 = $28 << 1;
    $30 = $29 & 14;
    $31 = $col;
    $32 = $i;
    $33 = $32 & 1;
    $34 = (($31) + ($33))|0;
    $35 = $34 & 1;
    $36 = (($30) + ($35))|0;
    $37 = $36 << 1;
    $38 = $24 >>> $37;
    $39 = $38 & 3;
    $40 = $row;
    $41 = $i;
    $42 = $41 >> 1;
    $43 = (($40) + ($42))|0;
    $44 = HEAP16[132128>>1]|0;
    $45 = $44&65535;
    $46 = $43 >> $45;
    $47 = HEAP16[132136>>1]|0;
    $48 = $47&65535;
    $49 = Math_imul($46, $48)|0;
    $50 = $col;
    $51 = $i;
    $52 = $51 & 1;
    $53 = (($50) + ($52))|0;
    $54 = HEAP16[132128>>1]|0;
    $55 = $54&65535;
    $56 = $53 >> $55;
    $57 = (($49) + ($56))|0;
    $58 = HEAP32[132144>>2]|0;
    $59 = (($58) + ($57<<3)|0);
    $60 = (($59) + ($39<<1)|0);
    $61 = HEAP16[$60>>1]|0;
    $62 = $61&65535;
    $63 = $i;
    $64 = $63 & 4;
    $65 = HEAP32[600>>2]|0;
    $66 = $row;
    $67 = $i;
    $68 = $67 >> 1;
    $69 = (($66) + ($68))|0;
    $70 = $69 << 1;
    $71 = $70 & 14;
    $72 = $col;
    $73 = $i;
    $74 = $73 & 1;
    $75 = (($72) + ($74))|0;
    $76 = $75 & 1;
    $77 = (($71) + ($76))|0;
    $78 = $77 << 1;
    $79 = $65 >>> $78;
    $80 = $79 & 3;
    $81 = (($64) + ($80))|0;
    $82 = (($test) + ($81<<2)|0);
    HEAP32[$82>>2] = $62;
    $83 = $i;
    $84 = (($83) + 1)|0;
    $i = $84;
   }
   $i = 0;
   while(1) {
    $85 = $i;
    $86 = ($85|0)<(8);
    if (!($86)) {
     label = 24;
     break;
    }
    $87 = $i;
    $88 = (($test) + ($87<<2)|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)<(150);
    if ($90) {
     label = 21;
     break;
    }
    $91 = $i;
    $92 = (($test) + ($91<<2)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)>(1500);
    if ($94) {
     label = 21;
     break;
    }
    $95 = $i;
    $96 = (($95) + 1)|0;
    $i = $96;
   }
   do {
    if ((label|0) == 21) {
     label = 0;
    }
    else if ((label|0) == 24) {
     label = 0;
     $i = 0;
     while(1) {
      $97 = $i;
      $98 = ($97|0)<(4);
      if (!($98)) {
       break;
      }
      $99 = $i;
      $100 = (($test) + ($99<<2)|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = $i;
      $103 = (($102) + 4)|0;
      $104 = (($test) + ($103<<2)|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = (($101) - ($105))|0;
      $107 = (Math_abs(($106|0))|0);
      $108 = ($107|0)>(50);
      if ($108) {
       label = 27;
       break;
      }
      $109 = $i;
      $110 = (($109) + 1)|0;
      $i = $110;
     }
     if ((label|0) == 27) {
      label = 0;
      break;
     }
     $i = 0;
     while(1) {
      $111 = $i;
      $112 = ($111|0)<(2);
      if (!($112)) {
       break;
      }
      $j = 0;
      while(1) {
       $113 = $j;
       $114 = ($113|0)<(4);
       if (!($114)) {
        break;
       }
       $115 = $i;
       $116 = $115<<2;
       $117 = $j;
       $118 = (($116) + ($117))|0;
       $119 = (($118) + 1)|0;
       $120 = (($test) + ($119<<2)|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = $i;
       $123 = $122<<2;
       $124 = $j;
       $125 = (($123) + ($124))|0;
       $126 = (($test) + ($125<<2)|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = (($121) - ($127))|0;
       $129 = $128 << 10;
       $130 = $i;
       $131 = $130<<2;
       $132 = $j;
       $133 = (($131) + ($132))|0;
       $134 = (($test) + ($133<<2)|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = (($129|0) / ($135|0))&-1;
       $137 = $j;
       $138 = $137 >> 1;
       $139 = $i;
       $140 = (($ratio) + ($139<<3)|0);
       $141 = (($140) + ($138<<2)|0);
       HEAP32[$141>>2] = $136;
       $142 = $j;
       $143 = (($142) + 2)|0;
       $j = $143;
      }
      $144 = $i;
      $145 = (($ratio) + ($144<<3)|0);
      $146 = $mar;
      $147 = (_canon_600_color($145,$146)|0);
      $148 = $i;
      $149 = (($stat) + ($148<<2)|0);
      HEAP32[$149>>2] = $147;
      $150 = $i;
      $151 = (($150) + 1)|0;
      $i = $151;
     }
     $152 = HEAP32[$stat>>2]|0;
     $153 = (($stat) + 4|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = $152 | $154;
     $st = $155;
     $156 = ($155|0)>(1);
     if ($156) {
      break;
     }
     $i = 0;
     while(1) {
      $157 = $i;
      $158 = ($157|0)<(2);
      if (!($158)) {
       break;
      }
      $159 = $i;
      $160 = (($stat) + ($159<<2)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161|0)!=(0);
      if ($162) {
       $j = 0;
       while(1) {
        $163 = $j;
        $164 = ($163|0)<(2);
        if (!($164)) {
         break;
        }
        $165 = $i;
        $166 = $165<<2;
        $167 = $j;
        $168 = $167<<1;
        $169 = (($166) + ($168))|0;
        $170 = (($test) + ($169<<2)|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = $j;
        $173 = $i;
        $174 = (($ratio) + ($173<<3)|0);
        $175 = (($174) + ($172<<2)|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = (1024 + ($176))|0;
        $178 = Math_imul($171, $177)|0;
        $179 = $178 >> 10;
        $180 = $i;
        $181 = $180<<2;
        $182 = $j;
        $183 = $182<<1;
        $184 = (($181) + ($183))|0;
        $185 = (($184) + 1)|0;
        $186 = (($test) + ($185<<2)|0);
        HEAP32[$186>>2] = $179;
        $187 = $j;
        $188 = (($187) + 1)|0;
        $j = $188;
       }
      }
      $189 = $i;
      $190 = (($189) + 1)|0;
      $i = $190;
     }
     $i = 0;
     while(1) {
      $191 = $i;
      $192 = ($191|0)<(8);
      if (!($192)) {
       break;
      }
      $193 = $i;
      $194 = (($test) + ($193<<2)|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = $i;
      $197 = $st;
      $198 = (($total) + ($197<<5)|0);
      $199 = (($198) + ($196<<2)|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = (($200) + ($195))|0;
      HEAP32[$199>>2] = $201;
      $202 = $i;
      $203 = (($202) + 1)|0;
      $i = $203;
     }
     $204 = $st;
     $205 = (($count) + ($204<<2)|0);
     $206 = HEAP32[$205>>2]|0;
     $207 = (($206) + 1)|0;
     HEAP32[$205>>2] = $207;
    }
   } while(0);
   $208 = $col;
   $209 = (($208) + 2)|0;
   $col = $209;
  }
  $210 = $row;
  $211 = (($210) + 4)|0;
  $row = $211;
 }
 $212 = HEAP32[$count>>2]|0;
 $213 = (($count) + 4|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = $212 | $214;
 $216 = ($215|0)!=(0);
 if (!($216)) {
  STACKTOP = sp;return;
 }
 $217 = HEAP32[$count>>2]|0;
 $218 = ($217*200)|0;
 $219 = (($count) + 4|0);
 $220 = HEAP32[$219>>2]|0;
 $221 = ($218|0)<($220|0);
 $222 = $221&1;
 $st = $222;
 $i = 0;
 while(1) {
  $223 = $i;
  $224 = ($223|0)<(4);
  if (!($224)) {
   break;
  }
  $225 = $i;
  $226 = $st;
  $227 = (($total) + ($226<<5)|0);
  $228 = (($227) + ($225<<2)|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = $i;
  $231 = (($230) + 4)|0;
  $232 = $st;
  $233 = (($total) + ($232<<5)|0);
  $234 = (($233) + ($231<<2)|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = (($229) + ($235))|0;
  $237 = (+($236|0));
  $238 = 1.0 / $237;
  $239 = $238;
  $240 = $i;
  $241 = (132080 + ($240<<2)|0);
  HEAPF32[$241>>2] = $239;
  $242 = $i;
  $243 = (($242) + 1)|0;
  $i = $243;
 }
 STACKTOP = sp;return;
}
function _canon_600_coeff() {
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $c = 0, $i = 0, $mc = 0.0, $t = 0, $yc = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = 0;
 $0 = +HEAPF32[((132080 + 4|0))>>2];
 $1 = +HEAPF32[((132080 + 8|0))>>2];
 $2 = $0 / $1;
 $mc = $2;
 $3 = +HEAPF32[((132080 + 12|0))>>2];
 $4 = +HEAPF32[((132080 + 8|0))>>2];
 $5 = $3 / $4;
 $yc = $5;
 $6 = $mc;
 $7 = $6 > 1.0;
 if ($7) {
  $8 = $mc;
  $9 = $8;
  $10 = $9 <= 1.28;
  if ($10) {
   $11 = $yc;
   $12 = $11;
   $13 = $12 < 0.87890000000000001;
   if ($13) {
    $t = 1;
   }
  }
 }
 $14 = $mc;
 $15 = $14;
 $16 = $15 > 1.28;
 if ($16) {
  $17 = $mc;
  $18 = $17 <= 2.0;
  if ($18) {
   $19 = $yc;
   $20 = $19;
   $21 = $20 < 0.87890000000000001;
   if ($21) {
    $t = 3;
   } else {
    $22 = $yc;
    $23 = $22 <= 2.0;
    if ($23) {
     $t = 4;
    }
   }
  }
 }
 $24 = +HEAPF32[132096>>2];
 $25 = $24 != 0.0;
 if ($25) {
  $t = 5;
 }
 $i = 0;
 HEAP32[132296>>2] = 0;
 while(1) {
  $26 = $i;
  $27 = ($26|0)<(3);
  if (!($27)) {
   break;
  }
  $c = 0;
  while(1) {
   $28 = $c;
   $29 = HEAP32[132304>>2]|0;
   $30 = ($28>>>0)<($29>>>0);
   if (!($30)) {
    break;
   }
   $31 = $i;
   $32 = $31<<2;
   $33 = $c;
   $34 = (($32) + ($33))|0;
   $35 = $t;
   $36 = (132152 + (($35*24)|0)|0);
   $37 = (($36) + ($34<<1)|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = $38 << 16 >> 16;
   $40 = (+($39|0));
   $41 = $40 / 1024.0;
   $42 = $41;
   $43 = $c;
   $44 = $i;
   $45 = (132312 + ($44<<4)|0);
   $46 = (($45) + ($43<<2)|0);
   HEAPF32[$46>>2] = $42;
   $47 = $c;
   $48 = (($47) + 1)|0;
   $c = $48;
  }
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
 }
 STACKTOP = sp;return;
}
function _canon_600_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $data = 0, $dp = 0, $irow = 0, $pix = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = sp + 16|0;
 $row = 0;
 $irow = 0;
 while(1) {
  $0 = $irow;
  $1 = HEAP16[132112>>1]|0;
  $2 = $1&65535;
  $3 = ($0|0)<($2|0);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[880>>2]|0;
  $5 = (_fread(($data|0),1,1120,($4|0))|0);
  $6 = ($5>>>0)<(1120);
  if ($6) {
   _derror();
  }
  $7 = HEAP32[132360>>2]|0;
  $8 = $row;
  $9 = HEAP16[132368>>1]|0;
  $10 = $9&65535;
  $11 = Math_imul($8, $10)|0;
  $12 = (($7) + ($11<<1)|0);
  $pix = $12;
  $dp = $data;
  while(1) {
   $13 = $dp;
   $14 = (($data) + 1120|0);
   $15 = ($13>>>0)<($14>>>0);
   if (!($15)) {
    break;
   }
   $16 = $dp;
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = $18 << 2;
   $20 = $dp;
   $21 = (($20) + 1|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = $23 >> 6;
   $25 = (($19) + ($24))|0;
   $26 = $25&65535;
   $27 = $pix;
   HEAP16[$27>>1] = $26;
   $28 = $dp;
   $29 = (($28) + 2|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = $31 << 2;
   $33 = $dp;
   $34 = (($33) + 1|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = $36 >> 4;
   $38 = $37 & 3;
   $39 = (($32) + ($38))|0;
   $40 = $39&65535;
   $41 = $pix;
   $42 = (($41) + 2|0);
   HEAP16[$42>>1] = $40;
   $43 = $dp;
   $44 = (($43) + 3|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $47 = $46 << 2;
   $48 = $dp;
   $49 = (($48) + 1|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = $51 >> 2;
   $53 = $52 & 3;
   $54 = (($47) + ($53))|0;
   $55 = $54&65535;
   $56 = $pix;
   $57 = (($56) + 4|0);
   HEAP16[$57>>1] = $55;
   $58 = $dp;
   $59 = (($58) + 4|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&255;
   $62 = $61 << 2;
   $63 = $dp;
   $64 = (($63) + 1|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = $66 & 3;
   $68 = (($62) + ($67))|0;
   $69 = $68&65535;
   $70 = $pix;
   $71 = (($70) + 6|0);
   HEAP16[$71>>1] = $69;
   $72 = $dp;
   $73 = (($72) + 5|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74&255;
   $76 = $75 << 2;
   $77 = $dp;
   $78 = (($77) + 9|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79&255;
   $81 = $80 & 3;
   $82 = (($76) + ($81))|0;
   $83 = $82&65535;
   $84 = $pix;
   $85 = (($84) + 8|0);
   HEAP16[$85>>1] = $83;
   $86 = $dp;
   $87 = (($86) + 6|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   $90 = $89 << 2;
   $91 = $dp;
   $92 = (($91) + 9|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   $95 = $94 >> 2;
   $96 = $95 & 3;
   $97 = (($90) + ($96))|0;
   $98 = $97&65535;
   $99 = $pix;
   $100 = (($99) + 10|0);
   HEAP16[$100>>1] = $98;
   $101 = $dp;
   $102 = (($101) + 7|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = $103&255;
   $105 = $104 << 2;
   $106 = $dp;
   $107 = (($106) + 9|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = $108&255;
   $110 = $109 >> 4;
   $111 = $110 & 3;
   $112 = (($105) + ($111))|0;
   $113 = $112&65535;
   $114 = $pix;
   $115 = (($114) + 12|0);
   HEAP16[$115>>1] = $113;
   $116 = $dp;
   $117 = (($116) + 8|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   $120 = $119 << 2;
   $121 = $dp;
   $122 = (($121) + 9|0);
   $123 = HEAP8[$122>>0]|0;
   $124 = $123&255;
   $125 = $124 >> 6;
   $126 = (($120) + ($125))|0;
   $127 = $126&65535;
   $128 = $pix;
   $129 = (($128) + 14|0);
   HEAP16[$129>>1] = $127;
   $130 = $dp;
   $131 = (($130) + 10|0);
   $dp = $131;
   $132 = $pix;
   $133 = (($132) + 16|0);
   $pix = $133;
  }
  $134 = $row;
  $135 = (($134) + 2)|0;
  $row = $135;
  $136 = HEAP16[132112>>1]|0;
  $137 = $136&65535;
  $138 = ($135|0)>($137|0);
  if ($138) {
   $row = 1;
  }
  $139 = $irow;
  $140 = (($139) + 1)|0;
  $irow = $140;
 }
 STACKTOP = sp;return;
}
function _canon_600_correct() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $col = 0, $row = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $row = 0;
 while(1) {
  $0 = $row;
  $1 = HEAP16[132112>>1]|0;
  $2 = $1&65535;
  $3 = ($0|0)<($2|0);
  if (!($3)) {
   break;
  }
  $col = 0;
  while(1) {
   $4 = $col;
   $5 = HEAP16[132120>>1]|0;
   $6 = $5&65535;
   $7 = ($4|0)<($6|0);
   if (!($7)) {
    break;
   }
   $8 = HEAP32[600>>2]|0;
   $9 = $row;
   $10 = $9 << 1;
   $11 = $10 & 14;
   $12 = $col;
   $13 = $12 & 1;
   $14 = (($11) + ($13))|0;
   $15 = $14 << 1;
   $16 = $8 >>> $15;
   $17 = $16 & 3;
   $18 = $row;
   $19 = HEAP16[132128>>1]|0;
   $20 = $19&65535;
   $21 = $18 >> $20;
   $22 = HEAP16[132136>>1]|0;
   $23 = $22&65535;
   $24 = Math_imul($21, $23)|0;
   $25 = $col;
   $26 = HEAP16[132128>>1]|0;
   $27 = $26&65535;
   $28 = $25 >> $27;
   $29 = (($24) + ($28))|0;
   $30 = HEAP32[132144>>2]|0;
   $31 = (($30) + ($29<<3)|0);
   $32 = (($31) + ($17<<1)|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = $33&65535;
   $35 = HEAP32[132392>>2]|0;
   $36 = (($34) - ($35))|0;
   $val = $36;
   $37 = ($36|0)<(0);
   if ($37) {
    $val = 0;
   }
   $38 = $val;
   $39 = $col;
   $40 = $39 & 1;
   $41 = $row;
   $42 = $41 & 3;
   $43 = (132376 + ($42<<2)|0);
   $44 = (($43) + ($40<<1)|0);
   $45 = HEAP16[$44>>1]|0;
   $46 = $45 << 16 >> 16;
   $47 = Math_imul($38, $46)|0;
   $48 = $47 >> 9;
   $val = $48;
   $49 = $val;
   $50 = $49&65535;
   $51 = HEAP32[600>>2]|0;
   $52 = $row;
   $53 = $52 << 1;
   $54 = $53 & 14;
   $55 = $col;
   $56 = $55 & 1;
   $57 = (($54) + ($56))|0;
   $58 = $57 << 1;
   $59 = $51 >>> $58;
   $60 = $59 & 3;
   $61 = $row;
   $62 = HEAP16[132128>>1]|0;
   $63 = $62&65535;
   $64 = $61 >> $63;
   $65 = HEAP16[132136>>1]|0;
   $66 = $65&65535;
   $67 = Math_imul($64, $66)|0;
   $68 = $col;
   $69 = HEAP16[132128>>1]|0;
   $70 = $69&65535;
   $71 = $68 >> $70;
   $72 = (($67) + ($71))|0;
   $73 = HEAP32[132144>>2]|0;
   $74 = (($73) + ($72<<3)|0);
   $75 = (($74) + ($60<<1)|0);
   HEAP16[$75>>1] = $50;
   $76 = $col;
   $77 = (($76) + 1)|0;
   $col = $77;
  }
  $78 = $row;
  $79 = (($78) + 1)|0;
  $row = $79;
 }
 _canon_600_fixed_wb(1311);
 _canon_600_auto_wb();
 _canon_600_coeff();
 $80 = HEAP32[132392>>2]|0;
 $81 = (1023 - ($80))|0;
 $82 = ($81*1109)|0;
 $83 = $82 >>> 9;
 HEAP32[132400>>2] = $83;
 HEAP32[132392>>2] = 0;
 STACKTOP = sp;return;
}
function _canon_s2is() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $row = 0;
 while(1) {
  $1 = $row;
  $2 = ($1>>>0)<(100);
  if (!($2)) {
   label = 7;
   break;
  }
  $3 = HEAP32[880>>2]|0;
  $4 = $row;
  $5 = ($4*3340)|0;
  $6 = (($5) + 3284)|0;
  (_fseek(($3|0),($6|0),0)|0);
  $7 = HEAP32[880>>2]|0;
  $8 = (_getc(($7|0))|0);
  $9 = ($8|0)>(15);
  if ($9) {
   label = 4;
   break;
  }
  $10 = $row;
  $11 = (($10) + 1)|0;
  $row = $11;
 }
 if ((label|0) == 4) {
  $0 = 1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 else if ((label|0) == 7) {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _getbithuff($nbits,$huff) {
 $nbits = $nbits|0;
 $huff = $huff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $nbits;
 $2 = $huff;
 $3 = $1;
 $4 = ($3|0)>(25);
 if ($4) {
  $0 = 0;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 }
 $5 = $1;
 $6 = ($5|0)<(0);
 if ($6) {
  HEAP32[132424>>2] = 0;
  HEAP32[132416>>2] = 0;
  HEAP32[132408>>2] = 0;
  $0 = 0;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 }
 $7 = $1;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = HEAP32[132416>>2]|0;
  $10 = ($9|0)<(0);
  if (!($10)) {
   while(1) {
    $11 = HEAP32[132424>>2]|0;
    $12 = ($11|0)!=(0);
    if ($12) {
     $67 = 0;
    } else {
     $13 = HEAP32[132416>>2]|0;
     $14 = $1;
     $15 = ($13|0)<($14|0);
     if ($15) {
      $16 = HEAP32[880>>2]|0;
      $17 = (_getc_unlocked(($16|0))|0);
      $c = $17;
      $18 = ($17|0)!=(-1);
      if ($18) {
       $19 = HEAP32[132432>>2]|0;
       $20 = ($19|0)!=(0);
       if ($20) {
        $21 = $c;
        $22 = ($21|0)==(255);
        if ($22) {
         $23 = HEAP32[880>>2]|0;
         $24 = (_getc_unlocked(($23|0))|0);
         $25 = ($24|0)!=(0);
         $27 = $25;
        } else {
         $27 = 0;
        }
       } else {
        $27 = 0;
       }
       $26 = $27&1;
       HEAP32[132424>>2] = $26;
       $28 = $27 ^ 1;
       $67 = $28;
      } else {
       $67 = 0;
      }
     } else {
      $67 = 0;
     }
    }
    if (!($67)) {
     break;
    }
    $29 = HEAP32[132408>>2]|0;
    $30 = $29 << 8;
    $31 = $c;
    $32 = $31&255;
    $33 = $32&255;
    $34 = (($30) + ($33))|0;
    HEAP32[132408>>2] = $34;
    $35 = HEAP32[132416>>2]|0;
    $36 = (($35) + 8)|0;
    HEAP32[132416>>2] = $36;
   }
   $37 = HEAP32[132408>>2]|0;
   $38 = HEAP32[132416>>2]|0;
   $39 = (32 - ($38))|0;
   $40 = $37 << $39;
   $41 = $1;
   $42 = (32 - ($41))|0;
   $43 = $40 >>> $42;
   $c = $43;
   $44 = $2;
   $45 = ($44|0)!=(0|0);
   if ($45) {
    $46 = $c;
    $47 = $2;
    $48 = (($47) + ($46<<1)|0);
    $49 = HEAP16[$48>>1]|0;
    $50 = $49&65535;
    $51 = $50 >> 8;
    $52 = HEAP32[132416>>2]|0;
    $53 = (($52) - ($51))|0;
    HEAP32[132416>>2] = $53;
    $54 = $c;
    $55 = $2;
    $56 = (($55) + ($54<<1)|0);
    $57 = HEAP16[$56>>1]|0;
    $58 = $57&255;
    $59 = $58&255;
    $c = $59;
   } else {
    $60 = $1;
    $61 = HEAP32[132416>>2]|0;
    $62 = (($61) - ($60))|0;
    HEAP32[132416>>2] = $62;
   }
   $63 = HEAP32[132416>>2]|0;
   $64 = ($63|0)<(0);
   if ($64) {
    _derror();
   }
   $65 = $c;
   $0 = $65;
   $66 = $0;
   STACKTOP = sp;return ($66|0);
  }
 }
 $0 = 0;
 $66 = $0;
 STACKTOP = sp;return ($66|0);
}
function _make_decoder_ref($source) {
 $source = $source|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $h = 0, $huff = 0, $i = 0, $j = 0, $len = 0, $max = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 16|0);
 HEAP32[$1>>2] = $3;
 $4 = (($3) + -17|0);
 $count = $4;
 $max = 16;
 while(1) {
  $5 = $max;
  $6 = ($5|0)!=(0);
  if ($6) {
   $7 = $max;
   $8 = $count;
   $9 = (($8) + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)!=(0);
   $12 = $11 ^ 1;
   $65 = $12;
  } else {
   $65 = 0;
  }
  if (!($65)) {
   break;
  }
  $13 = $max;
  $14 = (($13) + -1)|0;
  $max = $14;
 }
 $15 = $max;
 $16 = 1 << $15;
 $17 = (1 + ($16))|0;
 $18 = (_calloc($17,2)|0);
 $huff = $18;
 $19 = $huff;
 _merror($19,132440);
 $20 = $max;
 $21 = $20&65535;
 $22 = $huff;
 HEAP16[$22>>1] = $21;
 $len = 1;
 $h = 1;
 while(1) {
  $23 = $len;
  $24 = $max;
  $25 = ($23|0)<=($24|0);
  if (!($25)) {
   break;
  }
  $i = 0;
  while(1) {
   $26 = $i;
   $27 = $len;
   $28 = $count;
   $29 = (($28) + ($27)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = ($26|0)<($31|0);
   if (!($32)) {
    break;
   }
   $j = 0;
   while(1) {
    $33 = $j;
    $34 = $max;
    $35 = $len;
    $36 = (($34) - ($35))|0;
    $37 = 1 << $36;
    $38 = ($33|0)<($37|0);
    if (!($38)) {
     break;
    }
    $39 = $h;
    $40 = $max;
    $41 = 1 << $40;
    $42 = ($39|0)<=($41|0);
    if ($42) {
     $43 = $len;
     $44 = $43 << 8;
     $45 = $0;
     $46 = HEAP32[$45>>2]|0;
     $47 = HEAP8[$46>>0]|0;
     $48 = $47&255;
     $49 = $44 | $48;
     $50 = $49&65535;
     $51 = $h;
     $52 = (($51) + 1)|0;
     $h = $52;
     $53 = $huff;
     $54 = (($53) + ($51<<1)|0);
     HEAP16[$54>>1] = $50;
    }
    $55 = $j;
    $56 = (($55) + 1)|0;
    $j = $56;
   }
   $57 = $i;
   $58 = (($57) + 1)|0;
   $i = $58;
   $59 = $0;
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + 1|0);
   HEAP32[$59>>2] = $61;
  }
  $62 = $len;
  $63 = (($62) + 1)|0;
  $len = $63;
 }
 $64 = $huff;
 STACKTOP = sp;return ($64|0);
}
function _make_decoder($source) {
 $source = $source|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $source;
 $1 = (_make_decoder_ref($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _crw_init_tables($table,$huff) {
 $table = $table|0;
 $huff = $huff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $table;
 $1 = $huff;
 $2 = $0;
 $3 = ($2>>>0)>(2);
 if ($3) {
  $0 = 2;
 }
 $4 = $0;
 $5 = (132456 + (($4*29)|0)|0);
 $6 = (_make_decoder($5)|0);
 $7 = $1;
 HEAP32[$7>>2] = $6;
 $8 = $0;
 $9 = (132544 + (($8*180)|0)|0);
 $10 = (_make_decoder($9)|0);
 $11 = $1;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _canon_has_lowbits() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $ret = 0, $test = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $test = sp + 16|0;
 $ret = 1;
 $1 = HEAP32[880>>2]|0;
 (_fseek(($1|0),0,0)|0);
 $2 = HEAP32[880>>2]|0;
 (_fread(($test|0),1,16384,($2|0))|0);
 $i = 540;
 while(1) {
  $3 = $i;
  $4 = ($3>>>0)<(16383);
  if (!($4)) {
   label = 9;
   break;
  }
  $5 = $i;
  $6 = (($test) + ($5)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)==(255);
  if ($9) {
   $10 = $i;
   $11 = (($10) + 1)|0;
   $12 = (($test) + ($11)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = ($13<<24>>24)!=(0);
   if ($14) {
    label = 5;
    break;
   }
   $ret = 0;
  }
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 if ((label|0) == 5) {
  $0 = 1;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 else if ((label|0) == 9) {
  $17 = $ret;
  $0 = $17;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _canon_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $base = 0, $block = 0, $c = 0, $carry = 0, $diff = 0, $diffbuf = 0, $huff = 0, $i = 0, $leaf = 0, $len = 0, $lowbits = 0, $nblocks = 0, $pixel = 0, $pnum = 0, $prow = 0, $r = 0, $row = 0;
 var $save = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $huff = sp + 328|0;
 $diffbuf = sp + 8|0;
 $base = sp + 288|0;
 $carry = 0;
 $pnum = 0;
 $0 = HEAP32[133088>>2]|0;
 _crw_init_tables($0,$huff);
 $1 = (_canon_has_lowbits()|0);
 $lowbits = $1;
 $2 = $lowbits;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  HEAP32[132400>>2] = 1023;
 }
 $4 = HEAP32[880>>2]|0;
 $5 = $lowbits;
 $6 = HEAP16[133096>>1]|0;
 $7 = $6&65535;
 $8 = Math_imul($5, $7)|0;
 $9 = HEAP16[132368>>1]|0;
 $10 = $9&65535;
 $11 = Math_imul($8, $10)|0;
 $12 = (($11|0) / 4)&-1;
 $13 = (540 + ($12))|0;
 (_fseek(($4|0),($13|0),0)|0);
 HEAP32[132432>>2] = 1;
 (_getbithuff(-1,0)|0);
 $row = 0;
 while(1) {
  $14 = $row;
  $15 = HEAP16[133096>>1]|0;
  $16 = $15&65535;
  $17 = ($14|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = HEAP32[132360>>2]|0;
  $19 = $row;
  $20 = HEAP16[132368>>1]|0;
  $21 = $20&65535;
  $22 = Math_imul($19, $21)|0;
  $23 = (($18) + ($22<<1)|0);
  $pixel = $23;
  $24 = HEAP16[133096>>1]|0;
  $25 = $24&65535;
  $26 = $row;
  $27 = (($25) - ($26))|0;
  $28 = (8)<($27|0);
  if ($28) {
   $36 = 8;
  } else {
   $29 = HEAP16[133096>>1]|0;
   $30 = $29&65535;
   $31 = $row;
   $32 = (($30) - ($31))|0;
   $36 = $32;
  }
  $33 = HEAP16[132368>>1]|0;
  $34 = $33&65535;
  $35 = Math_imul($36, $34)|0;
  $37 = $35 >> 6;
  $nblocks = $37;
  $block = 0;
  while(1) {
   $38 = $block;
   $39 = $nblocks;
   $40 = ($38|0)<($39|0);
   if (!($40)) {
    break;
   }
   _memset(($diffbuf|0),0,256)|0;
   $i = 0;
   while(1) {
    $41 = $i;
    $42 = ($41|0)<(64);
    if (!($42)) {
     break;
    }
    $43 = $i;
    $44 = ($43|0)>(0);
    $45 = $44&1;
    $46 = (($huff) + ($45<<2)|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = HEAP16[$47>>1]|0;
    $49 = $48&65535;
    $50 = $i;
    $51 = ($50|0)>(0);
    $52 = $51&1;
    $53 = (($huff) + ($52<<2)|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (($54) + 2|0);
    $56 = (_getbithuff($49,$55)|0);
    $leaf = $56;
    $57 = $leaf;
    $58 = ($57|0)==(0);
    if ($58) {
     $59 = $i;
     $60 = ($59|0)!=(0);
     if ($60) {
      label = 14;
      break;
     }
    }
    $61 = $leaf;
    $62 = ($61|0)==(255);
    do {
     if ($62) {
     } else {
      $63 = $leaf;
      $64 = $63 >> 4;
      $65 = $i;
      $66 = (($65) + ($64))|0;
      $i = $66;
      $67 = $leaf;
      $68 = $67 & 15;
      $len = $68;
      $69 = $len;
      $70 = ($69|0)==(0);
      if ($70) {
       break;
      }
      $71 = $len;
      $72 = (_getbithuff($71,0)|0);
      $diff = $72;
      $73 = $diff;
      $74 = $len;
      $75 = (($74) - 1)|0;
      $76 = 1 << $75;
      $77 = $73 & $76;
      $78 = ($77|0)==(0);
      if ($78) {
       $79 = $len;
       $80 = 1 << $79;
       $81 = (($80) - 1)|0;
       $82 = $diff;
       $83 = (($82) - ($81))|0;
       $diff = $83;
      }
      $84 = $i;
      $85 = ($84|0)<(64);
      if ($85) {
       $86 = $diff;
       $87 = $i;
       $88 = (($diffbuf) + ($87<<2)|0);
       HEAP32[$88>>2] = $86;
      }
     }
    } while(0);
    $89 = $i;
    $90 = (($89) + 1)|0;
    $i = $90;
   }
   if ((label|0) == 14) {
    label = 0;
   }
   $91 = $carry;
   $92 = HEAP32[$diffbuf>>2]|0;
   $93 = (($92) + ($91))|0;
   HEAP32[$diffbuf>>2] = $93;
   $94 = HEAP32[$diffbuf>>2]|0;
   $carry = $94;
   $i = 0;
   while(1) {
    $95 = $i;
    $96 = ($95|0)<(64);
    if (!($96)) {
     break;
    }
    $97 = $pnum;
    $98 = (($97) + 1)|0;
    $pnum = $98;
    $99 = HEAP16[132368>>1]|0;
    $100 = $99&65535;
    $101 = (($97|0) % ($100|0))&-1;
    $102 = ($101|0)==(0);
    if ($102) {
     $103 = (($base) + 4|0);
     HEAP32[$103>>2] = 512;
     HEAP32[$base>>2] = 512;
    }
    $104 = $i;
    $105 = (($diffbuf) + ($104<<2)|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $i;
    $108 = $107 & 1;
    $109 = (($base) + ($108<<2)|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = (($110) + ($106))|0;
    HEAP32[$109>>2] = $111;
    $112 = $111&65535;
    $113 = $block;
    $114 = $113 << 6;
    $115 = $i;
    $116 = (($114) + ($115))|0;
    $117 = $pixel;
    $118 = (($117) + ($116<<1)|0);
    HEAP16[$118>>1] = $112;
    $119 = $112&65535;
    $120 = $119 >> 10;
    $121 = ($120|0)!=(0);
    if ($121) {
     _derror();
    }
    $122 = $i;
    $123 = (($122) + 1)|0;
    $i = $123;
   }
   $124 = $block;
   $125 = (($124) + 1)|0;
   $block = $125;
  }
  $126 = $lowbits;
  $127 = ($126|0)!=(0);
  if ($127) {
   $128 = HEAP32[880>>2]|0;
   $129 = (_ftell(($128|0))|0);
   $save = $129;
   $130 = HEAP32[880>>2]|0;
   $131 = $row;
   $132 = HEAP16[132368>>1]|0;
   $133 = $132&65535;
   $134 = Math_imul($131, $133)|0;
   $135 = (($134|0) / 4)&-1;
   $136 = (26 + ($135))|0;
   (_fseek(($130|0),($136|0),0)|0);
   $137 = $pixel;
   $prow = $137;
   $i = 0;
   while(1) {
    $138 = $i;
    $139 = HEAP16[132368>>1]|0;
    $140 = $139&65535;
    $141 = $140<<1;
    $142 = ($138|0)<($141|0);
    if (!($142)) {
     break;
    }
    $143 = HEAP32[880>>2]|0;
    $144 = (_getc_unlocked(($143|0))|0);
    $c = $144;
    $r = 0;
    while(1) {
     $145 = $r;
     $146 = ($145|0)<(8);
     if (!($146)) {
      break;
     }
     $147 = $prow;
     $148 = HEAP16[$147>>1]|0;
     $149 = $148&65535;
     $150 = $149 << 2;
     $151 = $c;
     $152 = $r;
     $153 = $151 >> $152;
     $154 = $153 & 3;
     $155 = (($150) + ($154))|0;
     $val = $155;
     $156 = HEAP16[132368>>1]|0;
     $157 = $156&65535;
     $158 = ($157|0)==(2672);
     if ($158) {
      $159 = $val;
      $160 = ($159|0)<(512);
      if ($160) {
       $161 = $val;
       $162 = (($161) + 2)|0;
       $val = $162;
      }
     }
     $163 = $val;
     $164 = $163&65535;
     $165 = $prow;
     HEAP16[$165>>1] = $164;
     $166 = $r;
     $167 = (($166) + 2)|0;
     $r = $167;
     $168 = $prow;
     $169 = (($168) + 2|0);
     $prow = $169;
    }
    $170 = $i;
    $171 = (($170) + 1)|0;
    $i = $171;
   }
   $172 = HEAP32[880>>2]|0;
   $173 = $save;
   (_fseek(($172|0),($173|0),0)|0);
  }
  $174 = $row;
  $175 = (($174) + 8)|0;
  $row = $175;
 }
 $c = 0;
 while(1) {
  $176 = $c;
  $177 = ($176|0)<(2);
  if (!($177)) {
   break;
  }
  $178 = $c;
  $179 = (($huff) + ($178<<2)|0);
  $180 = HEAP32[$179>>2]|0;
  _free($180);
  $181 = $c;
  $182 = (($181) + 1)|0;
  $c = $182;
 }
 STACKTOP = sp;return;
}
function _ljpeg_start($jh,$info_only) {
 $jh = $jh|0;
 $info_only = $info_only|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $data = 0, $dp = 0, $len = 0, $tag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 65568|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = sp + 24|0;
 $dp = sp + 8|0;
 $1 = $jh;
 $2 = $info_only;
 $3 = $1;
 _memset(($3|0),0,476)|0;
 $4 = $1;
 $5 = (($4) + 28|0);
 HEAP32[$5>>2] = 2147483647;
 $6 = HEAP32[880>>2]|0;
 (_getc_unlocked(($6|0))|0);
 $7 = HEAP32[880>>2]|0;
 $8 = (_getc_unlocked(($7|0))|0);
 $9 = ($8|0)!=(216);
 if ($9) {
  $0 = 0;
  $265 = $0;
  STACKTOP = sp;return ($265|0);
 }
 while(1) {
  $10 = HEAP32[880>>2]|0;
  $11 = (_fread(($data|0),2,2,($10|0))|0);
  $12 = ($11|0)!=(0);
  if (!($12)) {
   label = 5;
   break;
  }
  $13 = HEAP8[$data>>0]|0;
  $14 = $13&255;
  $15 = $14 << 8;
  $16 = (($data) + 1|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $15 | $18;
  $20 = $19&65535;
  $tag = $20;
  $21 = (($data) + 2|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $23 << 8;
  $25 = (($data) + 3|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = $24 | $27;
  $29 = (($28) - 2)|0;
  $30 = $29&65535;
  $len = $30;
  $31 = $tag;
  $32 = $31&65535;
  $33 = ($32|0)<=(65280);
  if ($33) {
   label = 7;
   break;
  }
  $34 = $len;
  $35 = $34&65535;
  $36 = HEAP32[880>>2]|0;
  (_fread(($data|0),1,($35|0),($36|0))|0);
  $37 = $tag;
  $38 = $37&65535;
  L9: do {
   switch ($38|0) {
   case 65501:  {
    $169 = HEAP8[$data>>0]|0;
    $170 = $169&255;
    $171 = $170 << 8;
    $172 = (($data) + 1|0);
    $173 = HEAP8[$172>>0]|0;
    $174 = $173&255;
    $175 = $171 | $174;
    $176 = $1;
    $177 = (($176) + 28|0);
    HEAP32[$177>>2] = $175;
    break;
   }
   case 65476:  {
    $95 = $2;
    $96 = ($95|0)!=(0);
    if ($96) {
     break L9;
    }
    HEAP32[$dp>>2] = $data;
    while(1) {
     $97 = HEAP32[$dp>>2]|0;
     $98 = $len;
     $99 = $98&65535;
     $100 = (($data) + ($99)|0);
     $101 = ($97>>>0)<($100>>>0);
     if ($101) {
      $102 = HEAP32[$dp>>2]|0;
      $103 = (($102) + 1|0);
      HEAP32[$dp>>2] = $103;
      $104 = HEAP8[$102>>0]|0;
      $105 = $104&255;
      $c = $105;
      $106 = $105&65535;
      $107 = $106 & -20;
      $108 = ($107|0)!=(0);
      $109 = $108 ^ 1;
      $266 = $109;
     } else {
      $266 = 0;
     }
     if (!($266)) {
      break;
     }
     $110 = (_make_decoder_ref($dp)|0);
     $111 = $c;
     $112 = $111&65535;
     $113 = $1;
     $114 = (($113) + 312|0);
     $115 = (($114) + ($112<<2)|0);
     HEAP32[$115>>2] = $110;
     $116 = $c;
     $117 = $116&65535;
     $118 = $1;
     $119 = (($118) + 392|0);
     $120 = (($119) + ($117<<2)|0);
     HEAP32[$120>>2] = $110;
    }
    break;
   }
   case 65472: case 65473:  {
    label = 10;
    break;
   }
   case 65475:  {
    $39 = (($data) + 7|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40&255;
    $42 = $41 >> 4;
    $43 = (($data) + 7|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    $46 = $45 & 15;
    $47 = Math_imul($42, $46)|0;
    $48 = (($47) - 1)|0;
    $49 = $48 & 3;
    $50 = $1;
    $51 = (($50) + 20|0);
    HEAP32[$51>>2] = $49;
    label = 10;
    break;
   }
   case 65498:  {
    $121 = HEAP8[$data>>0]|0;
    $122 = $121&255;
    $123 = $122<<1;
    $124 = (1 + ($123))|0;
    $125 = (($data) + ($124)|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126&255;
    $128 = $1;
    $129 = (($128) + 24|0);
    HEAP32[$129>>2] = $127;
    $130 = HEAP8[$data>>0]|0;
    $131 = $130&255;
    $132 = $131<<1;
    $133 = (3 + ($132))|0;
    $134 = (($data) + ($133)|0);
    $135 = HEAP8[$134>>0]|0;
    $136 = $135&255;
    $137 = $136 & 15;
    $138 = $1;
    $139 = (($138) + 4|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = (($140) - ($137))|0;
    HEAP32[$139>>2] = $141;
    break;
   }
   case 65499:  {
    $c = 0;
    while(1) {
     $142 = $c;
     $143 = $142&65535;
     $144 = ($143|0)<(64);
     if (!($144)) {
      break;
     }
     $145 = $c;
     $146 = $145&65535;
     $147 = $146<<1;
     $148 = (($147) + 1)|0;
     $149 = (($data) + ($148)|0);
     $150 = HEAP8[$149>>0]|0;
     $151 = $150&255;
     $152 = $151 << 8;
     $153 = $c;
     $154 = $153&65535;
     $155 = $154<<1;
     $156 = (($155) + 2)|0;
     $157 = (($data) + ($156)|0);
     $158 = HEAP8[$157>>0]|0;
     $159 = $158&255;
     $160 = $152 | $159;
     $161 = $160&65535;
     $162 = $c;
     $163 = $162&65535;
     $164 = $1;
     $165 = (($164) + 56|0);
     $166 = (($165) + ($163<<1)|0);
     HEAP16[$166>>1] = $161;
     $167 = $c;
     $168 = (($167) + 1)<<16>>16;
     $c = $168;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  if ((label|0) == 10) {
   label = 0;
   $52 = $tag;
   $53 = $52&65535;
   $54 = $53 & 255;
   $55 = $1;
   HEAP32[$55>>2] = $54;
   $56 = HEAP8[$data>>0]|0;
   $57 = $56&255;
   $58 = $1;
   $59 = (($58) + 4|0);
   HEAP32[$59>>2] = $57;
   $60 = (($data) + 1|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = $62 << 8;
   $64 = (($data) + 2|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = $63 | $66;
   $68 = $1;
   $69 = (($68) + 8|0);
   HEAP32[$69>>2] = $67;
   $70 = (($data) + 3|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = $71&255;
   $73 = $72 << 8;
   $74 = (($data) + 4|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75&255;
   $77 = $73 | $76;
   $78 = $1;
   $79 = (($78) + 12|0);
   HEAP32[$79>>2] = $77;
   $80 = (($data) + 5|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = $81&255;
   $83 = $1;
   $84 = (($83) + 20|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = (($82) + ($85))|0;
   $87 = $1;
   $88 = (($87) + 16|0);
   HEAP32[$88>>2] = $86;
   $89 = $len;
   $90 = $89&65535;
   $91 = ($90|0)==(9);
   if ($91) {
    $92 = HEAP32[133104>>2]|0;
    $93 = ($92|0)!=(0);
    if (!($93)) {
     $94 = HEAP32[880>>2]|0;
     (_getc(($94|0))|0);
    }
   }
  }
  $178 = $tag;
  $179 = $178&65535;
  $180 = ($179|0)!=(65498);
  if (!($180)) {
   label = 31;
   break;
  }
 }
 if ((label|0) == 5) {
  $0 = 0;
  $265 = $0;
  STACKTOP = sp;return ($265|0);
 }
 else if ((label|0) == 7) {
  $0 = 0;
  $265 = $0;
  STACKTOP = sp;return ($265|0);
 }
 else if ((label|0) == 31) {
  $181 = $2;
  $182 = ($181|0)!=(0);
  if ($182) {
   $0 = 1;
   $265 = $0;
   STACKTOP = sp;return ($265|0);
  }
  $183 = $1;
  $184 = (($183) + 16|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = ($185|0)>(6);
  if (!($186)) {
   $187 = $1;
   $188 = (($187) + 312|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = ($189|0)!=(0|0);
   if ($190) {
    $c = 0;
    while(1) {
     $191 = $c;
     $192 = $191&65535;
     $193 = ($192|0)<(19);
     if (!($193)) {
      break;
     }
     $194 = $c;
     $195 = $194&65535;
     $196 = (($195) + 1)|0;
     $197 = $1;
     $198 = (($197) + 312|0);
     $199 = (($198) + ($196<<2)|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = ($200|0)!=(0|0);
     if (!($201)) {
      $202 = $c;
      $203 = $202&65535;
      $204 = $1;
      $205 = (($204) + 312|0);
      $206 = (($205) + ($203<<2)|0);
      $207 = HEAP32[$206>>2]|0;
      $208 = $c;
      $209 = $208&65535;
      $210 = (($209) + 1)|0;
      $211 = $1;
      $212 = (($211) + 312|0);
      $213 = (($212) + ($210<<2)|0);
      HEAP32[$213>>2] = $207;
     }
     $214 = $c;
     $215 = (($214) + 1)<<16>>16;
     $c = $215;
    }
    $216 = $1;
    $217 = (($216) + 20|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = ($218|0)!=(0);
    if ($219) {
     $c = 0;
     while(1) {
      $220 = $c;
      $221 = $220&65535;
      $222 = ($221|0)<(4);
      if (!($222)) {
       break;
      }
      $223 = $1;
      $224 = (($223) + 312|0);
      $225 = (($224) + 4|0);
      $226 = HEAP32[$225>>2]|0;
      $227 = $c;
      $228 = $227&65535;
      $229 = (2 + ($228))|0;
      $230 = $1;
      $231 = (($230) + 312|0);
      $232 = (($231) + ($229<<2)|0);
      HEAP32[$232>>2] = $226;
      $233 = $c;
      $234 = (($233) + 1)<<16>>16;
      $c = $234;
     }
     $c = 0;
     while(1) {
      $235 = $c;
      $236 = $235&65535;
      $237 = $1;
      $238 = (($237) + 20|0);
      $239 = HEAP32[$238>>2]|0;
      $240 = ($236|0)<($239|0);
      if (!($240)) {
       break;
      }
      $241 = $1;
      $242 = (($241) + 312|0);
      $243 = HEAP32[$242>>2]|0;
      $244 = $c;
      $245 = $244&65535;
      $246 = (1 + ($245))|0;
      $247 = $1;
      $248 = (($247) + 312|0);
      $249 = (($248) + ($246<<2)|0);
      HEAP32[$249>>2] = $243;
      $250 = $c;
      $251 = (($250) + 1)<<16>>16;
      $c = $251;
     }
    }
    $252 = $1;
    $253 = (($252) + 12|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = $1;
    $256 = (($255) + 16|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = Math_imul($254, $257)|0;
    $259 = (_calloc($258,4)|0);
    $260 = $1;
    $261 = (($260) + 472|0);
    HEAP32[$261>>2] = $259;
    $262 = $1;
    $263 = (($262) + 472|0);
    $264 = HEAP32[$263>>2]|0;
    _merror($264,133112);
    HEAP32[132432>>2] = 1;
    $0 = 1;
    $265 = $0;
    STACKTOP = sp;return ($265|0);
   }
  }
  $0 = 0;
  $265 = $0;
  STACKTOP = sp;return ($265|0);
 }
 return (0)|0;
}
function _ljpeg_end($jh) {
 $jh = $jh|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $jh;
 $c = 0;
 while(1) {
  $1 = $c;
  $2 = ($1|0)<(4);
  if (!($2)) {
   break;
  }
  $3 = $c;
  $4 = $0;
  $5 = (($4) + 392|0);
  $6 = (($5) + ($3<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if ($8) {
   $9 = $c;
   $10 = $0;
   $11 = (($10) + 392|0);
   $12 = (($11) + ($9<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   _free($13);
  }
  $14 = $c;
  $15 = (($14) + 1)|0;
  $c = $15;
 }
 $16 = $0;
 $17 = (($16) + 472|0);
 $18 = HEAP32[$17>>2]|0;
 _free($18);
 STACKTOP = sp;return;
}
function _ljpeg_diff($huff) {
 $huff = $huff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $diff = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $huff;
 $2 = $1;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = $1;
 $6 = (($5) + 2|0);
 $7 = (_getbithuff($4,$6)|0);
 $len = $7;
 $8 = $len;
 $9 = ($8|0)==(16);
 do {
  if ($9) {
   $10 = HEAP32[133104>>2]|0;
   $11 = ($10|0)!=(0);
   if ($11) {
    $12 = HEAP32[133104>>2]|0;
    $13 = ($12>>>0)>=(16842752);
    if (!($13)) {
     break;
    }
   }
   $0 = -32768;
   $28 = $0;
   STACKTOP = sp;return ($28|0);
  }
 } while(0);
 $14 = $len;
 $15 = (_getbithuff($14,0)|0);
 $diff = $15;
 $16 = $diff;
 $17 = $len;
 $18 = (($17) - 1)|0;
 $19 = 1 << $18;
 $20 = $16 & $19;
 $21 = ($20|0)==(0);
 if ($21) {
  $22 = $len;
  $23 = 1 << $22;
  $24 = (($23) - 1)|0;
  $25 = $diff;
  $26 = (($25) - ($24))|0;
  $diff = $26;
 }
 $27 = $diff;
 $0 = $27;
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function _ljpeg_row($jrow,$jh) {
 $jrow = $jrow|0;
 $jh = $jh|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $c = 0, $col = 0, $diff = 0, $mark = 0, $pred = 0, $row = 0, $spred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $row = sp + 8|0;
 $0 = $jrow;
 $1 = $jh;
 $spred = 0;
 $mark = 0;
 $2 = $0;
 $3 = $1;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = Math_imul($2, $5)|0;
 $7 = $1;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($6|0) % ($9|0))&-1;
 $11 = ($10|0)==(0);
 if ($11) {
  $c = 0;
  while(1) {
   $12 = $c;
   $13 = ($12|0)<(6);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = (($14) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) - 1)|0;
   $18 = 1 << $17;
   $19 = $c;
   $20 = $1;
   $21 = (($20) + 32|0);
   $22 = (($21) + ($19<<2)|0);
   HEAP32[$22>>2] = $18;
   $23 = $c;
   $24 = (($23) + 1)|0;
   $c = $24;
  }
  $25 = $0;
  $26 = ($25|0)!=(0);
  if ($26) {
   $27 = HEAP32[880>>2]|0;
   (_fseek(($27|0),-2,1)|0);
   while(1) {
    $28 = $mark;
    $29 = $28&65535;
    $30 = $29 << 8;
    $31 = HEAP32[880>>2]|0;
    $32 = (_getc_unlocked(($31|0))|0);
    $c = $32;
    $33 = (($30) + ($32))|0;
    $34 = $33&65535;
    $mark = $34;
    $35 = $c;
    $36 = ($35|0)!=(-1);
    if ($36) {
     $37 = $mark;
     $38 = $37&65535;
     $39 = $38 >> 4;
     $40 = ($39|0)!=(4093);
     $219 = $40;
    } else {
     $219 = 0;
    }
    if (!($219)) {
     break;
    }
   }
  }
  (_getbithuff(-1,0)|0);
 }
 $c = 0;
 while(1) {
  $41 = $c;
  $42 = ($41|0)<(3);
  if (!($42)) {
   break;
  }
  $43 = $1;
  $44 = (($43) + 472|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $1;
  $47 = (($46) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $1;
  $50 = (($49) + 16|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = Math_imul($48, $51)|0;
  $53 = $0;
  $54 = $c;
  $55 = (($53) + ($54))|0;
  $56 = $55 & 1;
  $57 = Math_imul($52, $56)|0;
  $58 = (($45) + ($57<<1)|0);
  $59 = $c;
  $60 = (($row) + ($59<<2)|0);
  HEAP32[$60>>2] = $58;
  $61 = $c;
  $62 = (($61) + 1)|0;
  $c = $62;
 }
 $col = 0;
 while(1) {
  $63 = $col;
  $64 = $1;
  $65 = (($64) + 12|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($63|0)<($66|0);
  if (!($67)) {
   break;
  }
  $c = 0;
  while(1) {
   $68 = $c;
   $69 = $1;
   $70 = (($69) + 16|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($68|0)<($71|0);
   if (!($72)) {
    break;
   }
   $73 = $c;
   $74 = $1;
   $75 = (($74) + 312|0);
   $76 = (($75) + ($73<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (_ljpeg_diff($77)|0);
   $diff = $78;
   $79 = $1;
   $80 = (($79) + 20|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)!=(0);
   if ($82) {
    $83 = $c;
    $84 = $1;
    $85 = (($84) + 20|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($83|0)<=($86|0);
    if ($87) {
     $88 = $col;
     $89 = $c;
     $90 = $88 | $89;
     $91 = ($90|0)!=(0);
     if ($91) {
      $92 = $spred;
      $pred = $92;
     } else {
      label = 26;
     }
    } else {
     label = 26;
    }
   } else {
    label = 26;
   }
   if ((label|0) == 26) {
    label = 0;
    $93 = $col;
    $94 = ($93|0)!=(0);
    if ($94) {
     $95 = $1;
     $96 = (($95) + 16|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = (0 - ($97))|0;
     $99 = HEAP32[$row>>2]|0;
     $100 = (($99) + ($98<<1)|0);
     $101 = HEAP16[$100>>1]|0;
     $102 = $101&65535;
     $pred = $102;
    } else {
     $103 = $diff;
     $104 = $c;
     $105 = $1;
     $106 = (($105) + 32|0);
     $107 = (($106) + ($104<<2)|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = (($108) + ($103))|0;
     HEAP32[$107>>2] = $109;
     $110 = $diff;
     $111 = (($109) - ($110))|0;
     $pred = $111;
    }
   }
   $112 = $0;
   $113 = ($112|0)!=(0);
   if ($113) {
    $114 = $col;
    $115 = ($114|0)!=(0);
    if ($115) {
     $116 = $1;
     $117 = (($116) + 24|0);
     $118 = HEAP32[$117>>2]|0;
     switch ($118|0) {
     case 2:  {
      $119 = (($row) + 4|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = HEAP16[$120>>1]|0;
      $122 = $121&65535;
      $pred = $122;
      break;
     }
     case 1:  {
      break;
     }
     case 3:  {
      $123 = $1;
      $124 = (($123) + 16|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = (0 - ($125))|0;
      $127 = (($row) + 4|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = (($128) + ($126<<1)|0);
      $130 = HEAP16[$129>>1]|0;
      $131 = $130&65535;
      $pred = $131;
      break;
     }
     case 7:  {
      $182 = $pred;
      $183 = (($row) + 4|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = HEAP16[$184>>1]|0;
      $186 = $185&65535;
      $187 = (($182) + ($186))|0;
      $188 = $187 >> 1;
      $pred = $188;
      break;
     }
     case 6:  {
      $165 = (($row) + 4|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP16[$166>>1]|0;
      $168 = $167&65535;
      $169 = $pred;
      $170 = $1;
      $171 = (($170) + 16|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = (0 - ($172))|0;
      $174 = (($row) + 4|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = (($175) + ($173<<1)|0);
      $177 = HEAP16[$176>>1]|0;
      $178 = $177&65535;
      $179 = (($169) - ($178))|0;
      $180 = $179 >> 1;
      $181 = (($168) + ($180))|0;
      $pred = $181;
      break;
     }
     case 4:  {
      $132 = $pred;
      $133 = (($row) + 4|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = HEAP16[$134>>1]|0;
      $136 = $135&65535;
      $137 = (($132) + ($136))|0;
      $138 = $1;
      $139 = (($138) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (0 - ($140))|0;
      $142 = (($row) + 4|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = (($143) + ($141<<1)|0);
      $145 = HEAP16[$144>>1]|0;
      $146 = $145&65535;
      $147 = (($137) - ($146))|0;
      $pred = $147;
      break;
     }
     case 5:  {
      $148 = $pred;
      $149 = (($row) + 4|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = HEAP16[$150>>1]|0;
      $152 = $151&65535;
      $153 = $1;
      $154 = (($153) + 16|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = (0 - ($155))|0;
      $157 = (($row) + 4|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = (($158) + ($156<<1)|0);
      $160 = HEAP16[$159>>1]|0;
      $161 = $160&65535;
      $162 = (($152) - ($161))|0;
      $163 = $162 >> 1;
      $164 = (($148) + ($163))|0;
      $pred = $164;
      break;
     }
     default: {
      $pred = 0;
     }
     }
    }
   }
   $189 = $pred;
   $190 = $diff;
   $191 = (($189) + ($190))|0;
   $192 = $191&65535;
   $193 = HEAP32[$row>>2]|0;
   HEAP16[$193>>1] = $192;
   $194 = $192&65535;
   $195 = $1;
   $196 = (($195) + 4|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $194 >> $197;
   $199 = ($198|0)!=(0);
   if ($199) {
    _derror();
   }
   $200 = $c;
   $201 = $1;
   $202 = (($201) + 20|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = ($200|0)<=($203|0);
   if ($204) {
    $205 = HEAP32[$row>>2]|0;
    $206 = HEAP16[$205>>1]|0;
    $207 = $206&65535;
    $spred = $207;
   }
   $208 = HEAP32[$row>>2]|0;
   $209 = (($208) + 2|0);
   HEAP32[$row>>2] = $209;
   $210 = (($row) + 4|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = (($211) + 2|0);
   HEAP32[$210>>2] = $212;
   $213 = $c;
   $214 = (($213) + 1)|0;
   $c = $214;
  }
  $215 = $col;
  $216 = (($215) + 1)|0;
  $col = $216;
 }
 $217 = (($row) + 8|0);
 $218 = HEAP32[$217>>2]|0;
 STACKTOP = sp;return ($218|0);
}
function _lossless_jpeg_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col = 0, $i = 0, $j = 0, $jcol = 0, $jh = 0, $jidx = 0, $jrow = 0, $jwide = 0, $row = 0, $rp = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $jh = sp;
 $row = 0;
 $col = 0;
 $0 = (_ljpeg_start($jh,0)|0);
 $1 = ($0|0)!=(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = (($jh) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($jh) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = Math_imul($3, $5)|0;
 $jwide = $6;
 $jrow = 0;
 while(1) {
  $7 = $jrow;
  $8 = (($jh) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $jrow;
  $12 = (_ljpeg_row($11,$jh)|0);
  $rp = $12;
  $13 = HEAP32[133128>>2]|0;
  $14 = $13 & 1;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $jrow;
   $17 = $16 & 1;
   $18 = ($17|0)!=(0);
   if ($18) {
    $19 = HEAP16[132112>>1]|0;
    $20 = $19&65535;
    $21 = (($20) - 1)|0;
    $22 = $jrow;
    $23 = (($22|0) / 2)&-1;
    $24 = (($21) - ($23))|0;
    $27 = $24;
   } else {
    $25 = $jrow;
    $26 = (($25|0) / 2)&-1;
    $27 = $26;
   }
   $row = $27;
  }
  $jcol = 0;
  while(1) {
   $28 = $jcol;
   $29 = $jwide;
   $30 = ($28|0)<($29|0);
   if (!($30)) {
    break;
   }
   $31 = $rp;
   $32 = (($31) + 2|0);
   $rp = $32;
   $33 = HEAP16[$31>>1]|0;
   $34 = $33&65535;
   $35 = (968 + ($34<<1)|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = $36&65535;
   $val = $37;
   $38 = HEAP16[133136>>1]|0;
   $39 = ($38<<16>>16)!=(0);
   if ($39) {
    $40 = $jrow;
    $41 = $jwide;
    $42 = Math_imul($40, $41)|0;
    $43 = $jcol;
    $44 = (($42) + ($43))|0;
    $jidx = $44;
    $45 = $jidx;
    $46 = HEAP16[((133136 + 2|0))>>1]|0;
    $47 = $46&65535;
    $48 = HEAP16[133096>>1]|0;
    $49 = $48&65535;
    $50 = Math_imul($47, $49)|0;
    $51 = (($45|0) / ($50|0))&-1;
    $i = $51;
    $52 = $i;
    $53 = HEAP16[133136>>1]|0;
    $54 = $53&65535;
    $55 = ($52|0)>=($54|0);
    $56 = $55&1;
    $j = $56;
    if ($55) {
     $57 = HEAP16[133136>>1]|0;
     $58 = $57&65535;
     $i = $58;
    }
    $59 = $i;
    $60 = HEAP16[((133136 + 2|0))>>1]|0;
    $61 = $60&65535;
    $62 = HEAP16[133096>>1]|0;
    $63 = $62&65535;
    $64 = Math_imul($61, $63)|0;
    $65 = Math_imul($59, $64)|0;
    $66 = $jidx;
    $67 = (($66) - ($65))|0;
    $jidx = $67;
    $68 = $jidx;
    $69 = $j;
    $70 = (1 + ($69))|0;
    $71 = (133136 + ($70<<1)|0);
    $72 = HEAP16[$71>>1]|0;
    $73 = $72&65535;
    $74 = (($68|0) / ($73|0))&-1;
    $row = $74;
    $75 = $jidx;
    $76 = $j;
    $77 = (1 + ($76))|0;
    $78 = (133136 + ($77<<1)|0);
    $79 = HEAP16[$78>>1]|0;
    $80 = $79&65535;
    $81 = (($75|0) % ($80|0))&-1;
    $82 = $i;
    $83 = HEAP16[((133136 + 2|0))>>1]|0;
    $84 = $83&65535;
    $85 = Math_imul($82, $84)|0;
    $86 = (($81) + ($85))|0;
    $col = $86;
   }
   $87 = HEAP16[132368>>1]|0;
   $88 = $87&65535;
   $89 = ($88|0)==(3984);
   if ($89) {
    $90 = $col;
    $91 = (($90) - 2)|0;
    $col = $91;
    $92 = ($91|0)<(0);
    if ($92) {
     $93 = $row;
     $94 = (($93) + -1)|0;
     $row = $94;
     $95 = HEAP16[132368>>1]|0;
     $96 = $95&65535;
     $97 = $col;
     $98 = (($97) + ($96))|0;
     $col = $98;
    }
   }
   $99 = $row;
   $100 = HEAP16[133096>>1]|0;
   $101 = $100&65535;
   $102 = ($99>>>0)<($101>>>0);
   if ($102) {
    $103 = $val;
    $104 = $103&65535;
    $105 = $row;
    $106 = HEAP16[132368>>1]|0;
    $107 = $106&65535;
    $108 = Math_imul($105, $107)|0;
    $109 = $col;
    $110 = (($108) + ($109))|0;
    $111 = HEAP32[132360>>2]|0;
    $112 = (($111) + ($110<<1)|0);
    HEAP16[$112>>1] = $104;
   }
   $113 = $col;
   $114 = (($113) + 1)|0;
   $col = $114;
   $115 = HEAP16[132368>>1]|0;
   $116 = $115&65535;
   $117 = ($114|0)>=($116|0);
   if ($117) {
    $118 = $row;
    $119 = (($118) + 1)|0;
    $row = $119;
    $col = 0;
   }
   $120 = $jcol;
   $121 = (($120) + 1)|0;
   $jcol = $121;
  }
  $122 = $jrow;
  $123 = (($122) + 1)|0;
  $jrow = $123;
 }
 _ljpeg_end($jh);
 STACKTOP = sp;return;
}
function _canon_sraw_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $col = 0, $cp = 0, $ecol = 0, $hue = 0, $ip = 0, $jcol = 0, $jh = 0, $jrow = 0, $jwide = 0;
 var $pix = 0, $row = 0, $rp = 0, $scol = 0, $slice = 0, $v = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $ver = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $jh = sp + 88|0;
 $pix = sp + 32|0;
 $v = sp + 16|0;
 $rp = 0;
 $jrow = 0;
 $jcol = 0;
 ;HEAP32[$v+0>>2]=0|0;HEAP32[$v+4>>2]=0|0;HEAP32[$v+8>>2]=0|0;
 $0 = (_ljpeg_start($jh,0)|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  $2 = (($jh) + 16|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)<(4);
  if (!($4)) {
   $5 = (($jh) + 12|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $6 >> 1;
   HEAP32[$5>>2] = $7;
   $8 = (($jh) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = Math_imul($7, $9)|0;
   $jwide = $10;
   $slice = 0;
   $ecol = 0;
   while(1) {
    $11 = $slice;
    $12 = HEAP16[133136>>1]|0;
    $13 = $12&65535;
    $14 = ($11|0)<=($13|0);
    if (!($14)) {
     break;
    }
    $15 = $ecol;
    $scol = $15;
    $16 = HEAP16[((133136 + 2|0))>>1]|0;
    $17 = $16&65535;
    $18 = $17<<1;
    $19 = (($jh) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (($18|0) / ($20|0))&-1;
    $22 = $ecol;
    $23 = (($22) + ($21))|0;
    $ecol = $23;
    $24 = HEAP16[133136>>1]|0;
    $25 = ($24<<16>>16)!=(0);
    if ($25) {
     $26 = $ecol;
     $27 = HEAP16[132368>>1]|0;
     $28 = $27&65535;
     $29 = (($28) - 1)|0;
     $30 = ($26|0)>($29|0);
     if ($30) {
      label = 8;
     }
    } else {
     label = 8;
    }
    if ((label|0) == 8) {
     label = 0;
     $31 = HEAP16[132368>>1]|0;
     $32 = $31&65535;
     $33 = $32 & -2;
     $ecol = $33;
    }
    $row = 0;
    while(1) {
     $34 = $row;
     $35 = HEAP16[132112>>1]|0;
     $36 = $35&65535;
     $37 = ($34|0)<($36|0);
     if (!($37)) {
      break;
     }
     $38 = HEAP32[132144>>2]|0;
     $39 = $row;
     $40 = HEAP16[132120>>1]|0;
     $41 = $40&65535;
     $42 = Math_imul($39, $41)|0;
     $43 = (($38) + ($42<<3)|0);
     $ip = $43;
     $44 = $scol;
     $col = $44;
     while(1) {
      $45 = $col;
      $46 = $ecol;
      $47 = ($45|0)<($46|0);
      if (!($47)) {
       break;
      }
      $48 = $jwide;
      $49 = $jcol;
      $50 = (($49|0) % ($48|0))&-1;
      $jcol = $50;
      $51 = ($50|0)==(0);
      if ($51) {
       $52 = $jrow;
       $53 = (($52) + 1)|0;
       $jrow = $53;
       $54 = (_ljpeg_row($52,$jh)|0);
       $rp = $54;
      }
      $55 = $col;
      $56 = HEAP16[132120>>1]|0;
      $57 = $56&65535;
      $58 = ($55|0)>=($57|0);
      if ($58) {
      } else {
       $c = 0;
       while(1) {
        $59 = $c;
        $60 = (($jh) + 16|0);
        $61 = HEAP32[$60>>2]|0;
        $62 = (($61) - 2)|0;
        $63 = ($59|0)<($62|0);
        if (!($63)) {
         break;
        }
        $64 = $jcol;
        $65 = $c;
        $66 = (($64) + ($65))|0;
        $67 = $rp;
        $68 = (($67) + ($66<<1)|0);
        $69 = HEAP16[$68>>1]|0;
        $70 = $col;
        $71 = $c;
        $72 = $71 >> 1;
        $73 = HEAP16[132120>>1]|0;
        $74 = $73&65535;
        $75 = Math_imul($72, $74)|0;
        $76 = (($70) + ($75))|0;
        $77 = $c;
        $78 = $77 & 1;
        $79 = (($76) + ($78))|0;
        $80 = $ip;
        $81 = (($80) + ($79<<3)|0);
        HEAP16[$81>>1] = $69;
        $82 = $c;
        $83 = (($82) + 1)|0;
        $c = $83;
       }
       $84 = $jcol;
       $85 = (($jh) + 16|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = (($84) + ($86))|0;
       $88 = (($87) - 2)|0;
       $89 = $rp;
       $90 = (($89) + ($88<<1)|0);
       $91 = HEAP16[$90>>1]|0;
       $92 = $91 << 16 >> 16;
       $93 = (($92) - 16384)|0;
       $94 = $93&65535;
       $95 = $col;
       $96 = $ip;
       $97 = (($96) + ($95<<3)|0);
       $98 = (($97) + 2|0);
       HEAP16[$98>>1] = $94;
       $99 = $jcol;
       $100 = (($jh) + 16|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = (($99) + ($101))|0;
       $103 = (($102) - 1)|0;
       $104 = $rp;
       $105 = (($104) + ($103<<1)|0);
       $106 = HEAP16[$105>>1]|0;
       $107 = $106 << 16 >> 16;
       $108 = (($107) - 16384)|0;
       $109 = $108&65535;
       $110 = $col;
       $111 = $ip;
       $112 = (($111) + ($110<<3)|0);
       $113 = (($112) + 4|0);
       HEAP16[$113>>1] = $109;
      }
      $114 = $col;
      $115 = (($114) + 2)|0;
      $col = $115;
      $116 = (($jh) + 16|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = $jcol;
      $119 = (($118) + ($117))|0;
      $jcol = $119;
     }
     $120 = (($jh) + 16|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = $121 >> 1;
     $123 = (($122) - 1)|0;
     $124 = $row;
     $125 = (($124) + ($123))|0;
     $row = $125;
    }
    $126 = $slice;
    $127 = (($126) + 1)|0;
    $slice = $127;
   }
   $cp = 133144;
   while(1) {
    $128 = $cp;
    $129 = HEAP8[$128>>0]|0;
    $130 = $129 << 24 >> 24;
    $131 = ($130|0)!=(0);
    if ($131) {
     $132 = $cp;
     $133 = HEAP8[$132>>0]|0;
     $134 = $133 << 24 >> 24;
     $135 = (_isdigit($134)|0);
     $136 = ($135|0)!=(0);
     $137 = $136 ^ 1;
     $468 = $137;
    } else {
     $468 = 0;
    }
    if (!($468)) {
     break;
    }
    $138 = $cp;
    $139 = (($138) + 1|0);
    $cp = $139;
   }
   $140 = $cp;
   $141 = (($v) + 4|0);
   $142 = (($v) + 8|0);
   HEAP32[$vararg_buffer>>2] = $v;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $141;
   $vararg_ptr2 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $142;
   (_sscanf($140,133208,$vararg_buffer)|0);
   $143 = HEAP32[$v>>2]|0;
   $144 = ($143*1000)|0;
   $145 = (($v) + 4|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = (($144) + ($146))|0;
   $148 = ($147*1000)|0;
   $149 = (($v) + 8|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = (($148) + ($150))|0;
   $ver = $151;
   $152 = (($jh) + 20|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = (($153) + 1)|0;
   $155 = $154 << 2;
   $hue = $155;
   $156 = HEAP32[133224>>2]|0;
   $157 = ($156>>>0)>=(2147484289);
   if ($157) {
    label = 36;
   } else {
    $158 = HEAP32[133224>>2]|0;
    $159 = ($158|0)==(-2147483112);
    if ($159) {
     $160 = $ver;
     $161 = ($160|0)>(1000006);
     if ($161) {
      label = 36;
     }
    }
   }
   if ((label|0) == 36) {
    $162 = (($jh) + 20|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = $163 << 1;
    $hue = $164;
   }
   $165 = HEAP32[132144>>2]|0;
   $ip = $165;
   $166 = $ip;
   $rp = $166;
   $row = 0;
   while(1) {
    $167 = $row;
    $168 = HEAP16[132112>>1]|0;
    $169 = $168&65535;
    $170 = ($167|0)<($169|0);
    if (!($170)) {
     break;
    }
    $171 = $row;
    $172 = (($jh) + 20|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = $173 >> 1;
    $175 = $171 & $174;
    $176 = ($175|0)!=(0);
    if ($176) {
     $col = 0;
     while(1) {
      $177 = $col;
      $178 = HEAP16[132120>>1]|0;
      $179 = $178&65535;
      $180 = ($177|0)<($179|0);
      if (!($180)) {
       break;
      }
      $c = 1;
      while(1) {
       $181 = $c;
       $182 = ($181|0)<(3);
       if (!($182)) {
        break;
       }
       $183 = $row;
       $184 = HEAP16[132112>>1]|0;
       $185 = $184&65535;
       $186 = (($185) - 1)|0;
       $187 = ($183|0)==($186|0);
       if ($187) {
        $188 = $c;
        $189 = $col;
        $190 = HEAP16[132120>>1]|0;
        $191 = $190&65535;
        $192 = (($189) - ($191))|0;
        $193 = $ip;
        $194 = (($193) + ($192<<3)|0);
        $195 = (($194) + ($188<<1)|0);
        $196 = HEAP16[$195>>1]|0;
        $197 = $c;
        $198 = $col;
        $199 = $ip;
        $200 = (($199) + ($198<<3)|0);
        $201 = (($200) + ($197<<1)|0);
        HEAP16[$201>>1] = $196;
       } else {
        $202 = $c;
        $203 = $col;
        $204 = HEAP16[132120>>1]|0;
        $205 = $204&65535;
        $206 = (($203) - ($205))|0;
        $207 = $ip;
        $208 = (($207) + ($206<<3)|0);
        $209 = (($208) + ($202<<1)|0);
        $210 = HEAP16[$209>>1]|0;
        $211 = $210 << 16 >> 16;
        $212 = $c;
        $213 = $col;
        $214 = HEAP16[132120>>1]|0;
        $215 = $214&65535;
        $216 = (($213) + ($215))|0;
        $217 = $ip;
        $218 = (($217) + ($216<<3)|0);
        $219 = (($218) + ($212<<1)|0);
        $220 = HEAP16[$219>>1]|0;
        $221 = $220 << 16 >> 16;
        $222 = (($211) + ($221))|0;
        $223 = (($222) + 1)|0;
        $224 = $223 >> 1;
        $225 = $224&65535;
        $226 = $c;
        $227 = $col;
        $228 = $ip;
        $229 = (($228) + ($227<<3)|0);
        $230 = (($229) + ($226<<1)|0);
        HEAP16[$230>>1] = $225;
       }
       $231 = $c;
       $232 = (($231) + 1)|0;
       $c = $232;
      }
      $233 = $col;
      $234 = (($233) + 2)|0;
      $col = $234;
     }
    }
    $col = 1;
    while(1) {
     $235 = $col;
     $236 = HEAP16[132120>>1]|0;
     $237 = $236&65535;
     $238 = ($235|0)<($237|0);
     if (!($238)) {
      break;
     }
     $c = 1;
     while(1) {
      $239 = $c;
      $240 = ($239|0)<(3);
      if (!($240)) {
       break;
      }
      $241 = $col;
      $242 = HEAP16[132120>>1]|0;
      $243 = $242&65535;
      $244 = (($243) - 1)|0;
      $245 = ($241|0)==($244|0);
      if ($245) {
       $246 = $c;
       $247 = $col;
       $248 = (($247) - 1)|0;
       $249 = $ip;
       $250 = (($249) + ($248<<3)|0);
       $251 = (($250) + ($246<<1)|0);
       $252 = HEAP16[$251>>1]|0;
       $253 = $c;
       $254 = $col;
       $255 = $ip;
       $256 = (($255) + ($254<<3)|0);
       $257 = (($256) + ($253<<1)|0);
       HEAP16[$257>>1] = $252;
      } else {
       $258 = $c;
       $259 = $col;
       $260 = (($259) - 1)|0;
       $261 = $ip;
       $262 = (($261) + ($260<<3)|0);
       $263 = (($262) + ($258<<1)|0);
       $264 = HEAP16[$263>>1]|0;
       $265 = $264 << 16 >> 16;
       $266 = $c;
       $267 = $col;
       $268 = (($267) + 1)|0;
       $269 = $ip;
       $270 = (($269) + ($268<<3)|0);
       $271 = (($270) + ($266<<1)|0);
       $272 = HEAP16[$271>>1]|0;
       $273 = $272 << 16 >> 16;
       $274 = (($265) + ($273))|0;
       $275 = (($274) + 1)|0;
       $276 = $275 >> 1;
       $277 = $276&65535;
       $278 = $c;
       $279 = $col;
       $280 = $ip;
       $281 = (($280) + ($279<<3)|0);
       $282 = (($281) + ($278<<1)|0);
       HEAP16[$282>>1] = $277;
      }
      $283 = $c;
      $284 = (($283) + 1)|0;
      $c = $284;
     }
     $285 = $col;
     $286 = (($285) + 2)|0;
     $col = $286;
    }
    $287 = $row;
    $288 = (($287) + 1)|0;
    $row = $288;
    $289 = HEAP16[132120>>1]|0;
    $290 = $289&65535;
    $291 = $ip;
    $292 = (($291) + ($290<<3)|0);
    $ip = $292;
   }
   while(1) {
    $293 = $rp;
    $294 = $ip;
    $295 = ($293>>>0)<($294>>>0);
    if (!($295)) {
     break;
    }
    $296 = HEAP32[133224>>2]|0;
    $297 = ($296|0)==(-2147483112);
    if ($297) {
     label = 72;
    } else {
     $298 = HEAP32[133224>>2]|0;
     $299 = ($298|0)==(-2147483056);
     if ($299) {
      label = 72;
     } else {
      $300 = HEAP32[133224>>2]|0;
      $301 = ($300|0)==(-2147483039);
      if ($301) {
       label = 72;
      } else {
       $302 = HEAP32[133224>>2]|0;
       $303 = ($302|0)==(-2147483007);
       if ($303) {
        label = 72;
       } else {
        $304 = HEAP32[133224>>2]|0;
        $305 = ($304|0)==(-2147483001);
        if ($305) {
         label = 72;
        } else {
         $376 = HEAP32[133224>>2]|0;
         $377 = ($376>>>0)<(2147484184);
         if ($377) {
          $378 = $rp;
          $379 = HEAP16[$378>>1]|0;
          $380 = $379 << 16 >> 16;
          $381 = (($380) - 512)|0;
          $382 = $381&65535;
          HEAP16[$378>>1] = $382;
         }
         $383 = $rp;
         $384 = HEAP16[$383>>1]|0;
         $385 = $384 << 16 >> 16;
         $386 = $rp;
         $387 = (($386) + 4|0);
         $388 = HEAP16[$387>>1]|0;
         $389 = $388 << 16 >> 16;
         $390 = (($385) + ($389))|0;
         HEAP32[$pix>>2] = $390;
         $391 = $rp;
         $392 = HEAP16[$391>>1]|0;
         $393 = $392 << 16 >> 16;
         $394 = $rp;
         $395 = (($394) + 2|0);
         $396 = HEAP16[$395>>1]|0;
         $397 = $396 << 16 >> 16;
         $398 = (($393) + ($397))|0;
         $399 = (($pix) + 8|0);
         HEAP32[$399>>2] = $398;
         $400 = $rp;
         $401 = HEAP16[$400>>1]|0;
         $402 = $401 << 16 >> 16;
         $403 = $rp;
         $404 = (($403) + 2|0);
         $405 = HEAP16[$404>>1]|0;
         $406 = $405 << 16 >> 16;
         $407 = Math_imul(-778, $406)|0;
         $408 = $rp;
         $409 = (($408) + 4|0);
         $410 = HEAP16[$409>>1]|0;
         $411 = $410 << 16 >> 16;
         $412 = $411 << 11;
         $413 = (($407) - ($412))|0;
         $414 = $413 >> 12;
         $415 = (($402) + ($414))|0;
         $416 = (($pix) + 4|0);
         HEAP32[$416>>2] = $415;
        }
       }
      }
     }
    }
    if ((label|0) == 72) {
     label = 0;
     $306 = $rp;
     $307 = (($306) + 2|0);
     $308 = HEAP16[$307>>1]|0;
     $309 = $308 << 16 >> 16;
     $310 = $309 << 2;
     $311 = $hue;
     $312 = (($310) + ($311))|0;
     $313 = $312&65535;
     $314 = $rp;
     $315 = (($314) + 2|0);
     HEAP16[$315>>1] = $313;
     $316 = $rp;
     $317 = (($316) + 4|0);
     $318 = HEAP16[$317>>1]|0;
     $319 = $318 << 16 >> 16;
     $320 = $319 << 2;
     $321 = $hue;
     $322 = (($320) + ($321))|0;
     $323 = $322&65535;
     $324 = $rp;
     $325 = (($324) + 4|0);
     HEAP16[$325>>1] = $323;
     $326 = $rp;
     $327 = HEAP16[$326>>1]|0;
     $328 = $327 << 16 >> 16;
     $329 = $rp;
     $330 = (($329) + 2|0);
     $331 = HEAP16[$330>>1]|0;
     $332 = $331 << 16 >> 16;
     $333 = ($332*50)|0;
     $334 = $rp;
     $335 = (($334) + 4|0);
     $336 = HEAP16[$335>>1]|0;
     $337 = $336 << 16 >> 16;
     $338 = ($337*22929)|0;
     $339 = (($333) + ($338))|0;
     $340 = $339 >> 14;
     $341 = (($328) + ($340))|0;
     HEAP32[$pix>>2] = $341;
     $342 = $rp;
     $343 = HEAP16[$342>>1]|0;
     $344 = $343 << 16 >> 16;
     $345 = $rp;
     $346 = (($345) + 2|0);
     $347 = HEAP16[$346>>1]|0;
     $348 = $347 << 16 >> 16;
     $349 = Math_imul(-5640, $348)|0;
     $350 = $rp;
     $351 = (($350) + 4|0);
     $352 = HEAP16[$351>>1]|0;
     $353 = $352 << 16 >> 16;
     $354 = ($353*11751)|0;
     $355 = (($349) - ($354))|0;
     $356 = $355 >> 14;
     $357 = (($344) + ($356))|0;
     $358 = (($pix) + 4|0);
     HEAP32[$358>>2] = $357;
     $359 = $rp;
     $360 = HEAP16[$359>>1]|0;
     $361 = $360 << 16 >> 16;
     $362 = $rp;
     $363 = (($362) + 2|0);
     $364 = HEAP16[$363>>1]|0;
     $365 = $364 << 16 >> 16;
     $366 = ($365*29040)|0;
     $367 = $rp;
     $368 = (($367) + 4|0);
     $369 = HEAP16[$368>>1]|0;
     $370 = $369 << 16 >> 16;
     $371 = ($370*101)|0;
     $372 = (($366) - ($371))|0;
     $373 = $372 >> 14;
     $374 = (($361) + ($373))|0;
     $375 = (($pix) + 8|0);
     HEAP32[$375>>2] = $374;
    }
    $c = 0;
    while(1) {
     $417 = $c;
     $418 = ($417|0)<(3);
     if (!($418)) {
      break;
     }
     $419 = $c;
     $420 = (($pix) + ($419<<2)|0);
     $421 = HEAP32[$420>>2]|0;
     $422 = $c;
     $423 = (133232 + ($422<<1)|0);
     $424 = HEAP16[$423>>1]|0;
     $425 = $424&65535;
     $426 = Math_imul($421, $425)|0;
     $427 = $426 >> 10;
     $428 = ($427|0)<(65535);
     if ($428) {
      $429 = $c;
      $430 = (($pix) + ($429<<2)|0);
      $431 = HEAP32[$430>>2]|0;
      $432 = $c;
      $433 = (133232 + ($432<<1)|0);
      $434 = HEAP16[$433>>1]|0;
      $435 = $434&65535;
      $436 = Math_imul($431, $435)|0;
      $437 = $436 >> 10;
      $439 = $437;
     } else {
      $439 = 65535;
     }
     $438 = (0)>($439|0);
     if ($438) {
      $460 = 0;
     } else {
      $440 = $c;
      $441 = (($pix) + ($440<<2)|0);
      $442 = HEAP32[$441>>2]|0;
      $443 = $c;
      $444 = (133232 + ($443<<1)|0);
      $445 = HEAP16[$444>>1]|0;
      $446 = $445&65535;
      $447 = Math_imul($442, $446)|0;
      $448 = $447 >> 10;
      $449 = ($448|0)<(65535);
      if ($449) {
       $450 = $c;
       $451 = (($pix) + ($450<<2)|0);
       $452 = HEAP32[$451>>2]|0;
       $453 = $c;
       $454 = (133232 + ($453<<1)|0);
       $455 = HEAP16[$454>>1]|0;
       $456 = $455&65535;
       $457 = Math_imul($452, $456)|0;
       $458 = $457 >> 10;
       $469 = $458;
      } else {
       $469 = 65535;
      }
      $460 = $469;
     }
     $459 = $460&65535;
     $461 = $c;
     $462 = $rp;
     $463 = (($462) + ($461<<1)|0);
     HEAP16[$463>>1] = $459;
     $464 = $c;
     $465 = (($464) + 1)|0;
     $c = $465;
    }
    $466 = $rp;
    $467 = (($466) + 8|0);
    $rp = $467;
   }
   _ljpeg_end($jh);
   HEAP32[132400>>2] = 16383;
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function _adobe_copy_pixel($row,$col,$rp) {
 $row = $row|0;
 $col = $col|0;
 $rp = $rp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row;
 $1 = $col;
 $2 = $rp;
 $3 = HEAP32[133240>>2]|0;
 $4 = ($3|0)==(2);
 if ($4) {
  $5 = HEAP32[8>>2]|0;
  $6 = ($5|0)!=(0);
  if ($6) {
   $7 = $2;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($8) + 2|0);
   HEAP32[$7>>2] = $9;
  }
 }
 $10 = HEAP32[132360>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $0;
  $13 = HEAP16[133096>>1]|0;
  $14 = $13&65535;
  $15 = ($12>>>0)<($14>>>0);
  if ($15) {
   $16 = $1;
   $17 = HEAP16[132368>>1]|0;
   $18 = $17&65535;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = $2;
    $21 = HEAP32[$20>>2]|0;
    $22 = HEAP16[$21>>1]|0;
    $23 = $22&65535;
    $24 = (968 + ($23<<1)|0);
    $25 = HEAP16[$24>>1]|0;
    $26 = $0;
    $27 = HEAP16[132368>>1]|0;
    $28 = $27&65535;
    $29 = Math_imul($26, $28)|0;
    $30 = $1;
    $31 = (($29) + ($30))|0;
    $32 = HEAP32[132360>>2]|0;
    $33 = (($32) + ($31<<1)|0);
    HEAP16[$33>>1] = $25;
   }
  }
  $34 = HEAP32[133240>>2]|0;
  $35 = $2;
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + ($34<<1)|0);
  HEAP32[$35>>2] = $37;
 } else {
  $38 = $0;
  $39 = HEAP16[132112>>1]|0;
  $40 = $39&65535;
  $41 = ($38>>>0)<($40>>>0);
  if ($41) {
   $42 = $1;
   $43 = HEAP16[132120>>1]|0;
   $44 = $43&65535;
   $45 = ($42>>>0)<($44>>>0);
   if ($45) {
    $c = 0;
    while(1) {
     $46 = $c;
     $47 = HEAP32[133240>>2]|0;
     $48 = ($46>>>0)<($47>>>0);
     if (!($48)) {
      break;
     }
     $49 = $c;
     $50 = $2;
     $51 = HEAP32[$50>>2]|0;
     $52 = (($51) + ($49<<1)|0);
     $53 = HEAP16[$52>>1]|0;
     $54 = $53&65535;
     $55 = (968 + ($54<<1)|0);
     $56 = HEAP16[$55>>1]|0;
     $57 = $c;
     $58 = $0;
     $59 = HEAP16[132120>>1]|0;
     $60 = $59&65535;
     $61 = Math_imul($58, $60)|0;
     $62 = $1;
     $63 = (($61) + ($62))|0;
     $64 = HEAP32[132144>>2]|0;
     $65 = (($64) + ($63<<3)|0);
     $66 = (($65) + ($57<<1)|0);
     HEAP16[$66>>1] = $56;
     $67 = $c;
     $68 = (($67) + 1)|0;
     $c = $68;
    }
   }
  }
  $69 = HEAP32[133240>>2]|0;
  $70 = $2;
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + ($69<<1)|0);
  HEAP32[$70>>2] = $72;
 }
 $73 = HEAP32[133240>>2]|0;
 $74 = ($73|0)==(2);
 if (!($74)) {
  STACKTOP = sp;return;
 }
 $75 = HEAP32[8>>2]|0;
 $76 = ($75|0)!=(0);
 if (!($76)) {
  STACKTOP = sp;return;
 }
 $77 = $2;
 $78 = HEAP32[$77>>2]|0;
 $79 = (($78) + -2|0);
 HEAP32[$77>>2] = $79;
 STACKTOP = sp;return;
}
function _ljpeg_idct($jh) {
 $jh = $jh|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0;
 var $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $c = 0, $coef = 0, $i = 0, $j = 0, $len = 0, $skip = 0, $work = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 800|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $work = sp + 24|0;
 $0 = $jh;
 $1 = +HEAPF32[133248>>2];
 $2 = $1 != 0.0;
 if (!($2)) {
  $c = 0;
  while(1) {
   $3 = $c;
   $4 = ($3|0)<(106);
   if (!($4)) {
    break;
   }
   $5 = $c;
   $6 = $5 & 31;
   $7 = (+($6|0));
   $8 = $7 * 3.1415926535897931;
   $9 = $8 / 16.0;
   $10 = (+Math_cos((+$9)));
   $11 = $10 / 2.0;
   $12 = $11;
   $13 = $c;
   $14 = (133248 + ($13<<2)|0);
   HEAPF32[$14>>2] = $12;
   $15 = $c;
   $16 = (($15) + 1)|0;
   $c = $16;
  }
 }
 _memset(($work|0),0,768)|0;
 $17 = $0;
 $18 = (($17) + 312|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_ljpeg_diff($19)|0);
 $21 = $0;
 $22 = (($21) + 56|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $25 = Math_imul($20, $24)|0;
 $26 = $0;
 $27 = (($26) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($25))|0;
 HEAP32[$27>>2] = $29;
 $30 = (+($29|0));
 HEAPF32[$work>>2] = $30;
 $i = 1;
 while(1) {
  $31 = $i;
  $32 = ($31|0)<(64);
  if (!($32)) {
   break;
  }
  $33 = $0;
  $34 = (($33) + 312|0);
  $35 = (($34) + 64|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP16[$36>>1]|0;
  $38 = $37&65535;
  $39 = $0;
  $40 = (($39) + 312|0);
  $41 = (($40) + 64|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + 2|0);
  $44 = (_getbithuff($38,$43)|0);
  $len = $44;
  $45 = $len;
  $46 = $45 >> 4;
  $skip = $46;
  $47 = $i;
  $48 = (($47) + ($46))|0;
  $i = $48;
  $49 = $len;
  $50 = $49 & 15;
  $len = $50;
  $51 = ($50|0)!=(0);
  if (!($51)) {
   $52 = $skip;
   $53 = ($52|0)<(15);
   if ($53) {
    label = 11;
    break;
   }
  }
  $54 = $len;
  $55 = (_getbithuff($54,0)|0);
  $coef = $55;
  $56 = $coef;
  $57 = $len;
  $58 = (($57) - 1)|0;
  $59 = 1 << $58;
  $60 = $56 & $59;
  $61 = ($60|0)==(0);
  if ($61) {
   $62 = $len;
   $63 = 1 << $62;
   $64 = (($63) - 1)|0;
   $65 = $coef;
   $66 = (($65) - ($64))|0;
   $coef = $66;
  }
  $67 = $coef;
  $68 = $i;
  $69 = $0;
  $70 = (($69) + 56|0);
  $71 = (($70) + ($68<<1)|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $72&65535;
  $74 = Math_imul($67, $73)|0;
  $75 = (+($74|0));
  $76 = $i;
  $77 = (133672 + ($76)|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = (($work) + ($79<<2)|0);
  HEAPF32[$80>>2] = $75;
  $81 = $i;
  $82 = (($81) + 1)|0;
  $i = $82;
 }
 if ((label|0) == 11) {
 }
 $c = 0;
 while(1) {
  $83 = $c;
  $84 = ($83|0)<(8);
  if (!($84)) {
   break;
  }
  $85 = $c;
  $86 = (($work) + ($85<<2)|0);
  $87 = +HEAPF32[$86>>2];
  $88 = $87;
  $89 = $88 * 0.70710678118654757;
  $90 = $89;
  HEAPF32[$86>>2] = $90;
  $91 = $c;
  $92 = (($91) + 1)|0;
  $c = $92;
 }
 $c = 0;
 while(1) {
  $93 = $c;
  $94 = ($93|0)<(8);
  if (!($94)) {
   break;
  }
  $95 = $c;
  $96 = (($work) + ($95<<5)|0);
  $97 = +HEAPF32[$96>>2];
  $98 = $97;
  $99 = $98 * 0.70710678118654757;
  $100 = $99;
  HEAPF32[$96>>2] = $100;
  $101 = $c;
  $102 = (($101) + 1)|0;
  $c = $102;
 }
 $i = 0;
 while(1) {
  $103 = $i;
  $104 = ($103|0)<(8);
  if (!($104)) {
   break;
  }
  $j = 0;
  while(1) {
   $105 = $j;
   $106 = ($105|0)<(8);
   if (!($106)) {
    break;
   }
   $c = 0;
   while(1) {
    $107 = $c;
    $108 = ($107|0)<(8);
    if (!($108)) {
     break;
    }
    $109 = $c;
    $110 = $i;
    $111 = (($work) + ($110<<5)|0);
    $112 = (($111) + ($109<<2)|0);
    $113 = +HEAPF32[$112>>2];
    $114 = $j;
    $115 = $114<<1;
    $116 = (($115) + 1)|0;
    $117 = $c;
    $118 = Math_imul($116, $117)|0;
    $119 = (133248 + ($118<<2)|0);
    $120 = +HEAPF32[$119>>2];
    $121 = $113 * $120;
    $122 = $j;
    $123 = $i;
    $124 = (($work) + 256|0);
    $125 = (($124) + ($123<<5)|0);
    $126 = (($125) + ($122<<2)|0);
    $127 = +HEAPF32[$126>>2];
    $128 = $127 + $121;
    HEAPF32[$126>>2] = $128;
    $129 = $c;
    $130 = (($129) + 1)|0;
    $c = $130;
   }
   $131 = $j;
   $132 = (($131) + 1)|0;
   $j = $132;
  }
  $133 = $i;
  $134 = (($133) + 1)|0;
  $i = $134;
 }
 $i = 0;
 while(1) {
  $135 = $i;
  $136 = ($135|0)<(8);
  if (!($136)) {
   break;
  }
  $j = 0;
  while(1) {
   $137 = $j;
   $138 = ($137|0)<(8);
   if (!($138)) {
    break;
   }
   $c = 0;
   while(1) {
    $139 = $c;
    $140 = ($139|0)<(8);
    if (!($140)) {
     break;
    }
    $141 = $j;
    $142 = $c;
    $143 = (($work) + 256|0);
    $144 = (($143) + ($142<<5)|0);
    $145 = (($144) + ($141<<2)|0);
    $146 = +HEAPF32[$145>>2];
    $147 = $i;
    $148 = $147<<1;
    $149 = (($148) + 1)|0;
    $150 = $c;
    $151 = Math_imul($149, $150)|0;
    $152 = (133248 + ($151<<2)|0);
    $153 = +HEAPF32[$152>>2];
    $154 = $146 * $153;
    $155 = $j;
    $156 = $i;
    $157 = (($work) + 512|0);
    $158 = (($157) + ($156<<5)|0);
    $159 = (($158) + ($155<<2)|0);
    $160 = +HEAPF32[$159>>2];
    $161 = $160 + $154;
    HEAPF32[$159>>2] = $161;
    $162 = $c;
    $163 = (($162) + 1)|0;
    $c = $163;
   }
   $164 = $j;
   $165 = (($164) + 1)|0;
   $j = $165;
  }
  $166 = $i;
  $167 = (($166) + 1)|0;
  $i = $167;
 }
 $c = 0;
 while(1) {
  $168 = $c;
  $169 = ($168|0)<(64);
  if (!($169)) {
   break;
  }
  $170 = $c;
  $171 = (($work) + 512|0);
  $172 = (($171) + ($170<<2)|0);
  $173 = +HEAPF32[$172>>2];
  $174 = $173;
  $175 = $174 + 0.5;
  $176 = (~~(($175)));
  $177 = ($176|0)<(65535);
  if ($177) {
   $178 = $c;
   $179 = (($work) + 512|0);
   $180 = (($179) + ($178<<2)|0);
   $181 = +HEAPF32[$180>>2];
   $182 = $181;
   $183 = $182 + 0.5;
   $184 = (~~(($183)));
   $186 = $184;
  } else {
   $186 = 65535;
  }
  $185 = (0)>($186|0);
  if ($185) {
   $203 = 0;
  } else {
   $187 = $c;
   $188 = (($work) + 512|0);
   $189 = (($188) + ($187<<2)|0);
   $190 = +HEAPF32[$189>>2];
   $191 = $190;
   $192 = $191 + 0.5;
   $193 = (~~(($192)));
   $194 = ($193|0)<(65535);
   if ($194) {
    $195 = $c;
    $196 = (($work) + 512|0);
    $197 = (($196) + ($195<<2)|0);
    $198 = +HEAPF32[$197>>2];
    $199 = $198;
    $200 = $199 + 0.5;
    $201 = (~~(($200)));
    $210 = $201;
   } else {
    $210 = 65535;
   }
   $203 = $210;
  }
  $202 = $203&65535;
  $204 = $c;
  $205 = $0;
  $206 = (($205) + 184|0);
  $207 = (($206) + ($204<<1)|0);
  HEAP16[$207>>1] = $202;
  $208 = $c;
  $209 = (($208) + 1)|0;
  $c = $209;
 }
 STACKTOP = sp;return;
}
function _lossless_dng_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col = 0, $i = 0, $j = 0, $jcol = 0, $jh = 0, $jrow = 0;
 var $jwide = 0, $row = 0, $rp = 0, $save = 0, $tcol = 0, $trow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $jh = sp;
 $rp = sp + 488|0;
 $trow = 0;
 $tcol = 0;
 while(1) {
  $0 = $trow;
  $1 = HEAP16[133096>>1]|0;
  $2 = $1&65535;
  $3 = ($0>>>0)<($2>>>0);
  if (!($3)) {
   label = 45;
   break;
  }
  $4 = HEAP32[880>>2]|0;
  $5 = (_ftell(($4|0))|0);
  $save = $5;
  $6 = HEAP32[133752>>2]|0;
  $7 = ($6>>>0)<(2147483647);
  if ($7) {
   $8 = HEAP32[880>>2]|0;
   $9 = (_get4()|0);
   (_fseek(($8|0),($9|0),0)|0);
  }
  $10 = (_ljpeg_start($jh,0)|0);
  $11 = ($10|0)!=(0);
  if (!($11)) {
   break;
  }
  $12 = (($jh) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $jwide = $13;
  $14 = HEAP32[600>>2]|0;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = (($jh) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $jwide;
   $19 = Math_imul($18, $17)|0;
   $jwide = $19;
  }
  $20 = HEAP32[133760>>2]|0;
  $21 = HEAP32[133240>>2]|0;
  $22 = ($20>>>0)<($21>>>0);
  if ($22) {
   $23 = HEAP32[133760>>2]|0;
   $27 = $23;
  } else {
   $24 = HEAP32[133240>>2]|0;
   $27 = $24;
  }
  $25 = $jwide;
  $26 = (($25>>>0) / ($27>>>0))&-1;
  $jwide = $26;
  $28 = HEAP32[$jh>>2]|0;
  if ((($28|0) == 195)) {
   $jrow = 0;
   $col = 0;
   $row = 0;
   while(1) {
    $72 = $jrow;
    $73 = (($jh) + 8|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($72>>>0)<($74>>>0);
    if (!($75)) {
     break;
    }
    $76 = $jrow;
    $77 = (_ljpeg_row($76,$jh)|0);
    HEAP32[$rp>>2] = $77;
    $jcol = 0;
    while(1) {
     $78 = $jcol;
     $79 = $jwide;
     $80 = ($78>>>0)<($79>>>0);
     if (!($80)) {
      break;
     }
     $81 = $trow;
     $82 = $row;
     $83 = (($81) + ($82))|0;
     $84 = $tcol;
     $85 = $col;
     $86 = (($84) + ($85))|0;
     _adobe_copy_pixel($83,$86,$rp);
     $87 = $col;
     $88 = (($87) + 1)|0;
     $col = $88;
     $89 = HEAP32[133768>>2]|0;
     $90 = ($88>>>0)>=($89>>>0);
     if ($90) {
      label = 36;
     } else {
      $91 = $col;
      $92 = HEAP16[132368>>1]|0;
      $93 = $92&65535;
      $94 = ($91>>>0)>=($93>>>0);
      if ($94) {
       label = 36;
      }
     }
     if ((label|0) == 36) {
      label = 0;
      $col = 0;
      $95 = $row;
      $96 = (($95) + 1)|0;
      $row = $96;
     }
     $97 = $jcol;
     $98 = (($97) + 1)|0;
     $jcol = $98;
    }
    $99 = $jrow;
    $100 = (($99) + 1)|0;
    $jrow = $100;
   }
  } else if ((($28|0) == 193)) {
   $29 = (($jh) + 32|0);
   HEAP32[$29>>2] = 16384;
   (_getbithuff(-1,0)|0);
   $jrow = 0;
   while(1) {
    $30 = $jrow;
    $31 = (($30) + 7)|0;
    $32 = (($jh) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($31>>>0)<($33>>>0);
    if (!($34)) {
     break;
    }
    $jcol = 0;
    while(1) {
     $35 = $jcol;
     $36 = (($35) + 7)|0;
     $37 = (($jh) + 12|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($36>>>0)<($38>>>0);
     if (!($39)) {
      break;
     }
     _ljpeg_idct($jh);
     $40 = (($jh) + 184|0);
     HEAP32[$rp>>2] = $40;
     $41 = $trow;
     $42 = $jcol;
     $43 = HEAP32[133768>>2]|0;
     $44 = (($42>>>0) / ($43>>>0))&-1;
     $45 = (($41) + ($44))|0;
     $46 = $jrow;
     $47 = $46<<1;
     $48 = (($45) + ($47))|0;
     $row = $48;
     $49 = $tcol;
     $50 = $jcol;
     $51 = HEAP32[133768>>2]|0;
     $52 = (($50>>>0) % ($51>>>0))&-1;
     $53 = (($49) + ($52))|0;
     $col = $53;
     $i = 0;
     while(1) {
      $54 = $i;
      $55 = ($54>>>0)<(16);
      if (!($55)) {
       break;
      }
      $j = 0;
      while(1) {
       $56 = $j;
       $57 = ($56>>>0)<(8);
       if (!($57)) {
        break;
       }
       $58 = $row;
       $59 = $i;
       $60 = (($58) + ($59))|0;
       $61 = $col;
       $62 = $j;
       $63 = (($61) + ($62))|0;
       _adobe_copy_pixel($60,$63,$rp);
       $64 = $j;
       $65 = (($64) + 1)|0;
       $j = $65;
      }
      $66 = $i;
      $67 = (($66) + 2)|0;
      $i = $67;
     }
     $68 = $jcol;
     $69 = (($68) + 8)|0;
     $jcol = $69;
    }
    $70 = $jrow;
    $71 = (($70) + 8)|0;
    $jrow = $71;
   }
  }
  $101 = HEAP32[880>>2]|0;
  $102 = $save;
  $103 = (($102) + 4)|0;
  (_fseek(($101|0),($103|0),0)|0);
  $104 = HEAP32[133768>>2]|0;
  $105 = $tcol;
  $106 = (($105) + ($104))|0;
  $tcol = $106;
  $107 = HEAP16[132368>>1]|0;
  $108 = $107&65535;
  $109 = ($106>>>0)>=($108>>>0);
  if ($109) {
   $110 = HEAP32[133752>>2]|0;
   $tcol = 0;
   $111 = (($110) + 0)|0;
   $112 = $trow;
   $113 = (($112) + ($111))|0;
   $trow = $113;
  }
  _ljpeg_end($jh);
 }
 if ((label|0) == 45) {
  STACKTOP = sp;return;
 }
 STACKTOP = sp;return;
}
function _packed_dng_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $col = 0, $pixel = 0, $row = 0, $rp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rp = sp;
 $0 = HEAP16[132368>>1]|0;
 $1 = $0&65535;
 $2 = HEAP32[133240>>2]|0;
 $3 = $2<<1;
 $4 = (_calloc($1,$3)|0);
 $pixel = $4;
 $5 = $pixel;
 _merror($5,133776);
 $row = 0;
 while(1) {
  $6 = $row;
  $7 = HEAP16[133096>>1]|0;
  $8 = $7&65535;
  $9 = ($6|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = HEAP32[133800>>2]|0;
  $11 = ($10|0)==(16);
  if ($11) {
   $12 = $pixel;
   $13 = HEAP16[132368>>1]|0;
   $14 = $13&65535;
   $15 = HEAP32[133240>>2]|0;
   $16 = Math_imul($14, $15)|0;
   _read_shorts($12,$16);
  } else {
   (_getbithuff(-1,0)|0);
   $col = 0;
   while(1) {
    $17 = $col;
    $18 = HEAP16[132368>>1]|0;
    $19 = $18&65535;
    $20 = HEAP32[133240>>2]|0;
    $21 = Math_imul($19, $20)|0;
    $22 = ($17>>>0)<($21>>>0);
    if (!($22)) {
     break;
    }
    $23 = HEAP32[133800>>2]|0;
    $24 = (_getbithuff($23,0)|0);
    $25 = $24&65535;
    $26 = $col;
    $27 = $pixel;
    $28 = (($27) + ($26<<1)|0);
    HEAP16[$28>>1] = $25;
    $29 = $col;
    $30 = (($29) + 1)|0;
    $col = $30;
   }
  }
  $31 = $pixel;
  HEAP32[$rp>>2] = $31;
  $col = 0;
  while(1) {
   $32 = $col;
   $33 = HEAP16[132368>>1]|0;
   $34 = $33&65535;
   $35 = ($32|0)<($34|0);
   if (!($35)) {
    break;
   }
   $36 = $row;
   $37 = $col;
   _adobe_copy_pixel($36,$37,$rp);
   $38 = $col;
   $39 = (($38) + 1)|0;
   $col = $39;
  }
  $40 = $row;
  $41 = (($40) + 1)|0;
  $row = $41;
 }
 $42 = $pixel;
 _free($42);
 STACKTOP = sp;return;
}
function _pentax_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bit = 0;
 var $c = 0, $col = 0, $dep = 0, $diff = 0, $hpred = 0, $huff = 0, $i = 0, $row = 0, $vpred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bit = sp + 8236|0;
 $huff = sp + 40|0;
 $vpred = sp + 32|0;
 $hpred = sp + 24|0;
 ;HEAP16[$vpred+0>>1]=0|0;HEAP16[$vpred+2>>1]=0|0;HEAP16[$vpred+4>>1]=0|0;HEAP16[$vpred+6>>1]=0|0;
 $0 = HEAP32[880>>2]|0;
 $1 = HEAP32[133808>>2]|0;
 (_fseek(($0|0),($1|0),0)|0);
 $2 = (_get2()|0);
 $3 = $2&65535;
 $4 = (($3) + 12)|0;
 $5 = $4 & 15;
 $dep = $5;
 $6 = HEAP32[880>>2]|0;
 (_fseek(($6|0),12,1)|0);
 $c = 0;
 while(1) {
  $7 = $c;
  $8 = $dep;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = (_get2()|0);
  $11 = $c;
  $12 = (($bit) + ($11<<1)|0);
  HEAP16[$12>>1] = $10;
  $13 = $c;
  $14 = (($13) + 1)|0;
  $c = $14;
 }
 $c = 0;
 while(1) {
  $15 = $c;
  $16 = $dep;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = HEAP32[880>>2]|0;
  $19 = (_getc_unlocked(($18|0))|0);
  $20 = $19&65535;
  $21 = $c;
  $22 = (($bit) + 30|0);
  $23 = (($22) + ($21<<1)|0);
  HEAP16[$23>>1] = $20;
  $24 = $c;
  $25 = (($24) + 1)|0;
  $c = $25;
 }
 $c = 0;
 while(1) {
  $26 = $c;
  $27 = $dep;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = $c;
  $30 = (($bit) + ($29<<1)|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = $31&65535;
  $i = $32;
  while(1) {
   $33 = $i;
   $34 = $c;
   $35 = (($bit) + ($34<<1)|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = $36&65535;
   $38 = $c;
   $39 = (($bit) + 30|0);
   $40 = (($39) + ($38<<1)|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = $41&65535;
   $43 = 4096 >> $42;
   $44 = (($37) + ($43))|0;
   $45 = (($44) - 1)|0;
   $46 = $45 & 4095;
   $47 = ($33|0)<=($46|0);
   if (!($47)) {
    break;
   }
   $48 = $c;
   $49 = (($bit) + 30|0);
   $50 = (($49) + ($48<<1)|0);
   $51 = HEAP16[$50>>1]|0;
   $52 = $51&65535;
   $53 = $52 << 8;
   $54 = $c;
   $55 = $53 | $54;
   $56 = $55&65535;
   $57 = $i;
   $58 = (($57) + 1)|0;
   $i = $58;
   $59 = (($huff) + ($58<<1)|0);
   HEAP16[$59>>1] = $56;
  }
  $60 = $c;
  $61 = (($60) + 1)|0;
  $c = $61;
 }
 HEAP16[$huff>>1] = 12;
 $62 = HEAP32[880>>2]|0;
 $63 = HEAP32[133816>>2]|0;
 (_fseek(($62|0),($63|0),0)|0);
 (_getbithuff(-1,0)|0);
 $row = 0;
 while(1) {
  $64 = $row;
  $65 = HEAP16[133096>>1]|0;
  $66 = $65&65535;
  $67 = ($64|0)<($66|0);
  if (!($67)) {
   break;
  }
  $col = 0;
  while(1) {
   $68 = $col;
   $69 = HEAP16[132368>>1]|0;
   $70 = $69&65535;
   $71 = ($68|0)<($70|0);
   if (!($71)) {
    break;
   }
   $72 = (_ljpeg_diff($huff)|0);
   $diff = $72;
   $73 = $col;
   $74 = ($73|0)<(2);
   if ($74) {
    $75 = $diff;
    $76 = $col;
    $77 = $row;
    $78 = $77 & 1;
    $79 = (($vpred) + ($78<<2)|0);
    $80 = (($79) + ($76<<1)|0);
    $81 = HEAP16[$80>>1]|0;
    $82 = $81&65535;
    $83 = (($82) + ($75))|0;
    $84 = $83&65535;
    HEAP16[$80>>1] = $84;
    $85 = $col;
    $86 = (($hpred) + ($85<<1)|0);
    HEAP16[$86>>1] = $84;
   } else {
    $87 = $diff;
    $88 = $col;
    $89 = $88 & 1;
    $90 = (($hpred) + ($89<<1)|0);
    $91 = HEAP16[$90>>1]|0;
    $92 = $91&65535;
    $93 = (($92) + ($87))|0;
    $94 = $93&65535;
    HEAP16[$90>>1] = $94;
   }
   $95 = $col;
   $96 = $95 & 1;
   $97 = (($hpred) + ($96<<1)|0);
   $98 = HEAP16[$97>>1]|0;
   $99 = $row;
   $100 = HEAP16[132368>>1]|0;
   $101 = $100&65535;
   $102 = Math_imul($99, $101)|0;
   $103 = $col;
   $104 = (($102) + ($103))|0;
   $105 = HEAP32[132360>>2]|0;
   $106 = (($105) + ($104<<1)|0);
   HEAP16[$106>>1] = $98;
   $107 = $col;
   $108 = $107 & 1;
   $109 = (($hpred) + ($108<<1)|0);
   $110 = HEAP16[$109>>1]|0;
   $111 = $110&65535;
   $112 = HEAP32[133800>>2]|0;
   $113 = $111 >> $112;
   $114 = ($113|0)!=(0);
   if ($114) {
    _derror();
   }
   $115 = $col;
   $116 = (($115) + 1)|0;
   $col = $116;
  }
  $117 = $row;
  $118 = (($117) + 1)|0;
  $row = $118;
 }
 STACKTOP = sp;return;
}
function _nikon_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col = 0, $csize = 0, $diff = 0, $hpred = 0, $huff = 0, $i = 0, $len = 0, $max = 0, $min = 0, $row = 0;
 var $shl = 0, $split = 0, $step = 0, $tree = 0, $ver0 = 0, $ver1 = 0, $vpred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vpred = sp + 48|0;
 $hpred = sp + 60|0;
 $step = 0;
 $tree = 0;
 $split = 0;
 $0 = HEAP32[880>>2]|0;
 $1 = HEAP32[133808>>2]|0;
 (_fseek(($0|0),($1|0),0)|0);
 $2 = HEAP32[880>>2]|0;
 $3 = (_getc_unlocked(($2|0))|0);
 $4 = $3&65535;
 $ver0 = $4;
 $5 = HEAP32[880>>2]|0;
 $6 = (_getc_unlocked(($5|0))|0);
 $7 = $6&65535;
 $ver1 = $7;
 $8 = $ver0;
 $9 = $8&65535;
 $10 = ($9|0)==(73);
 if ($10) {
  label = 3;
 } else {
  $11 = $ver1;
  $12 = $11&65535;
  $13 = ($12|0)==(88);
  if ($13) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $14 = HEAP32[880>>2]|0;
  (_fseek(($14|0),2110,1)|0);
 }
 $15 = $ver0;
 $16 = $15&65535;
 $17 = ($16|0)==(70);
 if ($17) {
  $tree = 2;
 }
 $18 = HEAP32[133800>>2]|0;
 $19 = ($18|0)==(14);
 if ($19) {
  $20 = $tree;
  $21 = (($20) + 3)|0;
  $tree = $21;
 }
 _read_shorts($vpred,4);
 $22 = HEAP32[133800>>2]|0;
 $23 = 1 << $22;
 $24 = $23 & 32767;
 $max = $24;
 $25 = (_get2()|0);
 $csize = $25;
 $26 = $25&65535;
 $27 = ($26|0)>(1);
 if ($27) {
  $28 = $max;
  $29 = $csize;
  $30 = $29&65535;
  $31 = (($30) - 1)|0;
  $32 = (($28|0) / ($31|0))&-1;
  $step = $32;
 }
 $33 = $ver0;
 $34 = $33&65535;
 $35 = ($34|0)==(68);
 if ($35) {
  $36 = $ver1;
  $37 = $36&65535;
  $38 = ($37|0)==(32);
  if ($38) {
   $39 = $step;
   $40 = ($39|0)>(0);
   if ($40) {
    $i = 0;
    while(1) {
     $41 = $i;
     $42 = $csize;
     $43 = $42&65535;
     $44 = ($41|0)<($43|0);
     if (!($44)) {
      break;
     }
     $45 = (_get2()|0);
     $46 = $i;
     $47 = $step;
     $48 = Math_imul($46, $47)|0;
     $49 = (968 + ($48<<1)|0);
     HEAP16[$49>>1] = $45;
     $50 = $i;
     $51 = (($50) + 1)|0;
     $i = $51;
    }
    $i = 0;
    while(1) {
     $52 = $i;
     $53 = $max;
     $54 = ($52|0)<($53|0);
     if (!($54)) {
      break;
     }
     $55 = $i;
     $56 = $i;
     $57 = $step;
     $58 = (($56|0) % ($57|0))&-1;
     $59 = (($55) - ($58))|0;
     $60 = (968 + ($59<<1)|0);
     $61 = HEAP16[$60>>1]|0;
     $62 = $61&65535;
     $63 = $step;
     $64 = $i;
     $65 = $step;
     $66 = (($64|0) % ($65|0))&-1;
     $67 = (($63) - ($66))|0;
     $68 = Math_imul($62, $67)|0;
     $69 = $i;
     $70 = $i;
     $71 = $step;
     $72 = (($70|0) % ($71|0))&-1;
     $73 = (($69) - ($72))|0;
     $74 = $step;
     $75 = (($73) + ($74))|0;
     $76 = (968 + ($75<<1)|0);
     $77 = HEAP16[$76>>1]|0;
     $78 = $77&65535;
     $79 = $i;
     $80 = $step;
     $81 = (($79|0) % ($80|0))&-1;
     $82 = Math_imul($78, $81)|0;
     $83 = (($68) + ($82))|0;
     $84 = $step;
     $85 = (($83|0) / ($84|0))&-1;
     $86 = $85&65535;
     $87 = $i;
     $88 = (968 + ($87<<1)|0);
     HEAP16[$88>>1] = $86;
     $89 = $i;
     $90 = (($89) + 1)|0;
     $i = $90;
    }
    $91 = HEAP32[880>>2]|0;
    $92 = HEAP32[133808>>2]|0;
    $93 = (($92) + 562)|0;
    (_fseek(($91|0),($93|0),0)|0);
    $94 = (_get2()|0);
    $95 = $94&65535;
    $split = $95;
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
 } else {
  label = 22;
 }
 if ((label|0) == 22) {
  $96 = $ver0;
  $97 = $96&65535;
  $98 = ($97|0)!=(70);
  if ($98) {
   $99 = $csize;
   $100 = $99&65535;
   $101 = ($100|0)<=(16385);
   if ($101) {
    $102 = $csize;
    $103 = $102&65535;
    $max = $103;
    _read_shorts(968,$103);
   }
  }
 }
 while(1) {
  $104 = $max;
  $105 = (($104) - 2)|0;
  $106 = (968 + ($105<<1)|0);
  $107 = HEAP16[$106>>1]|0;
  $108 = $107&65535;
  $109 = $max;
  $110 = (($109) - 1)|0;
  $111 = (968 + ($110<<1)|0);
  $112 = HEAP16[$111>>1]|0;
  $113 = $112&65535;
  $114 = ($108|0)==($113|0);
  if (!($114)) {
   break;
  }
  $115 = $max;
  $116 = (($115) + -1)|0;
  $max = $116;
 }
 $117 = $tree;
 $118 = (133824 + ($117<<5)|0);
 $119 = (_make_decoder($118)|0);
 $huff = $119;
 $120 = HEAP32[880>>2]|0;
 $121 = HEAP32[133816>>2]|0;
 (_fseek(($120|0),($121|0),0)|0);
 (_getbithuff(-1,0)|0);
 $row = 0;
 $min = 0;
 while(1) {
  $122 = $row;
  $123 = HEAP16[132112>>1]|0;
  $124 = $123&65535;
  $125 = ($122|0)<($124|0);
  if (!($125)) {
   break;
  }
  $126 = $split;
  $127 = ($126|0)!=(0);
  if ($127) {
   $128 = $row;
   $129 = $split;
   $130 = ($128|0)==($129|0);
   if ($130) {
    $131 = $huff;
    _free($131);
    $132 = $tree;
    $133 = (($132) + 1)|0;
    $134 = (133824 + ($133<<5)|0);
    $135 = (_make_decoder($134)|0);
    $huff = $135;
    $min = 16;
    $136 = $max;
    $137 = (($136) + 32)|0;
    $max = $137;
   }
  }
  $col = 0;
  while(1) {
   $138 = $col;
   $139 = HEAP16[132368>>1]|0;
   $140 = $139&65535;
   $141 = ($138|0)<($140|0);
   if (!($141)) {
    break;
   }
   $142 = $huff;
   $143 = HEAP16[$142>>1]|0;
   $144 = $143&65535;
   $145 = $huff;
   $146 = (($145) + 2|0);
   $147 = (_getbithuff($144,$146)|0);
   $i = $147;
   $148 = $i;
   $149 = $148 & 15;
   $len = $149;
   $150 = $i;
   $151 = $150 >> 4;
   $shl = $151;
   $152 = $len;
   $153 = $shl;
   $154 = (($152) - ($153))|0;
   $155 = (_getbithuff($154,0)|0);
   $156 = $155 << 1;
   $157 = (($156) + 1)|0;
   $158 = $shl;
   $159 = $157 << $158;
   $160 = $159 >>> 1;
   $diff = $160;
   $161 = $diff;
   $162 = $len;
   $163 = (($162) - 1)|0;
   $164 = 1 << $163;
   $165 = $161 & $164;
   $166 = ($165|0)==(0);
   if ($166) {
    $167 = $len;
    $168 = 1 << $167;
    $169 = $shl;
    $170 = ($169|0)!=(0);
    $171 = $170 ^ 1;
    $172 = $171&1;
    $173 = (($168) - ($172))|0;
    $174 = $diff;
    $175 = (($174) - ($173))|0;
    $diff = $175;
   }
   $176 = $col;
   $177 = ($176|0)<(2);
   if ($177) {
    $178 = $diff;
    $179 = $col;
    $180 = $row;
    $181 = $180 & 1;
    $182 = (($vpred) + ($181<<2)|0);
    $183 = (($182) + ($179<<1)|0);
    $184 = HEAP16[$183>>1]|0;
    $185 = $184&65535;
    $186 = (($185) + ($178))|0;
    $187 = $186&65535;
    HEAP16[$183>>1] = $187;
    $188 = $col;
    $189 = (($hpred) + ($188<<1)|0);
    HEAP16[$189>>1] = $187;
   } else {
    $190 = $diff;
    $191 = $col;
    $192 = $191 & 1;
    $193 = (($hpred) + ($192<<1)|0);
    $194 = HEAP16[$193>>1]|0;
    $195 = $194&65535;
    $196 = (($195) + ($190))|0;
    $197 = $196&65535;
    HEAP16[$193>>1] = $197;
   }
   $198 = $col;
   $199 = $198 & 1;
   $200 = (($hpred) + ($199<<1)|0);
   $201 = HEAP16[$200>>1]|0;
   $202 = $201&65535;
   $203 = $min;
   $204 = (($202) + ($203))|0;
   $205 = $204&65535;
   $206 = $205&65535;
   $207 = $max;
   $208 = ($206|0)>=($207|0);
   if ($208) {
    _derror();
   }
   $209 = $col;
   $210 = $209 & 1;
   $211 = (($hpred) + ($210<<1)|0);
   $212 = HEAP16[$211>>1]|0;
   $213 = $212 << 16 >> 16;
   $214 = ($213|0)<(16383);
   if ($214) {
    $215 = $col;
    $216 = $215 & 1;
    $217 = (($hpred) + ($216<<1)|0);
    $218 = HEAP16[$217>>1]|0;
    $219 = $218 << 16 >> 16;
    $221 = $219;
   } else {
    $221 = 16383;
   }
   $220 = (0)>($221|0);
   if ($220) {
    $234 = 0;
   } else {
    $222 = $col;
    $223 = $222 & 1;
    $224 = (($hpred) + ($223<<1)|0);
    $225 = HEAP16[$224>>1]|0;
    $226 = $225 << 16 >> 16;
    $227 = ($226|0)<(16383);
    if ($227) {
     $228 = $col;
     $229 = $228 & 1;
     $230 = (($hpred) + ($229<<1)|0);
     $231 = HEAP16[$230>>1]|0;
     $232 = $231 << 16 >> 16;
     $249 = $232;
    } else {
     $249 = 16383;
    }
    $234 = $249;
   }
   $233 = (968 + ($234<<1)|0);
   $235 = HEAP16[$233>>1]|0;
   $236 = $row;
   $237 = HEAP16[132368>>1]|0;
   $238 = $237&65535;
   $239 = Math_imul($236, $238)|0;
   $240 = $col;
   $241 = (($239) + ($240))|0;
   $242 = HEAP32[132360>>2]|0;
   $243 = (($242) + ($241<<1)|0);
   HEAP16[$243>>1] = $235;
   $244 = $col;
   $245 = (($244) + 1)|0;
   $col = $245;
  }
  $246 = $row;
  $247 = (($246) + 1)|0;
  $row = $247;
 }
 $248 = $huff;
 _free($248);
 STACKTOP = sp;return;
}
function _nikon_yuv_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0;
 var $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $b = 0, $bitbuf = 0, $c = 0, $col = 0, $rgb = 0, $row = 0, $yuv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $yuv = sp + 8|0;
 $rgb = sp + 24|0;
 $bitbuf = sp;
 $0 = $bitbuf;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $row = 0;
 while(1) {
  $4 = $row;
  $5 = HEAP16[133096>>1]|0;
  $6 = $5&65535;
  $7 = ($4|0)<($6|0);
  if (!($7)) {
   break;
  }
  $col = 0;
  while(1) {
   $8 = $col;
   $9 = HEAP16[132368>>1]|0;
   $10 = $9&65535;
   $11 = ($8|0)<($10|0);
   if (!($11)) {
    break;
   }
   $12 = $col;
   $13 = $12 & 1;
   $b = $13;
   $14 = ($13|0)!=(0);
   if (!($14)) {
    $15 = $bitbuf;
    $16 = $15;
    HEAP32[$16>>2] = 0;
    $17 = (($15) + 4)|0;
    $18 = $17;
    HEAP32[$18>>2] = 0;
    $c = 0;
    while(1) {
     $19 = $c;
     $20 = ($19|0)<(6);
     if (!($20)) {
      break;
     }
     $21 = HEAP32[880>>2]|0;
     $22 = (_getc_unlocked(($21|0))|0);
     $23 = ($22|0)<(0);
     $24 = $23 << 31 >> 31;
     $25 = $c;
     $26 = $25<<3;
     $27 = (_bitshift64Shl(($22|0),($24|0),($26|0))|0);
     $28 = tempRet0;
     $29 = $bitbuf;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + 4)|0;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     $35 = $31 | $27;
     $36 = $34 | $28;
     $37 = $bitbuf;
     $38 = $37;
     HEAP32[$38>>2] = $35;
     $39 = (($37) + 4)|0;
     $40 = $39;
     HEAP32[$40>>2] = $36;
     $41 = $c;
     $42 = (($41) + 1)|0;
     $c = $42;
    }
    $c = 0;
    while(1) {
     $43 = $c;
     $44 = ($43|0)<(4);
     if (!($44)) {
      break;
     }
     $45 = $bitbuf;
     $46 = $45;
     $47 = HEAP32[$46>>2]|0;
     $48 = (($45) + 4)|0;
     $49 = $48;
     $50 = HEAP32[$49>>2]|0;
     $51 = $c;
     $52 = ($51*12)|0;
     $53 = (_bitshift64Lshr(($47|0),($50|0),($52|0))|0);
     $54 = tempRet0;
     $55 = $53 & 4095;
     $56 = $c;
     $57 = $56 >> 1;
     $58 = $57 << 11;
     $59 = ($58|0)<(0);
     $60 = $59 << 31 >> 31;
     $61 = (_i64Subtract(($55|0),0,($58|0),($60|0))|0);
     $62 = tempRet0;
     $63 = $c;
     $64 = (($yuv) + ($63<<2)|0);
     HEAP32[$64>>2] = $61;
     $65 = $c;
     $66 = (($65) + 1)|0;
     $c = $66;
    }
   }
   $67 = $b;
   $68 = (($yuv) + ($67<<2)|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (+($69|0));
   $71 = (($yuv) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (+($72|0));
   $74 = 1.3707050000000001 * $73;
   $75 = $70 + $74;
   $76 = (~~(($75)));
   HEAP32[$rgb>>2] = $76;
   $77 = $b;
   $78 = (($yuv) + ($77<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (+($79|0));
   $81 = (($yuv) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (+($82|0));
   $84 = 0.33763300000000002 * $83;
   $85 = $80 - $84;
   $86 = (($yuv) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (+($87|0));
   $89 = 0.69800099999999998 * $88;
   $90 = $85 - $89;
   $91 = (~~(($90)));
   $92 = (($rgb) + 4|0);
   HEAP32[$92>>2] = $91;
   $93 = $b;
   $94 = (($yuv) + ($93<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (+($95|0));
   $97 = (($yuv) + 8|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (+($98|0));
   $100 = 1.7324459999999999 * $99;
   $101 = $96 + $100;
   $102 = (~~(($101)));
   $103 = (($rgb) + 8|0);
   HEAP32[$103>>2] = $102;
   $c = 0;
   while(1) {
    $104 = $c;
    $105 = ($104|0)<(3);
    if (!($105)) {
     break;
    }
    $106 = $c;
    $107 = (($rgb) + ($106<<2)|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)<(4095);
    if ($109) {
     $110 = $c;
     $111 = (($rgb) + ($110<<2)|0);
     $112 = HEAP32[$111>>2]|0;
     $114 = $112;
    } else {
     $114 = 4095;
    }
    $113 = (0)>($114|0);
    if ($113) {
     $123 = 0;
    } else {
     $115 = $c;
     $116 = (($rgb) + ($115<<2)|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = ($117|0)<(4095);
     if ($118) {
      $119 = $c;
      $120 = (($rgb) + ($119<<2)|0);
      $121 = HEAP32[$120>>2]|0;
      $148 = $121;
     } else {
      $148 = 4095;
     }
     $123 = $148;
    }
    $122 = (968 + ($123<<1)|0);
    $124 = HEAP16[$122>>1]|0;
    $125 = $124&65535;
    $126 = (+($125|0));
    $127 = $c;
    $128 = (134016 + ($127<<2)|0);
    $129 = +HEAPF32[$128>>2];
    $130 = $126 / $129;
    $131 = (~~(($130))&65535);
    $132 = $c;
    $133 = $row;
    $134 = HEAP16[132120>>1]|0;
    $135 = $134&65535;
    $136 = Math_imul($133, $135)|0;
    $137 = $col;
    $138 = (($136) + ($137))|0;
    $139 = HEAP32[132144>>2]|0;
    $140 = (($139) + ($138<<3)|0);
    $141 = (($140) + ($132<<1)|0);
    HEAP16[$141>>1] = $131;
    $142 = $c;
    $143 = (($142) + 1)|0;
    $c = $143;
   }
   $144 = $col;
   $145 = (($144) + 1)|0;
   $col = $145;
  }
  $146 = $row;
  $147 = (($146) + 1)|0;
  $row = $147;
 }
 STACKTOP = sp;return;
}
function _nikon_e995() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $histo = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $histo = sp + 8|0;
 _memset(($histo|0),0,1024)|0;
 $1 = HEAP32[880>>2]|0;
 (_fseek(($1|0),-2000,2)|0);
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(2000);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[880>>2]|0;
  $5 = (_getc_unlocked(($4|0))|0);
  $6 = (($histo) + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[$6>>2] = $8;
  $9 = $i;
  $10 = (($9) + 1)|0;
  $i = $10;
 }
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = ($11|0)<(4);
  if (!($12)) {
   label = 11;
   break;
  }
  $13 = $i;
  $14 = (134032 + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (($histo) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)<(200);
  if ($19) {
   label = 8;
   break;
  }
  $20 = $i;
  $21 = (($20) + 1)|0;
  $i = $21;
 }
 if ((label|0) == 8) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 11) {
  $0 = 1;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _nikon_e2100() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp + 8|0;
 $1 = HEAP32[880>>2]|0;
 (_fseek(($1|0),0,0)|0);
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(1024);
  if (!($3)) {
   label = 7;
   break;
  }
  $4 = HEAP32[880>>2]|0;
  (_fread(($t|0),1,12,($4|0))|0);
  $5 = (($t) + 2|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = (($t) + 4|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $7 & $10;
  $12 = (($t) + 7|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $11 & $14;
  $16 = (($t) + 9|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $15 & $18;
  $20 = $19 >> 4;
  $21 = (($t) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $20 & $23;
  $25 = (($t) + 6|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = $24 & $27;
  $29 = (($t) + 8|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = $28 & $31;
  $33 = (($t) + 11|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = $32 & $35;
  $37 = $36 & 3;
  $38 = ($37|0)!=(3);
  if ($38) {
   label = 4;
   break;
  }
  $39 = $i;
  $40 = (($39) + 1)|0;
  $i = $40;
 }
 if ((label|0) == 4) {
  $0 = 0;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 else if ((label|0) == 7) {
  $0 = 1;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function _nikon_3700() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bits = 0, $dp = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dp = sp + 8|0;
 $0 = HEAP32[880>>2]|0;
 (_fseek(($0|0),3072,0)|0);
 $1 = HEAP32[880>>2]|0;
 (_fread(($dp|0),1,24,($1|0))|0);
 $2 = (($dp) + 8|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 & 3;
 $6 = $5 << 4;
 $7 = (($dp) + 20|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 & 3;
 $11 = $6 | $10;
 $bits = $11;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = ($12>>>0)<(4);
  if (!($13)) {
   break;
  }
  $14 = $bits;
  $15 = $i;
  $16 = (134040 + ($15<<5)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14|0)==($17|0);
  if ($18) {
   $19 = $i;
   $20 = (134040 + ($19<<5)|0);
   $21 = (($20) + 4|0);
   (_strcpy((134168|0),($21|0))|0);
   $22 = $i;
   $23 = (134040 + ($22<<5)|0);
   $24 = (($23) + 16|0);
   (_strcpy((134232|0),($24|0))|0);
  }
  $25 = $i;
  $26 = (($25) + 1)|0;
  $i = $26;
 }
 STACKTOP = sp;return;
}
function _minolta_z2() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $nz = 0, $tail = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tail = sp + 8|0;
 $0 = HEAP32[880>>2]|0;
 (_fseek(($0|0),-424,2)|0);
 $1 = HEAP32[880>>2]|0;
 (_fread(($tail|0),1,424,($1|0))|0);
 $i = 0;
 $nz = 0;
 while(1) {
  $2 = $i;
  $3 = ($2>>>0)<(424);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = (($tail) + ($4)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)!=(0);
  if ($7) {
   $8 = $nz;
   $9 = (($8) + 1)|0;
   $nz = $9;
  }
  $10 = $i;
  $11 = (($10) + 1)|0;
  $i = $11;
 }
 $12 = $nz;
 $13 = ($12|0)>(20);
 $14 = $13&1;
 STACKTOP = sp;return ($14|0);
}
function _ppm_thumb() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $thumb = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP16[134296>>1]|0;
 $1 = $0&65535;
 $2 = HEAP16[134304>>1]|0;
 $3 = $2&65535;
 $4 = Math_imul($1, $3)|0;
 $5 = ($4*3)|0;
 HEAP32[134312>>2] = $5;
 $6 = HEAP32[134312>>2]|0;
 $7 = (_malloc($6)|0);
 $thumb = $7;
 $8 = $thumb;
 _merror($8,134320);
 $9 = HEAP32[134336>>2]|0;
 $10 = HEAP16[134296>>1]|0;
 $11 = $10&65535;
 $12 = HEAP16[134304>>1]|0;
 $13 = $12&65535;
 HEAP32[$vararg_buffer>>2] = $11;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 (_fprintf(($9|0),(134344|0),($vararg_buffer|0))|0);
 $14 = $thumb;
 $15 = HEAP32[134312>>2]|0;
 $16 = HEAP32[880>>2]|0;
 (_fread(($14|0),1,($15|0),($16|0))|0);
 $17 = $thumb;
 $18 = HEAP32[134312>>2]|0;
 $19 = HEAP32[134336>>2]|0;
 (_fwrite(($17|0),1,($18|0),($19|0))|0);
 $20 = $thumb;
 _free($20);
 STACKTOP = sp;return;
}
function _ppm16_thumb() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $thumb = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP16[134296>>1]|0;
 $1 = $0&65535;
 $2 = HEAP16[134304>>1]|0;
 $3 = $2&65535;
 $4 = Math_imul($1, $3)|0;
 $5 = ($4*3)|0;
 HEAP32[134312>>2] = $5;
 $6 = HEAP32[134312>>2]|0;
 $7 = (_calloc($6,2)|0);
 $thumb = $7;
 $8 = $thumb;
 _merror($8,134360);
 $9 = $thumb;
 $10 = HEAP32[134312>>2]|0;
 _read_shorts($9,$10);
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = HEAP32[134312>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = $thumb;
  $16 = (($15) + ($14<<1)|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  $19 = $18 >> 8;
  $20 = $19&255;
  $21 = $i;
  $22 = $thumb;
  $23 = (($22) + ($21)|0);
  HEAP8[$23>>0] = $20;
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 $26 = HEAP32[134336>>2]|0;
 $27 = HEAP16[134296>>1]|0;
 $28 = $27&65535;
 $29 = HEAP16[134304>>1]|0;
 $30 = $29&65535;
 HEAP32[$vararg_buffer>>2] = $28;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $30;
 (_fprintf(($26|0),(134344|0),($vararg_buffer|0))|0);
 $31 = $thumb;
 $32 = HEAP32[134312>>2]|0;
 $33 = HEAP32[134336>>2]|0;
 (_fwrite(($31|0),1,($32|0),($33|0))|0);
 $34 = $thumb;
 _free($34);
 STACKTOP = sp;return;
}
function _layer_thumb() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $i = 0, $map = 0, $thumb = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $map = sp + 24|0;
 ;HEAP8[$map+0>>0]=HEAP8[134376+0>>0]|0;HEAP8[$map+1>>0]=HEAP8[134376+1>>0]|0;HEAP8[$map+2>>0]=HEAP8[134376+2>>0]|0;HEAP8[$map+3>>0]=HEAP8[134376+3>>0]|0;HEAP8[$map+4>>0]=HEAP8[134376+4>>0]|0;HEAP8[$map+5>>0]=HEAP8[134376+5>>0]|0;HEAP8[$map+6>>0]=HEAP8[134376+6>>0]|0;HEAP8[$map+7>>0]=HEAP8[134376+7>>0]|0;
 $0 = HEAP32[134384>>2]|0;
 $1 = $0 >>> 5;
 $2 = $1 & 7;
 HEAP32[132304>>2] = $2;
 $3 = HEAP16[134296>>1]|0;
 $4 = $3&65535;
 $5 = HEAP16[134304>>1]|0;
 $6 = $5&65535;
 $7 = Math_imul($4, $6)|0;
 HEAP32[134312>>2] = $7;
 $8 = HEAP32[132304>>2]|0;
 $9 = HEAP32[134312>>2]|0;
 $10 = (_calloc($8,$9)|0);
 $thumb = $10;
 $11 = $thumb;
 _merror($11,134392);
 $12 = HEAP32[134336>>2]|0;
 $13 = HEAP32[132304>>2]|0;
 $14 = $13 >>> 1;
 $15 = (5 + ($14))|0;
 $16 = HEAP16[134296>>1]|0;
 $17 = $16&65535;
 $18 = HEAP16[134304>>1]|0;
 $19 = $18&65535;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $17;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $19;
 (_fprintf(($12|0),(134408|0),($vararg_buffer|0))|0);
 $20 = $thumb;
 $21 = HEAP32[134312>>2]|0;
 $22 = HEAP32[132304>>2]|0;
 $23 = HEAP32[880>>2]|0;
 (_fread(($20|0),($21|0),($22|0),($23|0))|0);
 $i = 0;
 while(1) {
  $24 = $i;
  $25 = HEAP32[134312>>2]|0;
  $26 = ($24>>>0)<($25>>>0);
  if (!($26)) {
   break;
  }
  $c = 0;
  while(1) {
   $27 = $c;
   $28 = HEAP32[132304>>2]|0;
   $29 = ($27>>>0)<($28>>>0);
   if (!($29)) {
    break;
   }
   $30 = $i;
   $31 = HEAP32[134312>>2]|0;
   $32 = $c;
   $33 = HEAP32[134384>>2]|0;
   $34 = $33 >>> 8;
   $35 = (($map) + ($34<<2)|0);
   $36 = (($35) + ($32)|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37 << 24 >> 24;
   $39 = (($38) - 48)|0;
   $40 = Math_imul($31, $39)|0;
   $41 = (($30) + ($40))|0;
   $42 = $thumb;
   $43 = (($42) + ($41)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44 << 24 >> 24;
   $46 = HEAP32[134336>>2]|0;
   (_putc(($45|0),($46|0))|0);
   $47 = $c;
   $48 = (($47) + 1)|0;
   $c = $48;
  }
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
 }
 $51 = $thumb;
 _free($51);
 STACKTOP = sp;return;
}
function _rollei_thumb() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $thumb = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP16[134296>>1]|0;
 $1 = $0&65535;
 $2 = HEAP16[134304>>1]|0;
 $3 = $2&65535;
 $4 = Math_imul($1, $3)|0;
 HEAP32[134312>>2] = $4;
 $5 = HEAP32[134312>>2]|0;
 $6 = (_calloc($5,2)|0);
 $thumb = $6;
 $7 = $thumb;
 _merror($7,134424);
 $8 = HEAP32[134336>>2]|0;
 $9 = HEAP16[134296>>1]|0;
 $10 = $9&65535;
 $11 = HEAP16[134304>>1]|0;
 $12 = $11&65535;
 HEAP32[$vararg_buffer>>2] = $10;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $12;
 (_fprintf(($8|0),(134344|0),($vararg_buffer|0))|0);
 $13 = $thumb;
 $14 = HEAP32[134312>>2]|0;
 _read_shorts($13,$14);
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = HEAP32[134312>>2]|0;
  $17 = ($15>>>0)<($16>>>0);
  if (!($17)) {
   break;
  }
  $18 = $i;
  $19 = $thumb;
  $20 = (($19) + ($18<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = $22 << 3;
  $24 = HEAP32[134336>>2]|0;
  (_putc(($23|0),($24|0))|0);
  $25 = $i;
  $26 = $thumb;
  $27 = (($26) + ($25<<1)|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28&65535;
  $30 = $29 >> 5;
  $31 = $30 << 2;
  $32 = HEAP32[134336>>2]|0;
  (_putc(($31|0),($32|0))|0);
  $33 = $i;
  $34 = $thumb;
  $35 = (($34) + ($33<<1)|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36&65535;
  $38 = $37 >> 11;
  $39 = $38 << 3;
  $40 = HEAP32[134336>>2]|0;
  (_putc(($39|0),($40|0))|0);
  $41 = $i;
  $42 = (($41) + 1)|0;
  $i = $42;
 }
 $43 = $thumb;
 _free($43);
 STACKTOP = sp;return;
}
function _rollei_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $buffer = 0, $i = 0, $isix = 0, $iten = 0, $pixel = 0, $todo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pixel = sp + 80|0;
 $todo = sp + 16|0;
 $iten = 0;
 $buffer = 0;
 $0 = HEAP16[132368>>1]|0;
 $1 = $0&65535;
 $2 = HEAP16[133096>>1]|0;
 $3 = $2&65535;
 $4 = Math_imul($1, $3)|0;
 $5 = ($4*5)|0;
 $6 = (($5|0) / 8)&-1;
 $isix = $6;
 while(1) {
  $7 = HEAP32[880>>2]|0;
  $8 = (_fread(($pixel|0),1,10,($7|0))|0);
  $9 = ($8|0)==(10);
  if (!($9)) {
   break;
  }
  $i = 0;
  while(1) {
   $10 = $i;
   $11 = ($10>>>0)<(10);
   if (!($11)) {
    break;
   }
   $12 = $iten;
   $13 = (($12) + 1)|0;
   $iten = $13;
   $14 = $i;
   $15 = (($todo) + ($14<<2)|0);
   HEAP32[$15>>2] = $12;
   $16 = $i;
   $17 = (($pixel) + ($16)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = $19 << 8;
   $21 = $i;
   $22 = (($21) + 1)|0;
   $23 = (($pixel) + ($22)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = $20 | $25;
   $27 = $i;
   $28 = (($27) + 1)|0;
   $29 = (($todo) + ($28<<2)|0);
   HEAP32[$29>>2] = $26;
   $30 = $i;
   $31 = (($pixel) + ($30)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = $33 >> 2;
   $35 = $buffer;
   $36 = $35 << 6;
   $37 = $34 | $36;
   $buffer = $37;
   $38 = $i;
   $39 = (($38) + 2)|0;
   $i = $39;
  }
  while(1) {
   $40 = $i;
   $41 = ($40>>>0)<(16);
   if (!($41)) {
    break;
   }
   $42 = $isix;
   $43 = (($42) + 1)|0;
   $isix = $43;
   $44 = $i;
   $45 = (($todo) + ($44<<2)|0);
   HEAP32[$45>>2] = $42;
   $46 = $buffer;
   $47 = $i;
   $48 = (14 - ($47))|0;
   $49 = ($48*5)|0;
   $50 = $46 >>> $49;
   $51 = $i;
   $52 = (($51) + 1)|0;
   $53 = (($todo) + ($52<<2)|0);
   HEAP32[$53>>2] = $50;
   $54 = $i;
   $55 = (($54) + 2)|0;
   $i = $55;
  }
  $i = 0;
  while(1) {
   $56 = $i;
   $57 = ($56>>>0)<(16);
   if (!($57)) {
    break;
   }
   $58 = $i;
   $59 = (($58) + 1)|0;
   $60 = (($todo) + ($59<<2)|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & 1023;
   $63 = $62&65535;
   $64 = $i;
   $65 = (($todo) + ($64<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = HEAP32[132360>>2]|0;
   $68 = (($67) + ($66<<1)|0);
   HEAP16[$68>>1] = $63;
   $69 = $i;
   $70 = (($69) + 2)|0;
   $i = $70;
  }
 }
 HEAP32[132400>>2] = 1023;
 STACKTOP = sp;return;
}
function _raw($row,$col) {
 $row = $row|0;
 $col = $col|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row;
 $1 = $col;
 $2 = $0;
 $3 = HEAP16[133096>>1]|0;
 $4 = $3&65535;
 $5 = ($2>>>0)<($4>>>0);
 if ($5) {
  $6 = $1;
  $7 = HEAP16[132368>>1]|0;
  $8 = $7&65535;
  $9 = ($6>>>0)<($8>>>0);
  if ($9) {
   $10 = $0;
   $11 = HEAP16[132368>>1]|0;
   $12 = $11&65535;
   $13 = Math_imul($10, $12)|0;
   $14 = $1;
   $15 = (($13) + ($14))|0;
   $16 = HEAP32[132360>>2]|0;
   $17 = (($16) + ($15<<1)|0);
   $18 = HEAP16[$17>>1]|0;
   $19 = $18&65535;
   $20 = $19;
   STACKTOP = sp;return ($20|0);
  }
 }
 $20 = 0;
 STACKTOP = sp;return ($20|0);
}
function _phase_one_flat_field($is_float,$nc) {
 $is_float = $is_float|0;
 $nc = $nc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0;
 var $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $c = 0, $cend = 0, $col = 0, $head = 0, $high = 0, $mrow = 0, $mult = 0, $num = 0.0, $rend = 0, $row = 0, $wide = 0, $x = 0;
 var $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $head = sp + 72|0;
 $mult = sp + 24|0;
 $0 = $is_float;
 $1 = $nc;
 _read_shorts($head,8);
 $2 = (($head) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = (($head) + 6|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = Math_imul($4, $7)|0;
 $9 = (($head) + 8|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = Math_imul($8, $11)|0;
 $13 = (($head) + 10|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = Math_imul($12, $15)|0;
 $17 = ($16|0)==(0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = (($head) + 4|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19&65535;
 $21 = (($head) + 8|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22&65535;
 $24 = (($20|0) / ($23|0))&-1;
 $25 = (($head) + 4|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $26&65535;
 $28 = (($head) + 8|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29&65535;
 $31 = (($27|0) % ($30|0))&-1;
 $32 = ($31|0)!=(0);
 $33 = $32&1;
 $34 = (($24) + ($33))|0;
 $wide = $34;
 $35 = (($head) + 6|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = $36&65535;
 $38 = (($head) + 10|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = $39&65535;
 $41 = (($37|0) / ($40|0))&-1;
 $42 = (($head) + 6|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = $43&65535;
 $45 = (($head) + 10|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = $46&65535;
 $48 = (($44|0) % ($47|0))&-1;
 $49 = ($48|0)!=(0);
 $50 = $49&1;
 $51 = (($41) + ($50))|0;
 $high = $51;
 $52 = $1;
 $53 = $wide;
 $54 = Math_imul($52, $53)|0;
 $55 = (_calloc($54,4)|0);
 $mrow = $55;
 $56 = $mrow;
 _merror($56,134440);
 $y = 0;
 while(1) {
  $57 = $y;
  $58 = $high;
  $59 = ($57>>>0)<($58>>>0);
  if (!($59)) {
   break;
  }
  $x = 0;
  while(1) {
   $60 = $x;
   $61 = $wide;
   $62 = ($60>>>0)<($61>>>0);
   if (!($62)) {
    break;
   }
   $c = 0;
   while(1) {
    $63 = $c;
    $64 = $1;
    $65 = ($63>>>0)<($64>>>0);
    if (!($65)) {
     break;
    }
    $66 = $0;
    $67 = ($66|0)!=(0);
    if ($67) {
     $68 = (+_getreal(11));
     $74 = $68;
    } else {
     $69 = (_get2()|0);
     $70 = $69&65535;
     $71 = (+($70|0));
     $72 = $71 / 32768.0;
     $74 = $72;
    }
    $73 = $74;
    $num = $73;
    $75 = $y;
    $76 = ($75|0)==(0);
    if ($76) {
     $77 = $num;
     $78 = $c;
     $79 = $wide;
     $80 = Math_imul($78, $79)|0;
     $81 = $x;
     $82 = (($80) + ($81))|0;
     $83 = $mrow;
     $84 = (($83) + ($82<<2)|0);
     HEAPF32[$84>>2] = $77;
    } else {
     $85 = $num;
     $86 = $c;
     $87 = $wide;
     $88 = Math_imul($86, $87)|0;
     $89 = $x;
     $90 = (($88) + ($89))|0;
     $91 = $mrow;
     $92 = (($91) + ($90<<2)|0);
     $93 = +HEAPF32[$92>>2];
     $94 = $85 - $93;
     $95 = (($head) + 10|0);
     $96 = HEAP16[$95>>1]|0;
     $97 = $96&65535;
     $98 = (+($97|0));
     $99 = $94 / $98;
     $100 = $c;
     $101 = (($100) + 1)|0;
     $102 = $wide;
     $103 = Math_imul($101, $102)|0;
     $104 = $x;
     $105 = (($103) + ($104))|0;
     $106 = $mrow;
     $107 = (($106) + ($105<<2)|0);
     HEAPF32[$107>>2] = $99;
    }
    $108 = $c;
    $109 = (($108) + 2)|0;
    $c = $109;
   }
   $110 = $x;
   $111 = (($110) + 1)|0;
   $x = $111;
  }
  $112 = $y;
  $113 = ($112|0)==(0);
  if ($113) {
  } else {
   $114 = (($head) + 2|0);
   $115 = HEAP16[$114>>1]|0;
   $116 = $115&65535;
   $117 = $y;
   $118 = (($head) + 10|0);
   $119 = HEAP16[$118>>1]|0;
   $120 = $119&65535;
   $121 = Math_imul($117, $120)|0;
   $122 = (($116) + ($121))|0;
   $rend = $122;
   $123 = $rend;
   $124 = (($head) + 10|0);
   $125 = HEAP16[$124>>1]|0;
   $126 = $125&65535;
   $127 = (($123) - ($126))|0;
   $row = $127;
   while(1) {
    $128 = $row;
    $129 = HEAP16[133096>>1]|0;
    $130 = $129&65535;
    $131 = ($128>>>0)<($130>>>0);
    if ($131) {
     $132 = $row;
     $133 = $rend;
     $134 = ($132>>>0)<($133>>>0);
     if ($134) {
      $135 = $row;
      $136 = (($head) + 2|0);
      $137 = HEAP16[$136>>1]|0;
      $138 = $137&65535;
      $139 = (($head) + 6|0);
      $140 = HEAP16[$139>>1]|0;
      $141 = $140&65535;
      $142 = (($138) + ($141))|0;
      $143 = (($head) + 10|0);
      $144 = HEAP16[$143>>1]|0;
      $145 = $144&65535;
      $146 = (($142) - ($145))|0;
      $147 = ($135>>>0)<($146>>>0);
      $325 = $147;
     } else {
      $325 = 0;
     }
    } else {
     $325 = 0;
    }
    if (!($325)) {
     break;
    }
    $x = 1;
    while(1) {
     $148 = $x;
     $149 = $wide;
     $150 = ($148>>>0)<($149>>>0);
     if (!($150)) {
      break;
     }
     $c = 0;
     while(1) {
      $151 = $c;
      $152 = $1;
      $153 = ($151>>>0)<($152>>>0);
      if (!($153)) {
       break;
      }
      $154 = $c;
      $155 = $wide;
      $156 = Math_imul($154, $155)|0;
      $157 = $x;
      $158 = (($156) + ($157))|0;
      $159 = (($158) - 1)|0;
      $160 = $mrow;
      $161 = (($160) + ($159<<2)|0);
      $162 = +HEAPF32[$161>>2];
      $163 = $c;
      $164 = (($mult) + ($163<<2)|0);
      HEAPF32[$164>>2] = $162;
      $165 = $c;
      $166 = $wide;
      $167 = Math_imul($165, $166)|0;
      $168 = $x;
      $169 = (($167) + ($168))|0;
      $170 = $mrow;
      $171 = (($170) + ($169<<2)|0);
      $172 = +HEAPF32[$171>>2];
      $173 = $c;
      $174 = (($mult) + ($173<<2)|0);
      $175 = +HEAPF32[$174>>2];
      $176 = $172 - $175;
      $177 = (($head) + 8|0);
      $178 = HEAP16[$177>>1]|0;
      $179 = $178&65535;
      $180 = (+($179|0));
      $181 = $176 / $180;
      $182 = $c;
      $183 = (($182) + 1)|0;
      $184 = (($mult) + ($183<<2)|0);
      HEAPF32[$184>>2] = $181;
      $185 = $c;
      $186 = (($185) + 2)|0;
      $c = $186;
     }
     $187 = HEAP16[$head>>1]|0;
     $188 = $187&65535;
     $189 = $x;
     $190 = (($head) + 8|0);
     $191 = HEAP16[$190>>1]|0;
     $192 = $191&65535;
     $193 = Math_imul($189, $192)|0;
     $194 = (($188) + ($193))|0;
     $cend = $194;
     $195 = $cend;
     $196 = (($head) + 8|0);
     $197 = HEAP16[$196>>1]|0;
     $198 = $197&65535;
     $199 = (($195) - ($198))|0;
     $col = $199;
     while(1) {
      $200 = $col;
      $201 = HEAP16[132368>>1]|0;
      $202 = $201&65535;
      $203 = ($200>>>0)<($202>>>0);
      if ($203) {
       $204 = $col;
       $205 = $cend;
       $206 = ($204>>>0)<($205>>>0);
       if ($206) {
        $207 = $col;
        $208 = HEAP16[$head>>1]|0;
        $209 = $208&65535;
        $210 = (($head) + 4|0);
        $211 = HEAP16[$210>>1]|0;
        $212 = $211&65535;
        $213 = (($209) + ($212))|0;
        $214 = (($head) + 8|0);
        $215 = HEAP16[$214>>1]|0;
        $216 = $215&65535;
        $217 = (($213) - ($216))|0;
        $218 = ($207>>>0)<($217>>>0);
        $326 = $218;
       } else {
        $326 = 0;
       }
      } else {
       $326 = 0;
      }
      if (!($326)) {
       break;
      }
      $219 = $1;
      $220 = ($219|0)>(2);
      if ($220) {
       $221 = HEAP32[600>>2]|0;
       $222 = $row;
       $223 = HEAP16[616>>1]|0;
       $224 = $223&65535;
       $225 = (($222) - ($224))|0;
       $226 = $225 << 1;
       $227 = $226 & 14;
       $228 = $col;
       $229 = HEAP16[608>>1]|0;
       $230 = $229&65535;
       $231 = (($228) - ($230))|0;
       $232 = $231 & 1;
       $233 = (($227) + ($232))|0;
       $234 = $233 << 1;
       $235 = $221 >>> $234;
       $236 = $235 & 3;
       $237 = $236;
      } else {
       $237 = 0;
      }
      $c = $237;
      $238 = $c;
      $239 = $238 & 1;
      $240 = ($239|0)!=(0);
      if (!($240)) {
       $241 = $row;
       $242 = HEAP16[132368>>1]|0;
       $243 = $242&65535;
       $244 = Math_imul($241, $243)|0;
       $245 = $col;
       $246 = (($244) + ($245))|0;
       $247 = HEAP32[132360>>2]|0;
       $248 = (($247) + ($246<<1)|0);
       $249 = HEAP16[$248>>1]|0;
       $250 = $249&65535;
       $251 = (+($250|0));
       $252 = $c;
       $253 = (($mult) + ($252<<2)|0);
       $254 = +HEAPF32[$253>>2];
       $255 = $251 * $254;
       $256 = (~~(($255))>>>0);
       $c = $256;
       $257 = $c;
       $258 = ($257>>>0)<(65535);
       if ($258) {
        $259 = $c;
        $261 = $259;
       } else {
        $261 = 65535;
       }
       $260 = (0)>($261>>>0);
       if ($260) {
        $266 = 0;
       } else {
        $262 = $c;
        $263 = ($262>>>0)<(65535);
        if ($263) {
         $264 = $c;
         $327 = $264;
        } else {
         $327 = 65535;
        }
        $266 = $327;
       }
       $265 = $266&65535;
       $267 = $row;
       $268 = HEAP16[132368>>1]|0;
       $269 = $268&65535;
       $270 = Math_imul($267, $269)|0;
       $271 = $col;
       $272 = (($270) + ($271))|0;
       $273 = HEAP32[132360>>2]|0;
       $274 = (($273) + ($272<<1)|0);
       HEAP16[$274>>1] = $265;
      }
      $c = 0;
      while(1) {
       $275 = $c;
       $276 = $1;
       $277 = ($275>>>0)<($276>>>0);
       if (!($277)) {
        break;
       }
       $278 = $c;
       $279 = (($278) + 1)|0;
       $280 = (($mult) + ($279<<2)|0);
       $281 = +HEAPF32[$280>>2];
       $282 = $c;
       $283 = (($mult) + ($282<<2)|0);
       $284 = +HEAPF32[$283>>2];
       $285 = $284 + $281;
       HEAPF32[$283>>2] = $285;
       $286 = $c;
       $287 = (($286) + 2)|0;
       $c = $287;
      }
      $288 = $col;
      $289 = (($288) + 1)|0;
      $col = $289;
     }
     $290 = $x;
     $291 = (($290) + 1)|0;
     $x = $291;
    }
    $x = 0;
    while(1) {
     $292 = $x;
     $293 = $wide;
     $294 = ($292>>>0)<($293>>>0);
     if (!($294)) {
      break;
     }
     $c = 0;
     while(1) {
      $295 = $c;
      $296 = $1;
      $297 = ($295>>>0)<($296>>>0);
      if (!($297)) {
       break;
      }
      $298 = $c;
      $299 = (($298) + 1)|0;
      $300 = $wide;
      $301 = Math_imul($299, $300)|0;
      $302 = $x;
      $303 = (($301) + ($302))|0;
      $304 = $mrow;
      $305 = (($304) + ($303<<2)|0);
      $306 = +HEAPF32[$305>>2];
      $307 = $c;
      $308 = $wide;
      $309 = Math_imul($307, $308)|0;
      $310 = $x;
      $311 = (($309) + ($310))|0;
      $312 = $mrow;
      $313 = (($312) + ($311<<2)|0);
      $314 = +HEAPF32[$313>>2];
      $315 = $314 + $306;
      HEAPF32[$313>>2] = $315;
      $316 = $c;
      $317 = (($316) + 2)|0;
      $c = $317;
     }
     $318 = $x;
     $319 = (($318) + 1)|0;
     $x = $319;
    }
    $320 = $row;
    $321 = (($320) + 1)|0;
    $row = $321;
   }
  }
  $322 = $y;
  $323 = (($322) + 1)|0;
  $y = $323;
 }
 $324 = $mrow;
 _free($324);
 STACKTOP = sp;return;
}
function _phase_one_correct() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0.0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0.0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0.0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0.0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0.0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0.0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0.0, $545 = 0.0, $546 = 0.0, $547 = 0.0, $548 = 0.0;
 var $549 = 0.0, $55 = 0.0, $550 = 0, $551 = 0.0, $552 = 0.0, $553 = 0.0, $554 = 0, $555 = 0.0, $556 = 0.0, $557 = 0.0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0.0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0.0, $579 = 0, $58 = 0.0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0.0, $59 = 0, $590 = 0.0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0.0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0.0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0.0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0.0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0.0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0.0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0.0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0.0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0.0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0.0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0.0, $797 = 0.0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0.0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0.0, $84 = 0.0, $840 = 0, $841 = 0, $842 = 0.0, $843 = 0.0, $844 = 0, $845 = 0, $846 = 0.0, $847 = 0.0, $848 = 0.0, $849 = 0, $85 = 0, $850 = 0.0, $851 = 0.0, $852 = 0.0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0.0, $864 = 0.0, $865 = 0.0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0.0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0.0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0.0, $902 = 0.0, $903 = 0.0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0.0, $917 = 0.0, $918 = 0.0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0.0, $924 = 0.0, $925 = 0.0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0.0, $93 = 0, $930 = 0.0, $931 = 0.0, $932 = 0.0, $933 = 0.0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0.0, $940 = 0.0, $941 = 0.0, $942 = 0.0, $943 = 0.0, $944 = 0;
 var $945 = 0.0, $946 = 0.0, $947 = 0.0, $948 = 0.0, $949 = 0, $95 = 0, $950 = 0.0, $951 = 0.0, $952 = 0.0, $953 = 0.0, $954 = 0.0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0.0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0.0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0.0, $98 = 0, $980 = 0.0;
 var $981 = 0, $982 = 0, $99 = 0, $cf = 0, $cf6 = 0, $cfrac = 0.0, $cip = 0, $col = 0, $cx = 0, $cx5 = 0, $data = 0, $dev = 0, $diff = 0, $entries = 0, $frac = 0.0, $head = 0, $i = 0, $j = 0, $k = 0, $lc = 0;
 var $lc1 = 0, $len = 0, $max = 0, $mindiff = 0, $mult = 0, $num = 0.0, $off_412 = 0, $poly = 0, $qc = 0, $qc4 = 0, $qlin_applied = 0, $qmult = 0, $qmult_applied = 0, $qr = 0, $qr3 = 0, $ref = 0, $ref2 = 0, $row = 0, $save = 0, $sum = 0;
 var $tag = 0, $type = 0, $v = 0, $val = 0, $vararg_buffer = 0, $xval = 0, $yval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 736|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $val = sp + 424|0;
 $dev = sp + 408|0;
 $head = sp + 360|0;
 $poly = sp + 96|0;
 $mult = sp + 8|0;
 $yval = sp + 24|0;
 $xval = sp + 32|0;
 $lc = sp + 544|0;
 $ref = sp + 512|0;
 $cx = sp + 144|0;
 $cf = sp + 220|0;
 $qmult = sp + 296|0;
 $lc1 = sp + 672|0;
 $ref2 = sp + 492|0;
 $cx5 = sp + 320|0;
 $cf6 = sp + 40|0;
 $mindiff = 2147483647;
 $off_412 = 0;
 $qmult_applied = 0;
 $qlin_applied = 0;
 $0 = HEAP32[136>>2]|0;
 $1 = ($0|0)!=(0);
 if (!($1)) {
  $2 = HEAP32[134488>>2]|0;
  $3 = ($2|0)!=(0);
  if ($3) {
   $4 = HEAP32[168>>2]|0;
   $5 = ($4|0)!=(0);
   if ($5) {
    $6 = HEAP32[_stderr>>2]|0;
    (_fprintf(($6|0),(134496|0),($vararg_buffer|0))|0);
   }
   $7 = HEAP32[880>>2]|0;
   $8 = HEAP32[133808>>2]|0;
   (_fseek(($7|0),($8|0),0)|0);
   $9 = (_get2()|0);
   HEAP16[944>>1] = $9;
   $10 = HEAP32[880>>2]|0;
   (_fseek(($10|0),6,1)|0);
   $11 = HEAP32[880>>2]|0;
   $12 = HEAP32[133808>>2]|0;
   $13 = (_get4()|0);
   $14 = (($12) + ($13))|0;
   (_fseek(($11|0),($14|0),0)|0);
   $15 = (_get4()|0);
   $entries = $15;
   (_get4()|0);
   while(1) {
    $16 = $entries;
    $17 = (($16) + -1)|0;
    $entries = $17;
    $18 = ($16|0)!=(0);
    if (!($18)) {
     break;
    }
    $19 = (_get4()|0);
    $tag = $19;
    $20 = (_get4()|0);
    $len = $20;
    $21 = (_get4()|0);
    $data = $21;
    $22 = HEAP32[880>>2]|0;
    $23 = (_ftell(($22|0))|0);
    $save = $23;
    $24 = HEAP32[880>>2]|0;
    $25 = HEAP32[133808>>2]|0;
    $26 = $data;
    $27 = (($25) + ($26))|0;
    (_fseek(($24|0),($27|0),0)|0);
    $28 = $tag;
    $29 = ($28|0)==(1049);
    do {
     if ($29) {
      (_get4()|0);
      $i = 0;
      while(1) {
       $30 = $i;
       $31 = ($30|0)<(8);
       if (!($31)) {
        break;
       }
       $32 = (+_getreal(11));
       $33 = $32;
       $34 = $i;
       $35 = (($poly) + ($34<<2)|0);
       HEAPF32[$35>>2] = $33;
       $36 = $i;
       $37 = (($36) + 1)|0;
       $i = $37;
      }
      $38 = +HEAPF32[((134528 + 32|0))>>2];
      $39 = (($poly) + 28|0);
      $40 = +HEAPF32[$39>>2];
      $41 = $38 - $40;
      $42 = (($poly) + 24|0);
      $43 = +HEAPF32[$42>>2];
      $44 = $41 * $43;
      $45 = $44 + 1.0;
      $46 = (($poly) + 12|0);
      $47 = +HEAPF32[$46>>2];
      $48 = $47 + $45;
      HEAPF32[$46>>2] = $48;
      $i = 0;
      while(1) {
       $49 = $i;
       $50 = ($49|0)<(65536);
       if (!($50)) {
        break;
       }
       $51 = (($poly) + 20|0);
       $52 = +HEAPF32[$51>>2];
       $53 = $i;
       $54 = (+($53|0));
       $55 = $52 * $54;
       $56 = (($poly) + 12|0);
       $57 = +HEAPF32[$56>>2];
       $58 = $55 + $57;
       $59 = $i;
       $60 = (+($59|0));
       $61 = $58 * $60;
       $62 = (($poly) + 4|0);
       $63 = +HEAPF32[$62>>2];
       $64 = $61 + $63;
       $num = $64;
       $65 = $num;
       $66 = $65 < 65535.0;
       if ($66) {
        $67 = $num;
        $69 = $67;
       } else {
        $69 = 65535.0;
       }
       $68 = 0.0 > $69;
       if ($68) {
        $74 = 0.0;
       } else {
        $70 = $num;
        $71 = $70 < 65535.0;
        if ($71) {
         $72 = $num;
         $979 = $72;
        } else {
         $979 = 65535.0;
        }
        $74 = $979;
       }
       $73 = (~~(($74))&65535);
       $75 = $i;
       $76 = (968 + ($75<<1)|0);
       HEAP16[$76>>1] = $73;
       $77 = $i;
       $78 = (($77) + 1)|0;
       $i = $78;
      }
      label = 49;
     } else {
      $79 = $tag;
      $80 = ($79|0)==(1050);
      if ($80) {
       $i = 0;
       while(1) {
        $81 = $i;
        $82 = ($81|0)<(4);
        if (!($82)) {
         break;
        }
        $83 = (+_getreal(11));
        $84 = $83;
        $85 = $i;
        $86 = (($poly) + ($85<<2)|0);
        HEAPF32[$86>>2] = $84;
        $87 = $i;
        $88 = (($87) + 1)|0;
        $i = $88;
       }
       $i = 0;
       while(1) {
        $89 = $i;
        $90 = ($89|0)<(65536);
        if (!($90)) {
         break;
        }
        $num = 0.0;
        $j = 4;
        while(1) {
         $91 = $j;
         $92 = (($91) + -1)|0;
         $j = $92;
         $93 = ($91|0)!=(0);
         if (!($93)) {
          break;
         }
         $94 = $num;
         $95 = $i;
         $96 = (+($95|0));
         $97 = $94 * $96;
         $98 = $j;
         $99 = (($poly) + ($98<<2)|0);
         $100 = +HEAPF32[$99>>2];
         $101 = $97 + $100;
         $num = $101;
        }
        $102 = $num;
        $103 = $i;
        $104 = (+($103|0));
        $105 = $102 + $104;
        $106 = $105 < 65535.0;
        if ($106) {
         $107 = $num;
         $108 = $i;
         $109 = (+($108|0));
         $110 = $107 + $109;
         $112 = $110;
        } else {
         $112 = 65535.0;
        }
        $111 = 0.0 > $112;
        if ($111) {
         $123 = 0.0;
        } else {
         $113 = $num;
         $114 = $i;
         $115 = (+($114|0));
         $116 = $113 + $115;
         $117 = $116 < 65535.0;
         if ($117) {
          $118 = $num;
          $119 = $i;
          $120 = (+($119|0));
          $121 = $118 + $120;
          $980 = $121;
         } else {
          $980 = 65535.0;
         }
         $123 = $980;
        }
        $122 = (~~(($123))&65535);
        $124 = $i;
        $125 = (968 + ($124<<1)|0);
        HEAP16[$125>>1] = $122;
        $126 = $i;
        $127 = (($126) + 1)|0;
        $i = $127;
       }
       label = 49;
       break;
      }
      $164 = $tag;
      $165 = ($164|0)==(1024);
      if ($165) {
       while(1) {
        $166 = $len;
        $167 = (($166) - 8)|0;
        $len = $167;
        $168 = ($167|0)>=(0);
        if (!($168)) {
         break;
        }
        $169 = (_get2()|0);
        $170 = $169&65535;
        $col = $170;
        $171 = (_get2()|0);
        $172 = $171&65535;
        $row = $172;
        $173 = (_get2()|0);
        $174 = $173&65535;
        $type = $174;
        (_get2()|0);
        $175 = $col;
        $176 = HEAP16[132368>>1]|0;
        $177 = $176&65535;
        $178 = ($175>>>0)>=($177>>>0);
        if ($178) {
         continue;
        }
        $179 = $type;
        $180 = ($179|0)==(131);
        if ($180) {
         label = 65;
        } else {
         $181 = $type;
         $182 = ($181|0)==(137);
         if ($182) {
          label = 65;
         } else {
          $311 = $type;
          $312 = ($311|0)==(129);
          if ($312) {
           $313 = $row;
           $314 = HEAP16[133096>>1]|0;
           $315 = $314&65535;
           $316 = ($313>>>0)>=($315>>>0);
           if ($316) {
            continue;
           }
           $317 = HEAP32[600>>2]|0;
           $318 = $row;
           $319 = HEAP16[616>>1]|0;
           $320 = $319&65535;
           $321 = (($318) - ($320))|0;
           $322 = $321 << 1;
           $323 = $322 & 14;
           $324 = $col;
           $325 = HEAP16[608>>1]|0;
           $326 = $325&65535;
           $327 = (($324) - ($326))|0;
           $328 = $327 & 1;
           $329 = (($323) + ($328))|0;
           $330 = $329 << 1;
           $331 = $317 >>> $330;
           $332 = $331 & 3;
           $333 = ($332|0)!=(1);
           $334 = $333&1;
           $335 = $334<<2;
           $j = $335;
           $sum = 0;
           $336 = $j;
           $i = $336;
           while(1) {
            $337 = $i;
            $338 = $j;
            $339 = (($338) + 8)|0;
            $340 = ($337|0)<($339|0);
            if (!($340)) {
             break;
            }
            $341 = $row;
            $342 = $i;
            $343 = (134464 + ($342<<1)|0);
            $344 = HEAP8[$343>>0]|0;
            $345 = $344 << 24 >> 24;
            $346 = (($341) + ($345))|0;
            $347 = $col;
            $348 = $i;
            $349 = (134464 + ($348<<1)|0);
            $350 = (($349) + 1|0);
            $351 = HEAP8[$350>>0]|0;
            $352 = $351 << 24 >> 24;
            $353 = (($347) + ($352))|0;
            $354 = (_raw($346,$353)|0);
            $355 = $sum;
            $356 = (($355) + ($354))|0;
            $sum = $356;
            $357 = $i;
            $358 = (($357) + 1)|0;
            $i = $358;
           }
           $359 = $sum;
           $360 = (($359) + 4)|0;
           $361 = $360 >> 3;
           $362 = $361&65535;
           $363 = $row;
           $364 = HEAP16[132368>>1]|0;
           $365 = $364&65535;
           $366 = Math_imul($363, $365)|0;
           $367 = $col;
           $368 = (($366) + ($367))|0;
           $369 = HEAP32[132360>>2]|0;
           $370 = (($369) + ($368<<1)|0);
           HEAP16[$370>>1] = $362;
          }
         }
        }
        if ((label|0) == 65) {
         label = 0;
         $row = 0;
         while(1) {
          $183 = $row;
          $184 = HEAP16[133096>>1]|0;
          $185 = $184&65535;
          $186 = ($183>>>0)<($185>>>0);
          if (!($186)) {
           break;
          }
          $187 = HEAP32[600>>2]|0;
          $188 = $row;
          $189 = HEAP16[616>>1]|0;
          $190 = $189&65535;
          $191 = (($188) - ($190))|0;
          $192 = $191 << 1;
          $193 = $192 & 14;
          $194 = $col;
          $195 = HEAP16[608>>1]|0;
          $196 = $195&65535;
          $197 = (($194) - ($196))|0;
          $198 = $197 & 1;
          $199 = (($193) + ($198))|0;
          $200 = $199 << 1;
          $201 = $187 >>> $200;
          $202 = $201 & 3;
          $203 = ($202|0)==(1);
          if ($203) {
           $i = 0;
           $sum = 0;
           while(1) {
            $204 = $i;
            $205 = ($204|0)<(4);
            if (!($205)) {
             break;
            }
            $206 = $row;
            $207 = $i;
            $208 = (134464 + ($207<<1)|0);
            $209 = HEAP8[$208>>0]|0;
            $210 = $209 << 24 >> 24;
            $211 = (($206) + ($210))|0;
            $212 = $col;
            $213 = $i;
            $214 = (134464 + ($213<<1)|0);
            $215 = (($214) + 1|0);
            $216 = HEAP8[$215>>0]|0;
            $217 = $216 << 24 >> 24;
            $218 = (($212) + ($217))|0;
            $219 = (_raw($211,$218)|0);
            $220 = $i;
            $221 = (($val) + ($220<<2)|0);
            HEAP32[$221>>2] = $219;
            $222 = $sum;
            $223 = (($222) + ($219))|0;
            $sum = $223;
            $224 = $i;
            $225 = (($224) + 1)|0;
            $i = $225;
           }
           $i = 0;
           $max = 0;
           while(1) {
            $226 = $i;
            $227 = ($226|0)<(4);
            if (!($227)) {
             break;
            }
            $228 = $i;
            $229 = (($val) + ($228<<2)|0);
            $230 = HEAP32[$229>>2]|0;
            $231 = $230 << 2;
            $232 = $sum;
            $233 = (($231) - ($232))|0;
            $234 = (Math_abs(($233|0))|0);
            $235 = $i;
            $236 = (($dev) + ($235<<2)|0);
            HEAP32[$236>>2] = $234;
            $237 = $max;
            $238 = (($dev) + ($237<<2)|0);
            $239 = HEAP32[$238>>2]|0;
            $240 = $i;
            $241 = (($dev) + ($240<<2)|0);
            $242 = HEAP32[$241>>2]|0;
            $243 = ($239|0)<($242|0);
            if ($243) {
             $244 = $i;
             $max = $244;
            }
            $245 = $i;
            $246 = (($245) + 1)|0;
            $i = $246;
           }
           $247 = $sum;
           $248 = $max;
           $249 = (($val) + ($248<<2)|0);
           $250 = HEAP32[$249>>2]|0;
           $251 = (($247) - ($250))|0;
           $252 = (+($251|0));
           $253 = $252 / 3.0;
           $254 = $253 + 0.5;
           $255 = (~~(($254))&65535);
           $256 = $row;
           $257 = HEAP16[132368>>1]|0;
           $258 = $257&65535;
           $259 = Math_imul($256, $258)|0;
           $260 = $col;
           $261 = (($259) + ($260))|0;
           $262 = HEAP32[132360>>2]|0;
           $263 = (($262) + ($261<<1)|0);
           HEAP16[$263>>1] = $255;
          } else {
           $sum = 0;
           $i = 8;
           while(1) {
            $264 = $i;
            $265 = ($264|0)<(12);
            if (!($265)) {
             break;
            }
            $266 = $row;
            $267 = $i;
            $268 = (134464 + ($267<<1)|0);
            $269 = HEAP8[$268>>0]|0;
            $270 = $269 << 24 >> 24;
            $271 = (($266) + ($270))|0;
            $272 = $col;
            $273 = $i;
            $274 = (134464 + ($273<<1)|0);
            $275 = (($274) + 1|0);
            $276 = HEAP8[$275>>0]|0;
            $277 = $276 << 24 >> 24;
            $278 = (($272) + ($277))|0;
            $279 = (_raw($271,$278)|0);
            $280 = $sum;
            $281 = (($280) + ($279))|0;
            $sum = $281;
            $282 = $i;
            $283 = (($282) + 1)|0;
            $i = $283;
           }
           $284 = $sum;
           $285 = (+($284|0));
           $286 = $285 * 0.073223300000000005;
           $287 = 0.5 + $286;
           $288 = $row;
           $289 = $col;
           $290 = (($289) - 2)|0;
           $291 = (_raw($288,$290)|0);
           $292 = $row;
           $293 = $col;
           $294 = (($293) + 2)|0;
           $295 = (_raw($292,$294)|0);
           $296 = (($291) + ($295))|0;
           $297 = (+($296|0));
           $298 = $297 * 0.35355340000000002;
           $299 = $287 + $298;
           $300 = (~~(($299))&65535);
           $301 = $row;
           $302 = HEAP16[132368>>1]|0;
           $303 = $302&65535;
           $304 = Math_imul($301, $303)|0;
           $305 = $col;
           $306 = (($304) + ($305))|0;
           $307 = HEAP32[132360>>2]|0;
           $308 = (($307) + ($306<<1)|0);
           HEAP16[$308>>1] = $300;
          }
          $309 = $row;
          $310 = (($309) + 1)|0;
          $row = $310;
         }
        }
       }
      } else {
       $371 = $tag;
       $372 = ($371|0)==(1025);
       if ($372) {
        _phase_one_flat_field(1,2);
       } else {
        $373 = $tag;
        $374 = ($373|0)==(1046);
        if ($374) {
         label = 102;
        } else {
         $375 = $tag;
         $376 = ($375|0)==(1040);
         if ($376) {
          label = 102;
         } else {
          $377 = $tag;
          $378 = ($377|0)==(1035);
          if ($378) {
           _phase_one_flat_field(0,4);
          } else {
           $379 = $tag;
           $380 = ($379|0)==(1042);
           if ($380) {
            $381 = HEAP32[880>>2]|0;
            (_fseek(($381|0),36,1)|0);
            $382 = (_get2()|0);
            $383 = $382&65535;
            $384 = HEAP32[((134528 + 8|0))>>2]|0;
            $385 = (($383) - ($384))|0;
            $386 = (Math_abs(($385|0))|0);
            $diff = $386;
            $387 = $mindiff;
            $388 = $diff;
            $389 = ($387|0)>($388|0);
            if ($389) {
             $390 = $diff;
             $mindiff = $390;
             $391 = HEAP32[880>>2]|0;
             $392 = (_ftell(($391|0))|0);
             $393 = (($392) - 38)|0;
             $off_412 = $393;
            }
           } else {
            $394 = $tag;
            $395 = ($394|0)==(1055);
            do {
             if ($395) {
              $396 = $qlin_applied;
              $397 = ($396|0)!=(0);
              if ($397) {
               label = 168;
               break;
              }
              $qr = 0;
              while(1) {
               $398 = $qr;
               $399 = ($398|0)<(2);
               if (!($399)) {
                break;
               }
               $qc = 0;
               while(1) {
                $400 = $qc;
                $401 = ($400|0)<(2);
                if (!($401)) {
                 break;
                }
                $i = 0;
                while(1) {
                 $402 = $i;
                 $403 = ($402|0)<(16);
                 if (!($403)) {
                  break;
                 }
                 $404 = (_get4()|0);
                 $405 = $404&65535;
                 $406 = $i;
                 $407 = $qc;
                 $408 = $qr;
                 $409 = (($lc) + ($408<<6)|0);
                 $410 = (($409) + ($407<<5)|0);
                 $411 = (($410) + ($406<<1)|0);
                 HEAP16[$411>>1] = $405;
                 $412 = $i;
                 $413 = (($412) + 1)|0;
                 $i = $413;
                }
                $414 = $qc;
                $415 = (($414) + 1)|0;
                $qc = $415;
               }
               $416 = $qr;
               $417 = (($416) + 1)|0;
               $qr = $417;
              }
              $i = 0;
              while(1) {
               $418 = $i;
               $419 = ($418|0)<(16);
               if (!($419)) {
                break;
               }
               $v = 0;
               $qr = 0;
               while(1) {
                $420 = $qr;
                $421 = ($420|0)<(2);
                if (!($421)) {
                 break;
                }
                $qc = 0;
                while(1) {
                 $422 = $qc;
                 $423 = ($422|0)<(2);
                 if (!($423)) {
                  break;
                 }
                 $424 = $i;
                 $425 = $qc;
                 $426 = $qr;
                 $427 = (($lc) + ($426<<6)|0);
                 $428 = (($427) + ($425<<5)|0);
                 $429 = (($428) + ($424<<1)|0);
                 $430 = HEAP16[$429>>1]|0;
                 $431 = $430&65535;
                 $432 = $v;
                 $433 = (($432) + ($431))|0;
                 $v = $433;
                 $434 = $qc;
                 $435 = (($434) + 1)|0;
                 $qc = $435;
                }
                $436 = $qr;
                $437 = (($436) + 1)|0;
                $qr = $437;
               }
               $438 = $v;
               $439 = (($438) + 2)|0;
               $440 = $439 >> 2;
               $441 = $440&65535;
               $442 = $i;
               $443 = (($ref) + ($442<<1)|0);
               HEAP16[$443>>1] = $441;
               $444 = $i;
               $445 = (($444) + 1)|0;
               $i = $445;
              }
              $qr = 0;
              while(1) {
               $446 = $qr;
               $447 = ($446|0)<(2);
               if (!($447)) {
                break;
               }
               $qc = 0;
               while(1) {
                $448 = $qc;
                $449 = ($448|0)<(2);
                if (!($449)) {
                 break;
                }
                $i = 0;
                while(1) {
                 $450 = $i;
                 $451 = ($450|0)<(16);
                 if (!($451)) {
                  break;
                 }
                 $452 = $i;
                 $453 = $qc;
                 $454 = $qr;
                 $455 = (($lc) + ($454<<6)|0);
                 $456 = (($455) + ($453<<5)|0);
                 $457 = (($456) + ($452<<1)|0);
                 $458 = HEAP16[$457>>1]|0;
                 $459 = $458&65535;
                 $460 = $i;
                 $461 = (1 + ($460))|0;
                 $462 = (($cx) + ($461<<2)|0);
                 HEAP32[$462>>2] = $459;
                 $463 = $i;
                 $464 = (($ref) + ($463<<1)|0);
                 $465 = HEAP16[$464>>1]|0;
                 $466 = $465&65535;
                 $467 = $i;
                 $468 = (1 + ($467))|0;
                 $469 = (($cf) + ($468<<2)|0);
                 HEAP32[$469>>2] = $466;
                 $470 = $i;
                 $471 = (($470) + 1)|0;
                 $i = $471;
                }
                HEAP32[$cf>>2] = 0;
                HEAP32[$cx>>2] = 0;
                $472 = (($ref) + 30|0);
                $473 = HEAP16[$472>>1]|0;
                $474 = $473&65535;
                $475 = ($474*65535)|0;
                $476 = $qc;
                $477 = $qr;
                $478 = (($lc) + ($477<<6)|0);
                $479 = (($478) + ($476<<5)|0);
                $480 = (($479) + 30|0);
                $481 = HEAP16[$480>>1]|0;
                $482 = $481&65535;
                $483 = (($475>>>0) / ($482>>>0))&-1;
                $484 = (($cf) + 68|0);
                HEAP32[$484>>2] = $483;
                $485 = (($cx) + 68|0);
                HEAP32[$485>>2] = $483;
                $486 = (($cf) + 72|0);
                HEAP32[$486>>2] = 65535;
                $487 = (($cx) + 72|0);
                HEAP32[$487>>2] = 65535;
                _cubic_spline($cx,$cf,19);
                $488 = $qr;
                $489 = ($488|0)!=(0);
                if ($489) {
                 $490 = HEAP32[((134528 + 24|0))>>2]|0;
                 $491 = $490;
                } else {
                 $491 = 0;
                }
                $row = $491;
                while(1) {
                 $492 = $row;
                 $493 = $qr;
                 $494 = ($493|0)!=(0);
                 if ($494) {
                  $495 = HEAP16[133096>>1]|0;
                  $496 = $495&65535;
                  $499 = $496;
                 } else {
                  $497 = HEAP32[((134528 + 24|0))>>2]|0;
                  $499 = $497;
                 }
                 $498 = ($492>>>0)<($499>>>0);
                 if (!($498)) {
                  break;
                 }
                 $500 = $qc;
                 $501 = ($500|0)!=(0);
                 if ($501) {
                  $502 = HEAP32[((134528 + 16|0))>>2]|0;
                  $503 = $502;
                 } else {
                  $503 = 0;
                 }
                 $col = $503;
                 while(1) {
                  $504 = $col;
                  $505 = $qc;
                  $506 = ($505|0)!=(0);
                  if ($506) {
                   $507 = HEAP16[132368>>1]|0;
                   $508 = $507&65535;
                   $511 = $508;
                  } else {
                   $509 = HEAP32[((134528 + 16|0))>>2]|0;
                   $511 = $509;
                  }
                  $510 = ($504>>>0)<($511>>>0);
                  if (!($510)) {
                   break;
                  }
                  $512 = $row;
                  $513 = HEAP16[132368>>1]|0;
                  $514 = $513&65535;
                  $515 = Math_imul($512, $514)|0;
                  $516 = $col;
                  $517 = (($515) + ($516))|0;
                  $518 = HEAP32[132360>>2]|0;
                  $519 = (($518) + ($517<<1)|0);
                  $520 = HEAP16[$519>>1]|0;
                  $521 = $520&65535;
                  $522 = (968 + ($521<<1)|0);
                  $523 = HEAP16[$522>>1]|0;
                  $524 = $row;
                  $525 = HEAP16[132368>>1]|0;
                  $526 = $525&65535;
                  $527 = Math_imul($524, $526)|0;
                  $528 = $col;
                  $529 = (($527) + ($528))|0;
                  $530 = HEAP32[132360>>2]|0;
                  $531 = (($530) + ($529<<1)|0);
                  HEAP16[$531>>1] = $523;
                  $532 = $col;
                  $533 = (($532) + 1)|0;
                  $col = $533;
                 }
                 $534 = $row;
                 $535 = (($534) + 1)|0;
                 $row = $535;
                }
                $536 = $qc;
                $537 = (($536) + 1)|0;
                $qc = $537;
               }
               $538 = $qr;
               $539 = (($538) + 1)|0;
               $qr = $539;
              }
              $qlin_applied = 1;
             } else {
              label = 168;
             }
            } while(0);
            if ((label|0) == 168) {
             label = 0;
             $540 = $tag;
             $541 = ($540|0)==(1054);
             do {
              if ($541) {
               $542 = $qmult_applied;
               $543 = ($542|0)!=(0);
               if ($543) {
                label = 188;
                break;
               }
               ;HEAP32[$qmult+0>>2]=HEAP32[134568+0>>2]|0;HEAP32[$qmult+4>>2]=HEAP32[134568+4>>2]|0;HEAP32[$qmult+8>>2]=HEAP32[134568+8>>2]|0;HEAP32[$qmult+12>>2]=HEAP32[134568+12>>2]|0;
               (_get4()|0);
               (_get4()|0);
               (_get4()|0);
               (_get4()|0);
               $544 = (+_getreal(11));
               $545 = 1.0 + $544;
               $546 = $545;
               HEAPF32[$qmult>>2] = $546;
               (_get4()|0);
               (_get4()|0);
               (_get4()|0);
               (_get4()|0);
               (_get4()|0);
               $547 = (+_getreal(11));
               $548 = 1.0 + $547;
               $549 = $548;
               $550 = (($qmult) + 4|0);
               HEAPF32[$550>>2] = $549;
               (_get4()|0);
               (_get4()|0);
               (_get4()|0);
               $551 = (+_getreal(11));
               $552 = 1.0 + $551;
               $553 = $552;
               $554 = (($qmult) + 8|0);
               HEAPF32[$554>>2] = $553;
               (_get4()|0);
               (_get4()|0);
               (_get4()|0);
               $555 = (+_getreal(11));
               $556 = 1.0 + $555;
               $557 = $556;
               $558 = (($qmult) + 8|0);
               $559 = (($558) + 4|0);
               HEAPF32[$559>>2] = $557;
               $row = 0;
               while(1) {
                $560 = $row;
                $561 = HEAP16[133096>>1]|0;
                $562 = $561&65535;
                $563 = ($560>>>0)<($562>>>0);
                if (!($563)) {
                 break;
                }
                $col = 0;
                while(1) {
                 $564 = $col;
                 $565 = HEAP16[132368>>1]|0;
                 $566 = $565&65535;
                 $567 = ($564>>>0)<($566>>>0);
                 if (!($567)) {
                  break;
                 }
                 $568 = $col;
                 $569 = HEAP32[((134528 + 16|0))>>2]|0;
                 $570 = ($568>>>0)>=($569>>>0);
                 $571 = $570&1;
                 $572 = $row;
                 $573 = HEAP32[((134528 + 24|0))>>2]|0;
                 $574 = ($572>>>0)>=($573>>>0);
                 $575 = $574&1;
                 $576 = (($qmult) + ($575<<3)|0);
                 $577 = (($576) + ($571<<2)|0);
                 $578 = +HEAPF32[$577>>2];
                 $579 = $row;
                 $580 = HEAP16[132368>>1]|0;
                 $581 = $580&65535;
                 $582 = Math_imul($579, $581)|0;
                 $583 = $col;
                 $584 = (($582) + ($583))|0;
                 $585 = HEAP32[132360>>2]|0;
                 $586 = (($585) + ($584<<1)|0);
                 $587 = HEAP16[$586>>1]|0;
                 $588 = $587&65535;
                 $589 = (+($588|0));
                 $590 = $578 * $589;
                 $591 = (~~(($590)));
                 $i = $591;
                 $592 = $i;
                 $593 = ($592|0)<(65535);
                 if ($593) {
                  $594 = $i;
                  $596 = $594;
                 } else {
                  $596 = 65535;
                 }
                 $595 = (0)>($596|0);
                 if ($595) {
                  $601 = 0;
                 } else {
                  $597 = $i;
                  $598 = ($597|0)<(65535);
                  if ($598) {
                   $599 = $i;
                   $981 = $599;
                  } else {
                   $981 = 65535;
                  }
                  $601 = $981;
                 }
                 $600 = $601&65535;
                 $602 = $row;
                 $603 = HEAP16[132368>>1]|0;
                 $604 = $603&65535;
                 $605 = Math_imul($602, $604)|0;
                 $606 = $col;
                 $607 = (($605) + ($606))|0;
                 $608 = HEAP32[132360>>2]|0;
                 $609 = (($608) + ($607<<1)|0);
                 HEAP16[$609>>1] = $600;
                 $610 = $col;
                 $611 = (($610) + 1)|0;
                 $col = $611;
                }
                $612 = $row;
                $613 = (($612) + 1)|0;
                $row = $613;
               }
               $qmult_applied = 1;
              } else {
               label = 188;
              }
             } while(0);
             if ((label|0) == 188) {
              label = 0;
              $614 = $tag;
              $615 = ($614|0)==(1073);
              do {
               if ($615) {
                $616 = $qmult_applied;
                $617 = ($616|0)!=(0);
                if ($617) {
                 break;
                }
                $i = 0;
                while(1) {
                 $618 = $i;
                 $619 = ($618|0)<(7);
                 if (!($619)) {
                  break;
                 }
                 $620 = (_get4()|0);
                 $621 = $620&65535;
                 $622 = $i;
                 $623 = (($ref2) + ($622<<1)|0);
                 HEAP16[$623>>1] = $621;
                 $624 = $i;
                 $625 = (($624) + 1)|0;
                 $i = $625;
                }
                $qr3 = 0;
                while(1) {
                 $626 = $qr3;
                 $627 = ($626|0)<(2);
                 if (!($627)) {
                  break;
                 }
                 $qc4 = 0;
                 while(1) {
                  $628 = $qc4;
                  $629 = ($628|0)<(2);
                  if (!($629)) {
                   break;
                  }
                  $i = 0;
                  while(1) {
                   $630 = $i;
                   $631 = ($630|0)<(7);
                   if (!($631)) {
                    break;
                   }
                   $632 = (_get4()|0);
                   $633 = $632&65535;
                   $634 = $i;
                   $635 = $qc4;
                   $636 = $qr3;
                   $637 = (($lc1) + (($636*28)|0)|0);
                   $638 = (($637) + (($635*14)|0)|0);
                   $639 = (($638) + ($634<<1)|0);
                   HEAP16[$639>>1] = $633;
                   $640 = $i;
                   $641 = (($640) + 1)|0;
                   $i = $641;
                  }
                  $642 = $qc4;
                  $643 = (($642) + 1)|0;
                  $qc4 = $643;
                 }
                 $644 = $qr3;
                 $645 = (($644) + 1)|0;
                 $qr3 = $645;
                }
                $qr3 = 0;
                while(1) {
                 $646 = $qr3;
                 $647 = ($646|0)<(2);
                 if (!($647)) {
                  break;
                 }
                 $qc4 = 0;
                 while(1) {
                  $648 = $qc4;
                  $649 = ($648|0)<(2);
                  if (!($649)) {
                   break;
                  }
                  $i = 0;
                  while(1) {
                   $650 = $i;
                   $651 = ($650|0)<(7);
                   if (!($651)) {
                    break;
                   }
                   $652 = $i;
                   $653 = (($ref2) + ($652<<1)|0);
                   $654 = HEAP16[$653>>1]|0;
                   $655 = $654&65535;
                   $656 = $i;
                   $657 = (1 + ($656))|0;
                   $658 = (($cx5) + ($657<<2)|0);
                   HEAP32[$658>>2] = $655;
                   $659 = $i;
                   $660 = (($ref2) + ($659<<1)|0);
                   $661 = HEAP16[$660>>1]|0;
                   $662 = $661&65535;
                   $663 = $i;
                   $664 = $qc4;
                   $665 = $qr3;
                   $666 = (($lc1) + (($665*28)|0)|0);
                   $667 = (($666) + (($664*14)|0)|0);
                   $668 = (($667) + ($663<<1)|0);
                   $669 = HEAP16[$668>>1]|0;
                   $670 = $669&65535;
                   $671 = Math_imul($662, $670)|0;
                   $672 = (($671>>>0) / 10000)&-1;
                   $673 = $i;
                   $674 = (1 + ($673))|0;
                   $675 = (($cf6) + ($674<<2)|0);
                   HEAP32[$675>>2] = $672;
                   $676 = $i;
                   $677 = (($676) + 1)|0;
                   $i = $677;
                  }
                  HEAP32[$cf6>>2] = 0;
                  HEAP32[$cx5>>2] = 0;
                  $678 = (($cf6) + 32|0);
                  HEAP32[$678>>2] = 65535;
                  $679 = (($cx5) + 32|0);
                  HEAP32[$679>>2] = 65535;
                  _cubic_spline($cx5,$cf6,9);
                  $680 = $qr3;
                  $681 = ($680|0)!=(0);
                  if ($681) {
                   $682 = HEAP32[((134528 + 24|0))>>2]|0;
                   $683 = $682;
                  } else {
                   $683 = 0;
                  }
                  $row = $683;
                  while(1) {
                   $684 = $row;
                   $685 = $qr3;
                   $686 = ($685|0)!=(0);
                   if ($686) {
                    $687 = HEAP16[133096>>1]|0;
                    $688 = $687&65535;
                    $691 = $688;
                   } else {
                    $689 = HEAP32[((134528 + 24|0))>>2]|0;
                    $691 = $689;
                   }
                   $690 = ($684>>>0)<($691>>>0);
                   if (!($690)) {
                    break;
                   }
                   $692 = $qc4;
                   $693 = ($692|0)!=(0);
                   if ($693) {
                    $694 = HEAP32[((134528 + 16|0))>>2]|0;
                    $695 = $694;
                   } else {
                    $695 = 0;
                   }
                   $col = $695;
                   while(1) {
                    $696 = $col;
                    $697 = $qc4;
                    $698 = ($697|0)!=(0);
                    if ($698) {
                     $699 = HEAP16[132368>>1]|0;
                     $700 = $699&65535;
                     $703 = $700;
                    } else {
                     $701 = HEAP32[((134528 + 16|0))>>2]|0;
                     $703 = $701;
                    }
                    $702 = ($696>>>0)<($703>>>0);
                    if (!($702)) {
                     break;
                    }
                    $704 = $row;
                    $705 = HEAP16[132368>>1]|0;
                    $706 = $705&65535;
                    $707 = Math_imul($704, $706)|0;
                    $708 = $col;
                    $709 = (($707) + ($708))|0;
                    $710 = HEAP32[132360>>2]|0;
                    $711 = (($710) + ($709<<1)|0);
                    $712 = HEAP16[$711>>1]|0;
                    $713 = $712&65535;
                    $714 = (968 + ($713<<1)|0);
                    $715 = HEAP16[$714>>1]|0;
                    $716 = $row;
                    $717 = HEAP16[132368>>1]|0;
                    $718 = $717&65535;
                    $719 = Math_imul($716, $718)|0;
                    $720 = $col;
                    $721 = (($719) + ($720))|0;
                    $722 = HEAP32[132360>>2]|0;
                    $723 = (($722) + ($721<<1)|0);
                    HEAP16[$723>>1] = $715;
                    $724 = $col;
                    $725 = (($724) + 1)|0;
                    $col = $725;
                   }
                   $726 = $row;
                   $727 = (($726) + 1)|0;
                   $row = $727;
                  }
                  $728 = $qc4;
                  $729 = (($728) + 1)|0;
                  $qc4 = $729;
                 }
                 $730 = $qr3;
                 $731 = (($730) + 1)|0;
                 $qr3 = $731;
                }
                $qmult_applied = 1;
                $qlin_applied = 1;
               }
              } while(0);
             }
            }
           }
          }
         }
        }
        if ((label|0) == 102) {
         label = 0;
         _phase_one_flat_field(0,2);
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 49) {
     label = 0;
     $row = 0;
     while(1) {
      $128 = $row;
      $129 = HEAP16[133096>>1]|0;
      $130 = $129&65535;
      $131 = ($128>>>0)<($130>>>0);
      if (!($131)) {
       break;
      }
      $132 = $tag;
      $133 = $132 & 1;
      $134 = HEAP32[((134528 + 16|0))>>2]|0;
      $135 = Math_imul($133, $134)|0;
      $col = $135;
      while(1) {
       $136 = $col;
       $137 = HEAP16[132368>>1]|0;
       $138 = $137&65535;
       $139 = ($136>>>0)<($138>>>0);
       if (!($139)) {
        break;
       }
       $140 = $row;
       $141 = HEAP16[132368>>1]|0;
       $142 = $141&65535;
       $143 = Math_imul($140, $142)|0;
       $144 = $col;
       $145 = (($143) + ($144))|0;
       $146 = HEAP32[132360>>2]|0;
       $147 = (($146) + ($145<<1)|0);
       $148 = HEAP16[$147>>1]|0;
       $149 = $148&65535;
       $150 = (968 + ($149<<1)|0);
       $151 = HEAP16[$150>>1]|0;
       $152 = $row;
       $153 = HEAP16[132368>>1]|0;
       $154 = $153&65535;
       $155 = Math_imul($152, $154)|0;
       $156 = $col;
       $157 = (($155) + ($156))|0;
       $158 = HEAP32[132360>>2]|0;
       $159 = (($158) + ($157<<1)|0);
       HEAP16[$159>>1] = $151;
       $160 = $col;
       $161 = (($160) + 1)|0;
       $col = $161;
      }
      $162 = $row;
      $163 = (($162) + 1)|0;
      $row = $163;
     }
    }
    $732 = HEAP32[880>>2]|0;
    $733 = $save;
    (_fseek(($732|0),($733|0),0)|0);
   }
   $734 = $off_412;
   $735 = ($734|0)!=(0);
   if (!($735)) {
    STACKTOP = sp;return;
   }
   $736 = HEAP32[880>>2]|0;
   $737 = $off_412;
   (_fseek(($736|0),($737|0),0)|0);
   $i = 0;
   while(1) {
    $738 = $i;
    $739 = ($738|0)<(9);
    if (!($739)) {
     break;
    }
    $740 = (_get4()|0);
    $741 = $740 & 32767;
    $742 = $i;
    $743 = (($head) + ($742<<2)|0);
    HEAP32[$743>>2] = $741;
    $744 = $i;
    $745 = (($744) + 1)|0;
    $i = $745;
   }
   $746 = (($head) + 4|0);
   $747 = HEAP32[$746>>2]|0;
   $748 = (($head) + 12|0);
   $749 = HEAP32[$748>>2]|0;
   $750 = Math_imul($747, $749)|0;
   $751 = (($head) + 8|0);
   $752 = HEAP32[$751>>2]|0;
   $753 = (($head) + 16|0);
   $754 = HEAP32[$753>>2]|0;
   $755 = Math_imul($752, $754)|0;
   $756 = (($750) + ($755))|0;
   $757 = (_calloc($756,6)|0);
   HEAP32[$yval>>2] = $757;
   $758 = HEAP32[$yval>>2]|0;
   _merror($758,134584);
   $759 = HEAP32[$yval>>2]|0;
   $760 = (($head) + 4|0);
   $761 = HEAP32[$760>>2]|0;
   $762 = (($head) + 12|0);
   $763 = HEAP32[$762>>2]|0;
   $764 = Math_imul($761, $763)|0;
   $765 = (($759) + ($764<<2)|0);
   $766 = (($yval) + 4|0);
   HEAP32[$766>>2] = $765;
   $767 = (($yval) + 4|0);
   $768 = HEAP32[$767>>2]|0;
   $769 = (($head) + 8|0);
   $770 = HEAP32[$769>>2]|0;
   $771 = (($head) + 16|0);
   $772 = HEAP32[$771>>2]|0;
   $773 = Math_imul($770, $772)|0;
   $774 = (($768) + ($773<<2)|0);
   HEAP32[$xval>>2] = $774;
   $775 = HEAP32[$xval>>2]|0;
   $776 = (($head) + 4|0);
   $777 = HEAP32[$776>>2]|0;
   $778 = (($head) + 12|0);
   $779 = HEAP32[$778>>2]|0;
   $780 = Math_imul($777, $779)|0;
   $781 = (($775) + ($780<<1)|0);
   $782 = (($xval) + 4|0);
   HEAP32[$782>>2] = $781;
   (_get2()|0);
   $i = 0;
   while(1) {
    $783 = $i;
    $784 = ($783|0)<(2);
    if (!($784)) {
     break;
    }
    $j = 0;
    while(1) {
     $785 = $j;
     $786 = $i;
     $787 = (($786) + 1)|0;
     $788 = (($head) + ($787<<2)|0);
     $789 = HEAP32[$788>>2]|0;
     $790 = $i;
     $791 = (($790) + 3)|0;
     $792 = (($head) + ($791<<2)|0);
     $793 = HEAP32[$792>>2]|0;
     $794 = Math_imul($789, $793)|0;
     $795 = ($785|0)<($794|0);
     if (!($795)) {
      break;
     }
     $796 = (+_getreal(11));
     $797 = $796;
     $798 = $j;
     $799 = $i;
     $800 = (($yval) + ($799<<2)|0);
     $801 = HEAP32[$800>>2]|0;
     $802 = (($801) + ($798<<2)|0);
     HEAPF32[$802>>2] = $797;
     $803 = $j;
     $804 = (($803) + 1)|0;
     $j = $804;
    }
    $805 = $i;
    $806 = (($805) + 1)|0;
    $i = $806;
   }
   $i = 0;
   while(1) {
    $807 = $i;
    $808 = ($807|0)<(2);
    if (!($808)) {
     break;
    }
    $j = 0;
    while(1) {
     $809 = $j;
     $810 = $i;
     $811 = (($810) + 1)|0;
     $812 = (($head) + ($811<<2)|0);
     $813 = HEAP32[$812>>2]|0;
     $814 = $i;
     $815 = (($814) + 3)|0;
     $816 = (($head) + ($815<<2)|0);
     $817 = HEAP32[$816>>2]|0;
     $818 = Math_imul($813, $817)|0;
     $819 = ($809|0)<($818|0);
     if (!($819)) {
      break;
     }
     $820 = (_get2()|0);
     $821 = $j;
     $822 = $i;
     $823 = (($xval) + ($822<<2)|0);
     $824 = HEAP32[$823>>2]|0;
     $825 = (($824) + ($821<<1)|0);
     HEAP16[$825>>1] = $820;
     $826 = $j;
     $827 = (($826) + 1)|0;
     $j = $827;
    }
    $828 = $i;
    $829 = (($828) + 1)|0;
    $i = $829;
   }
   $row = 0;
   while(1) {
    $830 = $row;
    $831 = HEAP16[133096>>1]|0;
    $832 = $831&65535;
    $833 = ($830>>>0)<($832>>>0);
    if (!($833)) {
     break;
    }
    $col = 0;
    while(1) {
     $834 = $col;
     $835 = HEAP16[132368>>1]|0;
     $836 = $835&65535;
     $837 = ($834>>>0)<($836>>>0);
     if (!($837)) {
      break;
     }
     $838 = $col;
     $839 = (+($838>>>0));
     $840 = (($head) + 12|0);
     $841 = HEAP32[$840>>2]|0;
     $842 = (+($841|0));
     $843 = $839 * $842;
     $844 = HEAP16[132368>>1]|0;
     $845 = $844&65535;
     $846 = (+($845|0));
     $847 = $843 / $846;
     $cfrac = $847;
     $848 = $cfrac;
     $849 = (~~(($848)));
     $cip = $849;
     $850 = (+($849|0));
     $851 = $cfrac;
     $852 = $851 - $850;
     $cfrac = $852;
     $853 = $row;
     $854 = HEAP16[132368>>1]|0;
     $855 = $854&65535;
     $856 = Math_imul($853, $855)|0;
     $857 = $col;
     $858 = (($856) + ($857))|0;
     $859 = HEAP32[132360>>2]|0;
     $860 = (($859) + ($858<<1)|0);
     $861 = HEAP16[$860>>1]|0;
     $862 = $861&65535;
     $863 = (+($862|0));
     $864 = $863 * 0.5;
     $865 = $864;
     $num = $865;
     $866 = $cip;
     $i = $866;
     while(1) {
      $867 = $i;
      $868 = $cip;
      $869 = (($868) + 2)|0;
      $870 = ($867|0)<($869|0);
      if (!($870)) {
       break;
      }
      $j = 0;
      $k = 0;
      while(1) {
       $871 = $j;
       $872 = (($head) + 4|0);
       $873 = HEAP32[$872>>2]|0;
       $874 = ($871|0)<($873|0);
       if (!($874)) {
        break;
       }
       $875 = $num;
       $876 = (($head) + 4|0);
       $877 = HEAP32[$876>>2]|0;
       $878 = $i;
       $879 = Math_imul($877, $878)|0;
       $880 = $j;
       $881 = (($879) + ($880))|0;
       $k = $881;
       $882 = HEAP32[$xval>>2]|0;
       $883 = (($882) + ($881<<1)|0);
       $884 = HEAP16[$883>>1]|0;
       $885 = $884&65535;
       $886 = (+($885|0));
       $887 = $875 < $886;
       if ($887) {
        label = 279;
        break;
       }
       $888 = $j;
       $889 = (($888) + 1)|0;
       $j = $889;
      }
      if ((label|0) == 279) {
       label = 0;
      }
      $890 = $j;
      $891 = ($890|0)==(0);
      if ($891) {
       label = 284;
      } else {
       $892 = $j;
       $893 = (($head) + 4|0);
       $894 = HEAP32[$893>>2]|0;
       $895 = ($892|0)==($894|0);
       if ($895) {
        label = 284;
       } else {
        $896 = $k;
        $897 = HEAP32[$xval>>2]|0;
        $898 = (($897) + ($896<<1)|0);
        $899 = HEAP16[$898>>1]|0;
        $900 = $899&65535;
        $901 = (+($900|0));
        $902 = $num;
        $903 = $901 - $902;
        $904 = $k;
        $905 = HEAP32[$xval>>2]|0;
        $906 = (($905) + ($904<<1)|0);
        $907 = HEAP16[$906>>1]|0;
        $908 = $907&65535;
        $909 = $k;
        $910 = (($909) - 1)|0;
        $911 = HEAP32[$xval>>2]|0;
        $912 = (($911) + ($910<<1)|0);
        $913 = HEAP16[$912>>1]|0;
        $914 = $913&65535;
        $915 = (($908) - ($914))|0;
        $916 = (+($915|0));
        $917 = $903 / $916;
        $918 = $917;
       }
      }
      if ((label|0) == 284) {
       label = 0;
       $918 = 0.0;
      }
      $frac = $918;
      $919 = $k;
      $920 = (($919) - 1)|0;
      $921 = HEAP32[$yval>>2]|0;
      $922 = (($921) + ($920<<2)|0);
      $923 = +HEAPF32[$922>>2];
      $924 = $frac;
      $925 = $923 * $924;
      $926 = $k;
      $927 = HEAP32[$yval>>2]|0;
      $928 = (($927) + ($926<<2)|0);
      $929 = +HEAPF32[$928>>2];
      $930 = $frac;
      $931 = 1.0 - $930;
      $932 = $929 * $931;
      $933 = $925 + $932;
      $934 = $i;
      $935 = $cip;
      $936 = (($934) - ($935))|0;
      $937 = (($mult) + ($936<<2)|0);
      HEAPF32[$937>>2] = $933;
      $938 = $i;
      $939 = (($938) + 1)|0;
      $i = $939;
     }
     $940 = +HEAPF32[$mult>>2];
     $941 = $cfrac;
     $942 = 1.0 - $941;
     $943 = $940 * $942;
     $944 = (($mult) + 4|0);
     $945 = +HEAPF32[$944>>2];
     $946 = $cfrac;
     $947 = $945 * $946;
     $948 = $943 + $947;
     $949 = $row;
     $950 = (+($949>>>0));
     $951 = $948 * $950;
     $952 = $num;
     $953 = $951 + $952;
     $954 = $953 * 2.0;
     $955 = (~~(($954)));
     $i = $955;
     $956 = $i;
     $957 = ($956|0)<(65535);
     if ($957) {
      $958 = $i;
      $960 = $958;
     } else {
      $960 = 65535;
     }
     $959 = (0)>($960|0);
     if ($959) {
      $965 = 0;
     } else {
      $961 = $i;
      $962 = ($961|0)<(65535);
      if ($962) {
       $963 = $i;
       $982 = $963;
      } else {
       $982 = 65535;
      }
      $965 = $982;
     }
     $964 = $965&65535;
     $966 = $row;
     $967 = HEAP16[132368>>1]|0;
     $968 = $967&65535;
     $969 = Math_imul($966, $968)|0;
     $970 = $col;
     $971 = (($969) + ($970))|0;
     $972 = HEAP32[132360>>2]|0;
     $973 = (($972) + ($971<<1)|0);
     HEAP16[$973>>1] = $964;
     $974 = $col;
     $975 = (($974) + 1)|0;
     $col = $975;
    }
    $976 = $row;
    $977 = (($976) + 1)|0;
    $row = $977;
   }
   $978 = HEAP32[$yval>>2]|0;
   _free($978);
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function _phase_one_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $a = 0, $akey = 0, $b = 0, $bkey = 0, $i = 0;
 var $mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[880>>2]|0;
 $1 = HEAP32[((134528 + 4|0))>>2]|0;
 (_fseek(($0|0),($1|0),0)|0);
 $2 = (_get2()|0);
 $akey = $2;
 $3 = (_get2()|0);
 $bkey = $3;
 $4 = HEAP32[134528>>2]|0;
 $5 = ($4|0)==(1);
 $6 = $5 ? 21845 : 4948;
 $7 = $6&65535;
 $mask = $7;
 $8 = HEAP32[880>>2]|0;
 $9 = HEAP32[133816>>2]|0;
 (_fseek(($8|0),($9|0),0)|0);
 $10 = HEAP32[132360>>2]|0;
 $11 = HEAP16[132368>>1]|0;
 $12 = $11&65535;
 $13 = HEAP16[133096>>1]|0;
 $14 = $13&65535;
 $15 = Math_imul($12, $14)|0;
 _read_shorts($10,$15);
 $16 = HEAP32[134528>>2]|0;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $18 = $i;
  $19 = HEAP16[132368>>1]|0;
  $20 = $19&65535;
  $21 = HEAP16[133096>>1]|0;
  $22 = $21&65535;
  $23 = Math_imul($20, $22)|0;
  $24 = ($18|0)<($23|0);
  if (!($24)) {
   break;
  }
  $25 = $i;
  $26 = (($25) + 0)|0;
  $27 = HEAP32[132360>>2]|0;
  $28 = (($27) + ($26<<1)|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29&65535;
  $31 = $akey;
  $32 = $31&65535;
  $33 = $30 ^ $32;
  $a = $33;
  $34 = $i;
  $35 = (($34) + 1)|0;
  $36 = HEAP32[132360>>2]|0;
  $37 = (($36) + ($35<<1)|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38&65535;
  $40 = $bkey;
  $41 = $40&65535;
  $42 = $39 ^ $41;
  $b = $42;
  $43 = $a;
  $44 = $mask;
  $45 = $44&65535;
  $46 = $43 & $45;
  $47 = $b;
  $48 = $mask;
  $49 = $48&65535;
  $50 = $49 ^ -1;
  $51 = $47 & $50;
  $52 = $46 | $51;
  $53 = $52&65535;
  $54 = $i;
  $55 = (($54) + 0)|0;
  $56 = HEAP32[132360>>2]|0;
  $57 = (($56) + ($55<<1)|0);
  HEAP16[$57>>1] = $53;
  $58 = $b;
  $59 = $mask;
  $60 = $59&65535;
  $61 = $58 & $60;
  $62 = $a;
  $63 = $mask;
  $64 = $63&65535;
  $65 = $64 ^ -1;
  $66 = $62 & $65;
  $67 = $61 | $66;
  $68 = $67&65535;
  $69 = $i;
  $70 = (($69) + 1)|0;
  $71 = HEAP32[132360>>2]|0;
  $72 = (($71) + ($70<<1)|0);
  HEAP16[$72>>1] = $68;
  $73 = $i;
  $74 = (($73) + 2)|0;
  $i = $74;
 }
 STACKTOP = sp;return;
}
function _ph1_bithuff($nbits,$huff) {
 $nbits = $nbits|0;
 $huff = $huff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $nbits;
 $2 = $huff;
 $3 = $1;
 $4 = ($3|0)==(-1);
 if ($4) {
  HEAP32[134616>>2] = 0;
  $5 = 134608;
  $6 = $5;
  HEAP32[$6>>2] = 0;
  $7 = (($5) + 4)|0;
  $8 = $7;
  HEAP32[$8>>2] = 0;
  $0 = 0;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 $9 = $1;
 $10 = ($9|0)==(0);
 if ($10) {
  $0 = 0;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 $11 = HEAP32[134616>>2]|0;
 $12 = $1;
 $13 = ($11|0)<($12|0);
 if ($13) {
  $14 = 134608;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + 4)|0;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (_get4()|0);
  $21 = 134608;
  $22 = $21;
  HEAP32[$22>>2] = $20;
  $23 = (($21) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = $16;
  $25 = HEAP32[134616>>2]|0;
  $26 = (($25) + 32)|0;
  HEAP32[134616>>2] = $26;
 }
 $27 = 134608;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = HEAP32[134616>>2]|0;
 $34 = (64 - ($33))|0;
 $35 = (_bitshift64Shl(($29|0),($32|0),($34|0))|0);
 $36 = tempRet0;
 $37 = $1;
 $38 = (64 - ($37))|0;
 $39 = (_bitshift64Lshr(($35|0),($36|0),($38|0))|0);
 $40 = tempRet0;
 $c = $39;
 $41 = $2;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = $c;
  $44 = $2;
  $45 = (($44) + ($43<<1)|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46&65535;
  $48 = $47 >> 8;
  $49 = HEAP32[134616>>2]|0;
  $50 = (($49) - ($48))|0;
  HEAP32[134616>>2] = $50;
  $51 = $c;
  $52 = $2;
  $53 = (($52) + ($51<<1)|0);
  $54 = HEAP16[$53>>1]|0;
  $55 = $54&255;
  $56 = $55&255;
  $0 = $56;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 } else {
  $57 = $1;
  $58 = HEAP32[134616>>2]|0;
  $59 = (($58) - ($57))|0;
  HEAP32[134616>>2] = $59;
  $60 = $c;
  $0 = $60;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 return (0)|0;
}
function _phase_one_load_raw_c() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cblack = 0, $col = 0;
 var $i = 0, $j = 0, $len = 0, $offset = 0, $pixel = 0, $pred = 0, $rblack = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $len = sp + 40|0;
 $pred = sp + 32|0;
 $0 = HEAP16[132368>>1]|0;
 $1 = $0&65535;
 $2 = ($1*3)|0;
 $3 = HEAP16[133096>>1]|0;
 $4 = $3&65535;
 $5 = $4<<2;
 $6 = (($2) + ($5))|0;
 $7 = (_calloc($6,2)|0);
 $pixel = $7;
 $8 = $pixel;
 _merror($8,134664);
 $9 = $pixel;
 $10 = HEAP16[132368>>1]|0;
 $11 = $10&65535;
 $12 = (($9) + ($11<<1)|0);
 $offset = $12;
 $13 = HEAP32[880>>2]|0;
 $14 = HEAP32[134688>>2]|0;
 (_fseek(($13|0),($14|0),0)|0);
 $row = 0;
 while(1) {
  $15 = $row;
  $16 = HEAP16[133096>>1]|0;
  $17 = $16&65535;
  $18 = ($15|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = (_get4()|0);
  $20 = $row;
  $21 = $offset;
  $22 = (($21) + ($20<<2)|0);
  HEAP32[$22>>2] = $19;
  $23 = $row;
  $24 = (($23) + 1)|0;
  $row = $24;
 }
 $25 = $offset;
 $26 = HEAP16[133096>>1]|0;
 $27 = $26&65535;
 $28 = (($25) + ($27<<2)|0);
 $cblack = $28;
 $29 = HEAP32[880>>2]|0;
 $30 = HEAP32[((134528 + 20|0))>>2]|0;
 (_fseek(($29|0),($30|0),0)|0);
 $31 = HEAP32[((134528 + 20|0))>>2]|0;
 $32 = ($31|0)!=(0);
 if ($32) {
  $33 = $cblack;
  $34 = HEAP16[133096>>1]|0;
  $35 = $34&65535;
  $36 = $35<<1;
  _read_shorts($33,$36);
 }
 $37 = $cblack;
 $38 = HEAP16[133096>>1]|0;
 $39 = $38&65535;
 $40 = (($37) + ($39<<2)|0);
 $rblack = $40;
 $41 = HEAP32[880>>2]|0;
 $42 = HEAP32[((134528 + 28|0))>>2]|0;
 (_fseek(($41|0),($42|0),0)|0);
 $43 = HEAP32[((134528 + 28|0))>>2]|0;
 $44 = ($43|0)!=(0);
 if ($44) {
  $45 = $rblack;
  $46 = HEAP16[132368>>1]|0;
  $47 = $46&65535;
  $48 = $47<<1;
  _read_shorts($45,$48);
 }
 $i = 0;
 while(1) {
  $49 = $i;
  $50 = ($49|0)<(256);
  if (!($50)) {
   break;
  }
  $51 = $i;
  $52 = $i;
  $53 = Math_imul($51, $52)|0;
  $54 = (+($53|0));
  $55 = $54 / 3.9689999999999999;
  $56 = $55 + 0.5;
  $57 = (~~(($56))&65535);
  $58 = $i;
  $59 = (968 + ($58<<1)|0);
  HEAP16[$59>>1] = $57;
  $60 = $i;
  $61 = (($60) + 1)|0;
  $i = $61;
 }
 $row = 0;
 while(1) {
  $62 = $row;
  $63 = HEAP16[133096>>1]|0;
  $64 = $63&65535;
  $65 = ($62|0)<($64|0);
  if (!($65)) {
   break;
  }
  $66 = HEAP32[880>>2]|0;
  $67 = HEAP32[133816>>2]|0;
  $68 = $row;
  $69 = $offset;
  $70 = (($69) + ($68<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($67) + ($71))|0;
  (_fseek(($66|0),($72|0),0)|0);
  (_ph1_bithuff(-1,0)|0);
  $73 = (($pred) + 4|0);
  HEAP32[$73>>2] = 0;
  HEAP32[$pred>>2] = 0;
  $col = 0;
  while(1) {
   $74 = $col;
   $75 = HEAP16[132368>>1]|0;
   $76 = $75&65535;
   $77 = ($74|0)<($76|0);
   if (!($77)) {
    break;
   }
   $78 = $col;
   $79 = HEAP16[132368>>1]|0;
   $80 = $79&65535;
   $81 = $80 & -8;
   $82 = ($78|0)>=($81|0);
   if ($82) {
    $83 = (($len) + 4|0);
    HEAP32[$83>>2] = 14;
    HEAP32[$len>>2] = 14;
   } else {
    $84 = $col;
    $85 = $84 & 7;
    $86 = ($85|0)==(0);
    if ($86) {
     $i = 0;
     while(1) {
      $87 = $i;
      $88 = ($87|0)<(2);
      if (!($88)) {
       break;
      }
      $j = 0;
      while(1) {
       $89 = $j;
       $90 = ($89|0)<(5);
       if ($90) {
        $91 = (_ph1_bithuff(1,0)|0);
        $92 = ($91|0)!=(0);
        $93 = $92 ^ 1;
        $217 = $93;
       } else {
        $217 = 0;
       }
       if (!($217)) {
        break;
       }
       $94 = $j;
       $95 = (($94) + 1)|0;
       $j = $95;
      }
      $96 = $j;
      $97 = (($96) + -1)|0;
      $j = $97;
      $98 = ($96|0)!=(0);
      if ($98) {
       $99 = $j;
       $100 = $99<<1;
       $101 = (_ph1_bithuff(1,0)|0);
       $102 = (($100) + ($101))|0;
       $103 = (134624 + ($102<<2)|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = $i;
       $106 = (($len) + ($105<<2)|0);
       HEAP32[$106>>2] = $104;
      }
      $107 = $i;
      $108 = (($107) + 1)|0;
      $i = $108;
     }
    }
   }
   $109 = $col;
   $110 = $109 & 1;
   $111 = (($len) + ($110<<2)|0);
   $112 = HEAP32[$111>>2]|0;
   $i = $112;
   $113 = ($112|0)==(14);
   if ($113) {
    $114 = (_ph1_bithuff(16,0)|0);
    $115 = $col;
    $116 = $115 & 1;
    $117 = (($pred) + ($116<<2)|0);
    HEAP32[$117>>2] = $114;
    $118 = $114&65535;
    $119 = $col;
    $120 = $pixel;
    $121 = (($120) + ($119<<1)|0);
    HEAP16[$121>>1] = $118;
   } else {
    $122 = $i;
    $123 = (_ph1_bithuff($122,0)|0);
    $124 = (($123) + 1)|0;
    $125 = $i;
    $126 = (($125) - 1)|0;
    $127 = 1 << $126;
    $128 = (($124) - ($127))|0;
    $129 = $col;
    $130 = $129 & 1;
    $131 = (($pred) + ($130<<2)|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = (($132) + ($128))|0;
    HEAP32[$131>>2] = $133;
    $134 = $133&65535;
    $135 = $col;
    $136 = $pixel;
    $137 = (($136) + ($135<<1)|0);
    HEAP16[$137>>1] = $134;
   }
   $138 = $col;
   $139 = $138 & 1;
   $140 = (($pred) + ($139<<2)|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = $141 >> 16;
   $143 = ($142|0)!=(0);
   if ($143) {
    _derror();
   }
   $144 = HEAP32[134528>>2]|0;
   $145 = ($144|0)==(5);
   if ($145) {
    $146 = $col;
    $147 = $pixel;
    $148 = (($147) + ($146<<1)|0);
    $149 = HEAP16[$148>>1]|0;
    $150 = $149&65535;
    $151 = ($150|0)<(256);
    if ($151) {
     $152 = $col;
     $153 = $pixel;
     $154 = (($153) + ($152<<1)|0);
     $155 = HEAP16[$154>>1]|0;
     $156 = $155&65535;
     $157 = (968 + ($156<<1)|0);
     $158 = HEAP16[$157>>1]|0;
     $159 = $col;
     $160 = $pixel;
     $161 = (($160) + ($159<<1)|0);
     HEAP16[$161>>1] = $158;
    }
   }
   $162 = $col;
   $163 = (($162) + 1)|0;
   $col = $163;
  }
  $col = 0;
  while(1) {
   $164 = $col;
   $165 = HEAP16[132368>>1]|0;
   $166 = $165&65535;
   $167 = ($164|0)<($166|0);
   if (!($167)) {
    break;
   }
   $168 = $col;
   $169 = $pixel;
   $170 = (($169) + ($168<<1)|0);
   $171 = HEAP16[$170>>1]|0;
   $172 = $171&65535;
   $173 = $172 << 2;
   $174 = HEAP32[((134528 + 12|0))>>2]|0;
   $175 = (($173) - ($174))|0;
   $176 = $col;
   $177 = HEAP32[((134528 + 16|0))>>2]|0;
   $178 = ($176|0)>=($177|0);
   $179 = $178&1;
   $180 = $row;
   $181 = $cblack;
   $182 = (($181) + ($180<<2)|0);
   $183 = (($182) + ($179<<1)|0);
   $184 = HEAP16[$183>>1]|0;
   $185 = $184 << 16 >> 16;
   $186 = (($175) + ($185))|0;
   $187 = $row;
   $188 = HEAP32[((134528 + 24|0))>>2]|0;
   $189 = ($187|0)>=($188|0);
   $190 = $189&1;
   $191 = $col;
   $192 = $rblack;
   $193 = (($192) + ($191<<2)|0);
   $194 = (($193) + ($190<<1)|0);
   $195 = HEAP16[$194>>1]|0;
   $196 = $195 << 16 >> 16;
   $197 = (($186) + ($196))|0;
   $i = $197;
   $198 = $i;
   $199 = ($198|0)>(0);
   if ($199) {
    $200 = $i;
    $201 = $200&65535;
    $202 = $row;
    $203 = HEAP16[132368>>1]|0;
    $204 = $203&65535;
    $205 = Math_imul($202, $204)|0;
    $206 = $col;
    $207 = (($205) + ($206))|0;
    $208 = HEAP32[132360>>2]|0;
    $209 = (($208) + ($207<<1)|0);
    HEAP16[$209>>1] = $201;
   }
   $210 = $col;
   $211 = (($210) + 1)|0;
   $col = $211;
  }
  $212 = $row;
  $213 = (($212) + 1)|0;
  $row = $213;
 }
 $214 = $pixel;
 _free($214);
 $215 = HEAP32[((134528 + 12|0))>>2]|0;
 $216 = (65532 - ($215))|0;
 HEAP32[132400>>2] = $216;
 STACKTOP = sp;return;
}
function _hasselblad_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $back = 0, $c = 0, $col = 0, $cond = 0, $diff = 0, $f = 0, $ip = 0, $jh = 0, $len = 0, $pred = 0, $row = 0, $s = 0, $sh = 0, $shot = 0;
 var $ucol = 0, $upix = 0, $urow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $jh = sp + 128|0;
 $back = sp + 96|0;
 $len = sp + 88|0;
 $diff = sp + 40|0;
 $0 = (_ljpeg_start($jh,0)|0);
 $1 = ($0|0)!=(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 HEAP16[944>>1] = 18761;
 (_ph1_bithuff(-1,0)|0);
 $2 = HEAP16[132368>>1]|0;
 $3 = $2&65535;
 $4 = (_calloc($3,12)|0);
 $5 = (($back) + 16|0);
 HEAP32[$5>>2] = $4;
 $6 = (($back) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 _merror($7,134696);
 $c = 0;
 while(1) {
  $8 = $c;
  $9 = ($8|0)<(3);
  if (!($9)) {
   break;
  }
  $10 = (($back) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $c;
  $13 = HEAP16[132368>>1]|0;
  $14 = $13&65535;
  $15 = Math_imul($12, $14)|0;
  $16 = (($11) + ($15<<2)|0);
  $17 = $c;
  $18 = (($back) + ($17<<2)|0);
  HEAP32[$18>>2] = $16;
  $19 = $c;
  $20 = (($19) + 1)|0;
  $c = $20;
 }
 $21 = HEAP32[133240>>2]|0;
 $22 = ($21>>>0)>(1);
 $23 = $22&1;
 $sh = $23;
 $24 = HEAP16[((134720 + 12|0))>>1]|0;
 $25 = $24&65535;
 $26 = $25 >> $23;
 $27 = $26&65535;
 HEAP16[((134720 + 12|0))>>1] = $27;
 $28 = HEAP32[8>>2]|0;
 $29 = HEAP32[133240>>2]|0;
 $30 = ($28>>>0)<($29>>>0);
 if ($30) {
  $31 = HEAP32[8>>2]|0;
  $34 = $31;
 } else {
  $32 = HEAP32[133240>>2]|0;
  $34 = $32;
 }
 $33 = (1)>($34>>>0);
 if ($33) {
  $41 = 1;
 } else {
  $35 = HEAP32[8>>2]|0;
  $36 = HEAP32[133240>>2]|0;
  $37 = ($35>>>0)<($36>>>0);
  if ($37) {
   $38 = HEAP32[8>>2]|0;
   $265 = $38;
  } else {
   $39 = HEAP32[133240>>2]|0;
   $265 = $39;
  }
  $41 = $265;
 }
 $40 = (($41) - 1)|0;
 $shot = $40;
 $row = 0;
 while(1) {
  $42 = $row;
  $43 = HEAP16[133096>>1]|0;
  $44 = $43&65535;
  $45 = ($42|0)<($44|0);
  if (!($45)) {
   break;
  }
  $c = 0;
  while(1) {
   $46 = $c;
   $47 = ($46|0)<(4);
   if (!($47)) {
    break;
   }
   $48 = $c;
   $49 = (($back) + ($48<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $c;
   $52 = (($51) + 3)|0;
   $53 = $52 & 3;
   $54 = (($back) + ($53<<2)|0);
   HEAP32[$54>>2] = $50;
   $55 = $c;
   $56 = (($55) + 1)|0;
   $c = $56;
  }
  $col = 0;
  while(1) {
   $57 = $col;
   $58 = HEAP16[132368>>1]|0;
   $59 = $58&65535;
   $60 = ($57|0)<($59|0);
   if (!($60)) {
    break;
   }
   $s = 0;
   while(1) {
    $61 = $s;
    $62 = HEAP32[133240>>2]|0;
    $63 = $62<<1;
    $64 = ($61>>>0)<($63>>>0);
    if (!($64)) {
     break;
    }
    $c = 0;
    while(1) {
     $65 = $c;
     $66 = ($65|0)<(2);
     if (!($66)) {
      break;
     }
     $67 = (($jh) + 312|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = HEAP16[$68>>1]|0;
     $70 = $69&65535;
     $71 = (($jh) + 312|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = (($72) + 2|0);
     $74 = (_ph1_bithuff($70,$73)|0);
     $75 = $c;
     $76 = (($len) + ($75<<2)|0);
     HEAP32[$76>>2] = $74;
     $77 = $c;
     $78 = (($77) + 1)|0;
     $c = $78;
    }
    $c = 0;
    while(1) {
     $79 = $c;
     $80 = ($79|0)<(2);
     if (!($80)) {
      break;
     }
     $81 = $c;
     $82 = (($len) + ($81<<2)|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = (_ph1_bithuff($83,0)|0);
     $85 = $s;
     $86 = $c;
     $87 = (($85) + ($86))|0;
     $88 = (($diff) + ($87<<2)|0);
     HEAP32[$88>>2] = $84;
     $89 = $s;
     $90 = $c;
     $91 = (($89) + ($90))|0;
     $92 = (($diff) + ($91<<2)|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = $c;
     $95 = (($len) + ($94<<2)|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = (($96) - 1)|0;
     $98 = 1 << $97;
     $99 = $93 & $98;
     $100 = ($99|0)==(0);
     if ($100) {
      $101 = $c;
      $102 = (($len) + ($101<<2)|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = 1 << $103;
      $105 = (($104) - 1)|0;
      $106 = $s;
      $107 = $c;
      $108 = (($106) + ($107))|0;
      $109 = (($diff) + ($108<<2)|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = (($110) - ($105))|0;
      HEAP32[$109>>2] = $111;
     }
     $112 = $s;
     $113 = $c;
     $114 = (($112) + ($113))|0;
     $115 = (($diff) + ($114<<2)|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(65535);
     if ($117) {
      $118 = $s;
      $119 = $c;
      $120 = (($118) + ($119))|0;
      $121 = (($diff) + ($120<<2)|0);
      HEAP32[$121>>2] = -32768;
     }
     $122 = $c;
     $123 = (($122) + 1)|0;
     $c = $123;
    }
    $124 = $s;
    $125 = (($124) + 2)|0;
    $s = $125;
   }
   $126 = $col;
   $s = $126;
   while(1) {
    $127 = $s;
    $128 = $col;
    $129 = (($128) + 2)|0;
    $130 = ($127|0)<($129|0);
    if (!($130)) {
     break;
    }
    $131 = HEAP32[133128>>2]|0;
    $132 = (32768 + ($131))|0;
    $pred = $132;
    $133 = $col;
    $134 = ($133|0)!=(0);
    if ($134) {
     $135 = $s;
     $136 = (($135) - 2)|0;
     $137 = (($back) + 8|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (($138) + ($136<<2)|0);
     $140 = HEAP32[$139>>2]|0;
     $pred = $140;
    }
    $141 = $col;
    $142 = ($141|0)!=(0);
    if ($142) {
     $143 = $row;
     $144 = ($143|0)>(1);
     if ($144) {
      $145 = (($jh) + 24|0);
      $146 = HEAP32[$145>>2]|0;
      $cond = ($146|0)==(11);
      if ($cond) {
       $147 = $s;
       $148 = HEAP32[$back>>2]|0;
       $149 = (($148) + ($147<<2)|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = (($150|0) / 2)&-1;
       $152 = $s;
       $153 = (($152) - 2)|0;
       $154 = HEAP32[$back>>2]|0;
       $155 = (($154) + ($153<<2)|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = (($156|0) / 2)&-1;
       $158 = (($151) - ($157))|0;
       $159 = $pred;
       $160 = (($159) + ($158))|0;
       $pred = $160;
      }
     }
    }
    $161 = $row;
    $162 = $161 & 1;
    $163 = ($162*3)|0;
    $164 = $col;
    $165 = $s;
    $166 = (($164) + ($165))|0;
    $167 = $166 & 1;
    $168 = $163 ^ $167;
    $f = $168;
    $c = 0;
    while(1) {
     $169 = $c;
     $170 = HEAP32[133240>>2]|0;
     $171 = ($169>>>0)<($170>>>0);
     if (!($171)) {
      break;
     }
     $172 = $s;
     $173 = $172 & 1;
     $174 = HEAP32[133240>>2]|0;
     $175 = Math_imul($173, $174)|0;
     $176 = $c;
     $177 = (($175) + ($176))|0;
     $178 = (($diff) + ($177<<2)|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = $pred;
     $181 = (($180) + ($179))|0;
     $pred = $181;
     $182 = $pred;
     $183 = $sh;
     $184 = $182 >> $183;
     $185 = $184 & 65535;
     $upix = $185;
     $186 = HEAP32[132360>>2]|0;
     $187 = ($186|0)!=(0|0);
     if ($187) {
      $188 = $c;
      $189 = $shot;
      $190 = ($188|0)==($189|0);
      if ($190) {
       $191 = $upix;
       $192 = $191&65535;
       $193 = $row;
       $194 = HEAP16[132368>>1]|0;
       $195 = $194&65535;
       $196 = Math_imul($193, $195)|0;
       $197 = $s;
       $198 = (($196) + ($197))|0;
       $199 = HEAP32[132360>>2]|0;
       $200 = (($199) + ($198<<1)|0);
       HEAP16[$200>>1] = $192;
      }
     }
     $201 = HEAP32[132144>>2]|0;
     $202 = ($201|0)!=(0|0);
     if ($202) {
      $203 = $row;
      $204 = HEAP16[616>>1]|0;
      $205 = $204&65535;
      $206 = (($203) - ($205))|0;
      $207 = $c;
      $208 = $207 & 1;
      $209 = (($206) + ($208))|0;
      $urow = $209;
      $210 = $col;
      $211 = HEAP16[608>>1]|0;
      $212 = $211&65535;
      $213 = (($210) - ($212))|0;
      $214 = $c;
      $215 = $214 >> 1;
      $216 = $215 & 1;
      $217 = (($213) - ($216))|0;
      $ucol = $217;
      $218 = $f;
      $219 = $urow;
      $220 = HEAP16[132120>>1]|0;
      $221 = $220&65535;
      $222 = Math_imul($219, $221)|0;
      $223 = $ucol;
      $224 = (($222) + ($223))|0;
      $225 = HEAP32[132144>>2]|0;
      $226 = (($225) + ($224<<3)|0);
      $227 = (($226) + ($218<<1)|0);
      $ip = $227;
      $228 = $urow;
      $229 = HEAP16[132112>>1]|0;
      $230 = $229&65535;
      $231 = ($228>>>0)<($230>>>0);
      if ($231) {
       $232 = $ucol;
       $233 = HEAP16[132120>>1]|0;
       $234 = $233&65535;
       $235 = ($232>>>0)<($234>>>0);
       if ($235) {
        $236 = $c;
        $237 = ($236|0)<(4);
        if ($237) {
         $238 = $upix;
         $246 = $238;
        } else {
         $239 = $ip;
         $240 = HEAP16[$239>>1]|0;
         $241 = $240&65535;
         $242 = $upix;
         $243 = (($241) + ($242))|0;
         $244 = $243 >>> 1;
         $246 = $244;
        }
        $245 = $246&65535;
        $247 = $ip;
        HEAP16[$247>>1] = $245;
       }
      }
     }
     $248 = $c;
     $249 = (($248) + 1)|0;
     $c = $249;
    }
    $250 = $pred;
    $251 = $s;
    $252 = (($back) + 8|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = (($253) + ($251<<2)|0);
    HEAP32[$254>>2] = $250;
    $255 = $s;
    $256 = (($255) + 1)|0;
    $s = $256;
   }
   $257 = $col;
   $258 = (($257) + 2)|0;
   $col = $258;
  }
  $259 = $row;
  $260 = (($259) + 1)|0;
  $row = $260;
 }
 $261 = (($back) + 16|0);
 $262 = HEAP32[$261>>2]|0;
 _free($262);
 _ljpeg_end($jh);
 $263 = HEAP32[132144>>2]|0;
 $264 = ($263|0)!=(0|0);
 if (!($264)) {
  STACKTOP = sp;return;
 }
 HEAP32[142928>>2] = 1;
 STACKTOP = sp;return;
}
function _leaf_hdr_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $c = 0, $col = 0, $pixel = 0, $r = 0, $row = 0, $tile = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pixel = 0;
 $tile = 0;
 $0 = HEAP32[600>>2]|0;
 $1 = ($0|0)!=(0);
 if (!($1)) {
  $2 = HEAP16[132368>>1]|0;
  $3 = $2&65535;
  $4 = (_calloc($3,2)|0);
  $pixel = $4;
  $5 = $pixel;
  _merror($5,142936);
 }
 $c = 0;
 while(1) {
  $6 = $c;
  $7 = HEAP32[133240>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  $r = 0;
  while(1) {
   $9 = $r;
   $10 = HEAP16[133096>>1]|0;
   $11 = $10&65535;
   $12 = ($9>>>0)<($11>>>0);
   if (!($12)) {
    break;
   }
   $13 = $r;
   $14 = HEAP32[133752>>2]|0;
   $15 = (($13>>>0) % ($14>>>0))&-1;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = HEAP32[880>>2]|0;
    $18 = HEAP32[133816>>2]|0;
    $19 = $tile;
    $20 = (($19) + 1)|0;
    $tile = $20;
    $21 = $19<<2;
    $22 = (($18) + ($21))|0;
    (_fseek(($17|0),($22|0),0)|0);
    $23 = HEAP32[880>>2]|0;
    $24 = (_get4()|0);
    (_fseek(($23|0),($24|0),0)|0);
   }
   $25 = HEAP32[600>>2]|0;
   $26 = ($25|0)!=(0);
   if ($26) {
    $27 = $c;
    $28 = HEAP32[8>>2]|0;
    $29 = ($27|0)!=($28|0);
    if ($29) {
    } else {
     label = 12;
    }
   } else {
    label = 12;
   }
   if ((label|0) == 12) {
    label = 0;
    $30 = HEAP32[600>>2]|0;
    $31 = ($30|0)!=(0);
    if ($31) {
     $32 = HEAP32[132360>>2]|0;
     $33 = $r;
     $34 = HEAP16[132368>>1]|0;
     $35 = $34&65535;
     $36 = Math_imul($33, $35)|0;
     $37 = (($32) + ($36<<1)|0);
     $pixel = $37;
    }
    $38 = $pixel;
    $39 = HEAP16[132368>>1]|0;
    $40 = $39&65535;
    _read_shorts($38,$40);
    $41 = HEAP32[600>>2]|0;
    $42 = ($41|0)!=(0);
    if (!($42)) {
     $43 = $r;
     $44 = HEAP16[616>>1]|0;
     $45 = $44&65535;
     $46 = (($43) - ($45))|0;
     $row = $46;
     $47 = HEAP16[132112>>1]|0;
     $48 = $47&65535;
     $49 = ($46>>>0)<($48>>>0);
     if ($49) {
      $col = 0;
      while(1) {
       $50 = $col;
       $51 = HEAP16[132120>>1]|0;
       $52 = $51&65535;
       $53 = ($50>>>0)<($52>>>0);
       if (!($53)) {
        break;
       }
       $54 = $col;
       $55 = HEAP16[608>>1]|0;
       $56 = $55&65535;
       $57 = (($54) + ($56))|0;
       $58 = $pixel;
       $59 = (($58) + ($57<<1)|0);
       $60 = HEAP16[$59>>1]|0;
       $61 = $c;
       $62 = $row;
       $63 = HEAP16[132120>>1]|0;
       $64 = $63&65535;
       $65 = Math_imul($62, $64)|0;
       $66 = $col;
       $67 = (($65) + ($66))|0;
       $68 = HEAP32[132144>>2]|0;
       $69 = (($68) + ($67<<3)|0);
       $70 = (($69) + ($61<<1)|0);
       HEAP16[$70>>1] = $60;
       $71 = $col;
       $72 = (($71) + 1)|0;
       $col = $72;
      }
     }
    }
   }
   $73 = $r;
   $74 = (($73) + 1)|0;
   $r = $74;
  }
  $75 = $c;
  $76 = (($75) + 1)|0;
  $c = $76;
 }
 $77 = HEAP32[600>>2]|0;
 $78 = ($77|0)!=(0);
 if ($78) {
  STACKTOP = sp;return;
 }
 HEAP32[132400>>2] = 65535;
 HEAP32[132296>>2] = 1;
 $79 = $pixel;
 _free($79);
 STACKTOP = sp;return;
}
function _unpacked_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bits = 0, $col = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bits = 0;
 while(1) {
  $0 = $bits;
  $1 = (($0) + 1)|0;
  $bits = $1;
  $2 = 1 << $1;
  $3 = HEAP32[132400>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if (!($4)) {
   break;
  }
 }
 $5 = HEAP32[132360>>2]|0;
 $6 = HEAP16[132368>>1]|0;
 $7 = $6&65535;
 $8 = HEAP16[133096>>1]|0;
 $9 = $8&65535;
 $10 = Math_imul($7, $9)|0;
 _read_shorts($5,$10);
 $row = 0;
 while(1) {
  $11 = $row;
  $12 = HEAP16[133096>>1]|0;
  $13 = $12&65535;
  $14 = ($11|0)<($13|0);
  if (!($14)) {
   break;
  }
  $col = 0;
  while(1) {
   $15 = $col;
   $16 = HEAP16[132368>>1]|0;
   $17 = $16&65535;
   $18 = ($15|0)<($17|0);
   if (!($18)) {
    break;
   }
   $19 = HEAP32[133128>>2]|0;
   $20 = $row;
   $21 = HEAP16[132368>>1]|0;
   $22 = $21&65535;
   $23 = Math_imul($20, $22)|0;
   $24 = $col;
   $25 = (($23) + ($24))|0;
   $26 = HEAP32[132360>>2]|0;
   $27 = (($26) + ($25<<1)|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = $28&65535;
   $30 = $29 >> $19;
   $31 = $30&65535;
   HEAP16[$27>>1] = $31;
   $32 = $31&65535;
   $33 = $bits;
   $34 = $32 >> $33;
   $35 = ($34|0)!=(0);
   if ($35) {
    $36 = $row;
    $37 = HEAP16[616>>1]|0;
    $38 = $37&65535;
    $39 = (($36) - ($38))|0;
    $40 = HEAP16[132112>>1]|0;
    $41 = $40&65535;
    $42 = ($39>>>0)<($41>>>0);
    if ($42) {
     $43 = $col;
     $44 = HEAP16[608>>1]|0;
     $45 = $44&65535;
     $46 = (($43) - ($45))|0;
     $47 = HEAP16[132120>>1]|0;
     $48 = $47&65535;
     $49 = ($46>>>0)<($48>>>0);
     if ($49) {
      _derror();
     }
    }
   }
   $50 = $col;
   $51 = (($50) + 1)|0;
   $col = $51;
  }
  $52 = $row;
  $53 = (($52) + 1)|0;
  $row = $53;
 }
 STACKTOP = sp;return;
}
function _sinar_4shot_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $c = 0, $col = 0, $pixel = 0, $r = 0, $row = 0, $shot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[132360>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[8>>2]|0;
  $3 = ($2>>>0)<(4);
  if ($3) {
   $4 = HEAP32[8>>2]|0;
   $6 = $4;
  } else {
   $6 = 4;
  }
  $5 = (1)>($6>>>0);
  if ($5) {
   $11 = 1;
  } else {
   $7 = HEAP32[8>>2]|0;
   $8 = ($7>>>0)<(4);
   if ($8) {
    $9 = HEAP32[8>>2]|0;
    $91 = $9;
   } else {
    $91 = 4;
   }
   $11 = $91;
  }
  $10 = (($11) - 1)|0;
  $shot = $10;
  $12 = HEAP32[880>>2]|0;
  $13 = HEAP32[133816>>2]|0;
  $14 = $shot;
  $15 = $14<<2;
  $16 = (($13) + ($15))|0;
  (_fseek(($12|0),($16|0),0)|0);
  $17 = HEAP32[880>>2]|0;
  $18 = (_get4()|0);
  (_fseek(($17|0),($18|0),0)|0);
  _unpacked_load_raw();
  STACKTOP = sp;return;
 }
 $19 = HEAP16[132368>>1]|0;
 $20 = $19&65535;
 $21 = (_calloc($20,2)|0);
 $pixel = $21;
 $22 = $pixel;
 _merror($22,142960);
 $shot = 0;
 while(1) {
  $23 = $shot;
  $24 = ($23>>>0)<(4);
  if (!($24)) {
   break;
  }
  $25 = HEAP32[880>>2]|0;
  $26 = HEAP32[133816>>2]|0;
  $27 = $shot;
  $28 = $27<<2;
  $29 = (($26) + ($28))|0;
  (_fseek(($25|0),($29|0),0)|0);
  $30 = HEAP32[880>>2]|0;
  $31 = (_get4()|0);
  (_fseek(($30|0),($31|0),0)|0);
  $row = 0;
  while(1) {
   $32 = $row;
   $33 = HEAP16[133096>>1]|0;
   $34 = $33&65535;
   $35 = ($32>>>0)<($34>>>0);
   if (!($35)) {
    break;
   }
   $36 = $pixel;
   $37 = HEAP16[132368>>1]|0;
   $38 = $37&65535;
   _read_shorts($36,$38);
   $39 = $row;
   $40 = HEAP16[616>>1]|0;
   $41 = $40&65535;
   $42 = (($39) - ($41))|0;
   $43 = $shot;
   $44 = $43 >>> 1;
   $45 = $44 & 1;
   $46 = (($42) - ($45))|0;
   $r = $46;
   $47 = HEAP16[132112>>1]|0;
   $48 = $47&65535;
   $49 = ($46>>>0)>=($48>>>0);
   if ($49) {
   } else {
    $col = 0;
    while(1) {
     $50 = $col;
     $51 = HEAP16[132368>>1]|0;
     $52 = $51&65535;
     $53 = ($50>>>0)<($52>>>0);
     if (!($53)) {
      break;
     }
     $54 = $col;
     $55 = HEAP16[608>>1]|0;
     $56 = $55&65535;
     $57 = (($54) - ($56))|0;
     $58 = $shot;
     $59 = $58 & 1;
     $60 = (($57) - ($59))|0;
     $c = $60;
     $61 = HEAP16[132120>>1]|0;
     $62 = $61&65535;
     $63 = ($60>>>0)>=($62>>>0);
     if ($63) {
     } else {
      $64 = $col;
      $65 = $pixel;
      $66 = (($65) + ($64<<1)|0);
      $67 = HEAP16[$66>>1]|0;
      $68 = $row;
      $69 = $68 & 1;
      $70 = ($69*3)|0;
      $71 = $col;
      $72 = $71 ^ -1;
      $73 = $72 & 1;
      $74 = $70 ^ $73;
      $75 = $r;
      $76 = HEAP16[132120>>1]|0;
      $77 = $76&65535;
      $78 = Math_imul($75, $77)|0;
      $79 = $c;
      $80 = (($78) + ($79))|0;
      $81 = HEAP32[132144>>2]|0;
      $82 = (($81) + ($80<<3)|0);
      $83 = (($82) + ($74<<1)|0);
      HEAP16[$83>>1] = $67;
     }
     $84 = $col;
     $85 = (($84) + 1)|0;
     $col = $85;
    }
   }
   $86 = $row;
   $87 = (($86) + 1)|0;
   $row = $87;
  }
  $88 = $shot;
  $89 = (($88) + 1)|0;
  $shot = $89;
 }
 $90 = $pixel;
 _free($90);
 HEAP32[142928>>2] = 1;
 STACKTOP = sp;return;
}
function _imacon_full_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $col = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[132144>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $row = 0;
 while(1) {
  $2 = $row;
  $3 = HEAP16[132112>>1]|0;
  $4 = $3&65535;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $col = 0;
  while(1) {
   $6 = $col;
   $7 = HEAP16[132120>>1]|0;
   $8 = $7&65535;
   $9 = ($6|0)<($8|0);
   if (!($9)) {
    break;
   }
   $10 = $row;
   $11 = HEAP16[132120>>1]|0;
   $12 = $11&65535;
   $13 = Math_imul($10, $12)|0;
   $14 = $col;
   $15 = (($13) + ($14))|0;
   $16 = HEAP32[132144>>2]|0;
   $17 = (($16) + ($15<<3)|0);
   _read_shorts($17,3);
   $18 = $col;
   $19 = (($18) + 1)|0;
   $col = $19;
  }
  $20 = $row;
  $21 = (($20) + 1)|0;
  $row = $21;
 }
 STACKTOP = sp;return;
}
function _packed_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bitbuf = 0, $bite = 0, $bwide = 0, $col = 0;
 var $half = 0, $i = 0, $irow = 0, $rbits = 0, $row = 0, $val = 0, $vbits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bitbuf = sp;
 $vbits = 0;
 $0 = $bitbuf;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = HEAP16[132368>>1]|0;
 $5 = $4&65535;
 $6 = HEAP32[133800>>2]|0;
 $7 = Math_imul($5, $6)|0;
 $8 = (($7>>>0) / 8)&-1;
 $bwide = $8;
 $9 = $bwide;
 $10 = HEAP32[133128>>2]|0;
 $11 = $10 >>> 7;
 $12 = $9 & $11;
 $13 = $bwide;
 $14 = (($13) + ($12))|0;
 $bwide = $14;
 $15 = $bwide;
 $16 = $15<<3;
 $17 = HEAP16[132368>>1]|0;
 $18 = $17&65535;
 $19 = HEAP32[133800>>2]|0;
 $20 = Math_imul($18, $19)|0;
 $21 = (($16) - ($20))|0;
 $rbits = $21;
 $22 = HEAP32[133128>>2]|0;
 $23 = $22 & 1;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $bwide;
  $26 = $25<<4;
  $27 = (($26|0) / 15)&-1;
  $bwide = $27;
 }
 $28 = HEAP32[133128>>2]|0;
 $29 = $28 & 24;
 $30 = (8 + ($29))|0;
 $bite = $30;
 $31 = HEAP16[133096>>1]|0;
 $32 = $31&65535;
 $33 = (($32) + 1)|0;
 $34 = $33 >> 1;
 $half = $34;
 $irow = 0;
 while(1) {
  $35 = $irow;
  $36 = HEAP16[133096>>1]|0;
  $37 = $36&65535;
  $38 = ($35|0)<($37|0);
  if (!($38)) {
   break;
  }
  $39 = $irow;
  $row = $39;
  $40 = HEAP32[133128>>2]|0;
  $41 = $40 & 2;
  $42 = ($41|0)!=(0);
  if ($42) {
   $43 = $irow;
   $44 = $half;
   $45 = (($43|0) % ($44|0))&-1;
   $46 = $45<<1;
   $47 = $irow;
   $48 = $half;
   $49 = (($47|0) / ($48|0))&-1;
   $50 = (($46) + ($49))|0;
   $row = $50;
   $51 = ($50|0)==(1);
   if ($51) {
    $52 = HEAP32[133128>>2]|0;
    $53 = $52 & 4;
    $54 = ($53|0)!=(0);
    if ($54) {
     $vbits = 0;
     $55 = HEAP32[133088>>2]|0;
     $56 = ($55|0)!=(0);
     if ($56) {
      $57 = HEAP32[880>>2]|0;
      $58 = HEAP32[133816>>2]|0;
      $59 = $half;
      $60 = (0 - ($59))|0;
      $61 = $bwide;
      $62 = Math_imul($60, $61)|0;
      $63 = $62 & -2048;
      $64 = (($58) - ($63))|0;
      (_fseek(($57|0),($64|0),0)|0);
     } else {
      $65 = HEAP32[880>>2]|0;
      (_fseek(($65|0),0,2)|0);
      $66 = HEAP32[880>>2]|0;
      $67 = HEAP32[880>>2]|0;
      $68 = (_ftell(($67|0))|0);
      $69 = $68 >> 3;
      $70 = $69 << 2;
      (_fseek(($66|0),($70|0),0)|0);
     }
    }
   }
  }
  $col = 0;
  while(1) {
   $71 = $col;
   $72 = HEAP16[132368>>1]|0;
   $73 = $72&65535;
   $74 = ($71|0)<($73|0);
   if (!($74)) {
    break;
   }
   $75 = HEAP32[133800>>2]|0;
   $76 = $vbits;
   $77 = (($76) - ($75))|0;
   $vbits = $77;
   while(1) {
    $78 = $vbits;
    $79 = ($78|0)<(0);
    if (!($79)) {
     break;
    }
    $80 = $bite;
    $81 = $bitbuf;
    $82 = $81;
    $83 = HEAP32[$82>>2]|0;
    $84 = (($81) + 4)|0;
    $85 = $84;
    $86 = HEAP32[$85>>2]|0;
    $87 = (_bitshift64Shl(($83|0),($86|0),($80|0))|0);
    $88 = tempRet0;
    $89 = $bitbuf;
    $90 = $89;
    HEAP32[$90>>2] = $87;
    $91 = (($89) + 4)|0;
    $92 = $91;
    HEAP32[$92>>2] = $88;
    $i = 0;
    while(1) {
     $93 = $i;
     $94 = $bite;
     $95 = ($93|0)<($94|0);
     if (!($95)) {
      break;
     }
     $96 = HEAP32[880>>2]|0;
     $97 = (_getc_unlocked(($96|0))|0);
     $98 = $i;
     $99 = $97 << $98;
     $100 = $bitbuf;
     $101 = $100;
     $102 = HEAP32[$101>>2]|0;
     $103 = (($100) + 4)|0;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $106 = $102 | $99;
     $107 = $bitbuf;
     $108 = $107;
     HEAP32[$108>>2] = $106;
     $109 = (($107) + 4)|0;
     $110 = $109;
     HEAP32[$110>>2] = $105;
     $111 = $i;
     $112 = (($111) + 8)|0;
     $i = $112;
    }
    $113 = $bite;
    $114 = $vbits;
    $115 = (($114) + ($113))|0;
    $vbits = $115;
   }
   $116 = $bitbuf;
   $117 = $116;
   $118 = HEAP32[$117>>2]|0;
   $119 = (($116) + 4)|0;
   $120 = $119;
   $121 = HEAP32[$120>>2]|0;
   $122 = HEAP32[133800>>2]|0;
   $123 = (64 - ($122))|0;
   $124 = $vbits;
   $125 = (($123) - ($124))|0;
   $126 = (_bitshift64Shl(($118|0),($121|0),($125|0))|0);
   $127 = tempRet0;
   $128 = HEAP32[133800>>2]|0;
   $129 = (64 - ($128))|0;
   $130 = (_bitshift64Lshr(($126|0),($127|0),($129|0))|0);
   $131 = tempRet0;
   $val = $130;
   $132 = $val;
   $133 = $132&65535;
   $134 = $row;
   $135 = HEAP16[132368>>1]|0;
   $136 = $135&65535;
   $137 = Math_imul($134, $136)|0;
   $138 = $col;
   $139 = HEAP32[133128>>2]|0;
   $140 = $139 >>> 6;
   $141 = $140 & 1;
   $142 = $138 ^ $141;
   $143 = (($137) + ($142))|0;
   $144 = HEAP32[132360>>2]|0;
   $145 = (($144) + ($143<<1)|0);
   HEAP16[$145>>1] = $133;
   $146 = HEAP32[133128>>2]|0;
   $147 = $146 & 1;
   $148 = ($147|0)!=(0);
   if ($148) {
    $149 = $col;
    $150 = (($149|0) % 10)&-1;
    $151 = ($150|0)==(9);
    if ($151) {
     $152 = HEAP32[880>>2]|0;
     $153 = (_getc_unlocked(($152|0))|0);
     $154 = ($153|0)!=(0);
     if ($154) {
      $155 = $row;
      $156 = HEAP16[132112>>1]|0;
      $157 = $156&65535;
      $158 = HEAP16[616>>1]|0;
      $159 = $158&65535;
      $160 = (($157) + ($159))|0;
      $161 = ($155|0)<($160|0);
      if ($161) {
       $162 = $col;
       $163 = HEAP16[132120>>1]|0;
       $164 = $163&65535;
       $165 = HEAP16[608>>1]|0;
       $166 = $165&65535;
       $167 = (($164) + ($166))|0;
       $168 = ($162|0)<($167|0);
       if ($168) {
        _derror();
       }
      }
     }
    }
   }
   $169 = $col;
   $170 = (($169) + 1)|0;
   $col = $170;
  }
  $171 = $rbits;
  $172 = $vbits;
  $173 = (($172) - ($171))|0;
  $vbits = $173;
  $174 = $irow;
  $175 = (($174) + 1)|0;
  $irow = $175;
 }
 STACKTOP = sp;return;
}
function _nokia_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0;
 var $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $col = 0, $data = 0, $dp = 0, $dwide = 0, $rev = 0, $row = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sum = sp;
 ;HEAP32[$sum+0>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;
 $0 = HEAP16[944>>1]|0;
 $1 = $0 << 16 >> 16;
 $2 = ($1|0)==(18761);
 $3 = $2&1;
 $4 = ($3*3)|0;
 $rev = $4;
 $5 = HEAP16[132368>>1]|0;
 $6 = $5&65535;
 $7 = ($6*5)|0;
 $8 = (($7) + 1)|0;
 $9 = (($8|0) / 4)&-1;
 $dwide = $9;
 $10 = $dwide;
 $11 = $10<<1;
 $12 = (_malloc($11)|0);
 $data = $12;
 $13 = $data;
 _merror($13,142984);
 $row = 0;
 while(1) {
  $14 = $row;
  $15 = HEAP16[133096>>1]|0;
  $16 = $15&65535;
  $17 = ($14|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $data;
  $19 = $dwide;
  $20 = (($18) + ($19)|0);
  $21 = $dwide;
  $22 = HEAP32[880>>2]|0;
  $23 = (_fread(($20|0),1,($21|0),($22|0))|0);
  $24 = $dwide;
  $25 = ($23>>>0)<($24>>>0);
  if ($25) {
   _derror();
  }
  $c = 0;
  while(1) {
   $26 = $c;
   $27 = $dwide;
   $28 = ($26|0)<($27|0);
   if (!($28)) {
    break;
   }
   $29 = $dwide;
   $30 = $c;
   $31 = $rev;
   $32 = $30 ^ $31;
   $33 = (($29) + ($32))|0;
   $34 = $data;
   $35 = (($34) + ($33)|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $c;
   $38 = $data;
   $39 = (($38) + ($37)|0);
   HEAP8[$39>>0] = $36;
   $40 = $c;
   $41 = (($40) + 1)|0;
   $c = $41;
  }
  $42 = $data;
  $dp = $42;
  $col = 0;
  while(1) {
   $43 = $col;
   $44 = HEAP16[132368>>1]|0;
   $45 = $44&65535;
   $46 = ($43|0)<($45|0);
   if (!($46)) {
    break;
   }
   $c = 0;
   while(1) {
    $47 = $c;
    $48 = ($47|0)<(4);
    if (!($48)) {
     break;
    }
    $49 = $c;
    $50 = $dp;
    $51 = (($50) + ($49)|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    $54 = $53 << 2;
    $55 = $dp;
    $56 = (($55) + 4|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57&255;
    $59 = $c;
    $60 = $59 << 1;
    $61 = $58 >> $60;
    $62 = $61 & 3;
    $63 = $54 | $62;
    $64 = $63&65535;
    $65 = $row;
    $66 = HEAP16[132368>>1]|0;
    $67 = $66&65535;
    $68 = Math_imul($65, $67)|0;
    $69 = $col;
    $70 = $c;
    $71 = (($69) + ($70))|0;
    $72 = (($68) + ($71))|0;
    $73 = HEAP32[132360>>2]|0;
    $74 = (($73) + ($72<<1)|0);
    HEAP16[$74>>1] = $64;
    $75 = $c;
    $76 = (($75) + 1)|0;
    $c = $76;
   }
   $77 = $dp;
   $78 = (($77) + 5|0);
   $dp = $78;
   $79 = $col;
   $80 = (($79) + 4)|0;
   $col = $80;
  }
  $81 = $row;
  $82 = (($81) + 1)|0;
  $row = $82;
 }
 $83 = $data;
 _free($83);
 HEAP32[132400>>2] = 1023;
 $84 = (_strcmp(134168,143008)|0);
 $85 = ($84|0)!=(0);
 if ($85) {
  STACKTOP = sp;return;
 }
 $86 = HEAP16[133096>>1]|0;
 $87 = $86&65535;
 $88 = (($87|0) / 2)&-1;
 $row = $88;
 $c = 0;
 while(1) {
  $89 = $c;
  $90 = HEAP16[132120>>1]|0;
  $91 = $90&65535;
  $92 = (($91) - 1)|0;
  $93 = ($89|0)<($92|0);
  if (!($93)) {
   break;
  }
  $94 = $row;
  $95 = HEAP16[132368>>1]|0;
  $96 = $95&65535;
  $97 = Math_imul($94, $96)|0;
  $98 = $c;
  $99 = (($97) + ($98))|0;
  $100 = HEAP32[132360>>2]|0;
  $101 = (($100) + ($99<<1)|0);
  $102 = HEAP16[$101>>1]|0;
  $103 = $102&65535;
  $104 = $row;
  $105 = (($104) + 1)|0;
  $106 = HEAP16[132368>>1]|0;
  $107 = $106&65535;
  $108 = Math_imul($105, $107)|0;
  $109 = $c;
  $110 = (($109) + 1)|0;
  $111 = (($108) + ($110))|0;
  $112 = HEAP32[132360>>2]|0;
  $113 = (($112) + ($111<<1)|0);
  $114 = HEAP16[$113>>1]|0;
  $115 = $114&65535;
  $116 = (($103) - ($115))|0;
  $117 = $row;
  $118 = HEAP16[132368>>1]|0;
  $119 = $118&65535;
  $120 = Math_imul($117, $119)|0;
  $121 = $c;
  $122 = (($120) + ($121))|0;
  $123 = HEAP32[132360>>2]|0;
  $124 = (($123) + ($122<<1)|0);
  $125 = HEAP16[$124>>1]|0;
  $126 = $125&65535;
  $127 = $row;
  $128 = (($127) + 1)|0;
  $129 = HEAP16[132368>>1]|0;
  $130 = $129&65535;
  $131 = Math_imul($128, $130)|0;
  $132 = $c;
  $133 = (($132) + 1)|0;
  $134 = (($131) + ($133))|0;
  $135 = HEAP32[132360>>2]|0;
  $136 = (($135) + ($134<<1)|0);
  $137 = HEAP16[$136>>1]|0;
  $138 = $137&65535;
  $139 = (($126) - ($138))|0;
  $140 = Math_imul($116, $139)|0;
  $141 = (+($140|0));
  $142 = $c;
  $143 = $142 & 1;
  $144 = (($sum) + ($143<<3)|0);
  $145 = +HEAPF64[$144>>3];
  $146 = $145 + $141;
  HEAPF64[$144>>3] = $146;
  $147 = $row;
  $148 = (($147) + 1)|0;
  $149 = HEAP16[132368>>1]|0;
  $150 = $149&65535;
  $151 = Math_imul($148, $150)|0;
  $152 = $c;
  $153 = (($151) + ($152))|0;
  $154 = HEAP32[132360>>2]|0;
  $155 = (($154) + ($153<<1)|0);
  $156 = HEAP16[$155>>1]|0;
  $157 = $156&65535;
  $158 = $row;
  $159 = HEAP16[132368>>1]|0;
  $160 = $159&65535;
  $161 = Math_imul($158, $160)|0;
  $162 = $c;
  $163 = (($162) + 1)|0;
  $164 = (($161) + ($163))|0;
  $165 = HEAP32[132360>>2]|0;
  $166 = (($165) + ($164<<1)|0);
  $167 = HEAP16[$166>>1]|0;
  $168 = $167&65535;
  $169 = (($157) - ($168))|0;
  $170 = $row;
  $171 = (($170) + 1)|0;
  $172 = HEAP16[132368>>1]|0;
  $173 = $172&65535;
  $174 = Math_imul($171, $173)|0;
  $175 = $c;
  $176 = (($174) + ($175))|0;
  $177 = HEAP32[132360>>2]|0;
  $178 = (($177) + ($176<<1)|0);
  $179 = HEAP16[$178>>1]|0;
  $180 = $179&65535;
  $181 = $row;
  $182 = HEAP16[132368>>1]|0;
  $183 = $182&65535;
  $184 = Math_imul($181, $183)|0;
  $185 = $c;
  $186 = (($185) + 1)|0;
  $187 = (($184) + ($186))|0;
  $188 = HEAP32[132360>>2]|0;
  $189 = (($188) + ($187<<1)|0);
  $190 = HEAP16[$189>>1]|0;
  $191 = $190&65535;
  $192 = (($180) - ($191))|0;
  $193 = Math_imul($169, $192)|0;
  $194 = (+($193|0));
  $195 = $c;
  $196 = $195 ^ -1;
  $197 = $196 & 1;
  $198 = (($sum) + ($197<<3)|0);
  $199 = +HEAPF64[$198>>3];
  $200 = $199 + $194;
  HEAPF64[$198>>3] = $200;
  $201 = $c;
  $202 = (($201) + 1)|0;
  $c = $202;
 }
 $203 = (($sum) + 8|0);
 $204 = +HEAPF64[$203>>3];
 $205 = +HEAPF64[$sum>>3];
 $206 = $204 > $205;
 if (!($206)) {
  STACKTOP = sp;return;
 }
 HEAP32[600>>2] = 1263225675;
 STACKTOP = sp;return;
}
function _canon_rmf_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bits = 0, $c = 0, $col = 0, $ocol = 0, $orow = 0, $row = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $row = 0;
 while(1) {
  $0 = $row;
  $1 = HEAP16[133096>>1]|0;
  $2 = $1&65535;
  $3 = ($0|0)<($2|0);
  if (!($3)) {
   break;
  }
  $col = 0;
  while(1) {
   $4 = $col;
   $5 = HEAP16[132368>>1]|0;
   $6 = $5&65535;
   $7 = (($6) - 2)|0;
   $8 = ($4|0)<($7|0);
   if (!($8)) {
    break;
   }
   $9 = (_get4()|0);
   $bits = $9;
   $c = 0;
   while(1) {
    $10 = $c;
    $11 = ($10|0)<(3);
    if (!($11)) {
     break;
    }
    $12 = $row;
    $orow = $12;
    $13 = $col;
    $14 = $c;
    $15 = (($13) + ($14))|0;
    $16 = (($15) - 4)|0;
    $ocol = $16;
    $17 = ($16|0)<(0);
    if ($17) {
     $18 = HEAP16[132368>>1]|0;
     $19 = $18&65535;
     $20 = $ocol;
     $21 = (($20) + ($19))|0;
     $ocol = $21;
     $22 = $orow;
     $23 = (($22) - 2)|0;
     $orow = $23;
     $24 = ($23|0)<(0);
     if ($24) {
      $25 = HEAP16[133096>>1]|0;
      $26 = $25&65535;
      $27 = $orow;
      $28 = (($27) + ($26))|0;
      $orow = $28;
     }
    }
    $29 = $bits;
    $30 = $c;
    $31 = ($30*10)|0;
    $32 = (($31) + 2)|0;
    $33 = $29 >> $32;
    $34 = $33 & 1023;
    $35 = (968 + ($34<<1)|0);
    $36 = HEAP16[$35>>1]|0;
    $37 = $orow;
    $38 = HEAP16[132368>>1]|0;
    $39 = $38&65535;
    $40 = Math_imul($37, $39)|0;
    $41 = $ocol;
    $42 = (($40) + ($41))|0;
    $43 = HEAP32[132360>>2]|0;
    $44 = (($43) + ($42<<1)|0);
    HEAP16[$44>>1] = $36;
    $45 = $c;
    $46 = (($45) + 1)|0;
    $c = $46;
   }
   $47 = $col;
   $48 = (($47) + 3)|0;
   $col = $48;
  }
  $49 = $row;
  $50 = (($49) + 1)|0;
  $row = $50;
 }
 $51 = HEAP16[((968 + 2046|0))>>1]|0;
 $52 = $51&65535;
 HEAP32[132400>>2] = $52;
 STACKTOP = sp;return;
}
function _pana_bits($nbits) {
 $nbits = $nbits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $byte = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $nbits;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  HEAP32[159408>>2] = 0;
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $4 = HEAP32[159408>>2]|0;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $6 = HEAP32[133128>>2]|0;
  $7 = (143024 + ($6)|0);
  $8 = HEAP32[133128>>2]|0;
  $9 = (16384 - ($8))|0;
  $10 = HEAP32[880>>2]|0;
  (_fread(($7|0),1,($9|0),($10|0))|0);
  $11 = HEAP32[133128>>2]|0;
  $12 = HEAP32[880>>2]|0;
  (_fread((143024|0),1,($11|0),($12|0))|0);
 }
 $13 = HEAP32[159408>>2]|0;
 $14 = $1;
 $15 = (($13) - ($14))|0;
 $16 = $15 & 131071;
 HEAP32[159408>>2] = $16;
 $17 = HEAP32[159408>>2]|0;
 $18 = $17 >> 3;
 $19 = $18 ^ 16368;
 $byte = $19;
 $20 = $byte;
 $21 = (143024 + ($20)|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $byte;
 $25 = (($24) + 1)|0;
 $26 = (143024 + ($25)|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $28 << 8;
 $30 = $23 | $29;
 $31 = HEAP32[159408>>2]|0;
 $32 = $31 & 7;
 $33 = $30 >> $32;
 $34 = $1;
 $35 = -1 << $34;
 $36 = $35 ^ -1;
 $37 = $33 & $36;
 $0 = $37;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function _panasonic_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $col = 0, $i = 0, $j = 0, $nonz = 0, $pred = 0, $row = 0, $sh = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pred = sp + 16|0;
 $nonz = sp + 24|0;
 $sh = 0;
 (_pana_bits(0)|0);
 $row = 0;
 while(1) {
  $0 = $row;
  $1 = HEAP16[132112>>1]|0;
  $2 = $1&65535;
  $3 = ($0|0)<($2|0);
  if (!($3)) {
   break;
  }
  $col = 0;
  while(1) {
   $4 = $col;
   $5 = HEAP16[132368>>1]|0;
   $6 = $5&65535;
   $7 = ($4|0)<($6|0);
   if (!($7)) {
    break;
   }
   $8 = $col;
   $9 = (($8|0) % 14)&-1;
   $i = $9;
   $10 = ($9|0)==(0);
   if ($10) {
    $11 = (($nonz) + 4|0);
    HEAP32[$11>>2] = 0;
    HEAP32[$nonz>>2] = 0;
    $12 = (($pred) + 4|0);
    HEAP32[$12>>2] = 0;
    HEAP32[$pred>>2] = 0;
   }
   $13 = $i;
   $14 = (($13|0) % 3)&-1;
   $15 = ($14|0)==(2);
   if ($15) {
    $16 = (_pana_bits(2)|0);
    $17 = (3 - ($16))|0;
    $18 = 4 >> $17;
    $sh = $18;
   }
   $19 = $i;
   $20 = $19 & 1;
   $21 = (($nonz) + ($20<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)!=(0);
   if ($23) {
    $24 = (_pana_bits(8)|0);
    $j = $24;
    $25 = ($24|0)!=(0);
    if ($25) {
     $26 = $sh;
     $27 = 128 << $26;
     $28 = $i;
     $29 = $28 & 1;
     $30 = (($pred) + ($29<<2)|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (($31) - ($27))|0;
     HEAP32[$30>>2] = $32;
     $33 = ($32|0)<(0);
     if ($33) {
      label = 13;
     } else {
      $34 = $sh;
      $35 = ($34|0)==(4);
      if ($35) {
       label = 13;
      }
     }
     if ((label|0) == 13) {
      label = 0;
      $36 = $sh;
      $37 = -1 << $36;
      $38 = $37 ^ -1;
      $39 = $i;
      $40 = $39 & 1;
      $41 = (($pred) + ($40<<2)|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = $42 & $38;
      HEAP32[$41>>2] = $43;
     }
     $44 = $j;
     $45 = $sh;
     $46 = $44 << $45;
     $47 = $i;
     $48 = $47 & 1;
     $49 = (($pred) + ($48<<2)|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (($50) + ($46))|0;
     HEAP32[$49>>2] = $51;
    }
   } else {
    $52 = (_pana_bits(8)|0);
    $53 = $i;
    $54 = $53 & 1;
    $55 = (($nonz) + ($54<<2)|0);
    HEAP32[$55>>2] = $52;
    $56 = ($52|0)!=(0);
    if ($56) {
     label = 18;
    } else {
     $57 = $i;
     $58 = ($57|0)>(11);
     if ($58) {
      label = 18;
     }
    }
    if ((label|0) == 18) {
     label = 0;
     $59 = $i;
     $60 = $59 & 1;
     $61 = (($nonz) + ($60<<2)|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = $62 << 4;
     $64 = (_pana_bits(4)|0);
     $65 = $63 | $64;
     $66 = $i;
     $67 = $66 & 1;
     $68 = (($pred) + ($67<<2)|0);
     HEAP32[$68>>2] = $65;
    }
   }
   $69 = $col;
   $70 = $69 & 1;
   $71 = (($pred) + ($70<<2)|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $72&65535;
   $74 = $row;
   $75 = HEAP16[132368>>1]|0;
   $76 = $75&65535;
   $77 = Math_imul($74, $76)|0;
   $78 = $col;
   $79 = (($77) + ($78))|0;
   $80 = HEAP32[132360>>2]|0;
   $81 = (($80) + ($79<<1)|0);
   HEAP16[$81>>1] = $73;
   $82 = $73&65535;
   $83 = ($82|0)>(4098);
   if ($83) {
    $84 = $col;
    $85 = HEAP16[132120>>1]|0;
    $86 = $85&65535;
    $87 = ($84|0)<($86|0);
    if ($87) {
     _derror();
    }
   }
   $88 = $col;
   $89 = (($88) + 1)|0;
   $col = $89;
  }
  $90 = $row;
  $91 = (($90) + 1)|0;
  $row = $91;
 }
 STACKTOP = sp;return;
}
function _olympus_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $acarry = 0, $c = 0, $carry = 0, $col = 0, $diff = 0, $high = 0, $huff = 0, $i = 0, $low = 0, $n = 0, $nbits = 0, $nw = 0, $pred = 0, $row = 0, $sign = 0, $w = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $huff = sp + 80|0;
 $acarry = sp + 8|0;
 $n = 0;
 HEAP16[$huff>>1] = 3084;
 $i = 12;
 while(1) {
  $0 = $i;
  $1 = (($0) + -1)|0;
  $i = $1;
  $2 = ($0|0)!=(0);
  if (!($2)) {
   break;
  }
  $c = 0;
  while(1) {
   $3 = $c;
   $4 = $i;
   $5 = 2048 >> $4;
   $6 = ($3|0)<($5|0);
   if (!($6)) {
    break;
   }
   $7 = $i;
   $8 = (($7) + 1)|0;
   $9 = $8 << 8;
   $10 = $i;
   $11 = $9 | $10;
   $12 = $11&65535;
   $13 = $n;
   $14 = (($13) + 1)|0;
   $n = $14;
   $15 = (($huff) + ($14<<1)|0);
   HEAP16[$15>>1] = $12;
   $16 = $c;
   $17 = (($16) + 1)|0;
   $c = $17;
  }
 }
 $18 = HEAP32[880>>2]|0;
 (_fseek(($18|0),7,1)|0);
 (_getbithuff(-1,0)|0);
 $row = 0;
 while(1) {
  $19 = $row;
  $20 = HEAP16[132112>>1]|0;
  $21 = $20&65535;
  $22 = ($19|0)<($21|0);
  if (!($22)) {
   break;
  }
  ;HEAP32[$acarry+0>>2]=0|0;HEAP32[$acarry+4>>2]=0|0;HEAP32[$acarry+8>>2]=0|0;HEAP32[$acarry+12>>2]=0|0;HEAP32[$acarry+16>>2]=0|0;HEAP32[$acarry+20>>2]=0|0;
  $col = 0;
  while(1) {
   $23 = $col;
   $24 = HEAP16[132368>>1]|0;
   $25 = $24&65535;
   $26 = ($23|0)<($25|0);
   if (!($26)) {
    break;
   }
   $27 = $col;
   $28 = $27 & 1;
   $29 = (($acarry) + (($28*12)|0)|0);
   $carry = $29;
   $30 = $carry;
   $31 = (($30) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)<(3);
   $34 = $33&1;
   $35 = $34<<1;
   $i = $35;
   $36 = $i;
   $37 = (2 + ($36))|0;
   $nbits = $37;
   while(1) {
    $38 = $carry;
    $39 = HEAP32[$38>>2]|0;
    $40 = $39&65535;
    $41 = $40&65535;
    $42 = $nbits;
    $43 = $i;
    $44 = (($42) + ($43))|0;
    $45 = $41 >> $44;
    $46 = ($45|0)!=(0);
    if (!($46)) {
     break;
    }
    $47 = $nbits;
    $48 = (($47) + 1)|0;
    $nbits = $48;
   }
   $49 = (_getbithuff(3,0)|0);
   $sign = $49;
   $50 = $49 & 3;
   $low = $50;
   $51 = $sign;
   $52 = $51 << 29;
   $53 = $52 >> 31;
   $sign = $53;
   $54 = (_getbithuff(12,$huff)|0);
   $high = $54;
   $55 = ($54|0)==(12);
   if ($55) {
    $56 = $nbits;
    $57 = (16 - ($56))|0;
    $58 = (_getbithuff($57,0)|0);
    $59 = $58 >>> 1;
    $high = $59;
   }
   $60 = $high;
   $61 = $nbits;
   $62 = $60 << $61;
   $63 = $nbits;
   $64 = (_getbithuff($63,0)|0);
   $65 = $62 | $64;
   $66 = $carry;
   HEAP32[$66>>2] = $65;
   $67 = $carry;
   $68 = HEAP32[$67>>2]|0;
   $69 = $sign;
   $70 = $68 ^ $69;
   $71 = $carry;
   $72 = (($71) + 4|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($70) + ($73))|0;
   $diff = $74;
   $75 = $diff;
   $76 = ($75*3)|0;
   $77 = $carry;
   $78 = (($77) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (($76) + ($79))|0;
   $81 = $80 >> 5;
   $82 = $carry;
   $83 = (($82) + 4|0);
   HEAP32[$83>>2] = $81;
   $84 = $carry;
   $85 = HEAP32[$84>>2]|0;
   $86 = ($85|0)>(16);
   if ($86) {
    $93 = 0;
   } else {
    $87 = $carry;
    $88 = (($87) + 8|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (($89) + 1)|0;
    $93 = $90;
   }
   $91 = $carry;
   $92 = (($91) + 8|0);
   HEAP32[$92>>2] = $93;
   $94 = $col;
   $95 = HEAP16[132120>>1]|0;
   $96 = $95&65535;
   $97 = ($94|0)>=($96|0);
   if ($97) {
   } else {
    $98 = $row;
    $99 = ($98|0)<(2);
    if ($99) {
     $100 = $col;
     $101 = ($100|0)<(2);
     if ($101) {
      $pred = 0;
     } else {
      label = 26;
     }
    } else {
     label = 26;
    }
    if ((label|0) == 26) {
     label = 0;
     $102 = $row;
     $103 = ($102|0)<(2);
     if ($103) {
      $104 = $row;
      $105 = HEAP16[132368>>1]|0;
      $106 = $105&65535;
      $107 = Math_imul($104, $106)|0;
      $108 = $col;
      $109 = (($108) - 2)|0;
      $110 = (($107) + ($109))|0;
      $111 = HEAP32[132360>>2]|0;
      $112 = (($111) + ($110<<1)|0);
      $113 = HEAP16[$112>>1]|0;
      $114 = $113&65535;
      $pred = $114;
     } else {
      $115 = $col;
      $116 = ($115|0)<(2);
      if ($116) {
       $117 = $row;
       $118 = (($117) - 2)|0;
       $119 = HEAP16[132368>>1]|0;
       $120 = $119&65535;
       $121 = Math_imul($118, $120)|0;
       $122 = $col;
       $123 = (($121) + ($122))|0;
       $124 = HEAP32[132360>>2]|0;
       $125 = (($124) + ($123<<1)|0);
       $126 = HEAP16[$125>>1]|0;
       $127 = $126&65535;
       $pred = $127;
      } else {
       $128 = $row;
       $129 = HEAP16[132368>>1]|0;
       $130 = $129&65535;
       $131 = Math_imul($128, $130)|0;
       $132 = $col;
       $133 = (($132) - 2)|0;
       $134 = (($131) + ($133))|0;
       $135 = HEAP32[132360>>2]|0;
       $136 = (($135) + ($134<<1)|0);
       $137 = HEAP16[$136>>1]|0;
       $138 = $137&65535;
       $w = $138;
       $139 = $row;
       $140 = (($139) - 2)|0;
       $141 = HEAP16[132368>>1]|0;
       $142 = $141&65535;
       $143 = Math_imul($140, $142)|0;
       $144 = $col;
       $145 = (($143) + ($144))|0;
       $146 = HEAP32[132360>>2]|0;
       $147 = (($146) + ($145<<1)|0);
       $148 = HEAP16[$147>>1]|0;
       $149 = $148&65535;
       $n = $149;
       $150 = $row;
       $151 = (($150) - 2)|0;
       $152 = HEAP16[132368>>1]|0;
       $153 = $152&65535;
       $154 = Math_imul($151, $153)|0;
       $155 = $col;
       $156 = (($155) - 2)|0;
       $157 = (($154) + ($156))|0;
       $158 = HEAP32[132360>>2]|0;
       $159 = (($158) + ($157<<1)|0);
       $160 = HEAP16[$159>>1]|0;
       $161 = $160&65535;
       $nw = $161;
       $162 = $w;
       $163 = $nw;
       $164 = ($162|0)<($163|0);
       if ($164) {
        $165 = $nw;
        $166 = $n;
        $167 = ($165|0)<($166|0);
        if ($167) {
         label = 34;
        } else {
         label = 32;
        }
       } else {
        label = 32;
       }
       do {
        if ((label|0) == 32) {
         label = 0;
         $168 = $n;
         $169 = $nw;
         $170 = ($168|0)<($169|0);
         if ($170) {
          $171 = $nw;
          $172 = $w;
          $173 = ($171|0)<($172|0);
          if ($173) {
           label = 34;
           break;
          }
         }
         $211 = $w;
         $212 = $nw;
         $213 = (($211) - ($212))|0;
         $214 = $w;
         $215 = $nw;
         $216 = (($214) - ($215))|0;
         $217 = $216 >> 31;
         $218 = $213 ^ $217;
         $219 = $w;
         $220 = $nw;
         $221 = (($219) - ($220))|0;
         $222 = $221 >> 31;
         $223 = (($218) - ($222))|0;
         $224 = $n;
         $225 = $nw;
         $226 = (($224) - ($225))|0;
         $227 = $n;
         $228 = $nw;
         $229 = (($227) - ($228))|0;
         $230 = $229 >> 31;
         $231 = $226 ^ $230;
         $232 = $n;
         $233 = $nw;
         $234 = (($232) - ($233))|0;
         $235 = $234 >> 31;
         $236 = (($231) - ($235))|0;
         $237 = ($223|0)>($236|0);
         if ($237) {
          $238 = $w;
          $240 = $238;
         } else {
          $239 = $n;
          $240 = $239;
         }
         $pred = $240;
        }
       } while(0);
       if ((label|0) == 34) {
        label = 0;
        $174 = $w;
        $175 = $nw;
        $176 = (($174) - ($175))|0;
        $177 = $w;
        $178 = $nw;
        $179 = (($177) - ($178))|0;
        $180 = $179 >> 31;
        $181 = $176 ^ $180;
        $182 = $w;
        $183 = $nw;
        $184 = (($182) - ($183))|0;
        $185 = $184 >> 31;
        $186 = (($181) - ($185))|0;
        $187 = ($186|0)>(32);
        if ($187) {
         label = 36;
        } else {
         $188 = $n;
         $189 = $nw;
         $190 = (($188) - ($189))|0;
         $191 = $n;
         $192 = $nw;
         $193 = (($191) - ($192))|0;
         $194 = $193 >> 31;
         $195 = $190 ^ $194;
         $196 = $n;
         $197 = $nw;
         $198 = (($196) - ($197))|0;
         $199 = $198 >> 31;
         $200 = (($195) - ($199))|0;
         $201 = ($200|0)>(32);
         if ($201) {
          label = 36;
         } else {
          $207 = $w;
          $208 = $n;
          $209 = (($207) + ($208))|0;
          $210 = $209 >> 1;
          $pred = $210;
         }
        }
        if ((label|0) == 36) {
         label = 0;
         $202 = $w;
         $203 = $n;
         $204 = (($202) + ($203))|0;
         $205 = $nw;
         $206 = (($204) - ($205))|0;
         $pred = $206;
        }
       }
      }
     }
    }
    $241 = $pred;
    $242 = $diff;
    $243 = $242 << 2;
    $244 = $low;
    $245 = $243 | $244;
    $246 = (($241) + ($245))|0;
    $247 = $246&65535;
    $248 = $row;
    $249 = HEAP16[132368>>1]|0;
    $250 = $249&65535;
    $251 = Math_imul($248, $250)|0;
    $252 = $col;
    $253 = (($251) + ($252))|0;
    $254 = HEAP32[132360>>2]|0;
    $255 = (($254) + ($253<<1)|0);
    HEAP16[$255>>1] = $247;
    $256 = $247&65535;
    $257 = $256 >> 12;
    $258 = ($257|0)!=(0);
    if ($258) {
     _derror();
    }
   }
   $259 = $col;
   $260 = (($259) + 1)|0;
   $col = $260;
  }
  $261 = $row;
  $262 = (($261) + 1)|0;
  $row = $262;
 }
 STACKTOP = sp;return;
}
function _minolta_rd175_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $box = 0, $col = 0, $irow = 0, $pixel = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pixel = sp + 16|0;
 $irow = 0;
 while(1) {
  $0 = $irow;
  $1 = ($0>>>0)<(1481);
  if (!($1)) {
   break;
  }
  $2 = HEAP32[880>>2]|0;
  $3 = (_fread(($pixel|0),1,768,($2|0))|0);
  $4 = ($3>>>0)<(768);
  if ($4) {
   _derror();
  }
  $5 = $irow;
  $6 = (($5>>>0) / 82)&-1;
  $box = $6;
  $7 = $irow;
  $8 = (($7>>>0) % 82)&-1;
  $9 = ($8*12)|0;
  $10 = $box;
  $11 = ($10>>>0)<(12);
  if ($11) {
   $12 = $box;
   $13 = $12 | 1;
   $18 = $13;
  } else {
   $14 = $box;
   $15 = (($14) - 12)|0;
   $16 = $15<<1;
   $18 = $16;
  }
  $17 = (($9) + ($18))|0;
  $row = $17;
  $19 = $irow;
  switch ($19|0) {
  case 1480:  {
   $row = 985;
   label = 13;
   break;
  }
  case 1478:  {
   $row = 985;
   $box = 1;
   label = 13;
   break;
  }
  case 1476:  {
   $row = 984;
   label = 13;
   break;
  }
  case 1479: case 1477:  {
   break;
  }
  default: {
   label = 13;
  }
  }
  if ((label|0) == 13) {
   label = 0;
   $20 = $box;
   $21 = ($20>>>0)<(12);
   if ($21) {
    $22 = $box;
    $23 = $22 & 1;
    $24 = ($23|0)!=(0);
    if ($24) {
     $col = 0;
     while(1) {
      $25 = $col;
      $26 = ($25>>>0)<(1533);
      if (!($26)) {
       break;
      }
      $27 = $col;
      $28 = ($27|0)!=(1);
      if ($28) {
       $29 = $col;
       $30 = (($29) + 1)|0;
       $31 = $30 & 2;
       $32 = ($31|0)!=(0);
       if ($32) {
        $33 = $col;
        $34 = (($33>>>0) / 2)&-1;
        $35 = (($34) - 1)|0;
        $36 = (($pixel) + ($35)|0);
        $37 = HEAP8[$36>>0]|0;
        $38 = $37&255;
        $39 = $col;
        $40 = (($39>>>0) / 2)&-1;
        $41 = (($40) + 1)|0;
        $42 = (($pixel) + ($41)|0);
        $43 = HEAP8[$42>>0]|0;
        $44 = $43&255;
        $45 = (($38) + ($44))|0;
        $53 = $45;
       } else {
        $46 = $col;
        $47 = (($46>>>0) / 2)&-1;
        $48 = (($pixel) + ($47)|0);
        $49 = HEAP8[$48>>0]|0;
        $50 = $49&255;
        $51 = $50 << 1;
        $53 = $51;
       }
       $52 = $53&65535;
       $54 = $row;
       $55 = HEAP16[132368>>1]|0;
       $56 = $55&65535;
       $57 = Math_imul($54, $56)|0;
       $58 = $col;
       $59 = (($57) + ($58))|0;
       $60 = HEAP32[132360>>2]|0;
       $61 = (($60) + ($59<<1)|0);
       HEAP16[$61>>1] = $52;
      }
      $62 = $col;
      $63 = (($62) + 1)|0;
      $col = $63;
      $64 = $row;
      $65 = $64 ^ 1;
      $row = $65;
     }
     $66 = (($pixel) + 1|0);
     $67 = HEAP8[$66>>0]|0;
     $68 = $67&255;
     $69 = $68 << 1;
     $70 = $69&65535;
     $71 = $row;
     $72 = HEAP16[132368>>1]|0;
     $73 = $72&65535;
     $74 = Math_imul($71, $73)|0;
     $75 = (($74) + 1)|0;
     $76 = HEAP32[132360>>2]|0;
     $77 = (($76) + ($75<<1)|0);
     HEAP16[$77>>1] = $70;
     $78 = (($pixel) + 765|0);
     $79 = HEAP8[$78>>0]|0;
     $80 = $79&255;
     $81 = $80 << 1;
     $82 = $81&65535;
     $83 = $row;
     $84 = HEAP16[132368>>1]|0;
     $85 = $84&65535;
     $86 = Math_imul($83, $85)|0;
     $87 = (($86) + 1533)|0;
     $88 = HEAP32[132360>>2]|0;
     $89 = (($88) + ($87<<1)|0);
     HEAP16[$89>>1] = $82;
    } else {
     label = 25;
    }
   } else {
    label = 25;
   }
   if ((label|0) == 25) {
    label = 0;
    $90 = $row;
    $91 = $90 & 1;
    $col = $91;
    while(1) {
     $92 = $col;
     $93 = ($92>>>0)<(1534);
     if (!($93)) {
      break;
     }
     $94 = $col;
     $95 = (($94>>>0) / 2)&-1;
     $96 = (($pixel) + ($95)|0);
     $97 = HEAP8[$96>>0]|0;
     $98 = $97&255;
     $99 = $98 << 1;
     $100 = $99&65535;
     $101 = $row;
     $102 = HEAP16[132368>>1]|0;
     $103 = $102&65535;
     $104 = Math_imul($101, $103)|0;
     $105 = $col;
     $106 = (($104) + ($105))|0;
     $107 = HEAP32[132360>>2]|0;
     $108 = (($107) + ($106<<1)|0);
     HEAP16[$108>>1] = $100;
     $109 = $col;
     $110 = (($109) + 2)|0;
     $col = $110;
    }
   }
  }
  $111 = $irow;
  $112 = (($111) + 1)|0;
  $irow = $112;
 }
 HEAP32[132400>>2] = 510;
 STACKTOP = sp;return;
}
function _quicktake_100_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col = 0, $pixel = 0, $rb = 0, $row = 0, $sharp = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 311728|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pixel = sp + 24|0;
 $val = 0;
 (_getbithuff(-1,0)|0);
 _memset(($pixel|0),-128,311696)|0;
 $row = 2;
 while(1) {
  $0 = $row;
  $1 = HEAP16[132112>>1]|0;
  $2 = $1&65535;
  $3 = (($2) + 2)|0;
  $4 = ($0|0)<($3|0);
  if (!($4)) {
   break;
  }
  $5 = $row;
  $6 = $5 & 1;
  $7 = (2 + ($6))|0;
  $col = $7;
  while(1) {
   $8 = $col;
   $9 = HEAP16[132120>>1]|0;
   $10 = $9&65535;
   $11 = (($10) + 2)|0;
   $12 = ($8|0)<($11|0);
   if (!($12)) {
    break;
   }
   $13 = $col;
   $14 = (($13) - 1)|0;
   $15 = $row;
   $16 = (($15) - 1)|0;
   $17 = (($pixel) + (($16*644)|0)|0);
   $18 = (($17) + ($14)|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $21 = $col;
   $22 = (($21) + 1)|0;
   $23 = $row;
   $24 = (($23) - 1)|0;
   $25 = (($pixel) + (($24*644)|0)|0);
   $26 = (($25) + ($22)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $28<<1;
   $30 = (($20) + ($29))|0;
   $31 = $col;
   $32 = (($31) - 2)|0;
   $33 = $row;
   $34 = (($pixel) + (($33*644)|0)|0);
   $35 = (($34) + ($32)|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $38 = (($30) + ($37))|0;
   $39 = $38 >> 2;
   $40 = (_getbithuff(4,0)|0);
   $41 = (159416 + ($40<<1)|0);
   $42 = HEAP16[$41>>1]|0;
   $43 = $42 << 16 >> 16;
   $44 = (($39) + ($43))|0;
   $val = $44;
   $45 = $val;
   $46 = ($45|0)<(255);
   if ($46) {
    $47 = $val;
    $49 = $47;
   } else {
    $49 = 255;
   }
   $48 = (0)>($49|0);
   if ($48) {
    $53 = 0;
   } else {
    $50 = $val;
    $51 = ($50|0)<(255);
    if ($51) {
     $52 = $val;
     $438 = $52;
    } else {
     $438 = 255;
    }
    $53 = $438;
   }
   $val = $53;
   $54 = $53&255;
   $55 = $col;
   $56 = $row;
   $57 = (($pixel) + (($56*644)|0)|0);
   $58 = (($57) + ($55)|0);
   HEAP8[$58>>0] = $54;
   $59 = $col;
   $60 = ($59|0)<(4);
   if ($60) {
    $61 = $val;
    $62 = $61&255;
    $63 = $row;
    $64 = $63 ^ -1;
    $65 = $64 & 1;
    $66 = $row;
    $67 = (($66) + 1)|0;
    $68 = (($pixel) + (($67*644)|0)|0);
    $69 = (($68) + ($65)|0);
    HEAP8[$69>>0] = $62;
    $70 = $col;
    $71 = (($70) - 2)|0;
    $72 = $row;
    $73 = (($pixel) + (($72*644)|0)|0);
    $74 = (($73) + ($71)|0);
    HEAP8[$74>>0] = $62;
   }
   $75 = $row;
   $76 = ($75|0)==(2);
   if ($76) {
    $77 = $val;
    $78 = $77&255;
    $79 = $col;
    $80 = (($79) + 3)|0;
    $81 = $row;
    $82 = (($81) - 1)|0;
    $83 = (($pixel) + (($82*644)|0)|0);
    $84 = (($83) + ($80)|0);
    HEAP8[$84>>0] = $78;
    $85 = $col;
    $86 = (($85) + 1)|0;
    $87 = $row;
    $88 = (($87) - 1)|0;
    $89 = (($pixel) + (($88*644)|0)|0);
    $90 = (($89) + ($86)|0);
    HEAP8[$90>>0] = $78;
   }
   $91 = $col;
   $92 = (($91) + 2)|0;
   $col = $92;
  }
  $93 = $val;
  $94 = $93&255;
  $95 = $col;
  $96 = $row;
  $97 = (($pixel) + (($96*644)|0)|0);
  $98 = (($97) + ($95)|0);
  HEAP8[$98>>0] = $94;
  $99 = $row;
  $100 = (($99) + 1)|0;
  $row = $100;
 }
 $rb = 0;
 while(1) {
  $101 = $rb;
  $102 = ($101|0)<(2);
  if (!($102)) {
   break;
  }
  $103 = $rb;
  $104 = (2 + ($103))|0;
  $row = $104;
  while(1) {
   $105 = $row;
   $106 = HEAP16[132112>>1]|0;
   $107 = $106&65535;
   $108 = (($107) + 2)|0;
   $109 = ($105|0)<($108|0);
   if (!($109)) {
    break;
   }
   $110 = $row;
   $111 = $110 & 1;
   $112 = (3 - ($111))|0;
   $col = $112;
   while(1) {
    $113 = $col;
    $114 = HEAP16[132120>>1]|0;
    $115 = $114&65535;
    $116 = (($115) + 2)|0;
    $117 = ($113|0)<($116|0);
    if (!($117)) {
     break;
    }
    $118 = $row;
    $119 = ($118|0)<(4);
    if ($119) {
     label = 30;
    } else {
     $120 = $col;
     $121 = ($120|0)<(4);
     if ($121) {
      label = 30;
     } else {
      $122 = $col;
      $123 = $row;
      $124 = (($123) - 2)|0;
      $125 = (($pixel) + (($124*644)|0)|0);
      $126 = (($125) + ($122)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127&255;
      $129 = $col;
      $130 = (($129) - 2)|0;
      $131 = $row;
      $132 = (($pixel) + (($131*644)|0)|0);
      $133 = (($132) + ($130)|0);
      $134 = HEAP8[$133>>0]|0;
      $135 = $134&255;
      $136 = (($128) - ($135))|0;
      $137 = $col;
      $138 = $row;
      $139 = (($138) - 2)|0;
      $140 = (($pixel) + (($139*644)|0)|0);
      $141 = (($140) + ($137)|0);
      $142 = HEAP8[$141>>0]|0;
      $143 = $142&255;
      $144 = $col;
      $145 = (($144) - 2)|0;
      $146 = $row;
      $147 = (($pixel) + (($146*644)|0)|0);
      $148 = (($147) + ($145)|0);
      $149 = HEAP8[$148>>0]|0;
      $150 = $149&255;
      $151 = (($143) - ($150))|0;
      $152 = $151 >> 31;
      $153 = $136 ^ $152;
      $154 = $col;
      $155 = $row;
      $156 = (($155) - 2)|0;
      $157 = (($pixel) + (($156*644)|0)|0);
      $158 = (($157) + ($154)|0);
      $159 = HEAP8[$158>>0]|0;
      $160 = $159&255;
      $161 = $col;
      $162 = (($161) - 2)|0;
      $163 = $row;
      $164 = (($pixel) + (($163*644)|0)|0);
      $165 = (($164) + ($162)|0);
      $166 = HEAP8[$165>>0]|0;
      $167 = $166&255;
      $168 = (($160) - ($167))|0;
      $169 = $168 >> 31;
      $170 = (($153) - ($169))|0;
      $171 = $col;
      $172 = $row;
      $173 = (($172) - 2)|0;
      $174 = (($pixel) + (($173*644)|0)|0);
      $175 = (($174) + ($171)|0);
      $176 = HEAP8[$175>>0]|0;
      $177 = $176&255;
      $178 = $col;
      $179 = (($178) - 2)|0;
      $180 = $row;
      $181 = (($180) - 2)|0;
      $182 = (($pixel) + (($181*644)|0)|0);
      $183 = (($182) + ($179)|0);
      $184 = HEAP8[$183>>0]|0;
      $185 = $184&255;
      $186 = (($177) - ($185))|0;
      $187 = $col;
      $188 = $row;
      $189 = (($188) - 2)|0;
      $190 = (($pixel) + (($189*644)|0)|0);
      $191 = (($190) + ($187)|0);
      $192 = HEAP8[$191>>0]|0;
      $193 = $192&255;
      $194 = $col;
      $195 = (($194) - 2)|0;
      $196 = $row;
      $197 = (($196) - 2)|0;
      $198 = (($pixel) + (($197*644)|0)|0);
      $199 = (($198) + ($195)|0);
      $200 = HEAP8[$199>>0]|0;
      $201 = $200&255;
      $202 = (($193) - ($201))|0;
      $203 = $202 >> 31;
      $204 = $186 ^ $203;
      $205 = $col;
      $206 = $row;
      $207 = (($206) - 2)|0;
      $208 = (($pixel) + (($207*644)|0)|0);
      $209 = (($208) + ($205)|0);
      $210 = HEAP8[$209>>0]|0;
      $211 = $210&255;
      $212 = $col;
      $213 = (($212) - 2)|0;
      $214 = $row;
      $215 = (($214) - 2)|0;
      $216 = (($pixel) + (($215*644)|0)|0);
      $217 = (($216) + ($213)|0);
      $218 = HEAP8[$217>>0]|0;
      $219 = $218&255;
      $220 = (($211) - ($219))|0;
      $221 = $220 >> 31;
      $222 = (($204) - ($221))|0;
      $223 = (($170) + ($222))|0;
      $224 = $col;
      $225 = (($224) - 2)|0;
      $226 = $row;
      $227 = (($pixel) + (($226*644)|0)|0);
      $228 = (($227) + ($225)|0);
      $229 = HEAP8[$228>>0]|0;
      $230 = $229&255;
      $231 = $col;
      $232 = (($231) - 2)|0;
      $233 = $row;
      $234 = (($233) - 2)|0;
      $235 = (($pixel) + (($234*644)|0)|0);
      $236 = (($235) + ($232)|0);
      $237 = HEAP8[$236>>0]|0;
      $238 = $237&255;
      $239 = (($230) - ($238))|0;
      $240 = $col;
      $241 = (($240) - 2)|0;
      $242 = $row;
      $243 = (($pixel) + (($242*644)|0)|0);
      $244 = (($243) + ($241)|0);
      $245 = HEAP8[$244>>0]|0;
      $246 = $245&255;
      $247 = $col;
      $248 = (($247) - 2)|0;
      $249 = $row;
      $250 = (($249) - 2)|0;
      $251 = (($pixel) + (($250*644)|0)|0);
      $252 = (($251) + ($248)|0);
      $253 = HEAP8[$252>>0]|0;
      $254 = $253&255;
      $255 = (($246) - ($254))|0;
      $256 = $255 >> 31;
      $257 = $239 ^ $256;
      $258 = $col;
      $259 = (($258) - 2)|0;
      $260 = $row;
      $261 = (($pixel) + (($260*644)|0)|0);
      $262 = (($261) + ($259)|0);
      $263 = HEAP8[$262>>0]|0;
      $264 = $263&255;
      $265 = $col;
      $266 = (($265) - 2)|0;
      $267 = $row;
      $268 = (($267) - 2)|0;
      $269 = (($pixel) + (($268*644)|0)|0);
      $270 = (($269) + ($266)|0);
      $271 = HEAP8[$270>>0]|0;
      $272 = $271&255;
      $273 = (($264) - ($272))|0;
      $274 = $273 >> 31;
      $275 = (($257) - ($274))|0;
      $276 = (($223) + ($275))|0;
      $val = $276;
      $277 = $val;
      $278 = ($277|0)<(4);
      if ($278) {
       $288 = 0;
      } else {
       $279 = $val;
       $280 = ($279|0)<(8);
       if ($280) {
        $439 = 1;
       } else {
        $281 = $val;
        $282 = ($281|0)<(16);
        if ($282) {
         $440 = 2;
        } else {
         $283 = $val;
         $284 = ($283|0)<(32);
         if ($284) {
          $441 = 3;
         } else {
          $285 = $val;
          $286 = ($285|0)<(48);
          $287 = $286 ? 4 : 5;
          $441 = $287;
         }
         $440 = $441;
        }
        $439 = $440;
       }
       $288 = $439;
      }
      $sharp = $288;
     }
    }
    if ((label|0) == 30) {
     label = 0;
     $sharp = 2;
    }
    $289 = $col;
    $290 = $row;
    $291 = (($290) - 2)|0;
    $292 = (($pixel) + (($291*644)|0)|0);
    $293 = (($292) + ($289)|0);
    $294 = HEAP8[$293>>0]|0;
    $295 = $294&255;
    $296 = $col;
    $297 = (($296) - 2)|0;
    $298 = $row;
    $299 = (($pixel) + (($298*644)|0)|0);
    $300 = (($299) + ($297)|0);
    $301 = HEAP8[$300>>0]|0;
    $302 = $301&255;
    $303 = (($295) + ($302))|0;
    $304 = $303 >> 1;
    $305 = (_getbithuff(2,0)|0);
    $306 = $sharp;
    $307 = (159448 + ($306<<3)|0);
    $308 = (($307) + ($305<<1)|0);
    $309 = HEAP16[$308>>1]|0;
    $310 = $309 << 16 >> 16;
    $311 = (($304) + ($310))|0;
    $val = $311;
    $312 = $val;
    $313 = ($312|0)<(255);
    if ($313) {
     $314 = $val;
     $316 = $314;
    } else {
     $316 = 255;
    }
    $315 = (0)>($316|0);
    if ($315) {
     $320 = 0;
    } else {
     $317 = $val;
     $318 = ($317|0)<(255);
     if ($318) {
      $319 = $val;
      $442 = $319;
     } else {
      $442 = 255;
     }
     $320 = $442;
    }
    $val = $320;
    $321 = $320&255;
    $322 = $col;
    $323 = $row;
    $324 = (($pixel) + (($323*644)|0)|0);
    $325 = (($324) + ($322)|0);
    HEAP8[$325>>0] = $321;
    $326 = $row;
    $327 = ($326|0)<(4);
    if ($327) {
     $328 = $val;
     $329 = $328&255;
     $330 = $col;
     $331 = (($330) + 2)|0;
     $332 = $row;
     $333 = (($332) - 2)|0;
     $334 = (($pixel) + (($333*644)|0)|0);
     $335 = (($334) + ($331)|0);
     HEAP8[$335>>0] = $329;
    }
    $336 = $col;
    $337 = ($336|0)<(4);
    if ($337) {
     $338 = $val;
     $339 = $338&255;
     $340 = $col;
     $341 = (($340) - 2)|0;
     $342 = $row;
     $343 = (($342) + 2)|0;
     $344 = (($pixel) + (($343*644)|0)|0);
     $345 = (($344) + ($341)|0);
     HEAP8[$345>>0] = $339;
    }
    $346 = $col;
    $347 = (($346) + 2)|0;
    $col = $347;
   }
   $348 = $row;
   $349 = (($348) + 2)|0;
   $row = $349;
  }
  $350 = $rb;
  $351 = (($350) + 1)|0;
  $rb = $351;
 }
 $row = 2;
 while(1) {
  $352 = $row;
  $353 = HEAP16[132112>>1]|0;
  $354 = $353&65535;
  $355 = (($354) + 2)|0;
  $356 = ($352|0)<($355|0);
  if (!($356)) {
   break;
  }
  $357 = $row;
  $358 = $357 & 1;
  $359 = (3 - ($358))|0;
  $col = $359;
  while(1) {
   $360 = $col;
   $361 = HEAP16[132120>>1]|0;
   $362 = $361&65535;
   $363 = (($362) + 2)|0;
   $364 = ($360|0)<($363|0);
   if (!($364)) {
    break;
   }
   $365 = $col;
   $366 = (($365) - 1)|0;
   $367 = $row;
   $368 = (($pixel) + (($367*644)|0)|0);
   $369 = (($368) + ($366)|0);
   $370 = HEAP8[$369>>0]|0;
   $371 = $370&255;
   $372 = $col;
   $373 = $row;
   $374 = (($pixel) + (($373*644)|0)|0);
   $375 = (($374) + ($372)|0);
   $376 = HEAP8[$375>>0]|0;
   $377 = $376&255;
   $378 = $377 << 2;
   $379 = (($371) + ($378))|0;
   $380 = $col;
   $381 = (($380) + 1)|0;
   $382 = $row;
   $383 = (($pixel) + (($382*644)|0)|0);
   $384 = (($383) + ($381)|0);
   $385 = HEAP8[$384>>0]|0;
   $386 = $385&255;
   $387 = (($379) + ($386))|0;
   $388 = $387 >> 1;
   $389 = (($388) - 256)|0;
   $val = $389;
   $390 = $val;
   $391 = ($390|0)<(255);
   if ($391) {
    $392 = $val;
    $394 = $392;
   } else {
    $394 = 255;
   }
   $393 = (0)>($394|0);
   if ($393) {
    $399 = 0;
   } else {
    $395 = $val;
    $396 = ($395|0)<(255);
    if ($396) {
     $397 = $val;
     $443 = $397;
    } else {
     $443 = 255;
    }
    $399 = $443;
   }
   $398 = $399&255;
   $400 = $col;
   $401 = $row;
   $402 = (($pixel) + (($401*644)|0)|0);
   $403 = (($402) + ($400)|0);
   HEAP8[$403>>0] = $398;
   $404 = $col;
   $405 = (($404) + 2)|0;
   $col = $405;
  }
  $406 = $row;
  $407 = (($406) + 1)|0;
  $row = $407;
 }
 $row = 0;
 while(1) {
  $408 = $row;
  $409 = HEAP16[132112>>1]|0;
  $410 = $409&65535;
  $411 = ($408|0)<($410|0);
  if (!($411)) {
   break;
  }
  $col = 0;
  while(1) {
   $412 = $col;
   $413 = HEAP16[132120>>1]|0;
   $414 = $413&65535;
   $415 = ($412|0)<($414|0);
   if (!($415)) {
    break;
   }
   $416 = $col;
   $417 = (($416) + 2)|0;
   $418 = $row;
   $419 = (($418) + 2)|0;
   $420 = (($pixel) + (($419*644)|0)|0);
   $421 = (($420) + ($417)|0);
   $422 = HEAP8[$421>>0]|0;
   $423 = $422&255;
   $424 = (159496 + ($423<<1)|0);
   $425 = HEAP16[$424>>1]|0;
   $426 = $row;
   $427 = HEAP16[132368>>1]|0;
   $428 = $427&65535;
   $429 = Math_imul($426, $428)|0;
   $430 = $col;
   $431 = (($429) + ($430))|0;
   $432 = HEAP32[132360>>2]|0;
   $433 = (($432) + ($431<<1)|0);
   HEAP16[$433>>1] = $425;
   $434 = $col;
   $435 = (($434) + 1)|0;
   $col = $435;
  }
  $436 = $row;
  $437 = (($436) + 1)|0;
  $row = $437;
 }
 HEAP32[132400>>2] = 1023;
 STACKTOP = sp;return;
}
function _kodak_radc_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0.0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0.0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0.0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0.0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $c = 0, $col = 0, $huff = 0, $i = 0, $last = 0, $mul = 0, $nreps = 0, $r = 0, $rep = 0, $row = 0, $s = 0;
 var $step = 0, $tree = 0, $val = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16752|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $huff = sp + 7016|0;
 $last = sp + 52|0;
 $mul = sp + 58|0;
 $buf = sp + 64|0;
 ;HEAP16[$last+0>>1]=HEAP16[160272+0>>1]|0;HEAP16[$last+2>>1]=HEAP16[160272+2>>1]|0;HEAP16[$last+4>>1]=HEAP16[160272+4>>1]|0;
 $i = 2;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<(12);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = (($2) - 2)|0;
  $4 = (160280 + ($3<<1)|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5&65535;
  $c = $6;
  while(1) {
   $7 = $c;
   $8 = $i;
   $9 = (160280 + ($8<<1)|0);
   $10 = HEAP16[$9>>1]|0;
   $11 = $10&65535;
   $12 = ($7|0)<=($11|0);
   if (!($12)) {
    break;
   }
   $13 = $c;
   $14 = $i;
   $15 = (($14) - 2)|0;
   $16 = (160280 + ($15<<1)|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = $17&65535;
   $19 = (($13) - ($18))|0;
   $20 = (+($19|0));
   $21 = $i;
   $22 = (160280 + ($21<<1)|0);
   $23 = HEAP16[$22>>1]|0;
   $24 = $23&65535;
   $25 = $i;
   $26 = (($25) - 2)|0;
   $27 = (160280 + ($26<<1)|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = $28&65535;
   $30 = (($24) - ($29))|0;
   $31 = (+($30|0));
   $32 = $20 / $31;
   $33 = $i;
   $34 = (($33) + 1)|0;
   $35 = (160280 + ($34<<1)|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = $36&65535;
   $38 = $i;
   $39 = (($38) - 1)|0;
   $40 = (160280 + ($39<<1)|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = $41&65535;
   $43 = (($37) - ($42))|0;
   $44 = (+($43|0));
   $45 = $32 * $44;
   $46 = $i;
   $47 = (($46) - 1)|0;
   $48 = (160280 + ($47<<1)|0);
   $49 = HEAP16[$48>>1]|0;
   $50 = $49&65535;
   $51 = (+($50|0));
   $52 = $45 + $51;
   $53 = $52;
   $54 = $53 + 0.5;
   $55 = (~~(($54))&65535);
   $56 = $c;
   $57 = (968 + ($56<<1)|0);
   HEAP16[$57>>1] = $55;
   $58 = $c;
   $59 = (($58) + 1)|0;
   $c = $59;
  }
  $60 = $i;
  $61 = (($60) + 2)|0;
  $i = $61;
 }
 $i = 0;
 $s = 0;
 while(1) {
  $62 = $i;
  $63 = ($62>>>0)<(260);
  if (!($63)) {
   break;
  }
  $c = 0;
  while(1) {
   $64 = $c;
   $65 = $i;
   $66 = (160008 + ($65)|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = $67 << 24 >> 24;
   $69 = 256 >> $68;
   $70 = ($64|0)<($69|0);
   if (!($70)) {
    break;
   }
   $71 = $i;
   $72 = (160008 + ($71)|0);
   $73 = HEAP8[$72>>0]|0;
   $74 = $73 << 24 >> 24;
   $75 = $74 << 8;
   $76 = $i;
   $77 = (($76) + 1)|0;
   $78 = (160008 + ($77)|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79&255;
   $81 = $75 | $80;
   $82 = $81&65535;
   $83 = $s;
   $84 = (($83) + 1)|0;
   $s = $84;
   $85 = (($huff) + ($83<<1)|0);
   HEAP16[$85>>1] = $82;
   $86 = $c;
   $87 = (($86) + 1)|0;
   $c = $87;
  }
  $88 = $i;
  $89 = (($88) + 2)|0;
  $i = $89;
 }
 $90 = HEAP32[160304>>2]|0;
 $91 = ($90|0)==(243);
 $92 = $91 ? 2 : 3;
 $s = $92;
 $c = 0;
 while(1) {
  $93 = $c;
  $94 = ($93|0)<(256);
  if (!($94)) {
   break;
  }
  $95 = $s;
  $96 = (8 - ($95))|0;
  $97 = $96 << 8;
  $98 = $c;
  $99 = $s;
  $100 = $98 >> $99;
  $101 = $s;
  $102 = $100 << $101;
  $103 = $97 | $102;
  $104 = $s;
  $105 = (($104) - 1)|0;
  $106 = 1 << $105;
  $107 = $103 | $106;
  $108 = $107&65535;
  $109 = $c;
  $110 = (($huff) + 9216|0);
  $111 = (($110) + ($109<<1)|0);
  HEAP16[$111>>1] = $108;
  $112 = $c;
  $113 = (($112) + 1)|0;
  $c = $113;
 }
 (_getbithuff(-1,0)|0);
 $i = 0;
 while(1) {
  $114 = $i;
  $115 = ($114>>>0)<(3474);
  if (!($115)) {
   break;
  }
  $116 = $i;
  $117 = (($buf) + ($116<<1)|0);
  HEAP16[$117>>1] = 2048;
  $118 = $i;
  $119 = (($118) + 1)|0;
  $i = $119;
 }
 $row = 0;
 while(1) {
  $120 = $row;
  $121 = HEAP16[132112>>1]|0;
  $122 = $121&65535;
  $123 = ($120|0)<($122|0);
  if (!($123)) {
   break;
  }
  $c = 0;
  while(1) {
   $124 = $c;
   $125 = ($124|0)<(3);
   if (!($125)) {
    break;
   }
   $126 = (_getbithuff(6,0)|0);
   $127 = $126&65535;
   $128 = $c;
   $129 = (($mul) + ($128<<1)|0);
   HEAP16[$129>>1] = $127;
   $130 = $c;
   $131 = (($130) + 1)|0;
   $c = $131;
  }
  $c = 0;
  while(1) {
   $132 = $c;
   $133 = ($132|0)<(3);
   if (!($133)) {
    break;
   }
   $134 = $c;
   $135 = (($last) + ($134<<1)|0);
   $136 = HEAP16[$135>>1]|0;
   $137 = $136 << 16 >> 16;
   $138 = (16777216 / ($137|0))&-1;
   $139 = (($138) + 2047)|0;
   $140 = $139 >> 12;
   $141 = $c;
   $142 = (($mul) + ($141<<1)|0);
   $143 = HEAP16[$142>>1]|0;
   $144 = $143 << 16 >> 16;
   $145 = Math_imul($140, $144)|0;
   $val = $145;
   $146 = $val;
   $147 = ($146|0)>(65564);
   $148 = $147 ? 10 : 12;
   $s = $148;
   $149 = $s;
   $150 = (($149) - 1)|0;
   $151 = -1 << $150;
   $152 = $151 ^ -1;
   $x = $152;
   $153 = $s;
   $154 = (12 - ($153))|0;
   $155 = $val;
   $156 = $155 << $154;
   $val = $156;
   $i = 0;
   while(1) {
    $157 = $i;
    $158 = ($157>>>0)<(1158);
    if (!($158)) {
     break;
    }
    $159 = $i;
    $160 = $c;
    $161 = (($buf) + (($160*2316)|0)|0);
    $162 = (($161) + ($159<<1)|0);
    $163 = HEAP16[$162>>1]|0;
    $164 = $163 << 16 >> 16;
    $165 = $val;
    $166 = Math_imul($164, $165)|0;
    $167 = $x;
    $168 = (($166) + ($167))|0;
    $169 = $s;
    $170 = $168 >> $169;
    $171 = $170&65535;
    $172 = $i;
    $173 = $c;
    $174 = (($buf) + (($173*2316)|0)|0);
    $175 = (($174) + ($172<<1)|0);
    HEAP16[$175>>1] = $171;
    $176 = $i;
    $177 = (($176) + 1)|0;
    $i = $177;
   }
   $178 = $c;
   $179 = (($mul) + ($178<<1)|0);
   $180 = HEAP16[$179>>1]|0;
   $181 = $c;
   $182 = (($last) + ($181<<1)|0);
   HEAP16[$182>>1] = $180;
   $r = 0;
   while(1) {
    $183 = $r;
    $184 = $c;
    $185 = ($184|0)!=(0);
    $186 = $185 ^ 1;
    $187 = $186&1;
    $188 = ($183|0)<=($187|0);
    if (!($188)) {
     break;
    }
    $189 = $c;
    $190 = (($mul) + ($189<<1)|0);
    $191 = HEAP16[$190>>1]|0;
    $192 = $191 << 16 >> 16;
    $193 = $192 << 7;
    $194 = $193&65535;
    $195 = HEAP16[132120>>1]|0;
    $196 = $195&65535;
    $197 = (($196|0) / 2)&-1;
    $198 = $c;
    $199 = (($buf) + (($198*2316)|0)|0);
    $200 = (($199) + 1544|0);
    $201 = (($200) + ($197<<1)|0);
    HEAP16[$201>>1] = $194;
    $202 = HEAP16[132120>>1]|0;
    $203 = $202&65535;
    $204 = (($203|0) / 2)&-1;
    $205 = $c;
    $206 = (($buf) + (($205*2316)|0)|0);
    $207 = (($206) + 772|0);
    $208 = (($207) + ($204<<1)|0);
    HEAP16[$208>>1] = $194;
    $tree = 1;
    $209 = HEAP16[132120>>1]|0;
    $210 = $209&65535;
    $211 = (($210|0) / 2)&-1;
    $col = $211;
    while(1) {
     $212 = $col;
     $213 = ($212|0)>(0);
     if (!($213)) {
      break;
     }
     $214 = $tree;
     $215 = (($huff) + ($214<<9)|0);
     $216 = (_getbithuff(8,$215)|0);
     $217 = $216&255;
     $218 = $217 << 24 >> 24;
     $tree = $218;
     $219 = ($218|0)!=(0);
     if ($219) {
      $220 = $col;
      $221 = (($220) - 2)|0;
      $col = $221;
      $222 = $tree;
      $223 = ($222|0)==(8);
      if ($223) {
       $y = 1;
       while(1) {
        $224 = $y;
        $225 = ($224|0)<(3);
        if (!($225)) {
         break;
        }
        $226 = $col;
        $227 = (($226) + 1)|0;
        $x = $227;
        while(1) {
         $228 = $x;
         $229 = $col;
         $230 = ($228|0)>=($229|0);
         if (!($230)) {
          break;
         }
         $231 = (($huff) + 9216|0);
         $232 = (_getbithuff(8,$231)|0);
         $233 = $232&255;
         $234 = $233&255;
         $235 = $c;
         $236 = (($mul) + ($235<<1)|0);
         $237 = HEAP16[$236>>1]|0;
         $238 = $237 << 16 >> 16;
         $239 = Math_imul($234, $238)|0;
         $240 = $239&65535;
         $241 = $x;
         $242 = $y;
         $243 = $c;
         $244 = (($buf) + (($243*2316)|0)|0);
         $245 = (($244) + (($242*772)|0)|0);
         $246 = (($245) + ($241<<1)|0);
         HEAP16[$246>>1] = $240;
         $247 = $x;
         $248 = (($247) + -1)|0;
         $x = $248;
        }
        $249 = $y;
        $250 = (($249) + 1)|0;
        $y = $250;
       }
      } else {
       $y = 1;
       while(1) {
        $251 = $y;
        $252 = ($251|0)<(3);
        if (!($252)) {
         break;
        }
        $253 = $col;
        $254 = (($253) + 1)|0;
        $x = $254;
        while(1) {
         $255 = $x;
         $256 = $col;
         $257 = ($255|0)>=($256|0);
         if (!($257)) {
          break;
         }
         $258 = $tree;
         $259 = (($258) + 10)|0;
         $260 = (($huff) + ($259<<9)|0);
         $261 = (_getbithuff(8,$260)|0);
         $262 = $261&255;
         $263 = $262 << 24 >> 24;
         $264 = $263<<4;
         $265 = $c;
         $266 = ($265|0)!=(0);
         if ($266) {
          $267 = $x;
          $268 = $y;
          $269 = (($268) - 1)|0;
          $270 = $c;
          $271 = (($buf) + (($270*2316)|0)|0);
          $272 = (($271) + (($269*772)|0)|0);
          $273 = (($272) + ($267<<1)|0);
          $274 = HEAP16[$273>>1]|0;
          $275 = $274 << 16 >> 16;
          $276 = $x;
          $277 = (($276) + 1)|0;
          $278 = $y;
          $279 = $c;
          $280 = (($buf) + (($279*2316)|0)|0);
          $281 = (($280) + (($278*772)|0)|0);
          $282 = (($281) + ($277<<1)|0);
          $283 = HEAP16[$282>>1]|0;
          $284 = $283 << 16 >> 16;
          $285 = (($275) + ($284))|0;
          $286 = (($285|0) / 2)&-1;
          $320 = $286;
         } else {
          $287 = $x;
          $288 = (($287) + 1)|0;
          $289 = $y;
          $290 = (($289) - 1)|0;
          $291 = $c;
          $292 = (($buf) + (($291*2316)|0)|0);
          $293 = (($292) + (($290*772)|0)|0);
          $294 = (($293) + ($288<<1)|0);
          $295 = HEAP16[$294>>1]|0;
          $296 = $295 << 16 >> 16;
          $297 = $x;
          $298 = $y;
          $299 = (($298) - 1)|0;
          $300 = $c;
          $301 = (($buf) + (($300*2316)|0)|0);
          $302 = (($301) + (($299*772)|0)|0);
          $303 = (($302) + ($297<<1)|0);
          $304 = HEAP16[$303>>1]|0;
          $305 = $304 << 16 >> 16;
          $306 = $305<<1;
          $307 = (($296) + ($306))|0;
          $308 = $x;
          $309 = (($308) + 1)|0;
          $310 = $y;
          $311 = $c;
          $312 = (($buf) + (($311*2316)|0)|0);
          $313 = (($312) + (($310*772)|0)|0);
          $314 = (($313) + ($309<<1)|0);
          $315 = HEAP16[$314>>1]|0;
          $316 = $315 << 16 >> 16;
          $317 = (($307) + ($316))|0;
          $318 = (($317|0) / 4)&-1;
          $320 = $318;
         }
         $319 = (($264) + ($320))|0;
         $321 = $319&65535;
         $322 = $x;
         $323 = $y;
         $324 = $c;
         $325 = (($buf) + (($324*2316)|0)|0);
         $326 = (($325) + (($323*772)|0)|0);
         $327 = (($326) + ($322<<1)|0);
         HEAP16[$327>>1] = $321;
         $328 = $x;
         $329 = (($328) + -1)|0;
         $x = $329;
        }
        $330 = $y;
        $331 = (($330) + 1)|0;
        $y = $331;
       }
      }
     } else {
      while(1) {
       $332 = $col;
       $333 = ($332|0)>(2);
       if ($333) {
        $334 = (($huff) + 4608|0);
        $335 = (_getbithuff(8,$334)|0);
        $336 = $335&255;
        $337 = $336 << 24 >> 24;
        $338 = (($337) + 1)|0;
        $339 = $338;
       } else {
        $339 = 1;
       }
       $nreps = $339;
       $rep = 0;
       while(1) {
        $340 = $rep;
        $341 = ($340|0)<(8);
        if ($341) {
         $342 = $rep;
         $343 = $nreps;
         $344 = ($342|0)<($343|0);
         if ($344) {
          $345 = $col;
          $346 = ($345|0)>(0);
          $647 = $346;
         } else {
          $647 = 0;
         }
        } else {
         $647 = 0;
        }
        if (!($647)) {
         break;
        }
        $347 = $col;
        $348 = (($347) - 2)|0;
        $col = $348;
        $y = 1;
        while(1) {
         $349 = $y;
         $350 = ($349|0)<(3);
         if (!($350)) {
          break;
         }
         $351 = $col;
         $352 = (($351) + 1)|0;
         $x = $352;
         while(1) {
          $353 = $x;
          $354 = $col;
          $355 = ($353|0)>=($354|0);
          if (!($355)) {
           break;
          }
          $356 = $c;
          $357 = ($356|0)!=(0);
          if ($357) {
           $358 = $x;
           $359 = $y;
           $360 = (($359) - 1)|0;
           $361 = $c;
           $362 = (($buf) + (($361*2316)|0)|0);
           $363 = (($362) + (($360*772)|0)|0);
           $364 = (($363) + ($358<<1)|0);
           $365 = HEAP16[$364>>1]|0;
           $366 = $365 << 16 >> 16;
           $367 = $x;
           $368 = (($367) + 1)|0;
           $369 = $y;
           $370 = $c;
           $371 = (($buf) + (($370*2316)|0)|0);
           $372 = (($371) + (($369*772)|0)|0);
           $373 = (($372) + ($368<<1)|0);
           $374 = HEAP16[$373>>1]|0;
           $375 = $374 << 16 >> 16;
           $376 = (($366) + ($375))|0;
           $377 = (($376|0) / 2)&-1;
           $411 = $377;
          } else {
           $378 = $x;
           $379 = (($378) + 1)|0;
           $380 = $y;
           $381 = (($380) - 1)|0;
           $382 = $c;
           $383 = (($buf) + (($382*2316)|0)|0);
           $384 = (($383) + (($381*772)|0)|0);
           $385 = (($384) + ($379<<1)|0);
           $386 = HEAP16[$385>>1]|0;
           $387 = $386 << 16 >> 16;
           $388 = $x;
           $389 = $y;
           $390 = (($389) - 1)|0;
           $391 = $c;
           $392 = (($buf) + (($391*2316)|0)|0);
           $393 = (($392) + (($390*772)|0)|0);
           $394 = (($393) + ($388<<1)|0);
           $395 = HEAP16[$394>>1]|0;
           $396 = $395 << 16 >> 16;
           $397 = $396<<1;
           $398 = (($387) + ($397))|0;
           $399 = $x;
           $400 = (($399) + 1)|0;
           $401 = $y;
           $402 = $c;
           $403 = (($buf) + (($402*2316)|0)|0);
           $404 = (($403) + (($401*772)|0)|0);
           $405 = (($404) + ($400<<1)|0);
           $406 = HEAP16[$405>>1]|0;
           $407 = $406 << 16 >> 16;
           $408 = (($398) + ($407))|0;
           $409 = (($408|0) / 4)&-1;
           $411 = $409;
          }
          $410 = $411&65535;
          $412 = $x;
          $413 = $y;
          $414 = $c;
          $415 = (($buf) + (($414*2316)|0)|0);
          $416 = (($415) + (($413*772)|0)|0);
          $417 = (($416) + ($412<<1)|0);
          HEAP16[$417>>1] = $410;
          $418 = $x;
          $419 = (($418) + -1)|0;
          $x = $419;
         }
         $420 = $y;
         $421 = (($420) + 1)|0;
         $y = $421;
        }
        $422 = $rep;
        $423 = $422 & 1;
        $424 = ($423|0)!=(0);
        if ($424) {
         $425 = (($huff) + 5120|0);
         $426 = (_getbithuff(8,$425)|0);
         $427 = $426&255;
         $428 = $427 << 24 >> 24;
         $429 = $428 << 4;
         $step = $429;
         $y = 1;
         while(1) {
          $430 = $y;
          $431 = ($430|0)<(3);
          if (!($431)) {
           break;
          }
          $432 = $col;
          $433 = (($432) + 1)|0;
          $x = $433;
          while(1) {
           $434 = $x;
           $435 = $col;
           $436 = ($434|0)>=($435|0);
           if (!($436)) {
            break;
           }
           $437 = $step;
           $438 = $x;
           $439 = $y;
           $440 = $c;
           $441 = (($buf) + (($440*2316)|0)|0);
           $442 = (($441) + (($439*772)|0)|0);
           $443 = (($442) + ($438<<1)|0);
           $444 = HEAP16[$443>>1]|0;
           $445 = $444 << 16 >> 16;
           $446 = (($445) + ($437))|0;
           $447 = $446&65535;
           HEAP16[$443>>1] = $447;
           $448 = $x;
           $449 = (($448) + -1)|0;
           $x = $449;
          }
          $450 = $y;
          $451 = (($450) + 1)|0;
          $y = $451;
         }
        }
        $452 = $rep;
        $453 = (($452) + 1)|0;
        $rep = $453;
       }
       $454 = $nreps;
       $455 = ($454|0)==(9);
       if (!($455)) {
        break;
       }
      }
     }
    }
    $y = 0;
    while(1) {
     $456 = $y;
     $457 = ($456|0)<(2);
     if (!($457)) {
      break;
     }
     $x = 0;
     while(1) {
      $458 = $x;
      $459 = HEAP16[132120>>1]|0;
      $460 = $459&65535;
      $461 = (($460|0) / 2)&-1;
      $462 = ($458|0)<($461|0);
      if (!($462)) {
       break;
      }
      $463 = $x;
      $464 = $y;
      $465 = (($464) + 1)|0;
      $466 = $c;
      $467 = (($buf) + (($466*2316)|0)|0);
      $468 = (($467) + (($465*772)|0)|0);
      $469 = (($468) + ($463<<1)|0);
      $470 = HEAP16[$469>>1]|0;
      $471 = $470 << 16 >> 16;
      $472 = $471 << 4;
      $473 = $c;
      $474 = (($mul) + ($473<<1)|0);
      $475 = HEAP16[$474>>1]|0;
      $476 = $475 << 16 >> 16;
      $477 = (($472|0) / ($476|0))&-1;
      $val = $477;
      $478 = $val;
      $479 = ($478|0)<(0);
      if ($479) {
       $val = 0;
      }
      $480 = $c;
      $481 = ($480|0)!=(0);
      if ($481) {
       $482 = $val;
       $483 = $482&65535;
       $484 = $row;
       $485 = $y;
       $486 = $485<<1;
       $487 = (($484) + ($486))|0;
       $488 = $c;
       $489 = (($487) + ($488))|0;
       $490 = (($489) - 1)|0;
       $491 = HEAP16[132368>>1]|0;
       $492 = $491&65535;
       $493 = Math_imul($490, $492)|0;
       $494 = $x;
       $495 = $494<<1;
       $496 = (($495) + 2)|0;
       $497 = $c;
       $498 = (($496) - ($497))|0;
       $499 = (($493) + ($498))|0;
       $500 = HEAP32[132360>>2]|0;
       $501 = (($500) + ($499<<1)|0);
       HEAP16[$501>>1] = $483;
      } else {
       $502 = $val;
       $503 = $502&65535;
       $504 = $row;
       $505 = $r;
       $506 = $505<<1;
       $507 = (($504) + ($506))|0;
       $508 = $y;
       $509 = (($507) + ($508))|0;
       $510 = HEAP16[132368>>1]|0;
       $511 = $510&65535;
       $512 = Math_imul($509, $511)|0;
       $513 = $x;
       $514 = $513<<1;
       $515 = $y;
       $516 = (($514) + ($515))|0;
       $517 = (($512) + ($516))|0;
       $518 = HEAP32[132360>>2]|0;
       $519 = (($518) + ($517<<1)|0);
       HEAP16[$519>>1] = $503;
      }
      $520 = $x;
      $521 = (($520) + 1)|0;
      $x = $521;
     }
     $522 = $y;
     $523 = (($522) + 1)|0;
     $y = $523;
    }
    $524 = $c;
    $525 = (($buf) + (($524*2316)|0)|0);
    $526 = $c;
    $527 = ($526|0)!=(0);
    $528 = $527 ^ 1;
    $529 = $528&1;
    $530 = (($525) + ($529<<1)|0);
    $531 = $c;
    $532 = (($buf) + (($531*2316)|0)|0);
    $533 = (($532) + 1544|0);
    $534 = $c;
    $535 = ($534|0)!=(0);
    $536 = $535 ^ 1;
    $537 = $536&1;
    $538 = $537<<1;
    $539 = (772 - ($538))|0;
    _memcpy(($530|0),($533|0),($539|0))|0;
    $540 = $r;
    $541 = (($540) + 1)|0;
    $r = $541;
   }
   $542 = $c;
   $543 = (($542) + 1)|0;
   $c = $543;
  }
  $544 = $row;
  $y = $544;
  while(1) {
   $545 = $y;
   $546 = $row;
   $547 = (($546) + 4)|0;
   $548 = ($545|0)<($547|0);
   if (!($548)) {
    break;
   }
   $x = 0;
   while(1) {
    $549 = $x;
    $550 = HEAP16[132120>>1]|0;
    $551 = $550&65535;
    $552 = ($549|0)<($551|0);
    if (!($552)) {
     break;
    }
    $553 = $x;
    $554 = $y;
    $555 = (($553) + ($554))|0;
    $556 = $555 & 1;
    $557 = ($556|0)!=(0);
    if ($557) {
     $558 = $x;
     $559 = ($558|0)!=(0);
     if ($559) {
      $560 = $x;
      $561 = (($560) - 1)|0;
      $564 = $561;
     } else {
      $562 = $x;
      $563 = (($562) + 1)|0;
      $564 = $563;
     }
     $r = $564;
     $565 = $x;
     $566 = (($565) + 1)|0;
     $567 = HEAP16[132120>>1]|0;
     $568 = $567&65535;
     $569 = ($566|0)<($568|0);
     if ($569) {
      $570 = $x;
      $571 = (($570) + 1)|0;
      $574 = $571;
     } else {
      $572 = $x;
      $573 = (($572) - 1)|0;
      $574 = $573;
     }
     $s = $574;
     $575 = $y;
     $576 = HEAP16[132368>>1]|0;
     $577 = $576&65535;
     $578 = Math_imul($575, $577)|0;
     $579 = $x;
     $580 = (($578) + ($579))|0;
     $581 = HEAP32[132360>>2]|0;
     $582 = (($581) + ($580<<1)|0);
     $583 = HEAP16[$582>>1]|0;
     $584 = $583&65535;
     $585 = (($584) - 2048)|0;
     $586 = $585<<1;
     $587 = $y;
     $588 = HEAP16[132368>>1]|0;
     $589 = $588&65535;
     $590 = Math_imul($587, $589)|0;
     $591 = $r;
     $592 = (($590) + ($591))|0;
     $593 = HEAP32[132360>>2]|0;
     $594 = (($593) + ($592<<1)|0);
     $595 = HEAP16[$594>>1]|0;
     $596 = $595&65535;
     $597 = $y;
     $598 = HEAP16[132368>>1]|0;
     $599 = $598&65535;
     $600 = Math_imul($597, $599)|0;
     $601 = $s;
     $602 = (($600) + ($601))|0;
     $603 = HEAP32[132360>>2]|0;
     $604 = (($603) + ($602<<1)|0);
     $605 = HEAP16[$604>>1]|0;
     $606 = $605&65535;
     $607 = (($596) + ($606))|0;
     $608 = (($607|0) / 2)&-1;
     $609 = (($586) + ($608))|0;
     $val = $609;
     $610 = $val;
     $611 = ($610|0)<(0);
     if ($611) {
      $val = 0;
     }
     $612 = $val;
     $613 = $612&65535;
     $614 = $y;
     $615 = HEAP16[132368>>1]|0;
     $616 = $615&65535;
     $617 = Math_imul($614, $616)|0;
     $618 = $x;
     $619 = (($617) + ($618))|0;
     $620 = HEAP32[132360>>2]|0;
     $621 = (($620) + ($619<<1)|0);
     HEAP16[$621>>1] = $613;
    }
    $622 = $x;
    $623 = (($622) + 1)|0;
    $x = $623;
   }
   $624 = $y;
   $625 = (($624) + 1)|0;
   $y = $625;
  }
  $626 = $row;
  $627 = (($626) + 4)|0;
  $row = $627;
 }
 $i = 0;
 while(1) {
  $628 = $i;
  $629 = HEAP16[132112>>1]|0;
  $630 = $629&65535;
  $631 = HEAP16[132120>>1]|0;
  $632 = $631&65535;
  $633 = Math_imul($630, $632)|0;
  $634 = ($628|0)<($633|0);
  if (!($634)) {
   break;
  }
  $635 = $i;
  $636 = HEAP32[132360>>2]|0;
  $637 = (($636) + ($635<<1)|0);
  $638 = HEAP16[$637>>1]|0;
  $639 = $638&65535;
  $640 = (968 + ($639<<1)|0);
  $641 = HEAP16[$640>>1]|0;
  $642 = $i;
  $643 = HEAP32[132360>>2]|0;
  $644 = (($643) + ($642<<1)|0);
  HEAP16[$644>>1] = $641;
  $645 = $i;
  $646 = (($645) + 1)|0;
  $i = $646;
 }
 HEAP32[132400>>2] = 16383;
 STACKTOP = sp;return;
}
function _kodak_jpeg_load_raw() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _lossy_dng_load_raw() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _kodak_dc120_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $col = 0, $pixel = 0, $row = 0, $shift = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pixel = sp + 16|0;
 $row = 0;
 while(1) {
  $0 = $row;
  $1 = HEAP16[132112>>1]|0;
  $2 = $1&65535;
  $3 = ($0|0)<($2|0);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[880>>2]|0;
  $5 = (_fread(($pixel|0),1,848,($4|0))|0);
  $6 = ($5>>>0)<(848);
  if ($6) {
   _derror();
  }
  $7 = $row;
  $8 = $row;
  $9 = $8 & 3;
  $10 = (160312 + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = Math_imul($7, $11)|0;
  $13 = $row;
  $14 = $13 & 3;
  $15 = (160328 + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($12) + ($16))|0;
  $shift = $17;
  $col = 0;
  while(1) {
   $18 = $col;
   $19 = HEAP16[132120>>1]|0;
   $20 = $19&65535;
   $21 = ($18|0)<($20|0);
   if (!($21)) {
    break;
   }
   $22 = $col;
   $23 = $shift;
   $24 = (($22) + ($23))|0;
   $25 = (($24|0) % 848)&-1;
   $26 = (($pixel) + ($25)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $row;
   $30 = HEAP16[132368>>1]|0;
   $31 = $30&65535;
   $32 = Math_imul($29, $31)|0;
   $33 = $col;
   $34 = (($32) + ($33))|0;
   $35 = HEAP32[132360>>2]|0;
   $36 = (($35) + ($34<<1)|0);
   HEAP16[$36>>1] = $28;
   $37 = $col;
   $38 = (($37) + 1)|0;
   $col = $38;
  }
  $39 = $row;
  $40 = (($39) + 1)|0;
  $row = $40;
 }
 HEAP32[132400>>2] = 255;
 STACKTOP = sp;return;
}
function _eight_bit_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $col = 0, $pixel = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP16[132368>>1]|0;
 $1 = $0&65535;
 $2 = (_calloc($1,1)|0);
 $pixel = $2;
 $3 = $pixel;
 _merror($3,160344);
 $row = 0;
 while(1) {
  $4 = $row;
  $5 = HEAP16[133096>>1]|0;
  $6 = $5&65535;
  $7 = ($4>>>0)<($6>>>0);
  if (!($7)) {
   break;
  }
  $8 = $pixel;
  $9 = HEAP16[132368>>1]|0;
  $10 = $9&65535;
  $11 = HEAP32[880>>2]|0;
  $12 = (_fread(($8|0),1,($10|0),($11|0))|0);
  $13 = HEAP16[132368>>1]|0;
  $14 = $13&65535;
  $15 = ($12>>>0)<($14>>>0);
  if ($15) {
   _derror();
  }
  $col = 0;
  while(1) {
   $16 = $col;
   $17 = HEAP16[132368>>1]|0;
   $18 = $17&65535;
   $19 = ($16>>>0)<($18>>>0);
   if (!($19)) {
    break;
   }
   $20 = $col;
   $21 = $pixel;
   $22 = (($21) + ($20)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = (968 + ($24<<1)|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = $row;
   $28 = HEAP16[132368>>1]|0;
   $29 = $28&65535;
   $30 = Math_imul($27, $29)|0;
   $31 = $col;
   $32 = (($30) + ($31))|0;
   $33 = HEAP32[132360>>2]|0;
   $34 = (($33) + ($32<<1)|0);
   HEAP16[$34>>1] = $26;
   $35 = $col;
   $36 = (($35) + 1)|0;
   $col = $36;
  }
  $37 = $row;
  $38 = (($37) + 1)|0;
  $row = $38;
 }
 $39 = $pixel;
 _free($39);
 $40 = HEAP16[((968 + 510|0))>>1]|0;
 $41 = $40&65535;
 HEAP32[132400>>2] = $41;
 STACKTOP = sp;return;
}
function _kodak_c330_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $cb = 0, $col = 0, $cr = 0, $pixel = 0, $rgb = 0, $row = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rgb = sp + 20|0;
 $0 = HEAP16[132368>>1]|0;
 $1 = $0&65535;
 $2 = (_calloc($1,2)|0);
 $pixel = $2;
 $3 = $pixel;
 _merror($3,160368);
 $row = 0;
 while(1) {
  $4 = $row;
  $5 = HEAP16[132112>>1]|0;
  $6 = $5&65535;
  $7 = ($4|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $pixel;
  $9 = HEAP16[132368>>1]|0;
  $10 = $9&65535;
  $11 = HEAP32[880>>2]|0;
  $12 = (_fread(($8|0),($10|0),2,($11|0))|0);
  $13 = ($12>>>0)<(2);
  if ($13) {
   _derror();
  }
  $14 = HEAP32[133128>>2]|0;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $row;
   $17 = $16 & 31;
   $18 = ($17|0)==(31);
   if ($18) {
    $19 = HEAP32[880>>2]|0;
    $20 = HEAP16[132368>>1]|0;
    $21 = $20&65535;
    $22 = $21<<5;
    (_fseek(($19|0),($22|0),1)|0);
   }
  }
  $col = 0;
  while(1) {
   $23 = $col;
   $24 = HEAP16[132120>>1]|0;
   $25 = $24&65535;
   $26 = ($23|0)<($25|0);
   if (!($26)) {
    break;
   }
   $27 = $col;
   $28 = $27<<1;
   $29 = $pixel;
   $30 = (($29) + ($28)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $y = $32;
   $33 = $col;
   $34 = $33<<1;
   $35 = $34 & -4;
   $36 = $35 | 1;
   $37 = $pixel;
   $38 = (($37) + ($36)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = (($40) - 128)|0;
   $cb = $41;
   $42 = $col;
   $43 = $42<<1;
   $44 = $43 & -4;
   $45 = $44 | 3;
   $46 = $pixel;
   $47 = (($46) + ($45)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = (($49) - 128)|0;
   $cr = $50;
   $51 = $y;
   $52 = $cb;
   $53 = $cr;
   $54 = (($52) + ($53))|0;
   $55 = (($54) + 2)|0;
   $56 = $55 >> 2;
   $57 = (($51) - ($56))|0;
   $58 = (($rgb) + 4|0);
   HEAP32[$58>>2] = $57;
   $59 = (($rgb) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $cb;
   $62 = (($60) + ($61))|0;
   $63 = (($rgb) + 8|0);
   HEAP32[$63>>2] = $62;
   $64 = (($rgb) + 4|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $cr;
   $67 = (($65) + ($66))|0;
   HEAP32[$rgb>>2] = $67;
   $c = 0;
   while(1) {
    $68 = $c;
    $69 = ($68|0)<(3);
    if (!($69)) {
     break;
    }
    $70 = $c;
    $71 = (($rgb) + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)<(255);
    if ($73) {
     $74 = $c;
     $75 = (($rgb) + ($74<<2)|0);
     $76 = HEAP32[$75>>2]|0;
     $78 = $76;
    } else {
     $78 = 255;
    }
    $77 = (0)>($78|0);
    if ($77) {
     $87 = 0;
    } else {
     $79 = $c;
     $80 = (($rgb) + ($79<<2)|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)<(255);
     if ($82) {
      $83 = $c;
      $84 = (($rgb) + ($83<<2)|0);
      $85 = HEAP32[$84>>2]|0;
      $108 = $85;
     } else {
      $108 = 255;
     }
     $87 = $108;
    }
    $86 = (968 + ($87<<1)|0);
    $88 = HEAP16[$86>>1]|0;
    $89 = $c;
    $90 = $row;
    $91 = HEAP16[132120>>1]|0;
    $92 = $91&65535;
    $93 = Math_imul($90, $92)|0;
    $94 = $col;
    $95 = (($93) + ($94))|0;
    $96 = HEAP32[132144>>2]|0;
    $97 = (($96) + ($95<<3)|0);
    $98 = (($97) + ($89<<1)|0);
    HEAP16[$98>>1] = $88;
    $99 = $c;
    $100 = (($99) + 1)|0;
    $c = $100;
   }
   $101 = $col;
   $102 = (($101) + 1)|0;
   $col = $102;
  }
  $103 = $row;
  $104 = (($103) + 1)|0;
  $row = $104;
 }
 $105 = $pixel;
 _free($105);
 $106 = HEAP16[((968 + 510|0))>>1]|0;
 $107 = $106&65535;
 HEAP32[132400>>2] = $107;
 STACKTOP = sp;return;
}
function _kodak_c603_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $cb = 0, $col = 0, $cr = 0, $pixel = 0, $rgb = 0, $row = 0;
 var $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rgb = sp + 20|0;
 $0 = HEAP16[132368>>1]|0;
 $1 = $0&65535;
 $2 = (_calloc($1,3)|0);
 $pixel = $2;
 $3 = $pixel;
 _merror($3,160392);
 $row = 0;
 while(1) {
  $4 = $row;
  $5 = HEAP16[132112>>1]|0;
  $6 = $5&65535;
  $7 = ($4|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $row;
  $9 = $8 ^ -1;
  $10 = $9 & 1;
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = $pixel;
   $13 = HEAP16[132368>>1]|0;
   $14 = $13&65535;
   $15 = HEAP32[880>>2]|0;
   $16 = (_fread(($12|0),($14|0),3,($15|0))|0);
   $17 = ($16>>>0)<(3);
   if ($17) {
    _derror();
   }
  }
  $col = 0;
  while(1) {
   $18 = $col;
   $19 = HEAP16[132120>>1]|0;
   $20 = $19&65535;
   $21 = ($18|0)<($20|0);
   if (!($21)) {
    break;
   }
   $22 = HEAP16[132120>>1]|0;
   $23 = $22&65535;
   $24 = $23<<1;
   $25 = $row;
   $26 = $25 & 1;
   $27 = Math_imul($24, $26)|0;
   $28 = $col;
   $29 = (($27) + ($28))|0;
   $30 = $pixel;
   $31 = (($30) + ($29)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $y = $33;
   $34 = HEAP16[132120>>1]|0;
   $35 = $34&65535;
   $36 = $col;
   $37 = $36 & -2;
   $38 = (($35) + ($37))|0;
   $39 = $pixel;
   $40 = (($39) + ($38)|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = (($42) - 128)|0;
   $cb = $43;
   $44 = HEAP16[132120>>1]|0;
   $45 = $44&65535;
   $46 = $col;
   $47 = $46 & -2;
   $48 = (($45) + ($47))|0;
   $49 = (($48) + 1)|0;
   $50 = $pixel;
   $51 = (($50) + ($49)|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = (($53) - 128)|0;
   $cr = $54;
   $55 = $y;
   $56 = $cb;
   $57 = $cr;
   $58 = (($56) + ($57))|0;
   $59 = (($58) + 2)|0;
   $60 = $59 >> 2;
   $61 = (($55) - ($60))|0;
   $62 = (($rgb) + 4|0);
   HEAP32[$62>>2] = $61;
   $63 = (($rgb) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $cb;
   $66 = (($64) + ($65))|0;
   $67 = (($rgb) + 8|0);
   HEAP32[$67>>2] = $66;
   $68 = (($rgb) + 4|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $cr;
   $71 = (($69) + ($70))|0;
   HEAP32[$rgb>>2] = $71;
   $c = 0;
   while(1) {
    $72 = $c;
    $73 = ($72|0)<(3);
    if (!($73)) {
     break;
    }
    $74 = $c;
    $75 = (($rgb) + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)<(255);
    if ($77) {
     $78 = $c;
     $79 = (($rgb) + ($78<<2)|0);
     $80 = HEAP32[$79>>2]|0;
     $82 = $80;
    } else {
     $82 = 255;
    }
    $81 = (0)>($82|0);
    if ($81) {
     $91 = 0;
    } else {
     $83 = $c;
     $84 = (($rgb) + ($83<<2)|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)<(255);
     if ($86) {
      $87 = $c;
      $88 = (($rgb) + ($87<<2)|0);
      $89 = HEAP32[$88>>2]|0;
      $112 = $89;
     } else {
      $112 = 255;
     }
     $91 = $112;
    }
    $90 = (968 + ($91<<1)|0);
    $92 = HEAP16[$90>>1]|0;
    $93 = $c;
    $94 = $row;
    $95 = HEAP16[132120>>1]|0;
    $96 = $95&65535;
    $97 = Math_imul($94, $96)|0;
    $98 = $col;
    $99 = (($97) + ($98))|0;
    $100 = HEAP32[132144>>2]|0;
    $101 = (($100) + ($99<<3)|0);
    $102 = (($101) + ($93<<1)|0);
    HEAP16[$102>>1] = $92;
    $103 = $c;
    $104 = (($103) + 1)|0;
    $c = $104;
   }
   $105 = $col;
   $106 = (($105) + 1)|0;
   $col = $106;
  }
  $107 = $row;
  $108 = (($107) + 1)|0;
  $row = $108;
 }
 $109 = $pixel;
 _free($109);
 $110 = HEAP16[((968 + 510|0))>>1]|0;
 $111 = $110&65535;
 HEAP32[132400>>2] = $111;
 STACKTOP = sp;return;
}
function _kodak_262_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $chess = 0, $col = 0, $huff = 0, $ns = 0, $pi = 0, $pi1 = 0;
 var $pi2 = 0, $pixel = 0, $pred = 0, $row = 0, $strip = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $huff = sp + 48|0;
 $pi = 0;
 $c = 0;
 while(1) {
  $0 = $c;
  $1 = ($0|0)<(2);
  if (!($1)) {
   break;
  }
  $2 = $c;
  $3 = (160416 + (($2*26)|0)|0);
  $4 = (_make_decoder($3)|0);
  $5 = $c;
  $6 = (($huff) + ($5<<2)|0);
  HEAP32[$6>>2] = $4;
  $7 = $c;
  $8 = (($7) + 1)|0;
  $c = $8;
 }
 $9 = HEAP16[133096>>1]|0;
 $10 = $9&65535;
 $11 = (($10) + 63)|0;
 $12 = $11 >> 5;
 $ns = $12;
 $13 = HEAP16[132368>>1]|0;
 $14 = $13&65535;
 $15 = $14<<5;
 $16 = $ns;
 $17 = $16<<2;
 $18 = (($15) + ($17))|0;
 $19 = (_malloc($18)|0);
 $pixel = $19;
 $20 = $pixel;
 _merror($20,160472);
 $21 = $pixel;
 $22 = HEAP16[132368>>1]|0;
 $23 = $22&65535;
 $24 = $23<<5;
 $25 = (($21) + ($24)|0);
 $strip = $25;
 HEAP16[944>>1] = 19789;
 $c = 0;
 while(1) {
  $26 = $c;
  $27 = $ns;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = (_get4()|0);
  $30 = $c;
  $31 = $strip;
  $32 = (($31) + ($30<<2)|0);
  HEAP32[$32>>2] = $29;
  $33 = $c;
  $34 = (($33) + 1)|0;
  $c = $34;
 }
 $row = 0;
 while(1) {
  $35 = $row;
  $36 = HEAP16[133096>>1]|0;
  $37 = $36&65535;
  $38 = ($35|0)<($37|0);
  if (!($38)) {
   break;
  }
  $39 = $row;
  $40 = $39 & 31;
  $41 = ($40|0)==(0);
  if ($41) {
   $42 = HEAP32[880>>2]|0;
   $43 = $row;
   $44 = $43 >> 5;
   $45 = $strip;
   $46 = (($45) + ($44<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   (_fseek(($42|0),($47|0),0)|0);
   (_getbithuff(-1,0)|0);
   $pi = 0;
  }
  $col = 0;
  while(1) {
   $48 = $col;
   $49 = HEAP16[132368>>1]|0;
   $50 = $49&65535;
   $51 = ($48|0)<($50|0);
   if (!($51)) {
    break;
   }
   $52 = $row;
   $53 = $col;
   $54 = (($52) + ($53))|0;
   $55 = $54 & 1;
   $chess = $55;
   $56 = $chess;
   $57 = ($56|0)!=(0);
   if ($57) {
    $58 = $pi;
    $59 = (($58) - 2)|0;
    $65 = $59;
   } else {
    $60 = $pi;
    $61 = HEAP16[132368>>1]|0;
    $62 = $61&65535;
    $63 = (($60) - ($62))|0;
    $64 = (($63) - 1)|0;
    $65 = $64;
   }
   $pi1 = $65;
   $66 = $chess;
   $67 = ($66|0)!=(0);
   if ($67) {
    $68 = $pi;
    $69 = HEAP16[132368>>1]|0;
    $70 = $69&65535;
    $71 = $70<<1;
    $72 = (($68) - ($71))|0;
    $78 = $72;
   } else {
    $73 = $pi;
    $74 = HEAP16[132368>>1]|0;
    $75 = $74&65535;
    $76 = (($73) - ($75))|0;
    $77 = (($76) + 1)|0;
    $78 = $77;
   }
   $pi2 = $78;
   $79 = $col;
   $80 = $chess;
   $81 = ($79|0)<=($80|0);
   if ($81) {
    $pi1 = -1;
   }
   $82 = $pi1;
   $83 = ($82|0)<(0);
   if ($83) {
    $84 = $pi2;
    $pi1 = $84;
   }
   $85 = $pi2;
   $86 = ($85|0)<(0);
   if ($86) {
    $87 = $pi1;
    $pi2 = $87;
   }
   $88 = $pi1;
   $89 = ($88|0)<(0);
   if ($89) {
    $90 = $col;
    $91 = ($90|0)>(1);
    if ($91) {
     $92 = $pi;
     $93 = (($92) - 2)|0;
     $pi2 = $93;
     $pi1 = $93;
    }
   }
   $94 = $pi1;
   $95 = ($94|0)<(0);
   if ($95) {
    $108 = 0;
   } else {
    $96 = $pi1;
    $97 = $pixel;
    $98 = (($97) + ($96)|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99&255;
    $101 = $pi2;
    $102 = $pixel;
    $103 = (($102) + ($101)|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = $104&255;
    $106 = (($100) + ($105))|0;
    $107 = $106 >> 1;
    $108 = $107;
   }
   $pred = $108;
   $109 = $pred;
   $110 = $chess;
   $111 = (($huff) + ($110<<2)|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = (_ljpeg_diff($112)|0);
   $114 = (($109) + ($113))|0;
   $val = $114;
   $115 = $114&255;
   $116 = $pi;
   $117 = $pixel;
   $118 = (($117) + ($116)|0);
   HEAP8[$118>>0] = $115;
   $119 = $val;
   $120 = $119 >> 8;
   $121 = ($120|0)!=(0);
   if ($121) {
    _derror();
   }
   $122 = $pi;
   $123 = (($122) + 1)|0;
   $pi = $123;
   $124 = $pixel;
   $125 = (($124) + ($122)|0);
   $126 = HEAP8[$125>>0]|0;
   $127 = $126&255;
   $128 = (968 + ($127<<1)|0);
   $129 = HEAP16[$128>>1]|0;
   $130 = $129&65535;
   $val = $130;
   $131 = $val;
   $132 = $131&65535;
   $133 = $row;
   $134 = HEAP16[132368>>1]|0;
   $135 = $134&65535;
   $136 = Math_imul($133, $135)|0;
   $137 = $col;
   $138 = (($136) + ($137))|0;
   $139 = HEAP32[132360>>2]|0;
   $140 = (($139) + ($138<<1)|0);
   HEAP16[$140>>1] = $132;
   $141 = $col;
   $142 = (($141) + 1)|0;
   $col = $142;
  }
  $143 = $row;
  $144 = (($143) + 1)|0;
  $row = $144;
 }
 $145 = $pixel;
 _free($145);
 $c = 0;
 while(1) {
  $146 = $c;
  $147 = ($146|0)<(2);
  if (!($147)) {
   break;
  }
  $148 = $c;
  $149 = (($huff) + ($148<<2)|0);
  $150 = HEAP32[$149>>2]|0;
  _free($150);
  $151 = $c;
  $152 = (($151) + 1)|0;
  $c = $152;
 }
 STACKTOP = sp;return;
}
function _kodak_65000_decode($out,$bsize) {
 $out = $out|0;
 $bsize = $bsize|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bitbuf = 0, $bits = 0, $blen = 0, $c = 0, $diff = 0, $i = 0, $j = 0;
 var $len = 0, $raw = 0, $save = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $blen = sp + 64|0;
 $raw = sp + 44|0;
 $bitbuf = sp;
 $1 = $out;
 $2 = $bsize;
 $3 = $bitbuf;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $bits = 0;
 $7 = HEAP32[880>>2]|0;
 $8 = (_ftell(($7|0))|0);
 $save = $8;
 $9 = $2;
 $10 = (($9) + 3)|0;
 $11 = $10 & -4;
 $2 = $11;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $2;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = HEAP32[880>>2]|0;
  $16 = (_getc_unlocked(($15|0))|0);
  $17 = $16&255;
  $c = $17;
  $18 = $c;
  $19 = $18&255;
  $20 = $19 & 15;
  $21 = $20&255;
  $22 = $i;
  $23 = (($blen) + ($22)|0);
  HEAP8[$23>>0] = $21;
  $24 = $21&255;
  $25 = ($24|0)>(12);
  if ($25) {
   label = 5;
   break;
  }
  $26 = $c;
  $27 = $26&255;
  $28 = $27 >> 4;
  $29 = $28&255;
  $30 = $i;
  $31 = (($30) + 1)|0;
  $32 = (($blen) + ($31)|0);
  HEAP8[$32>>0] = $29;
  $33 = $29&255;
  $34 = ($33|0)>(12);
  if ($34) {
   label = 5;
   break;
  }
  $98 = $i;
  $99 = (($98) + 2)|0;
  $i = $99;
 }
 if ((label|0) == 5) {
  $35 = HEAP32[880>>2]|0;
  $36 = $save;
  (_fseek(($35|0),($36|0),0)|0);
  $i = 0;
  while(1) {
   $37 = $i;
   $38 = $2;
   $39 = ($37|0)<($38|0);
   if (!($39)) {
    break;
   }
   _read_shorts($raw,6);
   $40 = HEAP16[$raw>>1]|0;
   $41 = $40&65535;
   $42 = $41 >> 12;
   $43 = $42 << 8;
   $44 = (($raw) + 4|0);
   $45 = HEAP16[$44>>1]|0;
   $46 = $45&65535;
   $47 = $46 >> 12;
   $48 = $47 << 4;
   $49 = $43 | $48;
   $50 = (($raw) + 8|0);
   $51 = HEAP16[$50>>1]|0;
   $52 = $51&65535;
   $53 = $52 >> 12;
   $54 = $49 | $53;
   $55 = $54&65535;
   $56 = $i;
   $57 = $1;
   $58 = (($57) + ($56<<1)|0);
   HEAP16[$58>>1] = $55;
   $59 = (($raw) + 2|0);
   $60 = HEAP16[$59>>1]|0;
   $61 = $60&65535;
   $62 = $61 >> 12;
   $63 = $62 << 8;
   $64 = (($raw) + 6|0);
   $65 = HEAP16[$64>>1]|0;
   $66 = $65&65535;
   $67 = $66 >> 12;
   $68 = $67 << 4;
   $69 = $63 | $68;
   $70 = (($raw) + 10|0);
   $71 = HEAP16[$70>>1]|0;
   $72 = $71&65535;
   $73 = $72 >> 12;
   $74 = $69 | $73;
   $75 = $74&65535;
   $76 = $i;
   $77 = (($76) + 1)|0;
   $78 = $1;
   $79 = (($78) + ($77<<1)|0);
   HEAP16[$79>>1] = $75;
   $j = 0;
   while(1) {
    $80 = $j;
    $81 = ($80|0)<(6);
    if (!($81)) {
     break;
    }
    $82 = $j;
    $83 = (($raw) + ($82<<1)|0);
    $84 = HEAP16[$83>>1]|0;
    $85 = $84&65535;
    $86 = $85 & 4095;
    $87 = $86&65535;
    $88 = $i;
    $89 = (($88) + 2)|0;
    $90 = $j;
    $91 = (($89) + ($90))|0;
    $92 = $1;
    $93 = (($92) + ($91<<1)|0);
    HEAP16[$93>>1] = $87;
    $94 = $j;
    $95 = (($94) + 1)|0;
    $j = $95;
   }
   $96 = $i;
   $97 = (($96) + 8)|0;
   $i = $97;
  }
  $0 = 1;
  $212 = $0;
  STACKTOP = sp;return ($212|0);
 }
 $100 = $2;
 $101 = $100 & 7;
 $102 = ($101|0)==(4);
 if ($102) {
  $103 = HEAP32[880>>2]|0;
  $104 = (_getc_unlocked(($103|0))|0);
  $105 = $104 << 8;
  $106 = ($105|0)<(0);
  $107 = $106 << 31 >> 31;
  $108 = $bitbuf;
  $109 = $108;
  HEAP32[$109>>2] = $105;
  $110 = (($108) + 4)|0;
  $111 = $110;
  HEAP32[$111>>2] = $107;
  $112 = HEAP32[880>>2]|0;
  $113 = (_getc_unlocked(($112|0))|0);
  $114 = ($113|0)<(0);
  $115 = $114 << 31 >> 31;
  $116 = $bitbuf;
  $117 = $116;
  $118 = HEAP32[$117>>2]|0;
  $119 = (($116) + 4)|0;
  $120 = $119;
  $121 = HEAP32[$120>>2]|0;
  $122 = (_i64Add(($118|0),($121|0),($113|0),($115|0))|0);
  $123 = tempRet0;
  $124 = $bitbuf;
  $125 = $124;
  HEAP32[$125>>2] = $122;
  $126 = (($124) + 4)|0;
  $127 = $126;
  HEAP32[$127>>2] = $123;
  $bits = 16;
 }
 $i = 0;
 while(1) {
  $128 = $i;
  $129 = $2;
  $130 = ($128|0)<($129|0);
  if (!($130)) {
   break;
  }
  $131 = $i;
  $132 = (($blen) + ($131)|0);
  $133 = HEAP8[$132>>0]|0;
  $134 = $133&255;
  $len = $134;
  $135 = $bits;
  $136 = $len;
  $137 = ($135|0)<($136|0);
  if ($137) {
   $j = 0;
   while(1) {
    $138 = $j;
    $139 = ($138|0)<(32);
    if (!($139)) {
     break;
    }
    $140 = HEAP32[880>>2]|0;
    $141 = (_getc_unlocked(($140|0))|0);
    $142 = ($141|0)<(0);
    $143 = $142 << 31 >> 31;
    $144 = $bits;
    $145 = $j;
    $146 = $145 ^ 8;
    $147 = (($144) + ($146))|0;
    $148 = (_bitshift64Shl(($141|0),($143|0),($147|0))|0);
    $149 = tempRet0;
    $150 = $bitbuf;
    $151 = $150;
    $152 = HEAP32[$151>>2]|0;
    $153 = (($150) + 4)|0;
    $154 = $153;
    $155 = HEAP32[$154>>2]|0;
    $156 = (_i64Add(($152|0),($155|0),($148|0),($149|0))|0);
    $157 = tempRet0;
    $158 = $bitbuf;
    $159 = $158;
    HEAP32[$159>>2] = $156;
    $160 = (($158) + 4)|0;
    $161 = $160;
    HEAP32[$161>>2] = $157;
    $162 = $j;
    $163 = (($162) + 8)|0;
    $j = $163;
   }
   $164 = $bits;
   $165 = (($164) + 32)|0;
   $bits = $165;
  }
  $166 = $bitbuf;
  $167 = $166;
  $168 = HEAP32[$167>>2]|0;
  $169 = (($166) + 4)|0;
  $170 = $169;
  $171 = HEAP32[$170>>2]|0;
  $172 = $len;
  $173 = (16 - ($172))|0;
  $174 = 65535 >> $173;
  $175 = ($174|0)<(0);
  $176 = $175 << 31 >> 31;
  $177 = $168 & $174;
  $171 & $176;
  $diff = $177;
  $178 = $len;
  $179 = $bitbuf;
  $180 = $179;
  $181 = HEAP32[$180>>2]|0;
  $182 = (($179) + 4)|0;
  $183 = $182;
  $184 = HEAP32[$183>>2]|0;
  $185 = (_bitshift64Ashr(($181|0),($184|0),($178|0))|0);
  $186 = tempRet0;
  $187 = $bitbuf;
  $188 = $187;
  HEAP32[$188>>2] = $185;
  $189 = (($187) + 4)|0;
  $190 = $189;
  HEAP32[$190>>2] = $186;
  $191 = $len;
  $192 = $bits;
  $193 = (($192) - ($191))|0;
  $bits = $193;
  $194 = $diff;
  $195 = $len;
  $196 = (($195) - 1)|0;
  $197 = 1 << $196;
  $198 = $194 & $197;
  $199 = ($198|0)==(0);
  if ($199) {
   $200 = $len;
   $201 = 1 << $200;
   $202 = (($201) - 1)|0;
   $203 = $diff;
   $204 = (($203) - ($202))|0;
   $diff = $204;
  }
  $205 = $diff;
  $206 = $205&65535;
  $207 = $i;
  $208 = $1;
  $209 = (($208) + ($207<<1)|0);
  HEAP16[$209>>1] = $206;
  $210 = $i;
  $211 = (($210) + 1)|0;
  $i = $211;
 }
 $0 = 0;
 $212 = $0;
 STACKTOP = sp;return ($212|0);
}
function _kodak_65000_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf = 0, $col = 0, $i = 0, $len = 0, $pred = 0, $ret = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 32|0;
 $pred = sp + 16|0;
 $row = 0;
 while(1) {
  $0 = $row;
  $1 = HEAP16[132112>>1]|0;
  $2 = $1&65535;
  $3 = ($0|0)<($2|0);
  if (!($3)) {
   break;
  }
  $col = 0;
  while(1) {
   $4 = $col;
   $5 = HEAP16[132120>>1]|0;
   $6 = $5&65535;
   $7 = ($4|0)<($6|0);
   if (!($7)) {
    break;
   }
   $8 = (($pred) + 4|0);
   HEAP32[$8>>2] = 0;
   HEAP32[$pred>>2] = 0;
   $9 = HEAP16[132120>>1]|0;
   $10 = $9&65535;
   $11 = $col;
   $12 = (($10) - ($11))|0;
   $13 = (256)<($12|0);
   if ($13) {
    $18 = 256;
   } else {
    $14 = HEAP16[132120>>1]|0;
    $15 = $14&65535;
    $16 = $col;
    $17 = (($15) - ($16))|0;
    $18 = $17;
   }
   $len = $18;
   $19 = $len;
   $20 = (_kodak_65000_decode($buf,$19)|0);
   $ret = $20;
   $i = 0;
   while(1) {
    $21 = $i;
    $22 = $len;
    $23 = ($21|0)<($22|0);
    if (!($23)) {
     break;
    }
    $24 = $ret;
    $25 = ($24|0)!=(0);
    if ($25) {
     $26 = $i;
     $27 = (($buf) + ($26<<1)|0);
     $28 = HEAP16[$27>>1]|0;
     $29 = $28 << 16 >> 16;
     $40 = $29;
    } else {
     $30 = $i;
     $31 = (($buf) + ($30<<1)|0);
     $32 = HEAP16[$31>>1]|0;
     $33 = $32 << 16 >> 16;
     $34 = $i;
     $35 = $34 & 1;
     $36 = (($pred) + ($35<<2)|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (($37) + ($33))|0;
     HEAP32[$36>>2] = $38;
     $40 = $38;
    }
    $39 = (968 + ($40<<1)|0);
    $41 = HEAP16[$39>>1]|0;
    $42 = $row;
    $43 = HEAP16[132368>>1]|0;
    $44 = $43&65535;
    $45 = Math_imul($42, $44)|0;
    $46 = $col;
    $47 = $i;
    $48 = (($46) + ($47))|0;
    $49 = (($45) + ($48))|0;
    $50 = HEAP32[132360>>2]|0;
    $51 = (($50) + ($49<<1)|0);
    HEAP16[$51>>1] = $41;
    $52 = $41&65535;
    $53 = $52 >> 12;
    $54 = ($53|0)!=(0);
    if ($54) {
     _derror();
    }
    $55 = $i;
    $56 = (($55) + 1)|0;
    $i = $56;
   }
   $57 = $col;
   $58 = (($57) + 256)|0;
   $col = $58;
  }
  $59 = $row;
  $60 = (($59) + 1)|0;
  $row = $60;
 }
 STACKTOP = sp;return;
}
function _kodak_ycbcr_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bp = 0, $buf = 0, $c = 0, $cb = 0, $col = 0, $cr = 0;
 var $i = 0, $ip = 0, $j = 0, $k = 0, $len = 0, $rgb = 0, $row = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 848|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 80|0;
 $y = sp + 24|0;
 $rgb = sp;
 $0 = HEAP32[132144>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $row = 0;
 while(1) {
  $2 = $row;
  $3 = HEAP16[132112>>1]|0;
  $4 = $3&65535;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $col = 0;
  while(1) {
   $6 = $col;
   $7 = HEAP16[132120>>1]|0;
   $8 = $7&65535;
   $9 = ($6|0)<($8|0);
   if (!($9)) {
    break;
   }
   $10 = HEAP16[132120>>1]|0;
   $11 = $10&65535;
   $12 = $col;
   $13 = (($11) - ($12))|0;
   $14 = (128)<($13|0);
   if ($14) {
    $19 = 128;
   } else {
    $15 = HEAP16[132120>>1]|0;
    $16 = $15&65535;
    $17 = $col;
    $18 = (($16) - ($17))|0;
    $19 = $18;
   }
   $len = $19;
   $20 = $len;
   $21 = ($20*3)|0;
   (_kodak_65000_decode($buf,$21)|0);
   $cr = 0;
   $cb = 0;
   $22 = (($y) + 8|0);
   $23 = (($22) + 4|0);
   HEAP32[$23>>2] = 0;
   $24 = (($y) + 4|0);
   HEAP32[$24>>2] = 0;
   $bp = $buf;
   $i = 0;
   while(1) {
    $25 = $i;
    $26 = $len;
    $27 = ($25|0)<($26|0);
    if (!($27)) {
     break;
    }
    $28 = $bp;
    $29 = (($28) + 8|0);
    $30 = HEAP16[$29>>1]|0;
    $31 = $30 << 16 >> 16;
    $32 = $cb;
    $33 = (($32) + ($31))|0;
    $cb = $33;
    $34 = $bp;
    $35 = (($34) + 10|0);
    $36 = HEAP16[$35>>1]|0;
    $37 = $36 << 16 >> 16;
    $38 = $cr;
    $39 = (($38) + ($37))|0;
    $cr = $39;
    $40 = $cb;
    $41 = $cr;
    $42 = (($40) + ($41))|0;
    $43 = (($42) + 2)|0;
    $44 = $43 >> 2;
    $45 = (0 - ($44))|0;
    $46 = (($rgb) + 4|0);
    HEAP32[$46>>2] = $45;
    $47 = (($rgb) + 4|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = $cb;
    $50 = (($48) + ($49))|0;
    $51 = (($rgb) + 8|0);
    HEAP32[$51>>2] = $50;
    $52 = (($rgb) + 4|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $cr;
    $55 = (($53) + ($54))|0;
    HEAP32[$rgb>>2] = $55;
    $j = 0;
    while(1) {
     $56 = $j;
     $57 = ($56|0)<(2);
     if (!($57)) {
      break;
     }
     $k = 0;
     while(1) {
      $58 = $k;
      $59 = ($58|0)<(2);
      if (!($59)) {
       break;
      }
      $60 = $k;
      $61 = $60 ^ 1;
      $62 = $j;
      $63 = (($y) + ($62<<3)|0);
      $64 = (($63) + ($61<<2)|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = $bp;
      $67 = (($66) + 2|0);
      $bp = $67;
      $68 = HEAP16[$66>>1]|0;
      $69 = $68 << 16 >> 16;
      $70 = (($65) + ($69))|0;
      $71 = $k;
      $72 = $j;
      $73 = (($y) + ($72<<3)|0);
      $74 = (($73) + ($71<<2)|0);
      HEAP32[$74>>2] = $70;
      $75 = $70 >> 10;
      $76 = ($75|0)!=(0);
      if ($76) {
       _derror();
      }
      $77 = $row;
      $78 = $j;
      $79 = (($77) + ($78))|0;
      $80 = HEAP16[132120>>1]|0;
      $81 = $80&65535;
      $82 = Math_imul($79, $81)|0;
      $83 = $col;
      $84 = (($82) + ($83))|0;
      $85 = $i;
      $86 = (($84) + ($85))|0;
      $87 = $k;
      $88 = (($86) + ($87))|0;
      $89 = HEAP32[132144>>2]|0;
      $90 = (($89) + ($88<<3)|0);
      $ip = $90;
      $c = 0;
      while(1) {
       $91 = $c;
       $92 = ($91|0)<(3);
       if (!($92)) {
        break;
       }
       $93 = $k;
       $94 = $j;
       $95 = (($y) + ($94<<3)|0);
       $96 = (($95) + ($93<<2)|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = $c;
       $99 = (($rgb) + ($98<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = (($97) + ($100))|0;
       $102 = ($101|0)<(4095);
       if ($102) {
        $103 = $k;
        $104 = $j;
        $105 = (($y) + ($104<<3)|0);
        $106 = (($105) + ($103<<2)|0);
        $107 = HEAP32[$106>>2]|0;
        $108 = $c;
        $109 = (($rgb) + ($108<<2)|0);
        $110 = HEAP32[$109>>2]|0;
        $111 = (($107) + ($110))|0;
        $113 = $111;
       } else {
        $113 = 4095;
       }
       $112 = (0)>($113|0);
       if ($112) {
        $134 = 0;
       } else {
        $114 = $k;
        $115 = $j;
        $116 = (($y) + ($115<<3)|0);
        $117 = (($116) + ($114<<2)|0);
        $118 = HEAP32[$117>>2]|0;
        $119 = $c;
        $120 = (($rgb) + ($119<<2)|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = (($118) + ($121))|0;
        $123 = ($122|0)<(4095);
        if ($123) {
         $124 = $k;
         $125 = $j;
         $126 = (($y) + ($125<<3)|0);
         $127 = (($126) + ($124<<2)|0);
         $128 = HEAP32[$127>>2]|0;
         $129 = $c;
         $130 = (($rgb) + ($129<<2)|0);
         $131 = HEAP32[$130>>2]|0;
         $132 = (($128) + ($131))|0;
         $153 = $132;
        } else {
         $153 = 4095;
        }
        $134 = $153;
       }
       $133 = (968 + ($134<<1)|0);
       $135 = HEAP16[$133>>1]|0;
       $136 = $c;
       $137 = $ip;
       $138 = (($137) + ($136<<1)|0);
       HEAP16[$138>>1] = $135;
       $139 = $c;
       $140 = (($139) + 1)|0;
       $c = $140;
      }
      $141 = $k;
      $142 = (($141) + 1)|0;
      $k = $142;
     }
     $143 = $j;
     $144 = (($143) + 1)|0;
     $j = $144;
    }
    $145 = $i;
    $146 = (($145) + 2)|0;
    $i = $146;
    $147 = $bp;
    $148 = (($147) + 4|0);
    $bp = $148;
   }
   $149 = $col;
   $150 = (($149) + 128)|0;
   $col = $150;
  }
  $151 = $row;
  $152 = (($151) + 2)|0;
  $row = $152;
 }
 STACKTOP = sp;return;
}
function _kodak_rgb_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bp = 0, $buf = 0, $c = 0, $col = 0, $i = 0, $ip = 0, $len = 0, $rgb = 0, $row = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1584|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 40|0;
 $rgb = sp;
 $0 = HEAP32[132144>>2]|0;
 $ip = $0;
 $row = 0;
 while(1) {
  $1 = $row;
  $2 = HEAP16[132112>>1]|0;
  $3 = $2&65535;
  $4 = ($1|0)<($3|0);
  if (!($4)) {
   break;
  }
  $col = 0;
  while(1) {
   $5 = $col;
   $6 = HEAP16[132120>>1]|0;
   $7 = $6&65535;
   $8 = ($5|0)<($7|0);
   if (!($8)) {
    break;
   }
   $9 = HEAP16[132120>>1]|0;
   $10 = $9&65535;
   $11 = $col;
   $12 = (($10) - ($11))|0;
   $13 = (256)<($12|0);
   if ($13) {
    $18 = 256;
   } else {
    $14 = HEAP16[132120>>1]|0;
    $15 = $14&65535;
    $16 = $col;
    $17 = (($15) - ($16))|0;
    $18 = $17;
   }
   $len = $18;
   $19 = $len;
   $20 = ($19*3)|0;
   (_kodak_65000_decode($buf,$20)|0);
   ;HEAP32[$rgb+0>>2]=0|0;HEAP32[$rgb+4>>2]=0|0;HEAP32[$rgb+8>>2]=0|0;
   $bp = $buf;
   $i = 0;
   while(1) {
    $21 = $i;
    $22 = $len;
    $23 = ($21|0)<($22|0);
    if (!($23)) {
     break;
    }
    $c = 0;
    while(1) {
     $24 = $c;
     $25 = ($24|0)<(3);
     if (!($25)) {
      break;
     }
     $26 = $bp;
     $27 = (($26) + 2|0);
     $bp = $27;
     $28 = HEAP16[$26>>1]|0;
     $29 = $28 << 16 >> 16;
     $30 = $c;
     $31 = (($rgb) + ($30<<2)|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($32) + ($29))|0;
     HEAP32[$31>>2] = $33;
     $34 = $33&65535;
     $35 = $c;
     $36 = $ip;
     $37 = (($36) + ($35<<1)|0);
     HEAP16[$37>>1] = $34;
     $38 = $34&65535;
     $39 = $38 >> 12;
     $40 = ($39|0)!=(0);
     if ($40) {
      _derror();
     }
     $41 = $c;
     $42 = (($41) + 1)|0;
     $c = $42;
    }
    $43 = $i;
    $44 = (($43) + 1)|0;
    $i = $44;
    $45 = $ip;
    $46 = (($45) + 8|0);
    $ip = $46;
   }
   $47 = $col;
   $48 = (($47) + 256)|0;
   $col = $48;
  }
  $49 = $row;
  $50 = (($49) + 1)|0;
  $row = $50;
 }
 STACKTOP = sp;return;
}
function _kodak_thumb_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $col = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[134384>>2]|0;
 $1 = $0 >>> 5;
 HEAP32[132304>>2] = $1;
 $row = 0;
 while(1) {
  $2 = $row;
  $3 = HEAP16[132112>>1]|0;
  $4 = $3&65535;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $col = 0;
  while(1) {
   $6 = $col;
   $7 = HEAP16[132120>>1]|0;
   $8 = $7&65535;
   $9 = ($6|0)<($8|0);
   if (!($9)) {
    break;
   }
   $10 = $row;
   $11 = HEAP16[132120>>1]|0;
   $12 = $11&65535;
   $13 = Math_imul($10, $12)|0;
   $14 = $col;
   $15 = (($13) + ($14))|0;
   $16 = HEAP32[132144>>2]|0;
   $17 = (($16) + ($15<<3)|0);
   $18 = HEAP32[132304>>2]|0;
   _read_shorts($17,$18);
   $19 = $col;
   $20 = (($19) + 1)|0;
   $col = $20;
  }
  $21 = $row;
  $22 = (($21) + 1)|0;
  $row = $22;
 }
 $23 = HEAP32[134384>>2]|0;
 $24 = $23 & 31;
 $25 = 1 << $24;
 $26 = (($25) - 1)|0;
 HEAP32[132400>>2] = $26;
 STACKTOP = sp;return;
}
function _sony_decrypt($data,$len,$start,$key) {
 $data = $data|0;
 $len = $len|0;
 $start = $start|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $len;
 $2 = $start;
 $3 = $key;
 $4 = $2;
 $5 = ($4|0)!=(0);
 if ($5) {
  HEAP32[161008>>2] = 0;
  while(1) {
   $6 = HEAP32[161008>>2]|0;
   $7 = ($6>>>0)<(4);
   if (!($7)) {
    break;
   }
   $8 = $3;
   $9 = Math_imul($8, 48828125)|0;
   $10 = (($9) + 1)|0;
   $3 = $10;
   $11 = HEAP32[161008>>2]|0;
   $12 = (160496 + ($11<<2)|0);
   HEAP32[$12>>2] = $10;
   $13 = HEAP32[161008>>2]|0;
   $14 = (($13) + 1)|0;
   HEAP32[161008>>2] = $14;
  }
  $15 = HEAP32[((160496 + 12|0))>>2]|0;
  $16 = $15 << 1;
  $17 = HEAP32[160496>>2]|0;
  $18 = HEAP32[((160496 + 8|0))>>2]|0;
  $19 = $17 ^ $18;
  $20 = $19 >>> 31;
  $21 = $16 | $20;
  HEAP32[((160496 + 12|0))>>2] = $21;
  HEAP32[161008>>2] = 4;
  while(1) {
   $22 = HEAP32[161008>>2]|0;
   $23 = ($22>>>0)<(127);
   if (!($23)) {
    break;
   }
   $24 = HEAP32[161008>>2]|0;
   $25 = (($24) - 4)|0;
   $26 = (160496 + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[161008>>2]|0;
   $29 = (($28) - 2)|0;
   $30 = (160496 + ($29<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $27 ^ $31;
   $33 = $32 << 1;
   $34 = HEAP32[161008>>2]|0;
   $35 = (($34) - 3)|0;
   $36 = (160496 + ($35<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = HEAP32[161008>>2]|0;
   $39 = (($38) - 1)|0;
   $40 = (160496 + ($39<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $37 ^ $41;
   $43 = $42 >>> 31;
   $44 = $33 | $43;
   $45 = HEAP32[161008>>2]|0;
   $46 = (160496 + ($45<<2)|0);
   HEAP32[$46>>2] = $44;
   $47 = HEAP32[161008>>2]|0;
   $48 = (($47) + 1)|0;
   HEAP32[161008>>2] = $48;
  }
  HEAP32[161008>>2] = 0;
  while(1) {
   $49 = HEAP32[161008>>2]|0;
   $50 = ($49>>>0)<(127);
   if (!($50)) {
    break;
   }
   $51 = HEAP32[161008>>2]|0;
   $52 = (160496 + ($51<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (_htonl(($53|0))|0);
   $55 = HEAP32[161008>>2]|0;
   $56 = (160496 + ($55<<2)|0);
   HEAP32[$56>>2] = $54;
   $57 = HEAP32[161008>>2]|0;
   $58 = (($57) + 1)|0;
   HEAP32[161008>>2] = $58;
  }
 }
 while(1) {
  $59 = $1;
  $60 = (($59) + -1)|0;
  $1 = $60;
  $61 = ($59|0)!=(0);
  if ($61) {
   $62 = HEAP32[161008>>2]|0;
   $63 = (($62) + 1)|0;
   HEAP32[161008>>2] = $63;
   $64 = ($62|0)!=(0);
   $83 = $64;
  } else {
   $83 = 0;
  }
  if (!($83)) {
   break;
  }
  $65 = HEAP32[161008>>2]|0;
  $66 = $65 & 127;
  $67 = (160496 + ($66<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = HEAP32[161008>>2]|0;
  $70 = (($69) + 64)|0;
  $71 = $70 & 127;
  $72 = (160496 + ($71<<2)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $68 ^ $73;
  $75 = HEAP32[161008>>2]|0;
  $76 = (($75) - 1)|0;
  $77 = $76 & 127;
  $78 = (160496 + ($77<<2)|0);
  HEAP32[$78>>2] = $74;
  $79 = $0;
  $80 = (($79) + 4|0);
  $0 = $80;
  $81 = HEAP32[$79>>2]|0;
  $82 = $81 ^ $74;
  HEAP32[$79>>2] = $82;
 }
 STACKTOP = sp;return;
}
function _sony_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $col = 0, $head = 0, $i = 0, $key = 0, $pixel = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $head = sp + 24|0;
 $0 = HEAP32[880>>2]|0;
 (_fseek(($0|0),200896,0)|0);
 $1 = HEAP32[880>>2]|0;
 $2 = HEAP32[880>>2]|0;
 $3 = (_getc_unlocked(($2|0))|0);
 $4 = $3<<2;
 $5 = (($4) - 1)|0;
 (_fseek(($1|0),($5|0),1)|0);
 HEAP16[944>>1] = 19789;
 $6 = (_get4()|0);
 $key = $6;
 $7 = HEAP32[880>>2]|0;
 (_fseek(($7|0),164600,0)|0);
 $8 = HEAP32[880>>2]|0;
 (_fread(($head|0),1,40,($8|0))|0);
 $9 = $key;
 _sony_decrypt($head,10,1,$9);
 $i = 26;
 while(1) {
  $10 = $i;
  $11 = (($10) + -1)|0;
  $i = $11;
  $12 = ($10>>>0)>(22);
  if (!($12)) {
   break;
  }
  $13 = $key;
  $14 = $13 << 8;
  $15 = $i;
  $16 = (($head) + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $14 | $18;
  $key = $19;
 }
 $20 = HEAP32[880>>2]|0;
 $21 = HEAP32[133816>>2]|0;
 (_fseek(($20|0),($21|0),0)|0);
 $row = 0;
 while(1) {
  $22 = $row;
  $23 = HEAP16[133096>>1]|0;
  $24 = $23&65535;
  $25 = ($22>>>0)<($24>>>0);
  if (!($25)) {
   break;
  }
  $26 = HEAP32[132360>>2]|0;
  $27 = $row;
  $28 = HEAP16[132368>>1]|0;
  $29 = $28&65535;
  $30 = Math_imul($27, $29)|0;
  $31 = (($26) + ($30<<1)|0);
  $pixel = $31;
  $32 = $pixel;
  $33 = HEAP16[132368>>1]|0;
  $34 = $33&65535;
  $35 = HEAP32[880>>2]|0;
  $36 = (_fread(($32|0),2,($34|0),($35|0))|0);
  $37 = HEAP16[132368>>1]|0;
  $38 = $37&65535;
  $39 = ($36>>>0)<($38>>>0);
  if ($39) {
   _derror();
  }
  $40 = $pixel;
  $41 = HEAP16[132368>>1]|0;
  $42 = $41&65535;
  $43 = (($42|0) / 2)&-1;
  $44 = $row;
  $45 = ($44|0)!=(0);
  $46 = $45 ^ 1;
  $47 = $46&1;
  $48 = $key;
  _sony_decrypt($40,$43,$47,$48);
  $col = 0;
  while(1) {
   $49 = $col;
   $50 = HEAP16[132368>>1]|0;
   $51 = $50&65535;
   $52 = ($49>>>0)<($51>>>0);
   if (!($52)) {
    break;
   }
   $53 = $col;
   $54 = $pixel;
   $55 = (($54) + ($53<<1)|0);
   $56 = HEAP16[$55>>1]|0;
   $57 = (_ntohs(($56|0))|0);
   $58 = $col;
   $59 = $pixel;
   $60 = (($59) + ($58<<1)|0);
   HEAP16[$60>>1] = $57;
   $61 = $57&65535;
   $62 = $61 >> 14;
   $63 = ($62|0)!=(0);
   if ($63) {
    _derror();
   }
   $64 = $col;
   $65 = (($64) + 1)|0;
   $col = $65;
  }
  $66 = $row;
  $67 = (($66) + 1)|0;
  $row = $67;
 }
 HEAP32[132400>>2] = 16368;
 STACKTOP = sp;return;
}
function _sony_arw_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $col = 0, $huff = 0, $i = 0, $n = 0;
 var $row = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 65568|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $huff = sp + 24|0;
 $sum = 0;
 HEAP16[$huff>>1] = 15;
 $i = 0;
 $n = 0;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<(18);
  if (!($1)) {
   break;
  }
  $c = 0;
  while(1) {
   $2 = $c;
   $3 = $i;
   $4 = (161016 + ($3<<1)|0);
   $5 = HEAP16[$4>>1]|0;
   $6 = $5&65535;
   $7 = $6 >> 8;
   $8 = 32768 >> $7;
   $9 = ($2|0)<($8|0);
   if (!($9)) {
    break;
   }
   $10 = $i;
   $11 = (161016 + ($10<<1)|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = $n;
   $14 = (($13) + 1)|0;
   $n = $14;
   $15 = (($huff) + ($14<<1)|0);
   HEAP16[$15>>1] = $12;
   $16 = $c;
   $17 = (($16) + 1)|0;
   $c = $17;
  }
  $18 = $i;
  $19 = (($18) + 1)|0;
  $i = $19;
 }
 (_getbithuff(-1,0)|0);
 $20 = HEAP16[132368>>1]|0;
 $21 = $20&65535;
 $col = $21;
 while(1) {
  $22 = $col;
  $23 = (($22) + -1)|0;
  $col = $23;
  $24 = ($22|0)!=(0);
  if (!($24)) {
   break;
  }
  $row = 0;
  while(1) {
   $25 = $row;
   $26 = HEAP16[133096>>1]|0;
   $27 = $26&65535;
   $28 = (($27) + 1)|0;
   $29 = ($25|0)<($28|0);
   if (!($29)) {
    break;
   }
   $30 = $row;
   $31 = HEAP16[133096>>1]|0;
   $32 = $31&65535;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $row = 1;
   }
   $34 = (_ljpeg_diff($huff)|0);
   $35 = $sum;
   $36 = (($35) + ($34))|0;
   $sum = $36;
   $37 = $36 >> 12;
   $38 = ($37|0)!=(0);
   if ($38) {
    _derror();
   }
   $39 = $row;
   $40 = HEAP16[132112>>1]|0;
   $41 = $40&65535;
   $42 = ($39|0)<($41|0);
   if ($42) {
    $43 = $sum;
    $44 = $43&65535;
    $45 = $row;
    $46 = HEAP16[132368>>1]|0;
    $47 = $46&65535;
    $48 = Math_imul($45, $47)|0;
    $49 = $col;
    $50 = (($48) + ($49))|0;
    $51 = HEAP32[132360>>2]|0;
    $52 = (($51) + ($50<<1)|0);
    HEAP16[$52>>1] = $44;
   }
   $53 = $row;
   $54 = (($53) + 2)|0;
   $row = $54;
  }
 }
 STACKTOP = sp;return;
}
function _sony_arw2_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $bit = 0, $col = 0, $data = 0, $dp = 0, $i = 0, $imax = 0, $imin = 0, $max = 0, $min = 0, $pix = 0, $row = 0, $sh = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pix = sp + 48|0;
 $0 = HEAP16[132368>>1]|0;
 $1 = $0&65535;
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $data = $3;
 $4 = $data;
 _merror($4,161056);
 $row = 0;
 while(1) {
  $5 = $row;
  $6 = HEAP16[132112>>1]|0;
  $7 = $6&65535;
  $8 = ($5|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $data;
  $10 = HEAP16[132368>>1]|0;
  $11 = $10&65535;
  $12 = HEAP32[880>>2]|0;
  (_fread(($9|0),1,($11|0),($12|0))|0);
  $13 = $data;
  $dp = $13;
  $col = 0;
  while(1) {
   $14 = $col;
   $15 = HEAP16[132368>>1]|0;
   $16 = $15&65535;
   $17 = (($16) - 30)|0;
   $18 = ($14|0)<($17|0);
   if (!($18)) {
    break;
   }
   $19 = $dp;
   $20 = (_sget4($19)|0);
   $val = $20;
   $21 = 2047 & $20;
   $max = $21;
   $22 = $val;
   $23 = $22 >> 11;
   $24 = 2047 & $23;
   $min = $24;
   $25 = $val;
   $26 = $25 >> 22;
   $27 = 15 & $26;
   $imax = $27;
   $28 = $val;
   $29 = $28 >> 26;
   $30 = 15 & $29;
   $imin = $30;
   $sh = 0;
   while(1) {
    $31 = $sh;
    $32 = ($31|0)<(4);
    if ($32) {
     $33 = $sh;
     $34 = 128 << $33;
     $35 = $max;
     $36 = $min;
     $37 = (($35) - ($36))|0;
     $38 = ($34|0)<=($37|0);
     $120 = $38;
    } else {
     $120 = 0;
    }
    if (!($120)) {
     break;
    }
    $39 = $sh;
    $40 = (($39) + 1)|0;
    $sh = $40;
   }
   $bit = 30;
   $i = 0;
   while(1) {
    $41 = $i;
    $42 = ($41|0)<(16);
    if (!($42)) {
     break;
    }
    $43 = $i;
    $44 = $imax;
    $45 = ($43|0)==($44|0);
    if ($45) {
     $46 = $max;
     $47 = $46&65535;
     $48 = $i;
     $49 = (($pix) + ($48<<1)|0);
     HEAP16[$49>>1] = $47;
    } else {
     $50 = $i;
     $51 = $imin;
     $52 = ($50|0)==($51|0);
     if ($52) {
      $53 = $min;
      $54 = $53&65535;
      $55 = $i;
      $56 = (($pix) + ($55<<1)|0);
      HEAP16[$56>>1] = $54;
     } else {
      $57 = $dp;
      $58 = $bit;
      $59 = $58 >> 3;
      $60 = (($57) + ($59)|0);
      $61 = (_sget2($60)|0);
      $62 = $61&65535;
      $63 = $bit;
      $64 = $63 & 7;
      $65 = $62 >> $64;
      $66 = $65 & 127;
      $67 = $sh;
      $68 = $66 << $67;
      $69 = $min;
      $70 = (($68) + ($69))|0;
      $71 = $70&65535;
      $72 = $i;
      $73 = (($pix) + ($72<<1)|0);
      HEAP16[$73>>1] = $71;
      $74 = $i;
      $75 = (($pix) + ($74<<1)|0);
      $76 = HEAP16[$75>>1]|0;
      $77 = $76&65535;
      $78 = ($77|0)>(2047);
      if ($78) {
       $79 = $i;
       $80 = (($pix) + ($79<<1)|0);
       HEAP16[$80>>1] = 2047;
      }
      $81 = $bit;
      $82 = (($81) + 7)|0;
      $bit = $82;
     }
    }
    $83 = $i;
    $84 = (($83) + 1)|0;
    $i = $84;
   }
   $i = 0;
   while(1) {
    $85 = $i;
    $86 = ($85|0)<(16);
    if (!($86)) {
     break;
    }
    $87 = $i;
    $88 = (($pix) + ($87<<1)|0);
    $89 = HEAP16[$88>>1]|0;
    $90 = $89&65535;
    $91 = $90 << 1;
    $92 = (968 + ($91<<1)|0);
    $93 = HEAP16[$92>>1]|0;
    $94 = $93&65535;
    $95 = $94 >> 2;
    $96 = $95&65535;
    $97 = $row;
    $98 = HEAP16[132368>>1]|0;
    $99 = $98&65535;
    $100 = Math_imul($97, $99)|0;
    $101 = $col;
    $102 = (($100) + ($101))|0;
    $103 = HEAP32[132360>>2]|0;
    $104 = (($103) + ($102<<1)|0);
    HEAP16[$104>>1] = $96;
    $105 = $i;
    $106 = (($105) + 1)|0;
    $i = $106;
    $107 = $col;
    $108 = (($107) + 2)|0;
    $col = $108;
   }
   $109 = $col;
   $110 = $109 & 1;
   $111 = ($110|0)!=(0);
   $112 = $111 ? 1 : 31;
   $113 = $col;
   $114 = (($113) - ($112))|0;
   $col = $114;
   $115 = $dp;
   $116 = (($115) + 16|0);
   $dp = $116;
  }
  $117 = $row;
  $118 = (($117) + 1)|0;
  $row = $118;
 }
 $119 = $data;
 _free($119);
 STACKTOP = sp;return;
}
function _samsung_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $col = 0;
 var $dir = 0, $i = 0, $len = 0, $op = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $op = sp + 16|0;
 $len = sp + 32|0;
 HEAP16[944>>1] = 18761;
 $row = 0;
 while(1) {
  $0 = $row;
  $1 = HEAP16[133096>>1]|0;
  $2 = $1&65535;
  $3 = ($0|0)<($2|0);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[880>>2]|0;
  $5 = HEAP32[134688>>2]|0;
  $6 = $row;
  $7 = $6<<2;
  $8 = (($5) + ($7))|0;
  (_fseek(($4|0),($8|0),0)|0);
  $9 = HEAP32[880>>2]|0;
  $10 = HEAP32[133816>>2]|0;
  $11 = (_get4()|0);
  $12 = (($10) + ($11))|0;
  (_fseek(($9|0),($12|0),0)|0);
  (_ph1_bithuff(-1,0)|0);
  $c = 0;
  while(1) {
   $13 = $c;
   $14 = ($13|0)<(4);
   if (!($14)) {
    break;
   }
   $15 = $row;
   $16 = ($15|0)<(2);
   $17 = $16 ? 7 : 4;
   $18 = $c;
   $19 = (($len) + ($18<<2)|0);
   HEAP32[$19>>2] = $17;
   $20 = $c;
   $21 = (($20) + 1)|0;
   $c = $21;
  }
  $col = 0;
  while(1) {
   $22 = $col;
   $23 = HEAP16[132368>>1]|0;
   $24 = $23&65535;
   $25 = ($22|0)<($24|0);
   if (!($25)) {
    break;
   }
   $26 = (_ph1_bithuff(1,0)|0);
   $dir = $26;
   $c = 0;
   while(1) {
    $27 = $c;
    $28 = ($27|0)<(4);
    if (!($28)) {
     break;
    }
    $29 = (_ph1_bithuff(2,0)|0);
    $30 = $c;
    $31 = (($op) + ($30<<2)|0);
    HEAP32[$31>>2] = $29;
    $32 = $c;
    $33 = (($32) + 1)|0;
    $c = $33;
   }
   $c = 0;
   while(1) {
    $34 = $c;
    $35 = ($34|0)<(4);
    if (!($35)) {
     break;
    }
    $36 = $c;
    $37 = (($op) + ($36<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    if ((($38|0) == 3)) {
     $39 = (_ph1_bithuff(4,0)|0);
     $40 = $c;
     $41 = (($len) + ($40<<2)|0);
     HEAP32[$41>>2] = $39;
    } else if ((($38|0) == 2)) {
     $42 = $c;
     $43 = (($len) + ($42<<2)|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = (($44) + -1)|0;
     HEAP32[$43>>2] = $45;
    } else if ((($38|0) == 1)) {
     $46 = $c;
     $47 = (($len) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (($48) + 1)|0;
     HEAP32[$47>>2] = $49;
    }
    $50 = $c;
    $51 = (($50) + 1)|0;
    $c = $51;
   }
   $c = 0;
   while(1) {
    $52 = $c;
    $53 = ($52|0)<(16);
    if (!($53)) {
     break;
    }
    $54 = $c;
    $55 = $54 & 1;
    $56 = $55 << 1;
    $57 = $c;
    $58 = $57 >> 3;
    $59 = $56 | $58;
    $60 = (($len) + ($59<<2)|0);
    $61 = HEAP32[$60>>2]|0;
    $i = $61;
    $62 = $i;
    $63 = (_ph1_bithuff($62,0)|0);
    $64 = $i;
    $65 = (32 - ($64))|0;
    $66 = $63 << $65;
    $67 = $i;
    $68 = (32 - ($67))|0;
    $69 = $66 >> $68;
    $70 = $dir;
    $71 = ($70|0)!=(0);
    if ($71) {
     $72 = $row;
     $73 = $c;
     $74 = $73 ^ -1;
     $75 = $74 | -2;
     $76 = (($72) + ($75))|0;
     $77 = HEAP16[132368>>1]|0;
     $78 = $77&65535;
     $79 = Math_imul($76, $78)|0;
     $80 = $col;
     $81 = $c;
     $82 = (($80) + ($81))|0;
     $83 = (($79) + ($82))|0;
     $84 = HEAP32[132360>>2]|0;
     $85 = (($84) + ($83<<1)|0);
     $86 = HEAP16[$85>>1]|0;
     $87 = $86&65535;
     $104 = $87;
    } else {
     $88 = $col;
     $89 = ($88|0)!=(0);
     if ($89) {
      $90 = $row;
      $91 = HEAP16[132368>>1]|0;
      $92 = $91&65535;
      $93 = Math_imul($90, $92)|0;
      $94 = $col;
      $95 = $c;
      $96 = $95 | -2;
      $97 = (($94) + ($96))|0;
      $98 = (($93) + ($97))|0;
      $99 = HEAP32[132360>>2]|0;
      $100 = (($99) + ($98<<1)|0);
      $101 = HEAP16[$100>>1]|0;
      $102 = $101&65535;
      $237 = $102;
     } else {
      $237 = 128;
     }
     $104 = $237;
    }
    $103 = (($69) + ($104))|0;
    $105 = $103&65535;
    $106 = $row;
    $107 = HEAP16[132368>>1]|0;
    $108 = $107&65535;
    $109 = Math_imul($106, $108)|0;
    $110 = $col;
    $111 = $c;
    $112 = (($110) + ($111))|0;
    $113 = (($109) + ($112))|0;
    $114 = HEAP32[132360>>2]|0;
    $115 = (($114) + ($113<<1)|0);
    HEAP16[$115>>1] = $105;
    $116 = $c;
    $117 = ($116|0)==(14);
    if ($117) {
     $c = -1;
    }
    $118 = $c;
    $119 = (($118) + 2)|0;
    $c = $119;
   }
   $120 = $col;
   $121 = (($120) + 16)|0;
   $col = $121;
  }
  $122 = $row;
  $123 = (($122) + 1)|0;
  $row = $123;
 }
 $row = 0;
 while(1) {
  $124 = $row;
  $125 = HEAP16[133096>>1]|0;
  $126 = $125&65535;
  $127 = (($126) - 1)|0;
  $128 = ($124|0)<($127|0);
  if (!($128)) {
   break;
  }
  $col = 0;
  while(1) {
   $129 = $col;
   $130 = HEAP16[132368>>1]|0;
   $131 = $130&65535;
   $132 = (($131) - 1)|0;
   $133 = ($129|0)<($132|0);
   if (!($133)) {
    break;
   }
   $134 = $row;
   $135 = HEAP16[132368>>1]|0;
   $136 = $135&65535;
   $137 = Math_imul($134, $136)|0;
   $138 = $col;
   $139 = (($138) + 1)|0;
   $140 = (($137) + ($139))|0;
   $141 = HEAP32[132360>>2]|0;
   $142 = (($141) + ($140<<1)|0);
   $143 = HEAP16[$142>>1]|0;
   $144 = $143&65535;
   $145 = $row;
   $146 = (($145) + 1)|0;
   $147 = HEAP16[132368>>1]|0;
   $148 = $147&65535;
   $149 = Math_imul($146, $148)|0;
   $150 = $col;
   $151 = (($149) + ($150))|0;
   $152 = HEAP32[132360>>2]|0;
   $153 = (($152) + ($151<<1)|0);
   $154 = HEAP16[$153>>1]|0;
   $155 = $154&65535;
   $156 = (($144) + ($155))|0;
   $157 = $156&65535;
   $158 = $row;
   $159 = HEAP16[132368>>1]|0;
   $160 = $159&65535;
   $161 = Math_imul($158, $160)|0;
   $162 = $col;
   $163 = (($162) + 1)|0;
   $164 = (($161) + ($163))|0;
   $165 = HEAP32[132360>>2]|0;
   $166 = (($165) + ($164<<1)|0);
   HEAP16[$166>>1] = $157;
   $167 = $row;
   $168 = HEAP16[132368>>1]|0;
   $169 = $168&65535;
   $170 = Math_imul($167, $169)|0;
   $171 = $col;
   $172 = (($171) + 1)|0;
   $173 = (($170) + ($172))|0;
   $174 = HEAP32[132360>>2]|0;
   $175 = (($174) + ($173<<1)|0);
   $176 = HEAP16[$175>>1]|0;
   $177 = $176&65535;
   $178 = $row;
   $179 = (($178) + 1)|0;
   $180 = HEAP16[132368>>1]|0;
   $181 = $180&65535;
   $182 = Math_imul($179, $181)|0;
   $183 = $col;
   $184 = (($182) + ($183))|0;
   $185 = HEAP32[132360>>2]|0;
   $186 = (($185) + ($184<<1)|0);
   $187 = HEAP16[$186>>1]|0;
   $188 = $187&65535;
   $189 = (($177) - ($188))|0;
   $190 = $189&65535;
   $191 = $row;
   $192 = (($191) + 1)|0;
   $193 = HEAP16[132368>>1]|0;
   $194 = $193&65535;
   $195 = Math_imul($192, $194)|0;
   $196 = $col;
   $197 = (($195) + ($196))|0;
   $198 = HEAP32[132360>>2]|0;
   $199 = (($198) + ($197<<1)|0);
   HEAP16[$199>>1] = $190;
   $200 = $row;
   $201 = HEAP16[132368>>1]|0;
   $202 = $201&65535;
   $203 = Math_imul($200, $202)|0;
   $204 = $col;
   $205 = (($204) + 1)|0;
   $206 = (($203) + ($205))|0;
   $207 = HEAP32[132360>>2]|0;
   $208 = (($207) + ($206<<1)|0);
   $209 = HEAP16[$208>>1]|0;
   $210 = $209&65535;
   $211 = $row;
   $212 = (($211) + 1)|0;
   $213 = HEAP16[132368>>1]|0;
   $214 = $213&65535;
   $215 = Math_imul($212, $214)|0;
   $216 = $col;
   $217 = (($215) + ($216))|0;
   $218 = HEAP32[132360>>2]|0;
   $219 = (($218) + ($217<<1)|0);
   $220 = HEAP16[$219>>1]|0;
   $221 = $220&65535;
   $222 = (($210) - ($221))|0;
   $223 = $222&65535;
   $224 = $row;
   $225 = HEAP16[132368>>1]|0;
   $226 = $225&65535;
   $227 = Math_imul($224, $226)|0;
   $228 = $col;
   $229 = (($228) + 1)|0;
   $230 = (($227) + ($229))|0;
   $231 = HEAP32[132360>>2]|0;
   $232 = (($231) + ($230<<1)|0);
   HEAP16[$232>>1] = $223;
   $233 = $col;
   $234 = (($233) + 2)|0;
   $col = $234;
  }
  $235 = $row;
  $236 = (($235) + 2)|0;
  $row = $236;
 }
 STACKTOP = sp;return;
}
function _samsung2_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $c = 0, $col = 0, $diff = 0, $hpred = 0, $huff = 0;
 var $i = 0, $n = 0, $row = 0, $vpred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $huff = sp + 32|0;
 $vpred = sp + 24|0;
 $hpred = sp + 2084|0;
 ;HEAP16[$vpred+0>>1]=0|0;HEAP16[$vpred+2>>1]=0|0;HEAP16[$vpred+4>>1]=0|0;HEAP16[$vpred+6>>1]=0|0;
 HEAP16[$huff>>1] = 10;
 $i = 0;
 $n = 0;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<(14);
  if (!($1)) {
   break;
  }
  $c = 0;
  while(1) {
   $2 = $c;
   $3 = $i;
   $4 = (161080 + ($3<<1)|0);
   $5 = HEAP16[$4>>1]|0;
   $6 = $5&65535;
   $7 = $6 >> 8;
   $8 = 1024 >> $7;
   $9 = ($2|0)<($8|0);
   if (!($9)) {
    break;
   }
   $10 = $i;
   $11 = (161080 + ($10<<1)|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = $n;
   $14 = (($13) + 1)|0;
   $n = $14;
   $15 = (($huff) + ($14<<1)|0);
   HEAP16[$15>>1] = $12;
   $16 = $c;
   $17 = (($16) + 1)|0;
   $c = $17;
  }
  $18 = $i;
  $19 = (($18) + 1)|0;
  $i = $19;
 }
 (_getbithuff(-1,0)|0);
 $row = 0;
 while(1) {
  $20 = $row;
  $21 = HEAP16[133096>>1]|0;
  $22 = $21&65535;
  $23 = ($20|0)<($22|0);
  if (!($23)) {
   break;
  }
  $col = 0;
  while(1) {
   $24 = $col;
   $25 = HEAP16[132368>>1]|0;
   $26 = $25&65535;
   $27 = ($24|0)<($26|0);
   if (!($27)) {
    break;
   }
   $28 = (_ljpeg_diff($huff)|0);
   $diff = $28;
   $29 = $col;
   $30 = ($29|0)<(2);
   if ($30) {
    $31 = $diff;
    $32 = $col;
    $33 = $row;
    $34 = $33 & 1;
    $35 = (($vpred) + ($34<<2)|0);
    $36 = (($35) + ($32<<1)|0);
    $37 = HEAP16[$36>>1]|0;
    $38 = $37&65535;
    $39 = (($38) + ($31))|0;
    $40 = $39&65535;
    HEAP16[$36>>1] = $40;
    $41 = $col;
    $42 = (($hpred) + ($41<<1)|0);
    HEAP16[$42>>1] = $40;
   } else {
    $43 = $diff;
    $44 = $col;
    $45 = $44 & 1;
    $46 = (($hpred) + ($45<<1)|0);
    $47 = HEAP16[$46>>1]|0;
    $48 = $47&65535;
    $49 = (($48) + ($43))|0;
    $50 = $49&65535;
    HEAP16[$46>>1] = $50;
   }
   $51 = $col;
   $52 = $51 & 1;
   $53 = (($hpred) + ($52<<1)|0);
   $54 = HEAP16[$53>>1]|0;
   $55 = $row;
   $56 = HEAP16[132368>>1]|0;
   $57 = $56&65535;
   $58 = Math_imul($55, $57)|0;
   $59 = $col;
   $60 = (($58) + ($59))|0;
   $61 = HEAP32[132360>>2]|0;
   $62 = (($61) + ($60<<1)|0);
   HEAP16[$62>>1] = $54;
   $63 = $col;
   $64 = $63 & 1;
   $65 = (($hpred) + ($64<<1)|0);
   $66 = HEAP16[$65>>1]|0;
   $67 = $66&65535;
   $68 = HEAP32[133800>>2]|0;
   $69 = $67 >> $68;
   $70 = ($69|0)!=(0);
   if ($70) {
    _derror();
   }
   $71 = $col;
   $72 = (($71) + 1)|0;
   $col = $72;
  }
  $73 = $row;
  $74 = (($73) + 1)|0;
  $row = $74;
 }
 STACKTOP = sp;return;
}
function _samsung3_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $col = 0, $diff = 0, $i = 0, $init = 0, $len = 0, $lent = 0, $mag = 0, $opt = 0;
 var $pmode = 0, $pred = 0, $prow = 0, $row = 0, $tab = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $lent = sp + 64|0;
 $len = sp + 56|0;
 $prow = sp + 24|0;
 HEAP16[944>>1] = 18761;
 $0 = HEAP32[880>>2]|0;
 (_fseek(($0|0),9,1)|0);
 $1 = HEAP32[880>>2]|0;
 $2 = (_getc_unlocked(($1|0))|0);
 $opt = $2;
 (_get2()|0);
 $3 = (_get2()|0);
 $4 = $3&65535;
 $init = $4;
 $row = 0;
 while(1) {
  $5 = $row;
  $6 = HEAP16[133096>>1]|0;
  $7 = $6&65535;
  $8 = ($5|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = HEAP32[880>>2]|0;
  $10 = HEAP32[133816>>2]|0;
  $11 = HEAP32[880>>2]|0;
  $12 = (_ftell(($11|0))|0);
  $13 = (($10) - ($12))|0;
  $14 = $13 & 15;
  (_fseek(($9|0),($14|0),1)|0);
  (_ph1_bithuff(-1,0)|0);
  $mag = 0;
  $pmode = 7;
  $c = 0;
  while(1) {
   $15 = $c;
   $16 = ($15|0)<(6);
   if (!($16)) {
    break;
   }
   $17 = $row;
   $18 = ($17|0)<(2);
   $19 = $18 ? 7 : 4;
   $20 = $19&65535;
   $21 = $c;
   $22 = (($lent) + ($21<<1)|0);
   HEAP16[$22>>1] = $20;
   $23 = $c;
   $24 = (($23) + 1)|0;
   $c = $24;
  }
  $25 = $row;
  $26 = (($25) - 1)|0;
  $27 = HEAP16[132368>>1]|0;
  $28 = $27&65535;
  $29 = Math_imul($26, $28)|0;
  $30 = $row;
  $31 = $30 & 1;
  $32 = $31 << 1;
  $33 = (1 - ($32))|0;
  $34 = (($29) + ($33))|0;
  $35 = HEAP32[132360>>2]|0;
  $36 = (($35) + ($34<<1)|0);
  $37 = $row;
  $38 = $37 & 1;
  $39 = (($prow) + ($38<<2)|0);
  HEAP32[$39>>2] = $36;
  $40 = $row;
  $41 = (($40) - 2)|0;
  $42 = HEAP16[132368>>1]|0;
  $43 = $42&65535;
  $44 = Math_imul($41, $43)|0;
  $45 = (($44) + 0)|0;
  $46 = HEAP32[132360>>2]|0;
  $47 = (($46) + ($45<<1)|0);
  $48 = $row;
  $49 = $48 ^ -1;
  $50 = $49 & 1;
  $51 = (($prow) + ($50<<2)|0);
  HEAP32[$51>>2] = $47;
  $tab = 0;
  while(1) {
   $52 = $tab;
   $53 = (($52) + 15)|0;
   $54 = HEAP16[132368>>1]|0;
   $55 = $54&65535;
   $56 = ($53|0)<($55|0);
   if (!($56)) {
    break;
   }
   $57 = $opt;
   $58 = $57 ^ -1;
   $59 = $58 & 4;
   $60 = ($59|0)!=(0);
   if ($60) {
    $61 = $tab;
    $62 = $61 & 63;
    $63 = ($62|0)!=(0);
    if (!($63)) {
     $64 = (_ph1_bithuff(2,0)|0);
     $i = $64;
     $65 = $i;
     $66 = ($65|0)<(3);
     if ($66) {
      $67 = $mag;
      $68 = (($67) - 50)|0;
      $69 = $i;
      $70 = (161112 + ($69)|0);
      $71 = HEAP8[$70>>0]|0;
      $72 = $71 << 24 >> 24;
      $73 = (($68) + ($72))|0;
      $75 = $73;
     } else {
      $74 = (_ph1_bithuff(12,0)|0);
      $75 = $74;
     }
     $mag = $75;
    }
   }
   $76 = $opt;
   $77 = $76 & 2;
   $78 = ($77|0)!=(0);
   if ($78) {
    $79 = (_ph1_bithuff(1,0)|0);
    $80 = $79<<2;
    $81 = (7 - ($80))|0;
    $pmode = $81;
   } else {
    $82 = (_ph1_bithuff(1,0)|0);
    $83 = ($82|0)!=(0);
    if (!($83)) {
     $84 = (_ph1_bithuff(3,0)|0);
     $pmode = $84;
    }
   }
   $85 = $opt;
   $86 = $85 & 1;
   $87 = ($86|0)!=(0);
   if ($87) {
    label = 22;
   } else {
    $88 = (_ph1_bithuff(1,0)|0);
    $89 = ($88|0)!=(0);
    if (!($89)) {
     label = 22;
    }
   }
   if ((label|0) == 22) {
    label = 0;
    $c = 0;
    while(1) {
     $90 = $c;
     $91 = ($90|0)<(4);
     if (!($91)) {
      break;
     }
     $92 = (_ph1_bithuff(2,0)|0);
     $93 = $92&65535;
     $94 = $c;
     $95 = (($len) + ($94<<1)|0);
     HEAP16[$95>>1] = $93;
     $96 = $c;
     $97 = (($96) + 1)|0;
     $c = $97;
    }
    $c = 0;
    while(1) {
     $98 = $c;
     $99 = ($98|0)<(4);
     if (!($99)) {
      break;
     }
     $100 = $row;
     $101 = $100 & 1;
     $102 = $101 << 1;
     $103 = $c;
     $104 = $103 & 1;
     $105 = $102 | $104;
     $106 = (($105|0) % 3)&-1;
     $i = $106;
     $107 = $c;
     $108 = (($len) + ($107<<1)|0);
     $109 = HEAP16[$108>>1]|0;
     $110 = $109&65535;
     $111 = ($110|0)<(3);
     if ($111) {
      $112 = $i;
      $113 = (($lent) + ($112<<2)|0);
      $114 = HEAP16[$113>>1]|0;
      $115 = $114&65535;
      $116 = (($115) - 49)|0;
      $117 = $c;
      $118 = (($len) + ($117<<1)|0);
      $119 = HEAP16[$118>>1]|0;
      $120 = $119&65535;
      $121 = (161120 + ($120)|0);
      $122 = HEAP8[$121>>0]|0;
      $123 = $122 << 24 >> 24;
      $124 = (($116) + ($123))|0;
      $127 = $124;
     } else {
      $125 = (_ph1_bithuff(4,0)|0);
      $127 = $125;
     }
     $126 = $127&65535;
     $128 = $c;
     $129 = (($len) + ($128<<1)|0);
     HEAP16[$129>>1] = $126;
     $130 = $i;
     $131 = (($lent) + ($130<<2)|0);
     $132 = (($131) + 2|0);
     $133 = HEAP16[$132>>1]|0;
     $134 = $i;
     $135 = (($lent) + ($134<<2)|0);
     HEAP16[$135>>1] = $133;
     $136 = $c;
     $137 = (($len) + ($136<<1)|0);
     $138 = HEAP16[$137>>1]|0;
     $139 = $i;
     $140 = (($lent) + ($139<<2)|0);
     $141 = (($140) + 2|0);
     HEAP16[$141>>1] = $138;
     $142 = $c;
     $143 = (($142) + 1)|0;
     $c = $143;
    }
   }
   $c = 0;
   while(1) {
    $144 = $c;
    $145 = ($144|0)<(16);
    if (!($145)) {
     break;
    }
    $146 = $tab;
    $147 = $c;
    $148 = $147 & 7;
    $149 = $148 << 1;
    $150 = $c;
    $151 = $150 >> 3;
    $152 = $149 ^ $151;
    $153 = $row;
    $154 = $153 & 1;
    $155 = $152 ^ $154;
    $156 = (($146) + ($155))|0;
    $col = $156;
    $157 = $pmode;
    $158 = ($157|0)==(7);
    if ($158) {
     label = 38;
    } else {
     $159 = $row;
     $160 = ($159|0)<(2);
     if ($160) {
      label = 38;
     } else {
      $178 = $col;
      $179 = (($178) - 52)|0;
      $180 = $pmode;
      $181 = (161128 + ($180)|0);
      $182 = HEAP8[$181>>0]|0;
      $183 = $182 << 24 >> 24;
      $184 = (($179) + ($183))|0;
      $185 = $col;
      $186 = $185 & 1;
      $187 = (($prow) + ($186<<2)|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = (($188) + ($184<<1)|0);
      $190 = HEAP16[$189>>1]|0;
      $191 = $190&65535;
      $192 = $col;
      $193 = (($192) - 52)|0;
      $194 = $pmode;
      $195 = (161136 + ($194)|0);
      $196 = HEAP8[$195>>0]|0;
      $197 = $196 << 24 >> 24;
      $198 = (($193) + ($197))|0;
      $199 = $col;
      $200 = $199 & 1;
      $201 = (($prow) + ($200<<2)|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = (($202) + ($198<<1)|0);
      $204 = HEAP16[$203>>1]|0;
      $205 = $204&65535;
      $206 = (($191) + ($205))|0;
      $207 = (($206) + 1)|0;
      $208 = $207 >> 1;
      $209 = $208;
     }
    }
    if ((label|0) == 38) {
     label = 0;
     $161 = $tab;
     $162 = ($161|0)!=(0);
     if ($162) {
      $163 = $row;
      $164 = HEAP16[132368>>1]|0;
      $165 = $164&65535;
      $166 = Math_imul($163, $165)|0;
      $167 = $tab;
      $168 = (($167) - 2)|0;
      $169 = $col;
      $170 = $169 & 1;
      $171 = (($168) + ($170))|0;
      $172 = (($166) + ($171))|0;
      $173 = HEAP32[132360>>2]|0;
      $174 = (($173) + ($172<<1)|0);
      $175 = HEAP16[$174>>1]|0;
      $176 = $175&65535;
      $250 = $176;
     } else {
      $177 = $init;
      $250 = $177;
     }
     $209 = $250;
    }
    $pred = $209;
    $210 = $c;
    $211 = $210 >> 2;
    $212 = (($len) + ($211<<1)|0);
    $213 = HEAP16[$212>>1]|0;
    $214 = $213&65535;
    $i = $214;
    $215 = (_ph1_bithuff($214,0)|0);
    $diff = $215;
    $216 = $diff;
    $217 = $i;
    $218 = (($217) - 1)|0;
    $219 = $216 >> $218;
    $220 = ($219|0)!=(0);
    if ($220) {
     $221 = $i;
     $222 = 1 << $221;
     $223 = $diff;
     $224 = (($223) - ($222))|0;
     $diff = $224;
    }
    $225 = $diff;
    $226 = $mag;
    $227 = $226<<1;
    $228 = (($227) + 1)|0;
    $229 = Math_imul($225, $228)|0;
    $230 = $mag;
    $231 = (($229) + ($230))|0;
    $diff = $231;
    $232 = $pred;
    $233 = $diff;
    $234 = (($232) + ($233))|0;
    $235 = $234&65535;
    $236 = $row;
    $237 = HEAP16[132368>>1]|0;
    $238 = $237&65535;
    $239 = Math_imul($236, $238)|0;
    $240 = $col;
    $241 = (($239) + ($240))|0;
    $242 = HEAP32[132360>>2]|0;
    $243 = (($242) + ($241<<1)|0);
    HEAP16[$243>>1] = $235;
    $244 = $c;
    $245 = (($244) + 1)|0;
    $c = $245;
   }
   $246 = $tab;
   $247 = (($246) + 16)|0;
   $tab = $247;
  }
  $248 = $row;
  $249 = (($248) + 1)|0;
  $row = $249;
 }
 STACKTOP = sp;return;
}
function _smal_decode_segment($seg,$holes) {
 $seg = $seg|0;
 $holes = $holes|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bin = 0, $carry = 0, $count = 0, $data = 0, $diff = 0, $high = 0, $hist = 0, $i = 0, $low = 0, $nbits = 0;
 var $next = 0, $pix = 0, $pred = 0, $range = 0, $s = 0, $sym = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $hist = sp + 67|0;
 $sym = sp + 28|0;
 $pred = sp + 64|0;
 $0 = $seg;
 $1 = $holes;
 dest=$hist+0|0; src=161144+0|0; stop=dest+39|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $high = 255;
 $carry = 0;
 $nbits = 8;
 ;HEAP8[$pred+0>>0]=0|0;HEAP8[$pred+1>>0]=0|0;
 $data = 0;
 $range = 0;
 $2 = HEAP32[880>>2]|0;
 $3 = $0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 1)|0;
 (_fseek(($2|0),($6|0),0)|0);
 (_getbithuff(-1,0)|0);
 $7 = $0;
 $8 = HEAP32[$7>>2]|0;
 $pix = $8;
 while(1) {
  $9 = $pix;
  $10 = $0;
  $11 = (($10) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9>>>0)<($12>>>0);
  if (!($13)) {
   break;
  }
  $s = 0;
  while(1) {
   $14 = $s;
   $15 = ($14|0)<(3);
   if (!($15)) {
    break;
   }
   $16 = $data;
   $17 = $16&65535;
   $18 = $nbits;
   $19 = $17 << $18;
   $20 = $nbits;
   $21 = (_getbithuff($20,0)|0);
   $22 = $19 | $21;
   $23 = $22&65535;
   $data = $23;
   $24 = $carry;
   $25 = ($24|0)<(0);
   if ($25) {
    $26 = $carry;
    $27 = (($26) + 1)|0;
    $28 = $nbits;
    $29 = (($28) + ($27))|0;
    $nbits = $29;
    $30 = ($29|0)<(1);
    if ($30) {
     $31 = $nbits;
     $32 = (($31) - 1)|0;
     $33 = $32;
    } else {
     $33 = 0;
    }
    $carry = $33;
   }
   while(1) {
    $34 = $nbits;
    $35 = (($34) + -1)|0;
    $nbits = $35;
    $36 = ($35|0)>=(0);
    if (!($36)) {
     break;
    }
    $37 = $data;
    $38 = $37&65535;
    $39 = $nbits;
    $40 = $38 >> $39;
    $41 = $40 & 255;
    $42 = ($41|0)==(255);
    if ($42) {
     label = 13;
     break;
    }
   }
   if ((label|0) == 13) {
    label = 0;
   }
   $43 = $nbits;
   $44 = ($43|0)>(0);
   if ($44) {
    $45 = $data;
    $46 = $45&65535;
    $47 = $nbits;
    $48 = (($47) - 1)|0;
    $49 = 1 << $48;
    $50 = (($49) - 1)|0;
    $51 = $46 & $50;
    $52 = $51 << 1;
    $53 = $data;
    $54 = $53&65535;
    $55 = $data;
    $56 = $55&65535;
    $57 = $nbits;
    $58 = (($57) - 1)|0;
    $59 = 1 << $58;
    $60 = $56 & $59;
    $61 = $60 << 1;
    $62 = (($54) + ($61))|0;
    $63 = $nbits;
    $64 = -1 << $63;
    $65 = $62 & $64;
    $66 = $52 | $65;
    $67 = $66&65535;
    $data = $67;
   }
   $68 = $nbits;
   $69 = ($68|0)>=(0);
   if ($69) {
    $70 = (_getbithuff(1,0)|0);
    $71 = $data;
    $72 = $71&65535;
    $73 = (($72) + ($70))|0;
    $74 = $73&65535;
    $data = $74;
    $75 = $nbits;
    $76 = (($75) - 8)|0;
    $carry = $76;
   }
   $77 = $data;
   $78 = $77&65535;
   $79 = $range;
   $80 = $79&65535;
   $81 = (($78) - ($80))|0;
   $82 = (($81) + 1)|0;
   $83 = $82 & 65535;
   $84 = $83 << 2;
   $85 = (($84) - 1)|0;
   $86 = $high;
   $87 = $86 >> 4;
   $88 = (($85|0) / ($87|0))&-1;
   $count = $88;
   $bin = 0;
   while(1) {
    $89 = $bin;
    $90 = (($89) + 5)|0;
    $91 = $s;
    $92 = (($hist) + (($91*13)|0)|0);
    $93 = (($92) + ($90)|0);
    $94 = HEAP8[$93>>0]|0;
    $95 = $94&255;
    $96 = $count;
    $97 = ($95|0)>($96|0);
    if (!($97)) {
     break;
    }
    $98 = $bin;
    $99 = (($98) + 1)|0;
    $bin = $99;
   }
   $100 = $bin;
   $101 = (($100) + 5)|0;
   $102 = $s;
   $103 = (($hist) + (($102*13)|0)|0);
   $104 = (($103) + ($101)|0);
   $105 = HEAP8[$104>>0]|0;
   $106 = $105&255;
   $107 = $high;
   $108 = $107 >> 4;
   $109 = Math_imul($106, $108)|0;
   $110 = $109 >> 2;
   $low = $110;
   $111 = $bin;
   $112 = ($111|0)!=(0);
   if ($112) {
    $113 = $bin;
    $114 = (($113) + 4)|0;
    $115 = $s;
    $116 = (($hist) + (($115*13)|0)|0);
    $117 = (($116) + ($114)|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118&255;
    $120 = $high;
    $121 = $120 >> 4;
    $122 = Math_imul($119, $121)|0;
    $123 = $122 >> 2;
    $high = $123;
   }
   $124 = $low;
   $125 = $high;
   $126 = (($125) - ($124))|0;
   $high = $126;
   $nbits = 0;
   while(1) {
    $127 = $high;
    $128 = $nbits;
    $129 = $127 << $128;
    $130 = ($129|0)<(128);
    if (!($130)) {
     break;
    }
    $131 = $nbits;
    $132 = (($131) + 1)|0;
    $nbits = $132;
   }
   $133 = $range;
   $134 = $133&65535;
   $135 = $low;
   $136 = (($134) + ($135))|0;
   $137 = $nbits;
   $138 = $136 << $137;
   $139 = $138&65535;
   $range = $139;
   $140 = $nbits;
   $141 = $high;
   $142 = $141 << $140;
   $high = $142;
   $143 = $s;
   $144 = (($hist) + (($143*13)|0)|0);
   $145 = (($144) + 1|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = $146&255;
   $next = $147;
   $148 = $s;
   $149 = (($hist) + (($148*13)|0)|0);
   $150 = (($149) + 2|0);
   $151 = HEAP8[$150>>0]|0;
   $152 = (($151) + 1)<<24>>24;
   HEAP8[$150>>0] = $152;
   $153 = $152&255;
   $154 = $s;
   $155 = (($hist) + (($154*13)|0)|0);
   $156 = (($155) + 3|0);
   $157 = HEAP8[$156>>0]|0;
   $158 = $157&255;
   $159 = ($153|0)>($158|0);
   if ($159) {
    $160 = $next;
    $161 = (($160) + 1)|0;
    $162 = $s;
    $163 = (($hist) + (($162*13)|0)|0);
    $164 = HEAP8[$163>>0]|0;
    $165 = $164&255;
    $166 = $161 & $165;
    $next = $166;
    $167 = $next;
    $168 = (($167) + 4)|0;
    $169 = $s;
    $170 = (($hist) + (($169*13)|0)|0);
    $171 = (($170) + ($168)|0);
    $172 = HEAP8[$171>>0]|0;
    $173 = $172&255;
    $174 = $next;
    $175 = (($174) + 5)|0;
    $176 = $s;
    $177 = (($hist) + (($176*13)|0)|0);
    $178 = (($177) + ($175)|0);
    $179 = HEAP8[$178>>0]|0;
    $180 = $179&255;
    $181 = (($173) - ($180))|0;
    $182 = $181 >> 2;
    $183 = $182&255;
    $184 = $s;
    $185 = (($hist) + (($184*13)|0)|0);
    $186 = (($185) + 3|0);
    HEAP8[$186>>0] = $183;
    $187 = $s;
    $188 = (($hist) + (($187*13)|0)|0);
    $189 = (($188) + 2|0);
    HEAP8[$189>>0] = 1;
   }
   $190 = $s;
   $191 = (($hist) + (($190*13)|0)|0);
   $192 = (($191) + 1|0);
   $193 = HEAP8[$192>>0]|0;
   $194 = $193&255;
   $195 = (($194) + 4)|0;
   $196 = $s;
   $197 = (($hist) + (($196*13)|0)|0);
   $198 = (($197) + ($195)|0);
   $199 = HEAP8[$198>>0]|0;
   $200 = $199&255;
   $201 = $s;
   $202 = (($hist) + (($201*13)|0)|0);
   $203 = (($202) + 1|0);
   $204 = HEAP8[$203>>0]|0;
   $205 = $204&255;
   $206 = (($205) + 5)|0;
   $207 = $s;
   $208 = (($hist) + (($207*13)|0)|0);
   $209 = (($208) + ($206)|0);
   $210 = HEAP8[$209>>0]|0;
   $211 = $210&255;
   $212 = (($200) - ($211))|0;
   $213 = ($212|0)>(1);
   if ($213) {
    $214 = $bin;
    $215 = $s;
    $216 = (($hist) + (($215*13)|0)|0);
    $217 = (($216) + 1|0);
    $218 = HEAP8[$217>>0]|0;
    $219 = $218&255;
    $220 = ($214|0)<($219|0);
    if ($220) {
     $221 = $bin;
     $i = $221;
     while(1) {
      $222 = $i;
      $223 = $s;
      $224 = (($hist) + (($223*13)|0)|0);
      $225 = (($224) + 1|0);
      $226 = HEAP8[$225>>0]|0;
      $227 = $226&255;
      $228 = ($222|0)<($227|0);
      if (!($228)) {
       break;
      }
      $229 = $i;
      $230 = (($229) + 5)|0;
      $231 = $s;
      $232 = (($hist) + (($231*13)|0)|0);
      $233 = (($232) + ($230)|0);
      $234 = HEAP8[$233>>0]|0;
      $235 = (($234) + -1)<<24>>24;
      HEAP8[$233>>0] = $235;
      $236 = $i;
      $237 = (($236) + 1)|0;
      $i = $237;
     }
    } else {
     $238 = $next;
     $239 = $bin;
     $240 = ($238|0)<=($239|0);
     if ($240) {
      $241 = $s;
      $242 = (($hist) + (($241*13)|0)|0);
      $243 = (($242) + 1|0);
      $244 = HEAP8[$243>>0]|0;
      $245 = $244&255;
      $i = $245;
      while(1) {
       $246 = $i;
       $247 = $bin;
       $248 = ($246|0)<($247|0);
       if (!($248)) {
        break;
       }
       $249 = $i;
       $250 = (($249) + 5)|0;
       $251 = $s;
       $252 = (($hist) + (($251*13)|0)|0);
       $253 = (($252) + ($250)|0);
       $254 = HEAP8[$253>>0]|0;
       $255 = (($254) + 1)<<24>>24;
       HEAP8[$253>>0] = $255;
       $256 = $i;
       $257 = (($256) + 1)|0;
       $i = $257;
      }
     }
    }
   }
   $258 = $next;
   $259 = $258&255;
   $260 = $s;
   $261 = (($hist) + (($260*13)|0)|0);
   $262 = (($261) + 1|0);
   HEAP8[$262>>0] = $259;
   $263 = $bin;
   $264 = $s;
   $265 = (($sym) + ($264<<2)|0);
   HEAP32[$265>>2] = $263;
   $266 = $s;
   $267 = (($266) + 1)|0;
   $s = $267;
  }
  $268 = (($sym) + 8|0);
  $269 = HEAP32[$268>>2]|0;
  $270 = $269 << 5;
  $271 = (($sym) + 4|0);
  $272 = HEAP32[$271>>2]|0;
  $273 = $272 << 2;
  $274 = $270 | $273;
  $275 = HEAP32[$sym>>2]|0;
  $276 = $275 & 3;
  $277 = $274 | $276;
  $278 = $277&255;
  $diff = $278;
  $279 = HEAP32[$sym>>2]|0;
  $280 = $279 & 4;
  $281 = ($280|0)!=(0);
  if ($281) {
   $282 = $diff;
   $283 = $282&255;
   $284 = ($283|0)!=(0);
   if ($284) {
    $285 = $diff;
    $286 = $285&255;
    $287 = (0 - ($286))|0;
    $289 = $287;
   } else {
    $289 = 128;
   }
   $288 = $289&255;
   $diff = $288;
  }
  $290 = HEAP32[880>>2]|0;
  $291 = (_ftell(($290|0))|0);
  $292 = (($291) + 12)|0;
  $293 = $0;
  $294 = (($293) + 8|0);
  $295 = (($294) + 4|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = ($292>>>0)>=($296>>>0);
  if ($297) {
   $diff = 0;
  }
  $298 = $diff;
  $299 = $298&255;
  $300 = $pix;
  $301 = $300 & 1;
  $302 = (($pred) + ($301)|0);
  $303 = HEAP8[$302>>0]|0;
  $304 = $303&255;
  $305 = (($304) + ($299))|0;
  $306 = $305&255;
  HEAP8[$302>>0] = $306;
  $307 = $306&255;
  $308 = $pix;
  $309 = HEAP32[132360>>2]|0;
  $310 = (($309) + ($308<<1)|0);
  HEAP16[$310>>1] = $307;
  $311 = $pix;
  $312 = $311 & 1;
  $313 = ($312|0)!=(0);
  if (!($313)) {
   $314 = $1;
   $315 = $pix;
   $316 = HEAP16[132368>>1]|0;
   $317 = $316&65535;
   $318 = (($315|0) / ($317|0))&-1;
   $319 = HEAP16[133096>>1]|0;
   $320 = $319&65535;
   $321 = (($318) - ($320))|0;
   $322 = $321 & 7;
   $323 = $314 >> $322;
   $324 = $323 & 1;
   $325 = ($324|0)!=(0);
   if ($325) {
    $326 = $pix;
    $327 = (($326) + 2)|0;
    $pix = $327;
   }
  }
  $328 = $pix;
  $329 = (($328) + 1)|0;
  $pix = $329;
 }
 HEAP32[132400>>2] = 255;
 STACKTOP = sp;return;
}
function _smal_v6_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $seg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $seg = sp;
 $0 = HEAP32[880>>2]|0;
 (_fseek(($0|0),16,0)|0);
 HEAP32[$seg>>2] = 0;
 $1 = (_get2()|0);
 $2 = $1&65535;
 $3 = (($seg) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP16[132368>>1]|0;
 $5 = $4&65535;
 $6 = HEAP16[133096>>1]|0;
 $7 = $6&65535;
 $8 = Math_imul($5, $7)|0;
 $9 = (($seg) + 8|0);
 HEAP32[$9>>2] = $8;
 $10 = (($seg) + 8|0);
 $11 = (($10) + 4|0);
 HEAP32[$11>>2] = 2147483647;
 _smal_decode_segment($seg,0);
 STACKTOP = sp;return;
}
function _median4($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $max = 0, $min = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $sum = $2;
 $max = $2;
 $min = $2;
 $i = 1;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(4);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = $0;
  $7 = (($6) + ($5<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $sum;
  $10 = (($9) + ($8))|0;
  $sum = $10;
  $11 = $min;
  $12 = $i;
  $13 = $0;
  $14 = (($13) + ($12<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($11|0)>($15|0);
  if ($16) {
   $17 = $i;
   $18 = $0;
   $19 = (($18) + ($17<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $min = $20;
  }
  $21 = $max;
  $22 = $i;
  $23 = $0;
  $24 = (($23) + ($22<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($21|0)<($25|0);
  if ($26) {
   $27 = $i;
   $28 = $0;
   $29 = (($28) + ($27<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $max = $30;
  }
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 $33 = $sum;
 $34 = $min;
 $35 = (($33) - ($34))|0;
 $36 = $max;
 $37 = (($35) - ($36))|0;
 $38 = $37 >> 1;
 STACKTOP = sp;return ($38|0);
}
function _fill_holes($holes) {
 $holes = $holes|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $col = 0, $row = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val = sp + 8|0;
 $0 = $holes;
 $row = 2;
 while(1) {
  $1 = $row;
  $2 = HEAP16[132112>>1]|0;
  $3 = $2&65535;
  $4 = (($3) - 2)|0;
  $5 = ($1|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $0;
  $7 = $row;
  $8 = HEAP16[133096>>1]|0;
  $9 = $8&65535;
  $10 = (($7) - ($9))|0;
  $11 = $10 & 7;
  $12 = $6 >> $11;
  $13 = $12 & 1;
  $14 = ($13|0)!=(0);
  if ($14) {
   $col = 1;
   while(1) {
    $15 = $col;
    $16 = HEAP16[132120>>1]|0;
    $17 = $16&65535;
    $18 = (($17) - 1)|0;
    $19 = ($15|0)<($18|0);
    if (!($19)) {
     break;
    }
    $20 = $row;
    $21 = (($20) - 1)|0;
    $22 = HEAP16[132368>>1]|0;
    $23 = $22&65535;
    $24 = Math_imul($21, $23)|0;
    $25 = $col;
    $26 = (($25) - 1)|0;
    $27 = (($24) + ($26))|0;
    $28 = HEAP32[132360>>2]|0;
    $29 = (($28) + ($27<<1)|0);
    $30 = HEAP16[$29>>1]|0;
    $31 = $30&65535;
    HEAP32[$val>>2] = $31;
    $32 = $row;
    $33 = (($32) - 1)|0;
    $34 = HEAP16[132368>>1]|0;
    $35 = $34&65535;
    $36 = Math_imul($33, $35)|0;
    $37 = $col;
    $38 = (($37) + 1)|0;
    $39 = (($36) + ($38))|0;
    $40 = HEAP32[132360>>2]|0;
    $41 = (($40) + ($39<<1)|0);
    $42 = HEAP16[$41>>1]|0;
    $43 = $42&65535;
    $44 = (($val) + 4|0);
    HEAP32[$44>>2] = $43;
    $45 = $row;
    $46 = (($45) + 1)|0;
    $47 = HEAP16[132368>>1]|0;
    $48 = $47&65535;
    $49 = Math_imul($46, $48)|0;
    $50 = $col;
    $51 = (($50) - 1)|0;
    $52 = (($49) + ($51))|0;
    $53 = HEAP32[132360>>2]|0;
    $54 = (($53) + ($52<<1)|0);
    $55 = HEAP16[$54>>1]|0;
    $56 = $55&65535;
    $57 = (($val) + 8|0);
    HEAP32[$57>>2] = $56;
    $58 = $row;
    $59 = (($58) + 1)|0;
    $60 = HEAP16[132368>>1]|0;
    $61 = $60&65535;
    $62 = Math_imul($59, $61)|0;
    $63 = $col;
    $64 = (($63) + 1)|0;
    $65 = (($62) + ($64))|0;
    $66 = HEAP32[132360>>2]|0;
    $67 = (($66) + ($65<<1)|0);
    $68 = HEAP16[$67>>1]|0;
    $69 = $68&65535;
    $70 = (($val) + 12|0);
    HEAP32[$70>>2] = $69;
    $71 = (_median4($val)|0);
    $72 = $71&65535;
    $73 = $row;
    $74 = HEAP16[132368>>1]|0;
    $75 = $74&65535;
    $76 = Math_imul($73, $75)|0;
    $77 = $col;
    $78 = (($76) + ($77))|0;
    $79 = HEAP32[132360>>2]|0;
    $80 = (($79) + ($78<<1)|0);
    HEAP16[$80>>1] = $72;
    $81 = $col;
    $82 = (($81) + 4)|0;
    $col = $82;
   }
   $col = 2;
   while(1) {
    $83 = $col;
    $84 = HEAP16[132120>>1]|0;
    $85 = $84&65535;
    $86 = (($85) - 2)|0;
    $87 = ($83|0)<($86|0);
    if (!($87)) {
     break;
    }
    $88 = $0;
    $89 = $row;
    $90 = (($89) - 2)|0;
    $91 = HEAP16[133096>>1]|0;
    $92 = $91&65535;
    $93 = (($90) - ($92))|0;
    $94 = $93 & 7;
    $95 = $88 >> $94;
    $96 = $95 & 1;
    $97 = ($96|0)!=(0);
    if ($97) {
     label = 13;
    } else {
     $98 = $0;
     $99 = $row;
     $100 = (($99) + 2)|0;
     $101 = HEAP16[133096>>1]|0;
     $102 = $101&65535;
     $103 = (($100) - ($102))|0;
     $104 = $103 & 7;
     $105 = $98 >> $104;
     $106 = $105 & 1;
     $107 = ($106|0)!=(0);
     if ($107) {
      label = 13;
     } else {
      $141 = $row;
      $142 = HEAP16[132368>>1]|0;
      $143 = $142&65535;
      $144 = Math_imul($141, $143)|0;
      $145 = $col;
      $146 = (($145) - 2)|0;
      $147 = (($144) + ($146))|0;
      $148 = HEAP32[132360>>2]|0;
      $149 = (($148) + ($147<<1)|0);
      $150 = HEAP16[$149>>1]|0;
      $151 = $150&65535;
      HEAP32[$val>>2] = $151;
      $152 = $row;
      $153 = HEAP16[132368>>1]|0;
      $154 = $153&65535;
      $155 = Math_imul($152, $154)|0;
      $156 = $col;
      $157 = (($156) + 2)|0;
      $158 = (($155) + ($157))|0;
      $159 = HEAP32[132360>>2]|0;
      $160 = (($159) + ($158<<1)|0);
      $161 = HEAP16[$160>>1]|0;
      $162 = $161&65535;
      $163 = (($val) + 4|0);
      HEAP32[$163>>2] = $162;
      $164 = $row;
      $165 = (($164) - 2)|0;
      $166 = HEAP16[132368>>1]|0;
      $167 = $166&65535;
      $168 = Math_imul($165, $167)|0;
      $169 = $col;
      $170 = (($168) + ($169))|0;
      $171 = HEAP32[132360>>2]|0;
      $172 = (($171) + ($170<<1)|0);
      $173 = HEAP16[$172>>1]|0;
      $174 = $173&65535;
      $175 = (($val) + 8|0);
      HEAP32[$175>>2] = $174;
      $176 = $row;
      $177 = (($176) + 2)|0;
      $178 = HEAP16[132368>>1]|0;
      $179 = $178&65535;
      $180 = Math_imul($177, $179)|0;
      $181 = $col;
      $182 = (($180) + ($181))|0;
      $183 = HEAP32[132360>>2]|0;
      $184 = (($183) + ($182<<1)|0);
      $185 = HEAP16[$184>>1]|0;
      $186 = $185&65535;
      $187 = (($val) + 12|0);
      HEAP32[$187>>2] = $186;
      $188 = (_median4($val)|0);
      $189 = $188&65535;
      $190 = $row;
      $191 = HEAP16[132368>>1]|0;
      $192 = $191&65535;
      $193 = Math_imul($190, $192)|0;
      $194 = $col;
      $195 = (($193) + ($194))|0;
      $196 = HEAP32[132360>>2]|0;
      $197 = (($196) + ($195<<1)|0);
      HEAP16[$197>>1] = $189;
     }
    }
    if ((label|0) == 13) {
     label = 0;
     $108 = $row;
     $109 = HEAP16[132368>>1]|0;
     $110 = $109&65535;
     $111 = Math_imul($108, $110)|0;
     $112 = $col;
     $113 = (($112) - 2)|0;
     $114 = (($111) + ($113))|0;
     $115 = HEAP32[132360>>2]|0;
     $116 = (($115) + ($114<<1)|0);
     $117 = HEAP16[$116>>1]|0;
     $118 = $117&65535;
     $119 = $row;
     $120 = HEAP16[132368>>1]|0;
     $121 = $120&65535;
     $122 = Math_imul($119, $121)|0;
     $123 = $col;
     $124 = (($123) + 2)|0;
     $125 = (($122) + ($124))|0;
     $126 = HEAP32[132360>>2]|0;
     $127 = (($126) + ($125<<1)|0);
     $128 = HEAP16[$127>>1]|0;
     $129 = $128&65535;
     $130 = (($118) + ($129))|0;
     $131 = $130 >> 1;
     $132 = $131&65535;
     $133 = $row;
     $134 = HEAP16[132368>>1]|0;
     $135 = $134&65535;
     $136 = Math_imul($133, $135)|0;
     $137 = $col;
     $138 = (($136) + ($137))|0;
     $139 = HEAP32[132360>>2]|0;
     $140 = (($139) + ($138<<1)|0);
     HEAP16[$140>>1] = $132;
    }
    $198 = $col;
    $199 = (($198) + 4)|0;
    $col = $199;
   }
  } else {
  }
  $200 = $row;
  $201 = (($200) + 1)|0;
  $row = $201;
 }
 STACKTOP = sp;return;
}
function _smal_v9_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $holes = 0, $i = 0, $nseg = 0, $offset = 0, $seg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2064|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $seg = sp + 16|0;
 $0 = HEAP32[880>>2]|0;
 (_fseek(($0|0),67,0)|0);
 $1 = (_get4()|0);
 $offset = $1;
 $2 = HEAP32[880>>2]|0;
 $3 = (_getc_unlocked(($2|0))|0);
 $4 = $3&255;
 $5 = $4&255;
 $nseg = $5;
 $6 = HEAP32[880>>2]|0;
 $7 = $offset;
 (_fseek(($6|0),($7|0),0)|0);
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = $nseg;
  $10 = $9<<1;
  $11 = ($8>>>0)<($10>>>0);
  if (!($11)) {
   break;
  }
  $12 = (_get4()|0);
  $13 = HEAP32[133816>>2]|0;
  $14 = $i;
  $15 = $14 & 1;
  $16 = Math_imul($13, $15)|0;
  $17 = (($12) + ($16))|0;
  $18 = $i;
  $19 = (($seg) + ($18<<2)|0);
  HEAP32[$19>>2] = $17;
  $20 = $i;
  $21 = (($20) + 1)|0;
  $i = $21;
 }
 $22 = HEAP32[880>>2]|0;
 (_fseek(($22|0),78,0)|0);
 $23 = HEAP32[880>>2]|0;
 $24 = (_getc_unlocked(($23|0))|0);
 $holes = $24;
 $25 = HEAP32[880>>2]|0;
 (_fseek(($25|0),88,0)|0);
 $26 = HEAP16[133096>>1]|0;
 $27 = $26&65535;
 $28 = HEAP16[132368>>1]|0;
 $29 = $28&65535;
 $30 = Math_imul($27, $29)|0;
 $31 = $nseg;
 $32 = (($seg) + ($31<<3)|0);
 HEAP32[$32>>2] = $30;
 $33 = (_get4()|0);
 $34 = HEAP32[133816>>2]|0;
 $35 = (($33) + ($34))|0;
 $36 = $nseg;
 $37 = (($seg) + ($36<<3)|0);
 $38 = (($37) + 4|0);
 HEAP32[$38>>2] = $35;
 $i = 0;
 while(1) {
  $39 = $i;
  $40 = $nseg;
  $41 = ($39>>>0)<($40>>>0);
  if (!($41)) {
   break;
  }
  $42 = $i;
  $43 = (($seg) + ($42<<3)|0);
  $44 = $holes;
  _smal_decode_segment($43,$44);
  $45 = $i;
  $46 = (($45) + 1)|0;
  $i = $46;
 }
 $47 = $holes;
 $48 = ($47|0)!=(0);
 if (!($48)) {
  STACKTOP = sp;return;
 }
 $49 = $holes;
 _fill_holes($49);
 STACKTOP = sp;return;
}
function _redcine_load_raw() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _foveon_decoder($size,$code) {
 $size = $size|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur = 0, $i = 0, $len = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $size;
 $1 = $code;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  $i = 0;
  while(1) {
   $4 = $i;
   $5 = $0;
   $6 = ($4>>>0)<($5>>>0);
   if (!($6)) {
    break;
   }
   $7 = (_get4()|0);
   $8 = $i;
   $9 = (161184 + ($8<<2)|0);
   HEAP32[$9>>2] = $7;
   $10 = $i;
   $11 = (($10) + 1)|0;
   $i = $11;
  }
  _memset((165280|0),0,24576)|0;
  HEAP32[189856>>2] = 165280;
 }
 $12 = HEAP32[189856>>2]|0;
 $13 = (($12) + 12|0);
 HEAP32[189856>>2] = $13;
 $cur = $12;
 $14 = HEAP32[189856>>2]|0;
 $15 = ($14>>>0)>(((165280 + 24576|0))>>>0);
 if ($15) {
  $16 = HEAP32[_stderr>>2]|0;
  $17 = HEAP32[696>>2]|0;
  HEAP32[$vararg_buffer>>2] = $17;
  (_fprintf(($16|0),(189864|0),($vararg_buffer|0))|0);
  _longjmp((704|0),2);
  // unreachable;
 }
 $18 = $1;
 $19 = ($18|0)!=(0);
 do {
  if ($19) {
   $i = 0;
   while(1) {
    $20 = $i;
    $21 = $0;
    $22 = ($20>>>0)<($21>>>0);
    if (!($22)) {
     label = 16;
     break;
    }
    $23 = $i;
    $24 = (161184 + ($23<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $1;
    $27 = ($25|0)==($26|0);
    if ($27) {
     break;
    }
    $31 = $i;
    $32 = (($31) + 1)|0;
    $i = $32;
   }
   if ((label|0) == 16) {
    break;
   }
   $28 = $i;
   $29 = $cur;
   $30 = (($29) + 8|0);
   HEAP32[$30>>2] = $28;
   STACKTOP = sp;return;
  }
 } while(0);
 $33 = $1;
 $34 = $33 >>> 27;
 $len = $34;
 $35 = ($34|0)>(26);
 if ($35) {
  STACKTOP = sp;return;
 } else {
  $36 = $len;
  $37 = (($36) + 1)|0;
  $38 = $37 << 27;
  $39 = $1;
  $40 = $39 & 67108863;
  $41 = $40 << 1;
  $42 = $38 | $41;
  $1 = $42;
  $43 = HEAP32[189856>>2]|0;
  $44 = $cur;
  HEAP32[$44>>2] = $43;
  $45 = $0;
  $46 = $1;
  _foveon_decoder($45,$46);
  $47 = HEAP32[189856>>2]|0;
  $48 = $cur;
  $49 = (($48) + 4|0);
  HEAP32[$49>>2] = $47;
  $50 = $0;
  $51 = $1;
  $52 = (($51) + 1)|0;
  _foveon_decoder($50,$52);
  STACKTOP = sp;return;
 }
}
function _foveon_thumb() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $bit = 0, $bitbuf = 0, $buf = 0, $bwide = 0, $c = 0, $col = 0, $dindex = 0, $i = 0, $pred = 0, $row = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $pred = sp + 44|0;
 $bitbuf = 0;
 $bit = 1;
 $0 = (_get4()|0);
 $bwide = $0;
 $1 = HEAP32[134336>>2]|0;
 $2 = HEAP16[134296>>1]|0;
 $3 = $2&65535;
 $4 = HEAP16[134304>>1]|0;
 $5 = $4&65535;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 (_fprintf(($1|0),(134344|0),($vararg_buffer|0))|0);
 $6 = $bwide;
 $7 = ($6>>>0)>(0);
 if ($7) {
  $8 = $bwide;
  $9 = HEAP16[134296>>1]|0;
  $10 = $9&65535;
  $11 = ($10*3)|0;
  $12 = ($8>>>0)<($11>>>0);
  if ($12) {
   STACKTOP = sp;return;
  }
  $13 = $bwide;
  $14 = (_malloc($13)|0);
  $buf = $14;
  $15 = $buf;
  _merror($15,189896);
  $row = 0;
  while(1) {
   $16 = $row;
   $17 = HEAP16[134304>>1]|0;
   $18 = $17&65535;
   $19 = ($16>>>0)<($18>>>0);
   if (!($19)) {
    break;
   }
   $20 = $buf;
   $21 = $bwide;
   $22 = HEAP32[880>>2]|0;
   (_fread(($20|0),1,($21|0),($22|0))|0);
   $23 = $buf;
   $24 = HEAP16[134296>>1]|0;
   $25 = $24&65535;
   $26 = HEAP32[134336>>2]|0;
   (_fwrite(($23|0),3,($25|0),($26|0))|0);
   $27 = $row;
   $28 = (($27) + 1)|0;
   $row = $28;
  }
  $29 = $buf;
  _free($29);
  STACKTOP = sp;return;
 }
 _foveon_decoder(256,0);
 $row = 0;
 while(1) {
  $30 = $row;
  $31 = HEAP16[134304>>1]|0;
  $32 = $31&65535;
  $33 = ($30>>>0)<($32>>>0);
  if (!($33)) {
   break;
  }
  ;HEAP16[$pred+0>>1]=0|0;HEAP16[$pred+2>>1]=0|0;HEAP16[$pred+4>>1]=0|0;
  $34 = $bit;
  $35 = ($34|0)!=(0);
  if (!($35)) {
   (_get4()|0);
  }
  $col = 0;
  $bit = 0;
  while(1) {
   $36 = $col;
   $37 = HEAP16[134296>>1]|0;
   $38 = $37&65535;
   $39 = ($36>>>0)<($38>>>0);
   if (!($39)) {
    break;
   }
   $c = 0;
   while(1) {
    $40 = $c;
    $41 = ($40>>>0)<(3);
    if (!($41)) {
     break;
    }
    $dindex = 165280;
    while(1) {
     $42 = $dindex;
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)!=(0|0);
     if (!($44)) {
      break;
     }
     $45 = $bit;
     $46 = (($45) - 1)|0;
     $47 = $46 & 31;
     $bit = $47;
     $48 = ($47|0)==(31);
     if ($48) {
      $i = 0;
      while(1) {
       $49 = $i;
       $50 = ($49>>>0)<(4);
       if (!($50)) {
        break;
       }
       $51 = $bitbuf;
       $52 = $51 << 8;
       $53 = HEAP32[880>>2]|0;
       $54 = (_getc_unlocked(($53|0))|0);
       $55 = (($52) + ($54))|0;
       $bitbuf = $55;
       $56 = $i;
       $57 = (($56) + 1)|0;
       $i = $57;
      }
     }
     $58 = $bitbuf;
     $59 = $bit;
     $60 = $58 >>> $59;
     $61 = $60 & 1;
     $62 = $dindex;
     $63 = (($62) + ($61<<2)|0);
     $64 = HEAP32[$63>>2]|0;
     $dindex = $64;
    }
    $65 = $dindex;
    $66 = (($65) + 8|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = $c;
    $69 = (($pred) + ($68<<1)|0);
    $70 = HEAP16[$69>>1]|0;
    $71 = $70 << 16 >> 16;
    $72 = (($71) + ($67))|0;
    $73 = $72&65535;
    HEAP16[$69>>1] = $73;
    $74 = $c;
    $75 = (($pred) + ($74<<1)|0);
    $76 = HEAP16[$75>>1]|0;
    $77 = $76 << 16 >> 16;
    $78 = HEAP32[134336>>2]|0;
    (_fputc(($77|0),($78|0))|0);
    $79 = $c;
    $80 = (($79) + 1)|0;
    $c = $80;
   }
   $81 = $col;
   $82 = (($81) + 1)|0;
   $col = $82;
  }
  $83 = $row;
  $84 = (($83) + 1)|0;
  $row = $84;
 }
 STACKTOP = sp;return;
}
function _foveon_sd_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bit = 0, $bitbuf = 0, $c = 0, $col = 0, $diff = 0, $dindex = 0, $i = 0, $pred = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $diff = sp + 40|0;
 $pred = sp + 20|0;
 $bitbuf = 0;
 $bit = -1;
 _read_shorts($diff,1024);
 $0 = HEAP32[133128>>2]|0;
 $1 = ($0|0)!=(0);
 if (!($1)) {
  _foveon_decoder(1024,0);
 }
 $row = 0;
 while(1) {
  $2 = $row;
  $3 = HEAP16[132112>>1]|0;
  $4 = $3&65535;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  ;HEAP32[$pred+0>>2]=0|0;HEAP32[$pred+4>>2]=0|0;HEAP32[$pred+8>>2]=0|0;
  $6 = $bit;
  $7 = ($6|0)!=(0);
  if (!($7)) {
   $8 = HEAP32[133128>>2]|0;
   $9 = ($8|0)!=(0);
   if (!($9)) {
    $10 = (_atoi(((134232 + 2|0)))|0);
    $11 = ($10|0)<(14);
    if ($11) {
     (_get4()|0);
    }
   }
  }
  $bit = 0;
  $col = 0;
  while(1) {
   $12 = $col;
   $13 = HEAP16[132120>>1]|0;
   $14 = $13&65535;
   $15 = ($12|0)<($14|0);
   if (!($15)) {
    break;
   }
   $16 = HEAP32[133128>>2]|0;
   $17 = ($16|0)!=(0);
   if ($17) {
    $18 = (_get4()|0);
    $bitbuf = $18;
    $c = 0;
    while(1) {
     $19 = $c;
     $20 = ($19|0)<(3);
     if (!($20)) {
      break;
     }
     $21 = $bitbuf;
     $22 = $c;
     $23 = ($22*10)|0;
     $24 = $21 >>> $23;
     $25 = $24 & 1023;
     $26 = (($diff) + ($25<<1)|0);
     $27 = HEAP16[$26>>1]|0;
     $28 = $27 << 16 >> 16;
     $29 = $c;
     $30 = (2 - ($29))|0;
     $31 = (($pred) + ($30<<2)|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($32) + ($28))|0;
     HEAP32[$31>>2] = $33;
     $34 = $c;
     $35 = (($34) + 1)|0;
     $c = $35;
    }
   } else {
    $c = 0;
    while(1) {
     $36 = $c;
     $37 = ($36|0)<(3);
     if (!($37)) {
      break;
     }
     $dindex = 165280;
     while(1) {
      $38 = $dindex;
      $39 = HEAP32[$38>>2]|0;
      $40 = ($39|0)!=(0|0);
      if (!($40)) {
       break;
      }
      $41 = $bit;
      $42 = (($41) - 1)|0;
      $43 = $42 & 31;
      $bit = $43;
      $44 = ($43|0)==(31);
      if ($44) {
       $i = 0;
       while(1) {
        $45 = $i;
        $46 = ($45|0)<(4);
        if (!($46)) {
         break;
        }
        $47 = $bitbuf;
        $48 = $47 << 8;
        $49 = HEAP32[880>>2]|0;
        $50 = (_getc_unlocked(($49|0))|0);
        $51 = (($48) + ($50))|0;
        $bitbuf = $51;
        $52 = $i;
        $53 = (($52) + 1)|0;
        $i = $53;
       }
      }
      $54 = $bitbuf;
      $55 = $bit;
      $56 = $54 >>> $55;
      $57 = $56 & 1;
      $58 = $dindex;
      $59 = (($58) + ($57<<2)|0);
      $60 = HEAP32[$59>>2]|0;
      $dindex = $60;
     }
     $61 = $dindex;
     $62 = (($61) + 8|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (($diff) + ($63<<1)|0);
     $65 = HEAP16[$64>>1]|0;
     $66 = $65 << 16 >> 16;
     $67 = $c;
     $68 = (($pred) + ($67<<2)|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (($69) + ($66))|0;
     HEAP32[$68>>2] = $70;
     $71 = $c;
     $72 = (($pred) + ($71<<2)|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = $73 >> 16;
     $75 = ($74|0)!=(0);
     if ($75) {
      $76 = $c;
      $77 = (($pred) + ($76<<2)|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = $78 ^ -1;
      $80 = $79 >> 16;
      $81 = ($80|0)!=(0);
      if ($81) {
       _derror();
      }
     }
     $82 = $c;
     $83 = (($82) + 1)|0;
     $c = $83;
    }
   }
   $c = 0;
   while(1) {
    $84 = $c;
    $85 = ($84|0)<(3);
    if (!($85)) {
     break;
    }
    $86 = $c;
    $87 = (($pred) + ($86<<2)|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $88&65535;
    $90 = $c;
    $91 = $row;
    $92 = HEAP16[132120>>1]|0;
    $93 = $92&65535;
    $94 = Math_imul($91, $93)|0;
    $95 = $col;
    $96 = (($94) + ($95))|0;
    $97 = HEAP32[132144>>2]|0;
    $98 = (($97) + ($96<<3)|0);
    $99 = (($98) + ($90<<1)|0);
    HEAP16[$99>>1] = $89;
    $100 = $c;
    $101 = (($100) + 1)|0;
    $c = $101;
   }
   $102 = $col;
   $103 = (($102) + 1)|0;
   $col = $103;
  }
  $104 = $row;
  $105 = (($104) + 1)|0;
  $row = $105;
 }
 STACKTOP = sp;return;
}
function _foveon_huff($huff) {
 $huff = $huff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $clen = 0, $code = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $huff;
 $1 = $0;
 HEAP16[$1>>1] = 8;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(13);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[880>>2]|0;
  $5 = (_getc(($4|0))|0);
  $clen = $5;
  $6 = HEAP32[880>>2]|0;
  $7 = (_getc(($6|0))|0);
  $code = $7;
  $j = 0;
  while(1) {
   $8 = $j;
   $9 = $clen;
   $10 = 256 >> $9;
   $11 = ($8|0)<($10|0);
   if (!($11)) {
    break;
   }
   $12 = $clen;
   $13 = $12 << 8;
   $14 = $i;
   $15 = $13 | $14;
   $16 = $15&65535;
   $17 = $code;
   $18 = $j;
   $19 = (($18) + 1)|0;
   $j = $19;
   $20 = (($17) + ($19))|0;
   $21 = $0;
   $22 = (($21) + ($20<<1)|0);
   HEAP16[$22>>1] = $16;
  }
  $23 = $i;
  $24 = (($23) + 1)|0;
  $i = $24;
 }
 (_get2()|0);
 STACKTOP = sp;return;
}
function _foveon_dp_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $c = 0;
 var $col = 0, $diff = 0, $hpred = 0, $huff = 0, $roff = 0, $row = 0, $vpred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $roff = sp;
 $huff = sp + 48|0;
 $vpred = sp + 32|0;
 $hpred = sp + 40|0;
 $0 = HEAP32[880>>2]|0;
 (_fseek(($0|0),8,1)|0);
 _foveon_huff($huff);
 HEAP32[$roff>>2] = 48;
 $c = 0;
 while(1) {
  $1 = $c;
  $2 = ($1>>>0)<(3);
  if (!($2)) {
   break;
  }
  $3 = $c;
  $4 = (($roff) + ($3<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_get4()|0);
  $7 = (($5) + ($6))|0;
  $8 = (0 - ($7))|0;
  $9 = $8 & -16;
  $10 = (0 - ($9))|0;
  $11 = $c;
  $12 = (($11) + 1)|0;
  $13 = (($roff) + ($12<<2)|0);
  HEAP32[$13>>2] = $10;
  $14 = $c;
  $15 = (($14) + 1)|0;
  $c = $15;
 }
 $c = 0;
 while(1) {
  $16 = $c;
  $17 = ($16>>>0)<(3);
  if (!($17)) {
   break;
  }
  $18 = HEAP32[880>>2]|0;
  $19 = HEAP32[133816>>2]|0;
  $20 = $c;
  $21 = (($roff) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($19) + ($22))|0;
  (_fseek(($18|0),($23|0),0)|0);
  (_getbithuff(-1,0)|0);
  $24 = (($vpred) + 4|0);
  $25 = (($24) + 2|0);
  HEAP16[$25>>1] = 512;
  $26 = (($vpred) + 4|0);
  HEAP16[$26>>1] = 512;
  $27 = (($vpred) + 2|0);
  HEAP16[$27>>1] = 512;
  HEAP16[$vpred>>1] = 512;
  $row = 0;
  while(1) {
   $28 = $row;
   $29 = HEAP16[132112>>1]|0;
   $30 = $29&65535;
   $31 = ($28>>>0)<($30>>>0);
   if (!($31)) {
    break;
   }
   $col = 0;
   while(1) {
    $32 = $col;
    $33 = HEAP16[132120>>1]|0;
    $34 = $33&65535;
    $35 = ($32>>>0)<($34>>>0);
    if (!($35)) {
     break;
    }
    $36 = (_ljpeg_diff($huff)|0);
    $diff = $36;
    $37 = $col;
    $38 = ($37>>>0)<(2);
    if ($38) {
     $39 = $diff;
     $40 = $col;
     $41 = $row;
     $42 = $41 & 1;
     $43 = (($vpred) + ($42<<2)|0);
     $44 = (($43) + ($40<<1)|0);
     $45 = HEAP16[$44>>1]|0;
     $46 = $45&65535;
     $47 = (($46) + ($39))|0;
     $48 = $47&65535;
     HEAP16[$44>>1] = $48;
     $49 = $col;
     $50 = (($hpred) + ($49<<1)|0);
     HEAP16[$50>>1] = $48;
    } else {
     $51 = $diff;
     $52 = $col;
     $53 = $52 & 1;
     $54 = (($hpred) + ($53<<1)|0);
     $55 = HEAP16[$54>>1]|0;
     $56 = $55&65535;
     $57 = (($56) + ($51))|0;
     $58 = $57&65535;
     HEAP16[$54>>1] = $58;
    }
    $59 = $col;
    $60 = $59 & 1;
    $61 = (($hpred) + ($60<<1)|0);
    $62 = HEAP16[$61>>1]|0;
    $63 = $c;
    $64 = $row;
    $65 = HEAP16[132120>>1]|0;
    $66 = $65&65535;
    $67 = Math_imul($64, $66)|0;
    $68 = $col;
    $69 = (($67) + ($68))|0;
    $70 = HEAP32[132144>>2]|0;
    $71 = (($70) + ($69<<3)|0);
    $72 = (($71) + ($63<<1)|0);
    HEAP16[$72>>1] = $62;
    $73 = $col;
    $74 = (($73) + 1)|0;
    $col = $74;
   }
   $75 = $row;
   $76 = (($75) + 1)|0;
   $row = $76;
  }
  $77 = $c;
  $78 = (($77) + 1)|0;
  $c = $78;
 }
 STACKTOP = sp;return;
}
function _foveon_load_camf() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col = 0, $diff = 0, $high = 0, $hpred = 0;
 var $huff = 0, $i = 0, $j = 0, $row = 0, $type = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vpred = 0, $wide = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $huff = sp + 52|0;
 $vpred = sp + 40|0;
 $hpred = sp + 48|0;
 ;HEAP16[$vpred+0>>1]=HEAP16[189912+0>>1]|0;HEAP16[$vpred+2>>1]=HEAP16[189912+2>>1]|0;HEAP16[$vpred+4>>1]=HEAP16[189912+4>>1]|0;HEAP16[$vpred+6>>1]=HEAP16[189912+6>>1]|0;
 $0 = HEAP32[880>>2]|0;
 $1 = HEAP32[133808>>2]|0;
 (_fseek(($0|0),($1|0),0)|0);
 $2 = (_get4()|0);
 $type = $2;
 (_get4()|0);
 (_get4()|0);
 $3 = (_get4()|0);
 $wide = $3;
 $4 = (_get4()|0);
 $high = $4;
 $5 = $type;
 $6 = ($5|0)==(2);
 if ($6) {
  $7 = HEAP32[189920>>2]|0;
  $8 = HEAP32[134488>>2]|0;
  $9 = HEAP32[880>>2]|0;
  (_fread(($7|0),1,($8|0),($9|0))|0);
  $i = 0;
  while(1) {
   $10 = $i;
   $11 = HEAP32[134488>>2]|0;
   $12 = ($10>>>0)<($11>>>0);
   if (!($12)) {
    break;
   }
   $13 = $high;
   $14 = ($13*1597)|0;
   $15 = (($14) + 51749)|0;
   $16 = (($15>>>0) % 244944)&-1;
   $high = $16;
   $17 = $high;
   $18 = (___muldi3(($17|0),0,301593171,0)|0);
   $19 = tempRet0;
   $20 = (_bitshift64Ashr(($18|0),($19|0),24)|0);
   $21 = tempRet0;
   $wide = $20;
   $22 = $high;
   $23 = $22 << 8;
   $24 = $wide;
   $25 = (($23) - ($24))|0;
   $26 = $25 >>> 1;
   $27 = $wide;
   $28 = (($26) + ($27))|0;
   $29 = $28 >>> 17;
   $30 = $i;
   $31 = HEAP32[189920>>2]|0;
   $32 = (($31) + ($30)|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33 << 24 >> 24;
   $35 = $34 ^ $29;
   $36 = $35&255;
   HEAP8[$32>>0] = $36;
   $37 = $i;
   $38 = (($37) + 1)|0;
   $i = $38;
  }
  STACKTOP = sp;return;
 }
 $39 = $type;
 $40 = ($39|0)==(4);
 if ($40) {
  $41 = HEAP32[189920>>2]|0;
  _free($41);
  $42 = $wide;
  $43 = $high;
  $44 = Math_imul($42, $43)|0;
  $45 = ($44*3)|0;
  $46 = (($45>>>0) / 2)&-1;
  HEAP32[134488>>2] = $46;
  $47 = (_malloc($46)|0);
  HEAP32[189920>>2] = $47;
  $48 = HEAP32[189920>>2]|0;
  _merror($48,189928);
  _foveon_huff($huff);
  (_get4()|0);
  (_getbithuff(-1,0)|0);
  $row = 0;
  $j = 0;
  while(1) {
   $49 = $row;
   $50 = $high;
   $51 = ($49>>>0)<($50>>>0);
   if (!($51)) {
    break;
   }
   $col = 0;
   while(1) {
    $52 = $col;
    $53 = $wide;
    $54 = ($52>>>0)<($53>>>0);
    if (!($54)) {
     break;
    }
    $55 = (_ljpeg_diff($huff)|0);
    $diff = $55;
    $56 = $col;
    $57 = ($56>>>0)<(2);
    if ($57) {
     $58 = $diff;
     $59 = $col;
     $60 = $row;
     $61 = $60 & 1;
     $62 = (($vpred) + ($61<<2)|0);
     $63 = (($62) + ($59<<1)|0);
     $64 = HEAP16[$63>>1]|0;
     $65 = $64&65535;
     $66 = (($65) + ($58))|0;
     $67 = $66&65535;
     HEAP16[$63>>1] = $67;
     $68 = $col;
     $69 = (($hpred) + ($68<<1)|0);
     HEAP16[$69>>1] = $67;
    } else {
     $70 = $diff;
     $71 = $col;
     $72 = $71 & 1;
     $73 = (($hpred) + ($72<<1)|0);
     $74 = HEAP16[$73>>1]|0;
     $75 = $74&65535;
     $76 = (($75) + ($70))|0;
     $77 = $76&65535;
     HEAP16[$73>>1] = $77;
    }
    $78 = $col;
    $79 = $78 & 1;
    $80 = ($79|0)!=(0);
    if ($80) {
     $81 = HEAP16[$hpred>>1]|0;
     $82 = $81&65535;
     $83 = $82 >> 4;
     $84 = $83&255;
     $85 = $j;
     $86 = (($85) + 1)|0;
     $j = $86;
     $87 = HEAP32[189920>>2]|0;
     $88 = (($87) + ($85)|0);
     HEAP8[$88>>0] = $84;
     $89 = HEAP16[$hpred>>1]|0;
     $90 = $89&65535;
     $91 = $90 << 4;
     $92 = (($hpred) + 2|0);
     $93 = HEAP16[$92>>1]|0;
     $94 = $93&65535;
     $95 = $94 >> 8;
     $96 = $91 | $95;
     $97 = $96&255;
     $98 = $j;
     $99 = (($98) + 1)|0;
     $j = $99;
     $100 = HEAP32[189920>>2]|0;
     $101 = (($100) + ($98)|0);
     HEAP8[$101>>0] = $97;
     $102 = (($hpred) + 2|0);
     $103 = HEAP16[$102>>1]|0;
     $104 = $103&255;
     $105 = $j;
     $106 = (($105) + 1)|0;
     $j = $106;
     $107 = HEAP32[189920>>2]|0;
     $108 = (($107) + ($105)|0);
     HEAP8[$108>>0] = $104;
    }
    $109 = $col;
    $110 = (($109) + 1)|0;
    $col = $110;
   }
   $111 = $row;
   $112 = (($111) + 1)|0;
   $row = $112;
  }
 } else {
  $113 = HEAP32[_stderr>>2]|0;
  $114 = HEAP32[696>>2]|0;
  $115 = $type;
  HEAP32[$vararg_buffer>>2] = $114;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $115;
  (_fprintf(($113|0),(189952|0),($vararg_buffer|0))|0);
 }
 STACKTOP = sp;return;
}
function _foveon_camf_param($block,$param) {
 $block = $block|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $cp = 0, $dp = 0, $idx = 0, $num = 0, $pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $block;
 $2 = $param;
 $idx = 0;
 L1: while(1) {
  $3 = $idx;
  $4 = HEAP32[134488>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[189920>>2]|0;
  $7 = $idx;
  $8 = (($6) + ($7)|0);
  $pos = $8;
  $9 = $pos;
  $10 = (_strncmp($9,189984,3)|0);
  $11 = ($10|0)!=(0);
  if ($11) {
   label = 4;
   break;
  }
  $12 = $pos;
  $13 = (($12) + 3|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($15|0)!=(80);
  do {
   if ($16) {
   } else {
    $17 = $1;
    $18 = $pos;
    $19 = $pos;
    $20 = (($19) + 12|0);
    $21 = (_sget4($20)|0);
    $22 = (($18) + ($21)|0);
    $23 = (_strcmp($17,$22)|0);
    $24 = ($23|0)!=(0);
    if ($24) {
     break;
    }
    $25 = $pos;
    $26 = $pos;
    $27 = (($26) + 16|0);
    $28 = (_sget4($27)|0);
    $29 = (($25) + ($28)|0);
    $cp = $29;
    $30 = $cp;
    $31 = (_sget4($30)|0);
    $num = $31;
    $32 = $pos;
    $33 = $cp;
    $34 = (($33) + 4|0);
    $35 = (_sget4($34)|0);
    $36 = (($32) + ($35)|0);
    $dp = $36;
    while(1) {
     $37 = $num;
     $38 = (($37) + -1)|0;
     $num = $38;
     $39 = ($37|0)!=(0);
     if (!($39)) {
      break;
     }
     $40 = $cp;
     $41 = (($40) + 8|0);
     $cp = $41;
     $42 = $2;
     $43 = $dp;
     $44 = $cp;
     $45 = (_sget4($44)|0);
     $46 = (($43) + ($45)|0);
     $47 = (_strcmp($42,$46)|0);
     $48 = ($47|0)!=(0);
     if (!($48)) {
      label = 12;
      break L1;
     }
    }
   }
  } while(0);
  $54 = $pos;
  $55 = (($54) + 8|0);
  $56 = (_sget4($55)|0);
  $57 = $idx;
  $58 = (($57) + ($56))|0;
  $idx = $58;
 }
 if ((label|0) == 4) {
 }
 else if ((label|0) == 12) {
  $49 = $dp;
  $50 = $cp;
  $51 = (($50) + 4|0);
  $52 = (_sget4($51)|0);
  $53 = (($49) + ($52)|0);
  $0 = $53;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _foveon_camf_matrix($dim,$name) {
 $dim = $dim|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cp = 0, $dp = 0, $dsize = 0.0, $i = 0, $idx = 0;
 var $mat = 0, $ndim = 0, $pos = 0, $size = 0, $type = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $1 = $dim;
 $2 = $name;
 $idx = 0;
 while(1) {
  $3 = $idx;
  $4 = HEAP32[134488>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[189920>>2]|0;
  $7 = $idx;
  $8 = (($6) + ($7)|0);
  $pos = $8;
  $9 = $pos;
  $10 = (_strncmp($9,189984,3)|0);
  $11 = ($10|0)!=(0);
  if ($11) {
   label = 4;
   break;
  }
  $12 = $pos;
  $13 = (($12) + 3|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($15|0)!=(77);
  if ($16) {
  } else {
   $17 = $2;
   $18 = $pos;
   $19 = $pos;
   $20 = (($19) + 12|0);
   $21 = (_sget4($20)|0);
   $22 = (($18) + ($21)|0);
   $23 = (_strcmp($17,$22)|0);
   $24 = ($23|0)!=(0);
   if (!($24)) {
    label = 9;
    break;
   }
  }
  $106 = $pos;
  $107 = (($106) + 8|0);
  $108 = (_sget4($107)|0);
  $109 = $idx;
  $110 = (($109) + ($108))|0;
  $idx = $110;
 }
 do {
  if ((label|0) == 4) {
  }
  else if ((label|0) == 9) {
   $25 = $1;
   $26 = (($25) + 8|0);
   HEAP32[$26>>2] = 1;
   $27 = $1;
   $28 = (($27) + 4|0);
   HEAP32[$28>>2] = 1;
   $29 = $1;
   HEAP32[$29>>2] = 1;
   $30 = $pos;
   $31 = $pos;
   $32 = (($31) + 16|0);
   $33 = (_sget4($32)|0);
   $34 = (($30) + ($33)|0);
   $cp = $34;
   $35 = $cp;
   $36 = (_sget4($35)|0);
   $type = $36;
   $37 = $cp;
   $38 = (($37) + 4|0);
   $39 = (_sget4($38)|0);
   $ndim = $39;
   $40 = ($39>>>0)>(3);
   if ($40) {
    break;
   }
   $41 = $pos;
   $42 = $cp;
   $43 = (($42) + 8|0);
   $44 = (_sget4($43)|0);
   $45 = (($41) + ($44)|0);
   $dp = $45;
   $46 = $ndim;
   $i = $46;
   while(1) {
    $47 = $i;
    $48 = (($47) + -1)|0;
    $i = $48;
    $49 = ($47|0)!=(0);
    if (!($49)) {
     break;
    }
    $50 = $cp;
    $51 = (($50) + 12|0);
    $cp = $51;
    $52 = $cp;
    $53 = (_sget4($52)|0);
    $54 = $i;
    $55 = $1;
    $56 = (($55) + ($54<<2)|0);
    HEAP32[$56>>2] = $53;
   }
   $57 = $1;
   $58 = HEAP32[$57>>2]|0;
   $59 = (+($58>>>0));
   $60 = $1;
   $61 = (($60) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (+($62>>>0));
   $64 = $59 * $63;
   $65 = $1;
   $66 = (($65) + 8|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (+($67>>>0));
   $69 = $64 * $68;
   $dsize = $69;
   $70 = HEAP32[134488>>2]|0;
   $71 = (($70>>>0) / 4)&-1;
   $72 = (+($71>>>0));
   $73 = $69 > $72;
   if ($73) {
    break;
   }
   $74 = $dsize;
   $75 = (~~(($74))>>>0);
   $size = $75;
   $76 = $75<<2;
   $77 = (_malloc($76)|0);
   $mat = $77;
   $78 = $mat;
   _merror($78,189992);
   $i = 0;
   while(1) {
    $79 = $i;
    $80 = $size;
    $81 = ($79>>>0)<($80>>>0);
    if (!($81)) {
     break;
    }
    $82 = $type;
    $83 = ($82|0)!=(0);
    if ($83) {
     $84 = $type;
     $85 = ($84|0)!=(6);
     if ($85) {
      $86 = $dp;
      $87 = $i;
      $88 = $87<<2;
      $89 = (($86) + ($88)|0);
      $90 = (_sget4($89)|0);
      $91 = $i;
      $92 = $mat;
      $93 = (($92) + ($91<<2)|0);
      HEAP32[$93>>2] = $90;
     } else {
      label = 21;
     }
    } else {
     label = 21;
    }
    if ((label|0) == 21) {
     label = 0;
     $94 = $dp;
     $95 = $i;
     $96 = $95<<1;
     $97 = (($94) + ($96)|0);
     $98 = (_sget4($97)|0);
     $99 = $98 & 65535;
     $100 = $i;
     $101 = $mat;
     $102 = (($101) + ($100<<2)|0);
     HEAP32[$102>>2] = $99;
    }
    $103 = $i;
    $104 = (($103) + 1)|0;
    $i = $104;
   }
   $105 = $mat;
   $0 = $105;
   $114 = $0;
   STACKTOP = sp;return ($114|0);
  }
 } while(0);
 $111 = HEAP32[_stderr>>2]|0;
 $112 = HEAP32[696>>2]|0;
 $113 = $2;
 HEAP32[$vararg_buffer>>2] = $112;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $113;
 (_fprintf(($111|0),(190016|0),($vararg_buffer|0))|0);
 $0 = 0;
 $114 = $0;
 STACKTOP = sp;return ($114|0);
}
function _foveon_fixed($ptr,$size,$name) {
 $ptr = $ptr|0;
 $size = $size|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dim = 0, $dp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dim = sp + 16|0;
 $1 = $ptr;
 $2 = $size;
 $3 = $name;
 $4 = $3;
 $5 = ($4|0)!=(0|0);
 do {
  if ($5) {
   $6 = $3;
   $7 = (_foveon_camf_matrix($dim,$6)|0);
   $dp = $7;
   $8 = $dp;
   $9 = ($8|0)!=(0|0);
   if ($9) {
    $10 = $1;
    $11 = $dp;
    $12 = $2;
    $13 = $12<<2;
    _memcpy(($10|0),($11|0),($13|0))|0;
    $14 = $dp;
    _free($14);
    $0 = 1;
    break;
   } else {
    $0 = 0;
    break;
   }
  } else {
   $0 = 0;
  }
 } while(0);
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function _foveon_avg($pix,$range,$cfilt) {
 $pix = $pix|0;
 $range = $range|0;
 $cfilt = +$cfilt;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $8 = 0, $9 = 0, $i = 0, $max = 0.0, $min = 0.0, $sum = 0.0, $val = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pix;
 $2 = $range;
 $3 = $cfilt;
 $min = 3.4028234663852886E+38;
 $max = -3.4028234663852886E+38;
 $sum = 0.0;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $i = $5;
 while(1) {
  $6 = $i;
  $7 = $2;
  $8 = (($7) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<=($9|0);
  if (!($10)) {
   break;
  }
  $11 = $i;
  $12 = $11<<2;
  $13 = $1;
  $14 = (($13) + ($12<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 << 16 >> 16;
  $17 = (+($16|0));
  $18 = $i;
  $19 = $18<<2;
  $20 = $1;
  $21 = (($20) + ($19<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = $i;
  $25 = (($24) - 1)|0;
  $26 = $25<<2;
  $27 = $1;
  $28 = (($27) + ($26<<1)|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29 << 16 >> 16;
  $31 = (($23) - ($30))|0;
  $32 = (+($31|0));
  $33 = $3;
  $34 = $32 * $33;
  $35 = $17 + $34;
  $val = $35;
  $36 = $sum;
  $37 = $36 + $35;
  $sum = $37;
  $38 = $min;
  $39 = $val;
  $40 = $38 > $39;
  if ($40) {
   $41 = $val;
   $min = $41;
  }
  $42 = $max;
  $43 = $val;
  $44 = $42 < $43;
  if ($44) {
   $45 = $val;
   $max = $45;
  }
  $46 = $i;
  $47 = (($46) + 1)|0;
  $i = $47;
 }
 $48 = $2;
 $49 = (($48) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $2;
 $52 = HEAP32[$51>>2]|0;
 $53 = (($50) - ($52))|0;
 $54 = ($53|0)==(1);
 if ($54) {
  $55 = $sum;
  $56 = $55 / 2.0;
  $0 = $56;
  $71 = $0;
  STACKTOP = sp;return (+$71);
 } else {
  $57 = $sum;
  $58 = $min;
  $59 = $57 - $58;
  $60 = $max;
  $61 = $59 - $60;
  $62 = $2;
  $63 = (($62) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $2;
  $66 = HEAP32[$65>>2]|0;
  $67 = (($64) - ($66))|0;
  $68 = (($67) - 1)|0;
  $69 = (+($68|0));
  $70 = $61 / $69;
  $0 = $70;
  $71 = $0;
  STACKTOP = sp;return (+$71);
 }
 return +(0.0);
}
function _foveon_make_curve($max,$mul,$filt) {
 $max = +$max;
 $mul = +$mul;
 $filt = +$filt;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $curve = 0, $i = 0, $size = 0, $x = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $max;
 $1 = $mul;
 $2 = $filt;
 $3 = $2;
 $4 = $3 != 0.0;
 if (!($4)) {
  $2 = 0.80000000000000004;
 }
 $5 = $0;
 $6 = 12.566370614359172 * $5;
 $7 = $2;
 $8 = $6 / $7;
 $9 = (~~(($8))>>>0);
 $size = $9;
 $10 = $size;
 $11 = ($10|0)==(-1);
 if ($11) {
  $12 = $size;
  $13 = (($12) + -1)|0;
  $size = $13;
 }
 $14 = $size;
 $15 = (($14) + 1)|0;
 $16 = (_calloc($15,2)|0);
 $curve = $16;
 $17 = $curve;
 _merror($17,190048);
 $18 = $size;
 $19 = $18&65535;
 $20 = $curve;
 HEAP16[$20>>1] = $19;
 $i = 0;
 while(1) {
  $21 = $i;
  $22 = $size;
  $23 = ($21>>>0)<($22>>>0);
  if (!($23)) {
   break;
  }
  $24 = $i;
  $25 = (+($24>>>0));
  $26 = $2;
  $27 = $25 * $26;
  $28 = $0;
  $29 = $27 / $28;
  $30 = $29 / 4.0;
  $x = $30;
  $31 = $x;
  $32 = (+Math_cos((+$31)));
  $33 = $32 + 1.0;
  $34 = $33 / 2.0;
  $35 = $i;
  $36 = (+($35>>>0));
  $37 = $2;
  $38 = $36 * $37;
  $39 = $1;
  $40 = $38 / $39;
  $41 = (+_tanh($40));
  $42 = $34 * $41;
  $43 = $1;
  $44 = $42 * $43;
  $45 = $44 + 0.5;
  $46 = (~~(($45)));
  $47 = $i;
  $48 = (($47) + 1)|0;
  $49 = $curve;
  $50 = (($49) + ($48<<1)|0);
  HEAP16[$50>>1] = $46;
  $51 = $i;
  $52 = (($51) + 1)|0;
  $i = $52;
 }
 $53 = $curve;
 STACKTOP = sp;return ($53|0);
}
function _foveon_make_curves($curvep,$dq,$div,$filt) {
 $curvep = $curvep|0;
 $dq = $dq|0;
 $div = $div|0;
 $filt = +$filt;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $c = 0, $max = 0.0, $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mul = sp;
 $0 = $curvep;
 $1 = $dq;
 $2 = $div;
 $3 = $filt;
 $max = 0.0;
 $c = 0;
 while(1) {
  $4 = $c;
  $5 = ($4|0)<(3);
  if (!($5)) {
   break;
  }
  $6 = $c;
  $7 = $1;
  $8 = (($7) + ($6<<2)|0);
  $9 = +HEAPF32[$8>>2];
  $10 = $c;
  $11 = $2;
  $12 = (($11) + ($10<<2)|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9 / $13;
  $15 = $14;
  $16 = $c;
  $17 = (($mul) + ($16<<3)|0);
  HEAPF64[$17>>3] = $15;
  $18 = $c;
  $19 = (($18) + 1)|0;
  $c = $19;
 }
 $c = 0;
 while(1) {
  $20 = $c;
  $21 = ($20|0)<(3);
  if (!($21)) {
   break;
  }
  $22 = $max;
  $23 = $c;
  $24 = (($mul) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $22 < $25;
  if ($26) {
   $27 = $c;
   $28 = (($mul) + ($27<<3)|0);
   $29 = +HEAPF64[$28>>3];
   $max = $29;
  }
  $30 = $c;
  $31 = (($30) + 1)|0;
  $c = $31;
 }
 $c = 0;
 while(1) {
  $32 = $c;
  $33 = ($32|0)<(3);
  if (!($33)) {
   break;
  }
  $34 = $max;
  $35 = $c;
  $36 = (($mul) + ($35<<3)|0);
  $37 = +HEAPF64[$36>>3];
  $38 = $3;
  $39 = $38;
  $40 = (_foveon_make_curve($34,$37,$39)|0);
  $41 = $c;
  $42 = $0;
  $43 = (($42) + ($41<<2)|0);
  HEAP32[$43>>2] = $40;
  $44 = $c;
  $45 = (($44) + 1)|0;
  $c = $45;
 }
 STACKTOP = sp;return;
}
function _foveon_apply_curve($curve,$i) {
 $curve = $curve|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $curve;
 $2 = $i;
 $3 = $2;
 $4 = (Math_abs(($3|0))|0);
 $5 = $1;
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = ($4|0)>=($7|0);
 if ($8) {
  $0 = 0;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 $9 = $2;
 $10 = ($9|0)<(0);
 if ($10) {
  $11 = $2;
  $12 = (1 - ($11))|0;
  $13 = $1;
  $14 = (($13) + ($12<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 << 16 >> 16;
  $17 = (0 - ($16))|0;
  $24 = $17;
 } else {
  $18 = $2;
  $19 = (1 + ($18))|0;
  $20 = $1;
  $21 = (($20) + ($19<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = $23;
 }
 $0 = $24;
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _foveon_interpolate() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0.0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0.0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0.0, $1023 = 0.0, $1024 = 0.0, $1025 = 0.0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0.0, $1034 = 0.0, $1035 = 0.0, $1036 = 0.0, $1037 = 0.0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0.0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0.0, $1052 = 0.0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0.0, $1060 = 0, $1061 = 0.0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0.0, $1066 = 0.0, $1067 = 0.0, $1068 = 0.0, $1069 = 0.0;
 var $107 = 0.0, $1070 = 0, $1071 = 0.0, $1072 = 0.0, $1073 = 0, $1074 = 0, $1075 = 0.0, $1076 = 0.0, $1077 = 0.0, $1078 = 0.0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0.0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0.0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0.0, $1177 = 0;
 var $1178 = 0, $1179 = 0.0, $118 = 0, $1180 = 0.0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0.0, $1194 = 0, $1195 = 0.0;
 var $1196 = 0.0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0.0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0.0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0.0, $1383 = 0.0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0.0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0.0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0.0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0.0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0.0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0.0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0.0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0.0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0.0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0.0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0.0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0.0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0.0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0.0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0.0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0.0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0.0, $191 = 0.0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0.0;
 var $1916 = 0.0, $1917 = 0.0, $1918 = 0.0, $1919 = 0.0, $192 = 0.0, $1920 = 0, $1921 = 0, $1922 = 0.0, $1923 = 0, $1924 = 0.0, $1925 = 0, $1926 = 0.0, $1927 = 0.0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0.0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0.0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0.0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0.0, $2130 = 0;
 var $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0;
 var $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0.0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0;
 var $2168 = 0, $2169 = 0, $217 = 0.0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0;
 var $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0;
 var $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0;
 var $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0;
 var $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0;
 var $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0;
 var $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0;
 var $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0.0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0;
 var $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0;
 var $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0;
 var $2348 = 0, $2349 = 0, $235 = 0.0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0.0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $237 = 0;
 var $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0;
 var $274 = 0.0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0.0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0.0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0;
 var $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0.0, $408 = 0, $409 = 0.0, $41 = 0, $410 = 0, $411 = 0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0;
 var $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0.0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0.0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0.0, $513 = 0, $514 = 0, $515 = 0, $516 = 0.0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0.0, $521 = 0, $522 = 0, $523 = 0, $524 = 0.0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0.0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0.0, $535 = 0, $536 = 0, $537 = 0, $538 = 0.0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0.0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0.0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0.0, $551 = 0, $552 = 0, $553 = 0, $554 = 0.0, $555 = 0, $556 = 0, $557 = 0, $558 = 0.0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0.0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0.0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0.0, $584 = 0.0, $585 = 0.0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0.0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0.0, $605 = 0.0, $606 = 0.0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0.0, $613 = 0.0, $614 = 0.0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0.0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0.0, $635 = 0.0, $636 = 0.0, $637 = 0.0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0.0, $645 = 0.0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0.0, $654 = 0.0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0.0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0.0, $672 = 0.0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0.0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0.0, $691 = 0.0, $692 = 0, $693 = 0, $694 = 0.0, $695 = 0.0, $696 = 0.0, $697 = 0.0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0.0, $701 = 0.0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0.0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0.0, $755 = 0.0, $756 = 0.0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0.0, $761 = 0, $762 = 0, $763 = 0.0, $764 = 0.0, $765 = 0.0, $766 = 0.0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0.0, $773 = 0.0, $774 = 0.0, $775 = 0.0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0.0, $79 = 0.0, $790 = 0.0, $791 = 0, $792 = 0.0, $793 = 0, $794 = 0, $795 = 0.0, $796 = 0.0;
 var $797 = 0.0, $798 = 0, $799 = 0, $8 = 0, $80 = 0.0, $800 = 0, $801 = 0.0, $802 = 0, $803 = 0, $804 = 0, $805 = 0.0, $806 = 0.0, $807 = 0.0, $808 = 0.0, $809 = 0.0, $81 = 0, $810 = 0.0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0.0, $824 = 0, $825 = 0, $826 = 0.0, $827 = 0.0, $828 = 0.0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0.0, $833 = 0.0, $834 = 0.0, $835 = 0.0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0.0, $845 = 0.0, $846 = 0.0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0.0, $864 = 0.0, $865 = 0.0, $866 = 0.0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0.0, $879 = 0.0, $88 = 0, $880 = 0.0, $881 = 0.0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0.0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0.0, $926 = 0.0, $927 = 0.0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0.0, $932 = 0.0, $933 = 0.0, $934 = 0, $935 = 0, $936 = 0.0, $937 = 0.0, $938 = 0, $939 = 0.0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0.0, $943 = 0.0, $944 = 0.0, $945 = 0.0, $946 = 0.0, $947 = 0.0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0.0, $954 = 0.0, $955 = 0.0, $956 = 0.0, $957 = 0.0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $active = 0, $badpix = 0, $black = 0, $c = 0, $cam_xyz = 0, $cfilt = 0, $chroma_dq = 0, $col = 0, $color_dq = 0, $correct = 0, $cp = 0, $curve = 0, $ddft = 0, $dev = 0, $diag = 0;
 var $diff = 0, $dim = 0, $div = 0, $dscr = 0, $dstb = 0, $dsum = 0.0, $frow = 0.0, $fsum = 0, $i = 0, $ipix = 0, $irow = 0, $j = 0, $keep = 0, $last = 0, $limit = 0, $max = 0, $min = 0, $num = 0.0, $pix = 0, $ppm = 0;
 var $prev = 0, $row = 0, $satlev = 0, $sgain = 0, $sgrow = 0, $sgx = 0, $shrink = 0, $smlast = 0, $smred = 0, $smred_p = 0, $smrow = 0, $str = 0, $sum = 0, $total = 0, $trans = 0, $trsum = 0, $val = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0;
 var $vararg_ptr3 = 0, $work = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp;
 $vararg_buffer1 = sp + 48|0;
 $vararg_buffer = sp + 8|0;
 $prev = sp + 808|0;
 $curve = sp + 768|0;
 $cfilt = sp + 760|0;
 $ddft = sp + 688|0;
 $ppm = sp + 576|0;
 $cam_xyz = sp + 540|0;
 $correct = sp + 504|0;
 $last = sp + 468|0;
 $trans = sp + 432|0;
 $chroma_dq = sp + 420|0;
 $color_dq = sp + 408|0;
 $diag = sp + 372|0;
 $div = sp + 360|0;
 $fsum = sp + 336|0;
 $dscr = sp + 56|0;
 $dstb = sp + 80|0;
 $smrow = sp + 96|0;
 $total = sp + 136|0;
 $ipix = sp + 152|0;
 $work = sp + 272|0;
 $dev = sp + 196|0;
 $satlev = sp + 208|0;
 $keep = sp + 224|0;
 $active = sp + 240|0;
 $dim = sp + 256|0;
 $trsum = sp + 16|0;
 $str = sp + 816|0;
 HEAPF32[$cfilt>>2] = 0.0;
 $smred_p = 0;
 $dsum = 0.0;
 $0 = HEAP32[168>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  $2 = HEAP32[_stderr>>2]|0;
  (_fprintf(($2|0),(190104|0),($vararg_buffer|0))|0);
 }
 _foveon_load_camf();
 (_foveon_fixed($dscr,4,190136)|0);
 (_foveon_fixed($ppm,27,190160)|0);
 (_foveon_fixed($satlev,3,190176)|0);
 (_foveon_fixed($keep,4,190192)|0);
 (_foveon_fixed($active,4,190208)|0);
 (_foveon_fixed($chroma_dq,3,190224)|0);
 $3 = (_foveon_camf_param(190240,190256)|0);
 $4 = ($3|0)!=(0|0);
 $5 = $4 ? 190256 : 190264;
 (_foveon_fixed($color_dq,3,$5)|0);
 $6 = (_foveon_camf_param(190240,190280)|0);
 $7 = ($6|0)!=(0|0);
 if ($7) {
  (_foveon_fixed($cfilt,1,190280)|0);
 }
 dest=$ddft+0|0; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $8 = (_foveon_camf_param(190240,190296)|0);
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = (($ddft) + 24|0);
  $11 = (_foveon_fixed($10,12,190296)|0);
  $12 = ($11|0)!=(0);
  if (!($12)) {
   label = 7;
  }
 } else {
  label = 7;
 }
 if ((label|0) == 7) {
  $i = 0;
  while(1) {
   $13 = $i;
   $14 = ($13|0)<(2);
   if (!($14)) {
    break;
   }
   $15 = $i;
   $16 = ($15|0)!=(0);
   $17 = $16 ? 190312 : 190336;
   (_foveon_fixed($dstb,4,$17)|0);
   $18 = (($dstb) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $row = $19;
   while(1) {
    $20 = $row;
    $21 = (($dstb) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($20|0)<=($22|0);
    if (!($23)) {
     break;
    }
    $24 = HEAP32[$dstb>>2]|0;
    $col = $24;
    while(1) {
     $25 = $col;
     $26 = (($dstb) + 8|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($25|0)<=($27|0);
     if (!($28)) {
      break;
     }
     $c = 0;
     while(1) {
      $29 = $c;
      $30 = ($29|0)<(3);
      if (!($30)) {
       break;
      }
      $31 = $c;
      $32 = $row;
      $33 = HEAP16[132120>>1]|0;
      $34 = $33&65535;
      $35 = Math_imul($32, $34)|0;
      $36 = $col;
      $37 = (($35) + ($36))|0;
      $38 = HEAP32[132144>>2]|0;
      $39 = (($38) + ($37<<3)|0);
      $40 = (($39) + ($31<<1)|0);
      $41 = HEAP16[$40>>1]|0;
      $42 = $41 << 16 >> 16;
      $43 = (+($42|0));
      $44 = $c;
      $45 = $i;
      $46 = (($45) + 1)|0;
      $47 = (($ddft) + (($46*24)|0)|0);
      $48 = (($47) + ($44<<3)|0);
      $49 = (($48) + 4|0);
      $50 = +HEAPF32[$49>>2];
      $51 = $50 + $43;
      HEAPF32[$49>>2] = $51;
      $52 = $c;
      $53 = (($52) + 1)|0;
      $c = $53;
     }
     $54 = $col;
     $55 = (($54) + 1)|0;
     $col = $55;
    }
    $56 = $row;
    $57 = (($56) + 1)|0;
    $row = $57;
   }
   $c = 0;
   while(1) {
    $58 = $c;
    $59 = ($58|0)<(3);
    if (!($59)) {
     break;
    }
    $60 = (($dstb) + 12|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (($dstb) + 4|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($61) - ($63))|0;
    $65 = (($64) + 1)|0;
    $66 = (($dstb) + 8|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = HEAP32[$dstb>>2]|0;
    $69 = (($67) - ($68))|0;
    $70 = (($69) + 1)|0;
    $71 = Math_imul($65, $70)|0;
    $72 = (+($71|0));
    $73 = $c;
    $74 = $i;
    $75 = (($74) + 1)|0;
    $76 = (($ddft) + (($75*24)|0)|0);
    $77 = (($76) + ($73<<3)|0);
    $78 = (($77) + 4|0);
    $79 = +HEAPF32[$78>>2];
    $80 = $79 / $72;
    HEAPF32[$78>>2] = $80;
    $81 = $c;
    $82 = (($81) + 1)|0;
    $c = $82;
   }
   $83 = $i;
   $84 = (($83) + 1)|0;
   $i = $84;
  }
 }
 $85 = (_foveon_camf_param(190352,133144)|0);
 $cp = $85;
 $86 = ($85|0)!=(0|0);
 if (!($86)) {
  $87 = HEAP32[_stderr>>2]|0;
  $88 = HEAP32[696>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $88;
  $vararg_ptr3 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr3>>2] = 133144;
  (_fprintf(($87|0),(190376|0),($vararg_buffer1|0))|0);
  STACKTOP = sp;return;
 }
 $89 = $cp;
 (_foveon_fixed($cam_xyz,9,$89)|0);
 $90 = (_foveon_camf_param(190408,133144)|0);
 (_foveon_fixed($correct,9,$90)|0);
 dest=$last+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $91 = $i;
  $92 = ($91|0)<(3);
  if (!($92)) {
   break;
  }
  $j = 0;
  while(1) {
   $93 = $j;
   $94 = ($93|0)<(3);
   if (!($94)) {
    break;
   }
   $c = 0;
   while(1) {
    $95 = $c;
    $96 = ($95|0)<(3);
    if (!($96)) {
     break;
    }
    $97 = $c;
    $98 = $i;
    $99 = (($correct) + (($98*12)|0)|0);
    $100 = (($99) + ($97<<2)|0);
    $101 = +HEAPF32[$100>>2];
    $102 = $j;
    $103 = $c;
    $104 = (($cam_xyz) + (($103*12)|0)|0);
    $105 = (($104) + ($102<<2)|0);
    $106 = +HEAPF32[$105>>2];
    $107 = $101 * $106;
    $108 = $j;
    $109 = $i;
    $110 = (($last) + (($109*12)|0)|0);
    $111 = (($110) + ($108<<2)|0);
    $112 = +HEAPF32[$111>>2];
    $113 = $112 + $107;
    HEAPF32[$111>>2] = $113;
    $114 = $c;
    $115 = (($114) + 1)|0;
    $c = $115;
   }
   $116 = $j;
   $117 = (($116) + 1)|0;
   $j = $117;
  }
  $118 = $i;
  $119 = (($118) + 1)|0;
  $i = $119;
 }
 $i = 0;
 while(1) {
  $120 = $i;
  $121 = ($120|0)<(3);
  if (!($121)) {
   break;
  }
  $c = 0;
  while(1) {
   $122 = $c;
   $123 = ($122|0)<(3);
   if (!($123)) {
    break;
   }
   $124 = $c;
   $125 = (($124) + 1)|0;
   $126 = (($125|0) % 3)&-1;
   $127 = $i;
   $128 = (($127) + 1)|0;
   $129 = (($128|0) % 3)&-1;
   $130 = (($last) + (($129*12)|0)|0);
   $131 = (($130) + ($126<<2)|0);
   $132 = +HEAPF32[$131>>2];
   $133 = $c;
   $134 = (($133) + 2)|0;
   $135 = (($134|0) % 3)&-1;
   $136 = $i;
   $137 = (($136) + 2)|0;
   $138 = (($137|0) % 3)&-1;
   $139 = (($last) + (($138*12)|0)|0);
   $140 = (($139) + ($135<<2)|0);
   $141 = +HEAPF32[$140>>2];
   $142 = $132 * $141;
   $143 = $c;
   $144 = (($143) + 2)|0;
   $145 = (($144|0) % 3)&-1;
   $146 = $i;
   $147 = (($146) + 1)|0;
   $148 = (($147|0) % 3)&-1;
   $149 = (($last) + (($148*12)|0)|0);
   $150 = (($149) + ($145<<2)|0);
   $151 = +HEAPF32[$150>>2];
   $152 = $c;
   $153 = (($152) + 1)|0;
   $154 = (($153|0) % 3)&-1;
   $155 = $i;
   $156 = (($155) + 2)|0;
   $157 = (($156|0) % 3)&-1;
   $158 = (($last) + (($157*12)|0)|0);
   $159 = (($158) + ($154<<2)|0);
   $160 = +HEAPF32[$159>>2];
   $161 = $151 * $160;
   $162 = $142 - $161;
   $163 = $i;
   $164 = $c;
   $165 = (($diag) + (($164*12)|0)|0);
   $166 = (($165) + ($163<<2)|0);
   HEAPF32[$166>>2] = $162;
   $167 = $c;
   $168 = (($167) + 1)|0;
   $c = $168;
  }
  $169 = $i;
  $170 = (($169) + 1)|0;
  $i = $170;
 }
 $c = 0;
 while(1) {
  $171 = $c;
  $172 = ($171|0)<(3);
  if (!($172)) {
   break;
  }
  $173 = $c;
  $174 = (($diag) + (($173*12)|0)|0);
  $175 = +HEAPF32[$174>>2];
  $176 = $175;
  $177 = $176 * 0.31269999999999998;
  $178 = $c;
  $179 = (($diag) + (($178*12)|0)|0);
  $180 = (($179) + 4|0);
  $181 = +HEAPF32[$180>>2];
  $182 = $181;
  $183 = $182 * 0.32900000000000001;
  $184 = $177 + $183;
  $185 = $c;
  $186 = (($diag) + (($185*12)|0)|0);
  $187 = (($186) + 8|0);
  $188 = +HEAPF32[$187>>2];
  $189 = $188;
  $190 = $189 * 0.35830000000000001;
  $191 = $184 + $190;
  $192 = $191;
  $193 = $c;
  $194 = (($div) + ($193<<2)|0);
  HEAPF32[$194>>2] = $192;
  $195 = $c;
  $196 = (($195) + 1)|0;
  $c = $196;
 }
 HEAP32[$vararg_buffer4>>2] = 133144;
 (_sprintf($str,190432,$vararg_buffer4)|0);
 $197 = (_foveon_camf_param(190240,$str)|0);
 $198 = ($197|0)!=(0|0);
 if ($198) {
  (_foveon_fixed($div,3,$str)|0);
 }
 $num = 0.0;
 $c = 0;
 while(1) {
  $199 = $c;
  $200 = ($199|0)<(3);
  if (!($200)) {
   break;
  }
  $201 = $num;
  $202 = $c;
  $203 = (($div) + ($202<<2)|0);
  $204 = +HEAPF32[$203>>2];
  $205 = $201 < $204;
  if ($205) {
   $206 = $c;
   $207 = (($div) + ($206<<2)|0);
   $208 = +HEAPF32[$207>>2];
   $num = $208;
  }
  $209 = $c;
  $210 = (($209) + 1)|0;
  $c = $210;
 }
 $c = 0;
 while(1) {
  $211 = $c;
  $212 = ($211|0)<(3);
  if (!($212)) {
   break;
  }
  $213 = $num;
  $214 = $c;
  $215 = (($div) + ($214<<2)|0);
  $216 = +HEAPF32[$215>>2];
  $217 = $216 / $213;
  HEAPF32[$215>>2] = $217;
  $218 = $c;
  $219 = (($218) + 1)|0;
  $c = $219;
 }
 dest=$trans+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $220 = $i;
  $221 = ($220|0)<(3);
  if (!($221)) {
   break;
  }
  $j = 0;
  while(1) {
   $222 = $j;
   $223 = ($222|0)<(3);
   if (!($223)) {
    break;
   }
   $c = 0;
   while(1) {
    $224 = $c;
    $225 = ($224|0)<(3);
    if (!($225)) {
     break;
    }
    $226 = $c;
    $227 = $i;
    $228 = (132312 + ($227<<4)|0);
    $229 = (($228) + ($226<<2)|0);
    $230 = +HEAPF32[$229>>2];
    $231 = $j;
    $232 = $c;
    $233 = (($last) + (($232*12)|0)|0);
    $234 = (($233) + ($231<<2)|0);
    $235 = +HEAPF32[$234>>2];
    $236 = $230 * $235;
    $237 = $j;
    $238 = (($div) + ($237<<2)|0);
    $239 = +HEAPF32[$238>>2];
    $240 = $236 * $239;
    $241 = $j;
    $242 = $i;
    $243 = (($trans) + (($242*12)|0)|0);
    $244 = (($243) + ($241<<2)|0);
    $245 = +HEAPF32[$244>>2];
    $246 = $245 + $240;
    HEAPF32[$244>>2] = $246;
    $247 = $c;
    $248 = (($247) + 1)|0;
    $c = $248;
   }
   $249 = $j;
   $250 = (($249) + 1)|0;
   $j = $250;
  }
  $251 = $i;
  $252 = (($251) + 1)|0;
  $i = $252;
 }
 $c = 0;
 while(1) {
  $253 = $c;
  $254 = ($253|0)<(3);
  if (!($254)) {
   break;
  }
  $255 = $c;
  $256 = (($trans) + (($255*12)|0)|0);
  $257 = +HEAPF32[$256>>2];
  $258 = $c;
  $259 = (($trans) + (($258*12)|0)|0);
  $260 = (($259) + 4|0);
  $261 = +HEAPF32[$260>>2];
  $262 = $257 + $261;
  $263 = $c;
  $264 = (($trans) + (($263*12)|0)|0);
  $265 = (($264) + 8|0);
  $266 = +HEAPF32[$265>>2];
  $267 = $262 + $266;
  $268 = $267;
  $269 = $c;
  $270 = (($trsum) + ($269<<3)|0);
  HEAPF64[$270>>3] = $268;
  $271 = $c;
  $272 = (($271) + 1)|0;
  $c = $272;
 }
 $273 = +HEAPF64[$trsum>>3];
 $274 = 6.0 * $273;
 $275 = (($trsum) + 8|0);
 $276 = +HEAPF64[$275>>3];
 $277 = 11.0 * $276;
 $278 = $274 + $277;
 $279 = (($trsum) + 16|0);
 $280 = +HEAPF64[$279>>3];
 $281 = 3.0 * $280;
 $282 = $278 + $281;
 $283 = $282 / 20.0;
 $dsum = $283;
 $i = 0;
 while(1) {
  $284 = $i;
  $285 = ($284|0)<(3);
  if (!($285)) {
   break;
  }
  $c = 0;
  while(1) {
   $286 = $c;
   $287 = ($286|0)<(3);
   if (!($287)) {
    break;
   }
   $288 = $c;
   $289 = $i;
   $290 = (($trans) + (($289*12)|0)|0);
   $291 = (($290) + ($288<<2)|0);
   $292 = +HEAPF32[$291>>2];
   $293 = $292;
   $294 = $dsum;
   $295 = $293 * $294;
   $296 = $i;
   $297 = (($trsum) + ($296<<3)|0);
   $298 = +HEAPF64[$297>>3];
   $299 = $295 / $298;
   $300 = $299;
   $301 = $c;
   $302 = $i;
   $303 = (($last) + (($302*12)|0)|0);
   $304 = (($303) + ($301<<2)|0);
   HEAPF32[$304>>2] = $300;
   $305 = $c;
   $306 = (($305) + 1)|0;
   $c = $306;
  }
  $307 = $i;
  $308 = (($307) + 1)|0;
  $i = $308;
 }
 dest=$trans+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $309 = $i;
  $310 = ($309|0)<(3);
  if (!($310)) {
   break;
  }
  $j = 0;
  while(1) {
   $311 = $j;
   $312 = ($311|0)<(3);
   if (!($312)) {
    break;
   }
   $c = 0;
   while(1) {
    $313 = $c;
    $314 = ($313|0)<(3);
    if (!($314)) {
     break;
    }
    $315 = $i;
    $316 = $c;
    $317 = ($315|0)==($316|0);
    $318 = $317 ? 32 : -1;
    $319 = (+($318|0));
    $320 = $j;
    $321 = $c;
    $322 = (($last) + (($321*12)|0)|0);
    $323 = (($322) + ($320<<2)|0);
    $324 = +HEAPF32[$323>>2];
    $325 = $319 * $324;
    $326 = $325 / 30.0;
    $327 = $j;
    $328 = $i;
    $329 = (($trans) + (($328*12)|0)|0);
    $330 = (($329) + ($327<<2)|0);
    $331 = +HEAPF32[$330>>2];
    $332 = $331 + $326;
    HEAPF32[$330>>2] = $332;
    $333 = $c;
    $334 = (($333) + 1)|0;
    $c = $334;
   }
   $335 = $j;
   $336 = (($335) + 1)|0;
   $j = $336;
  }
  $337 = $i;
  $338 = (($337) + 1)|0;
  $i = $338;
 }
 $339 = +HEAPF32[$cfilt>>2];
 _foveon_make_curves($curve,$color_dq,$div,$339);
 $c = 0;
 while(1) {
  $340 = $c;
  $341 = ($340|0)<(3);
  if (!($341)) {
   break;
  }
  $342 = $c;
  $343 = (($chroma_dq) + ($342<<2)|0);
  $344 = +HEAPF32[$343>>2];
  $345 = $344 / 3.0;
  HEAPF32[$343>>2] = $345;
  $346 = $c;
  $347 = (($346) + 1)|0;
  $c = $347;
 }
 $348 = (($curve) + 12|0);
 $349 = +HEAPF32[$cfilt>>2];
 _foveon_make_curves($348,$chroma_dq,$div,$349);
 $c = 0;
 while(1) {
  $350 = $c;
  $351 = ($350|0)<(3);
  if (!($351)) {
   break;
  }
  $352 = $c;
  $353 = (($chroma_dq) + ($352<<2)|0);
  $354 = +HEAPF32[$353>>2];
  $355 = $c;
  $356 = (($div) + ($355<<2)|0);
  $357 = +HEAPF32[$356>>2];
  $358 = $354 / $357;
  $359 = $358;
  $360 = $dsum;
  $361 = $360 + $359;
  $dsum = $361;
  $362 = $c;
  $363 = (($362) + 1)|0;
  $c = $363;
 }
 $364 = $dsum;
 $365 = $dsum;
 $366 = +HEAPF32[$cfilt>>2];
 $367 = $366;
 $368 = (_foveon_make_curve($364,$365,$367)|0);
 $369 = (($curve) + 24|0);
 HEAP32[$369>>2] = $368;
 $370 = $dsum;
 $371 = $370 * 2.0;
 $372 = $dsum;
 $373 = $372 * 2.0;
 $374 = +HEAPF32[$cfilt>>2];
 $375 = $374;
 $376 = (_foveon_make_curve($371,$373,$375)|0);
 $377 = (($curve) + 28|0);
 HEAP32[$377>>2] = $376;
 $378 = (_foveon_camf_matrix($dim,190448)|0);
 $sgain = $378;
 $379 = $sgain;
 $380 = ($379|0)!=(0|0);
 if (!($380)) {
  STACKTOP = sp;return;
 }
 $381 = (($dim) + 4|0);
 $382 = HEAP32[$381>>2]|0;
 $383 = (_calloc($382,12)|0);
 $sgrow = $383;
 $384 = HEAP16[132120>>1]|0;
 $385 = $384&65535;
 $386 = (($dim) + 4|0);
 $387 = HEAP32[$386>>2]|0;
 $388 = (($385) + ($387))|0;
 $389 = (($388) - 2)|0;
 $390 = (($dim) + 4|0);
 $391 = HEAP32[$390>>2]|0;
 $392 = (($391) - 1)|0;
 $393 = (($389>>>0) / ($392>>>0))&-1;
 $sgx = $393;
 $394 = HEAP16[132112>>1]|0;
 $395 = $394&65535;
 $396 = (_calloc($395,12)|0);
 $black = $396;
 $row = 0;
 while(1) {
  $397 = $row;
  $398 = HEAP16[132112>>1]|0;
  $399 = $398&65535;
  $400 = ($397|0)<($399|0);
  if (!($400)) {
   break;
  }
  $i = 0;
  while(1) {
   $401 = $i;
   $402 = ($401|0)<(6);
   if (!($402)) {
    break;
   }
   $403 = $i;
   $404 = (($ddft) + 24|0);
   $405 = (($404) + ($403<<2)|0);
   $406 = +HEAPF32[$405>>2];
   $407 = $406;
   $408 = $row;
   $409 = (+($408|0));
   $410 = HEAP16[132112>>1]|0;
   $411 = $410&65535;
   $412 = (+($411|0));
   $413 = $412 - 1.0;
   $414 = $409 / $413;
   $415 = $i;
   $416 = (($ddft) + 48|0);
   $417 = (($416) + ($415<<2)|0);
   $418 = +HEAPF32[$417>>2];
   $419 = $i;
   $420 = (($ddft) + 24|0);
   $421 = (($420) + ($419<<2)|0);
   $422 = +HEAPF32[$421>>2];
   $423 = $418 - $422;
   $424 = $423;
   $425 = $414 * $424;
   $426 = $407 + $425;
   $427 = $426;
   $428 = $i;
   $429 = (($ddft) + ($428<<2)|0);
   HEAPF32[$429>>2] = $427;
   $430 = $i;
   $431 = (($430) + 1)|0;
   $i = $431;
  }
  $c = 0;
  while(1) {
   $432 = $c;
   $433 = ($432|0)<(3);
   if (!($433)) {
    break;
   }
   $434 = $row;
   $435 = HEAP16[132120>>1]|0;
   $436 = $435&65535;
   $437 = Math_imul($434, $436)|0;
   $438 = HEAP32[132144>>2]|0;
   $439 = (($438) + ($437<<3)|0);
   $440 = $c;
   $441 = (($439) + ($440<<1)|0);
   $442 = +HEAPF32[$cfilt>>2];
   $443 = (+_foveon_avg($441,$dscr,$442));
   $444 = $row;
   $445 = HEAP16[132120>>1]|0;
   $446 = $445&65535;
   $447 = Math_imul($444, $446)|0;
   $448 = HEAP32[132144>>2]|0;
   $449 = (($448) + ($447<<3)|0);
   $450 = $c;
   $451 = (($449) + ($450<<1)|0);
   $452 = (($dscr) + 8|0);
   $453 = +HEAPF32[$cfilt>>2];
   $454 = (+_foveon_avg($451,$452,$453));
   $455 = $454 * 3.0;
   $456 = $443 + $455;
   $457 = $c;
   $458 = (($ddft) + ($457<<3)|0);
   $459 = +HEAPF32[$458>>2];
   $460 = $456 - $459;
   $461 = $460 / 4.0;
   $462 = $c;
   $463 = (($ddft) + ($462<<3)|0);
   $464 = (($463) + 4|0);
   $465 = +HEAPF32[$464>>2];
   $466 = $461 - $465;
   $467 = $c;
   $468 = $row;
   $469 = $black;
   $470 = (($469) + (($468*12)|0)|0);
   $471 = (($470) + ($467<<2)|0);
   HEAPF32[$471>>2] = $466;
   $472 = $c;
   $473 = (($472) + 1)|0;
   $c = $473;
  }
  $474 = $row;
  $475 = (($474) + 1)|0;
  $row = $475;
 }
 $476 = $black;
 $477 = $black;
 $478 = (($477) + 96|0);
 dest=$476+0|0; src=$478+0|0; stop=dest+96|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $479 = $black;
 $480 = HEAP16[132112>>1]|0;
 $481 = $480&65535;
 $482 = (($479) + (($481*12)|0)|0);
 $483 = (($482) + -132|0);
 $484 = $black;
 $485 = HEAP16[132112>>1]|0;
 $486 = $485&65535;
 $487 = (($484) + (($486*12)|0)|0);
 $488 = (($487) + -264|0);
 _memcpy(($483|0),($488|0),132)|0;
 $489 = $black;
 dest=$last+0|0; src=$489+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $row = 1;
 while(1) {
  $490 = $row;
  $491 = HEAP16[132112>>1]|0;
  $492 = $491&65535;
  $493 = (($492) - 1)|0;
  $494 = ($490|0)<($493|0);
  if (!($494)) {
   break;
  }
  $c = 0;
  while(1) {
   $495 = $c;
   $496 = ($495|0)<(3);
   if (!($496)) {
    break;
   }
   $497 = $c;
   $498 = (($last) + 12|0);
   $499 = (($498) + ($497<<2)|0);
   $500 = +HEAPF32[$499>>2];
   $501 = $c;
   $502 = (($last) + ($501<<2)|0);
   $503 = +HEAPF32[$502>>2];
   $504 = $500 > $503;
   if ($504) {
    $505 = $c;
    $506 = (($last) + 12|0);
    $507 = (($506) + ($505<<2)|0);
    $508 = +HEAPF32[$507>>2];
    $509 = $c;
    $510 = (($last) + 24|0);
    $511 = (($510) + ($509<<2)|0);
    $512 = +HEAPF32[$511>>2];
    $513 = $508 > $512;
    if ($513) {
     $514 = $c;
     $515 = (($last) + ($514<<2)|0);
     $516 = +HEAPF32[$515>>2];
     $517 = $c;
     $518 = (($last) + 24|0);
     $519 = (($518) + ($517<<2)|0);
     $520 = +HEAPF32[$519>>2];
     $521 = $516 > $520;
     if ($521) {
      $522 = $c;
      $523 = (($last) + ($522<<2)|0);
      $524 = +HEAPF32[$523>>2];
      $534 = $524;
     } else {
      $525 = $c;
      $526 = (($last) + 24|0);
      $527 = (($526) + ($525<<2)|0);
      $528 = +HEAPF32[$527>>2];
      $534 = $528;
     }
     $529 = $c;
     $530 = $row;
     $531 = $black;
     $532 = (($531) + (($530*12)|0)|0);
     $533 = (($532) + ($529<<2)|0);
     HEAPF32[$533>>2] = $534;
    }
   } else {
    $535 = $c;
    $536 = (($last) + 12|0);
    $537 = (($536) + ($535<<2)|0);
    $538 = +HEAPF32[$537>>2];
    $539 = $c;
    $540 = (($last) + 24|0);
    $541 = (($540) + ($539<<2)|0);
    $542 = +HEAPF32[$541>>2];
    $543 = $538 < $542;
    if ($543) {
     $544 = $c;
     $545 = (($last) + ($544<<2)|0);
     $546 = +HEAPF32[$545>>2];
     $547 = $c;
     $548 = (($last) + 24|0);
     $549 = (($548) + ($547<<2)|0);
     $550 = +HEAPF32[$549>>2];
     $551 = $546 < $550;
     if ($551) {
      $552 = $c;
      $553 = (($last) + ($552<<2)|0);
      $554 = +HEAPF32[$553>>2];
      $564 = $554;
     } else {
      $555 = $c;
      $556 = (($last) + 24|0);
      $557 = (($556) + ($555<<2)|0);
      $558 = +HEAPF32[$557>>2];
      $564 = $558;
     }
     $559 = $c;
     $560 = $row;
     $561 = $black;
     $562 = (($561) + (($560*12)|0)|0);
     $563 = (($562) + ($559<<2)|0);
     HEAPF32[$563>>2] = $564;
    }
   }
   $565 = $c;
   $566 = (($565) + 1)|0;
   $c = $566;
  }
  $567 = (($last) + 12|0);
  _memmove(($last|0),($567|0),24)|0;
  $568 = (($last) + 24|0);
  $569 = $row;
  $570 = (($569) + 1)|0;
  $571 = $black;
  $572 = (($571) + (($570*12)|0)|0);
  ;HEAP32[$568+0>>2]=HEAP32[$572+0>>2]|0;HEAP32[$568+4>>2]=HEAP32[$572+4>>2]|0;HEAP32[$568+8>>2]=HEAP32[$572+8>>2]|0;
  $573 = $row;
  $574 = (($573) + 1)|0;
  $row = $574;
 }
 $c = 0;
 while(1) {
  $575 = $c;
  $576 = ($575|0)<(3);
  if (!($576)) {
   break;
  }
  $577 = $c;
  $578 = (($last) + ($577<<2)|0);
  $579 = +HEAPF32[$578>>2];
  $580 = $c;
  $581 = (($last) + 12|0);
  $582 = (($581) + ($580<<2)|0);
  $583 = +HEAPF32[$582>>2];
  $584 = $579 + $583;
  $585 = $584 / 2.0;
  $586 = $c;
  $587 = $row;
  $588 = $black;
  $589 = (($588) + (($587*12)|0)|0);
  $590 = (($589) + ($586<<2)|0);
  HEAPF32[$590>>2] = $585;
  $591 = $c;
  $592 = (($591) + 1)|0;
  $c = $592;
 }
 $c = 0;
 while(1) {
  $593 = $c;
  $594 = ($593|0)<(3);
  if (!($594)) {
   break;
  }
  $595 = $c;
  $596 = $black;
  $597 = (($596) + 12|0);
  $598 = (($597) + ($595<<2)|0);
  $599 = +HEAPF32[$598>>2];
  $600 = $c;
  $601 = $black;
  $602 = (($601) + 36|0);
  $603 = (($602) + ($600<<2)|0);
  $604 = +HEAPF32[$603>>2];
  $605 = $599 + $604;
  $606 = $605 / 2.0;
  $607 = $c;
  $608 = $black;
  $609 = (($608) + ($607<<2)|0);
  HEAPF32[$609>>2] = $606;
  $610 = $c;
  $611 = (($610) + 1)|0;
  $c = $611;
 }
 $612 = (+Math_exp(-0.041666666666666664));
 $613 = 1.0 - $612;
 $614 = $613;
 $val = $614;
 $615 = $black;
 ;HEAP32[$fsum+0>>2]=HEAP32[$615+0>>2]|0;HEAP32[$fsum+4>>2]=HEAP32[$615+4>>2]|0;HEAP32[$fsum+8>>2]=HEAP32[$615+8>>2]|0;
 $row = 1;
 while(1) {
  $616 = $row;
  $617 = HEAP16[132112>>1]|0;
  $618 = $617&65535;
  $619 = ($616|0)<($618|0);
  if (!($619)) {
   break;
  }
  $c = 0;
  while(1) {
   $620 = $c;
   $621 = ($620|0)<(3);
   if (!($621)) {
    break;
   }
   $622 = $c;
   $623 = $row;
   $624 = $black;
   $625 = (($624) + (($623*12)|0)|0);
   $626 = (($625) + ($622<<2)|0);
   $627 = +HEAPF32[$626>>2];
   $628 = $c;
   $629 = $row;
   $630 = (($629) - 1)|0;
   $631 = $black;
   $632 = (($631) + (($630*12)|0)|0);
   $633 = (($632) + ($628<<2)|0);
   $634 = +HEAPF32[$633>>2];
   $635 = $627 - $634;
   $636 = $val;
   $637 = $635 * $636;
   $638 = $c;
   $639 = $row;
   $640 = (($639) - 1)|0;
   $641 = $black;
   $642 = (($641) + (($640*12)|0)|0);
   $643 = (($642) + ($638<<2)|0);
   $644 = +HEAPF32[$643>>2];
   $645 = $637 + $644;
   $646 = $c;
   $647 = $row;
   $648 = $black;
   $649 = (($648) + (($647*12)|0)|0);
   $650 = (($649) + ($646<<2)|0);
   HEAPF32[$650>>2] = $645;
   $651 = $c;
   $652 = (($fsum) + ($651<<2)|0);
   $653 = +HEAPF32[$652>>2];
   $654 = $653 + $645;
   HEAPF32[$652>>2] = $654;
   $655 = $c;
   $656 = (($655) + 1)|0;
   $c = $656;
  }
  $657 = $row;
  $658 = (($657) + 1)|0;
  $row = $658;
 }
 $659 = HEAP16[132112>>1]|0;
 $660 = $659&65535;
 $661 = (($660) - 1)|0;
 $662 = $black;
 $663 = (($662) + (($661*12)|0)|0);
 ;HEAP32[$last+0>>2]=HEAP32[$663+0>>2]|0;HEAP32[$last+4>>2]=HEAP32[$663+4>>2]|0;HEAP32[$last+8>>2]=HEAP32[$663+8>>2]|0;
 $c = 0;
 while(1) {
  $664 = $c;
  $665 = ($664|0)<(3);
  if (!($665)) {
   break;
  }
  $666 = HEAP16[132112>>1]|0;
  $667 = $666&65535;
  $668 = (+($667|0));
  $669 = $c;
  $670 = (($fsum) + ($669<<2)|0);
  $671 = +HEAPF32[$670>>2];
  $672 = $671 / $668;
  HEAPF32[$670>>2] = $672;
  $673 = $c;
  $674 = (($673) + 1)|0;
  $c = $674;
 }
 $675 = HEAP16[132112>>1]|0;
 $676 = $675&65535;
 $row = $676;
 while(1) {
  $677 = $row;
  $678 = (($677) + -1)|0;
  $row = $678;
  $679 = ($677|0)!=(0);
  if (!($679)) {
   break;
  }
  $c = 0;
  while(1) {
   $680 = $c;
   $681 = ($680|0)<(3);
   if (!($681)) {
    break;
   }
   $682 = $c;
   $683 = $row;
   $684 = $black;
   $685 = (($684) + (($683*12)|0)|0);
   $686 = (($685) + ($682<<2)|0);
   $687 = +HEAPF32[$686>>2];
   $688 = $c;
   $689 = (($fsum) + ($688<<2)|0);
   $690 = +HEAPF32[$689>>2];
   $691 = $687 - $690;
   $692 = $c;
   $693 = (($last) + ($692<<2)|0);
   $694 = +HEAPF32[$693>>2];
   $695 = $691 - $694;
   $696 = $val;
   $697 = $695 * $696;
   $698 = $c;
   $699 = (($last) + ($698<<2)|0);
   $700 = +HEAPF32[$699>>2];
   $701 = $697 + $700;
   $702 = $c;
   $703 = $row;
   $704 = $black;
   $705 = (($704) + (($703*12)|0)|0);
   $706 = (($705) + ($702<<2)|0);
   HEAPF32[$706>>2] = $701;
   $707 = $c;
   $708 = (($last) + ($707<<2)|0);
   HEAPF32[$708>>2] = $701;
   $709 = $c;
   $710 = (($709) + 1)|0;
   $c = $710;
  }
 }
 ;HEAP32[$total+0>>2]=0|0;HEAP32[$total+4>>2]=0|0;HEAP32[$total+8>>2]=0|0;HEAP32[$total+12>>2]=0|0;
 $row = 2;
 while(1) {
  $711 = $row;
  $712 = HEAP16[132112>>1]|0;
  $713 = $712&65535;
  $714 = ($711|0)<($713|0);
  if (!($714)) {
   break;
  }
  $col = 2;
  while(1) {
   $715 = $col;
   $716 = HEAP16[132120>>1]|0;
   $717 = $716&65535;
   $718 = ($715|0)<($717|0);
   if (!($718)) {
    break;
   }
   $c = 0;
   while(1) {
    $719 = $c;
    $720 = ($719|0)<(3);
    if (!($720)) {
     break;
    }
    $721 = $c;
    $722 = $row;
    $723 = HEAP16[132120>>1]|0;
    $724 = $723&65535;
    $725 = Math_imul($722, $724)|0;
    $726 = $col;
    $727 = (($725) + ($726))|0;
    $728 = HEAP32[132144>>2]|0;
    $729 = (($728) + ($727<<3)|0);
    $730 = (($729) + ($721<<1)|0);
    $731 = HEAP16[$730>>1]|0;
    $732 = $731 << 16 >> 16;
    $733 = $c;
    $734 = (($total) + ($733<<2)|0);
    $735 = HEAP32[$734>>2]|0;
    $736 = (($735) + ($732))|0;
    HEAP32[$734>>2] = $736;
    $737 = $c;
    $738 = (($737) + 1)|0;
    $c = $738;
   }
   $739 = (($total) + 12|0);
   $740 = HEAP32[$739>>2]|0;
   $741 = (($740) + 1)|0;
   HEAP32[$739>>2] = $741;
   $742 = $col;
   $743 = (($742) + 4)|0;
   $col = $743;
  }
  $744 = $row;
  $745 = (($744) + 4)|0;
  $row = $745;
 }
 $row = 0;
 while(1) {
  $746 = $row;
  $747 = HEAP16[132112>>1]|0;
  $748 = $747&65535;
  $749 = ($746|0)<($748|0);
  if (!($749)) {
   break;
  }
  $c = 0;
  while(1) {
   $750 = $c;
   $751 = ($750|0)<(3);
   if (!($751)) {
    break;
   }
   $752 = $c;
   $753 = (($fsum) + ($752<<2)|0);
   $754 = +HEAPF32[$753>>2];
   $755 = $754 / 2.0;
   $756 = $755;
   $757 = $c;
   $758 = (($total) + ($757<<2)|0);
   $759 = HEAP32[$758>>2]|0;
   $760 = (+($759|0));
   $761 = (($total) + 12|0);
   $762 = HEAP32[$761>>2]|0;
   $763 = (+($762|0));
   $764 = $763 * 100.0;
   $765 = $760 / $764;
   $766 = $756 + $765;
   $767 = $c;
   $768 = $row;
   $769 = $black;
   $770 = (($769) + (($768*12)|0)|0);
   $771 = (($770) + ($767<<2)|0);
   $772 = +HEAPF32[$771>>2];
   $773 = $772;
   $774 = $773 + $766;
   $775 = $774;
   HEAPF32[$771>>2] = $775;
   $776 = $c;
   $777 = (($776) + 1)|0;
   $c = $777;
  }
  $778 = $row;
  $779 = (($778) + 1)|0;
  $row = $779;
 }
 $row = 0;
 while(1) {
  $780 = $row;
  $781 = HEAP16[132112>>1]|0;
  $782 = $781&65535;
  $783 = ($780|0)<($782|0);
  if (!($783)) {
   break;
  }
  $i = 0;
  while(1) {
   $784 = $i;
   $785 = ($784|0)<(6);
   if (!($785)) {
    break;
   }
   $786 = $i;
   $787 = (($ddft) + 24|0);
   $788 = (($787) + ($786<<2)|0);
   $789 = +HEAPF32[$788>>2];
   $790 = $789;
   $791 = $row;
   $792 = (+($791|0));
   $793 = HEAP16[132112>>1]|0;
   $794 = $793&65535;
   $795 = (+($794|0));
   $796 = $795 - 1.0;
   $797 = $792 / $796;
   $798 = $i;
   $799 = (($ddft) + 48|0);
   $800 = (($799) + ($798<<2)|0);
   $801 = +HEAPF32[$800>>2];
   $802 = $i;
   $803 = (($ddft) + 24|0);
   $804 = (($803) + ($802<<2)|0);
   $805 = +HEAPF32[$804>>2];
   $806 = $801 - $805;
   $807 = $806;
   $808 = $797 * $807;
   $809 = $790 + $808;
   $810 = $809;
   $811 = $i;
   $812 = (($ddft) + ($811<<2)|0);
   HEAPF32[$812>>2] = $810;
   $813 = $i;
   $814 = (($813) + 1)|0;
   $i = $814;
  }
  $815 = $row;
  $816 = HEAP16[132120>>1]|0;
  $817 = $816&65535;
  $818 = Math_imul($815, $817)|0;
  $819 = HEAP32[132144>>2]|0;
  $820 = (($819) + ($818<<3)|0);
  $pix = $820;
  $821 = $pix;
  ;HEAP16[$prev+0>>1]=HEAP16[$821+0>>1]|0;HEAP16[$prev+2>>1]=HEAP16[$821+2>>1]|0;HEAP16[$prev+4>>1]=HEAP16[$821+4>>1]|0;
  $822 = $row;
  $823 = (+($822|0));
  $824 = HEAP16[132112>>1]|0;
  $825 = $824&65535;
  $826 = (+($825|0));
  $827 = $826 - 1.0;
  $828 = $823 / $827;
  $829 = (($dim) + 8|0);
  $830 = HEAP32[$829>>2]|0;
  $831 = (($830) - 1)|0;
  $832 = (+($831>>>0));
  $833 = $828 * $832;
  $834 = $833;
  $frow = $834;
  $835 = $frow;
  $836 = (~~(($835)));
  $irow = $836;
  $837 = (($dim) + 8|0);
  $838 = HEAP32[$837>>2]|0;
  $839 = (($838) - 1)|0;
  $840 = ($836|0)==($839|0);
  if ($840) {
   $841 = $irow;
   $842 = (($841) + -1)|0;
   $irow = $842;
  }
  $843 = $irow;
  $844 = (+($843|0));
  $845 = $frow;
  $846 = $845 - $844;
  $frow = $846;
  $i = 0;
  while(1) {
   $847 = $i;
   $848 = (($dim) + 4|0);
   $849 = HEAP32[$848>>2]|0;
   $850 = ($847>>>0)<($849>>>0);
   if (!($850)) {
    break;
   }
   $c = 0;
   while(1) {
    $851 = $c;
    $852 = ($851|0)<(3);
    if (!($852)) {
     break;
    }
    $853 = $c;
    $854 = $irow;
    $855 = (($dim) + 4|0);
    $856 = HEAP32[$855>>2]|0;
    $857 = Math_imul($854, $856)|0;
    $858 = $i;
    $859 = (($857) + ($858))|0;
    $860 = $sgain;
    $861 = (($860) + (($859*12)|0)|0);
    $862 = (($861) + ($853<<2)|0);
    $863 = +HEAPF32[$862>>2];
    $864 = $frow;
    $865 = 1.0 - $864;
    $866 = $863 * $865;
    $867 = $c;
    $868 = $irow;
    $869 = (($868) + 1)|0;
    $870 = (($dim) + 4|0);
    $871 = HEAP32[$870>>2]|0;
    $872 = Math_imul($869, $871)|0;
    $873 = $i;
    $874 = (($872) + ($873))|0;
    $875 = $sgain;
    $876 = (($875) + (($874*12)|0)|0);
    $877 = (($876) + ($867<<2)|0);
    $878 = +HEAPF32[$877>>2];
    $879 = $frow;
    $880 = $878 * $879;
    $881 = $866 + $880;
    $882 = $c;
    $883 = $i;
    $884 = $sgrow;
    $885 = (($884) + (($883*12)|0)|0);
    $886 = (($885) + ($882<<2)|0);
    HEAPF32[$886>>2] = $881;
    $887 = $c;
    $888 = (($887) + 1)|0;
    $c = $888;
   }
   $889 = $i;
   $890 = (($889) + 1)|0;
   $i = $890;
  }
  $col = 0;
  while(1) {
   $891 = $col;
   $892 = HEAP16[132120>>1]|0;
   $893 = $892&65535;
   $894 = ($891|0)<($893|0);
   if (!($894)) {
    break;
   }
   $c = 0;
   while(1) {
    $895 = $c;
    $896 = ($895|0)<(3);
    if (!($896)) {
     break;
    }
    $897 = $c;
    $898 = $pix;
    $899 = (($898) + ($897<<1)|0);
    $900 = HEAP16[$899>>1]|0;
    $901 = $900 << 16 >> 16;
    $902 = $c;
    $903 = (($prev) + ($902<<1)|0);
    $904 = HEAP16[$903>>1]|0;
    $905 = $904 << 16 >> 16;
    $906 = (($901) - ($905))|0;
    $diff = $906;
    $907 = $c;
    $908 = $pix;
    $909 = (($908) + ($907<<1)|0);
    $910 = HEAP16[$909>>1]|0;
    $911 = $c;
    $912 = (($prev) + ($911<<1)|0);
    HEAP16[$912>>1] = $910;
    $913 = $c;
    $914 = $pix;
    $915 = (($914) + ($913<<1)|0);
    $916 = HEAP16[$915>>1]|0;
    $917 = $916 << 16 >> 16;
    $918 = (+($917|0));
    $919 = $diff;
    $920 = $diff;
    $921 = $diff;
    $922 = Math_imul($920, $921)|0;
    $923 = $922 >> 14;
    $924 = (($919) + ($923))|0;
    $925 = (+($924|0));
    $926 = +HEAPF32[$cfilt>>2];
    $927 = $925 * $926;
    $928 = $c;
    $929 = (($ddft) + ($928<<3)|0);
    $930 = (($929) + 4|0);
    $931 = +HEAPF32[$930>>2];
    $932 = $927 - $931;
    $933 = $932;
    $934 = $c;
    $935 = (($ddft) + ($934<<3)|0);
    $936 = +HEAPF32[$935>>2];
    $937 = $936;
    $938 = $col;
    $939 = (+($938|0));
    $940 = HEAP16[132120>>1]|0;
    $941 = $940&65535;
    $942 = (+($941|0));
    $943 = $939 / $942;
    $944 = $943;
    $945 = $944 - 0.5;
    $946 = $937 * $945;
    $947 = $933 - $946;
    $948 = $c;
    $949 = $row;
    $950 = $black;
    $951 = (($950) + (($949*12)|0)|0);
    $952 = (($951) + ($948<<2)|0);
    $953 = +HEAPF32[$952>>2];
    $954 = $953;
    $955 = $947 - $954;
    $956 = (+Math_floor((+$955)));
    $957 = $918 + $956;
    $958 = (~~(($957)));
    $959 = $c;
    $960 = (($ipix) + ($959<<2)|0);
    HEAP32[$960>>2] = $958;
    $961 = $c;
    $962 = (($961) + 1)|0;
    $c = $962;
   }
   $c = 0;
   while(1) {
    $963 = $c;
    $964 = ($963|0)<(3);
    if (!($964)) {
     break;
    }
    $965 = $c;
    $966 = (($ipix) + ($965<<2)|0);
    $967 = HEAP32[$966>>2]|0;
    $968 = $c;
    $969 = (($ipix) + ($968<<2)|0);
    $970 = HEAP32[$969>>2]|0;
    $971 = Math_imul($967, $970)|0;
    $972 = $971 >> 14;
    $973 = $c;
    $974 = (($work) + ($973<<2)|0);
    HEAP32[$974>>2] = $972;
    $975 = $c;
    $976 = (($ipix) + ($975<<2)|0);
    $977 = HEAP32[$976>>2]|0;
    $978 = $c;
    $979 = (($work) + ($978<<2)|0);
    $980 = HEAP32[$979>>2]|0;
    $981 = Math_imul($977, $980)|0;
    $982 = $981 >> 14;
    $983 = $c;
    $984 = (($work) + 24|0);
    $985 = (($984) + ($983<<2)|0);
    HEAP32[$985>>2] = $982;
    $986 = $c;
    $987 = (($986) + 1)|0;
    $988 = (($987|0) % 3)&-1;
    $989 = (($ipix) + ($988<<2)|0);
    $990 = HEAP32[$989>>2]|0;
    $991 = $c;
    $992 = (($991) + 2)|0;
    $993 = (($992|0) % 3)&-1;
    $994 = (($ipix) + ($993<<2)|0);
    $995 = HEAP32[$994>>2]|0;
    $996 = Math_imul($990, $995)|0;
    $997 = $996 >> 14;
    $998 = $c;
    $999 = (2 - ($998))|0;
    $1000 = (($work) + 12|0);
    $1001 = (($1000) + ($999<<2)|0);
    HEAP32[$1001>>2] = $997;
    $1002 = $c;
    $1003 = (($1002) + 1)|0;
    $c = $1003;
   }
   $c = 0;
   while(1) {
    $1004 = $c;
    $1005 = ($1004|0)<(3);
    if (!($1005)) {
     break;
    }
    $i = 0;
    $val = 0.0;
    while(1) {
     $1006 = $i;
     $1007 = ($1006|0)<(3);
     if (!($1007)) {
      break;
     }
     $j = 0;
     while(1) {
      $1008 = $j;
      $1009 = ($1008|0)<(3);
      if (!($1009)) {
       break;
      }
      $1010 = $j;
      $1011 = $i;
      $1012 = $c;
      $1013 = (($ppm) + (($1012*36)|0)|0);
      $1014 = (($1013) + (($1011*12)|0)|0);
      $1015 = (($1014) + ($1010<<2)|0);
      $1016 = +HEAPF32[$1015>>2];
      $1017 = $j;
      $1018 = $i;
      $1019 = (($work) + (($1018*12)|0)|0);
      $1020 = (($1019) + ($1017<<2)|0);
      $1021 = HEAP32[$1020>>2]|0;
      $1022 = (+($1021|0));
      $1023 = $1016 * $1022;
      $1024 = $val;
      $1025 = $1024 + $1023;
      $val = $1025;
      $1026 = $j;
      $1027 = (($1026) + 1)|0;
      $j = $1027;
     }
     $1028 = $i;
     $1029 = (($1028) + 1)|0;
     $i = $1029;
    }
    $1030 = $c;
    $1031 = (($ipix) + ($1030<<2)|0);
    $1032 = HEAP32[$1031>>2]|0;
    $1033 = (+($1032|0));
    $1034 = $val;
    $1035 = $1034;
    $1036 = (+Math_floor((+$1035)));
    $1037 = $1033 + $1036;
    $1038 = $c;
    $1039 = $col;
    $1040 = $sgx;
    $1041 = (($1039|0) / ($1040|0))&-1;
    $1042 = $sgrow;
    $1043 = (($1042) + (($1041*12)|0)|0);
    $1044 = (($1043) + ($1038<<2)|0);
    $1045 = +HEAPF32[$1044>>2];
    $1046 = $sgx;
    $1047 = $col;
    $1048 = $sgx;
    $1049 = (($1047|0) % ($1048|0))&-1;
    $1050 = (($1046) - ($1049))|0;
    $1051 = (+($1050|0));
    $1052 = $1045 * $1051;
    $1053 = $c;
    $1054 = $col;
    $1055 = $sgx;
    $1056 = (($1054|0) / ($1055|0))&-1;
    $1057 = (($1056) + 1)|0;
    $1058 = $sgrow;
    $1059 = (($1058) + (($1057*12)|0)|0);
    $1060 = (($1059) + ($1053<<2)|0);
    $1061 = +HEAPF32[$1060>>2];
    $1062 = $col;
    $1063 = $sgx;
    $1064 = (($1062|0) % ($1063|0))&-1;
    $1065 = (+($1064|0));
    $1066 = $1061 * $1065;
    $1067 = $1052 + $1066;
    $1068 = $1067;
    $1069 = $1037 * $1068;
    $1070 = $sgx;
    $1071 = (+($1070|0));
    $1072 = $1069 / $1071;
    $1073 = $c;
    $1074 = (($div) + ($1073<<2)|0);
    $1075 = +HEAPF32[$1074>>2];
    $1076 = $1075;
    $1077 = $1072 / $1076;
    $1078 = (+Math_floor((+$1077)));
    $1079 = (~~(($1078)));
    $1080 = $c;
    $1081 = (($ipix) + ($1080<<2)|0);
    HEAP32[$1081>>2] = $1079;
    $1082 = $c;
    $1083 = (($ipix) + ($1082<<2)|0);
    $1084 = HEAP32[$1083>>2]|0;
    $1085 = ($1084|0)>(32000);
    if ($1085) {
     $1086 = $c;
     $1087 = (($ipix) + ($1086<<2)|0);
     HEAP32[$1087>>2] = 32000;
    }
    $1088 = $c;
    $1089 = (($ipix) + ($1088<<2)|0);
    $1090 = HEAP32[$1089>>2]|0;
    $1091 = $1090&65535;
    $1092 = $c;
    $1093 = $pix;
    $1094 = (($1093) + ($1092<<1)|0);
    HEAP16[$1094>>1] = $1091;
    $1095 = $c;
    $1096 = (($1095) + 1)|0;
    $c = $1096;
   }
   $1097 = $pix;
   $1098 = (($1097) + 8|0);
   $pix = $1098;
   $1099 = $col;
   $1100 = (($1099) + 1)|0;
   $col = $1100;
  }
  $1101 = $row;
  $1102 = (($1101) + 1)|0;
  $row = $1102;
 }
 $1103 = $black;
 _free($1103);
 $1104 = $sgrow;
 _free($1104);
 $1105 = $sgain;
 _free($1105);
 $1106 = (_foveon_camf_matrix($dim,190464)|0);
 $badpix = $1106;
 $1107 = ($1106|0)!=(0|0);
 if ($1107) {
  $i = 0;
  while(1) {
   $1108 = $i;
   $1109 = HEAP32[$dim>>2]|0;
   $1110 = ($1108>>>0)<($1109>>>0);
   if (!($1110)) {
    break;
   }
   $1111 = $i;
   $1112 = $badpix;
   $1113 = (($1112) + ($1111<<2)|0);
   $1114 = HEAP32[$1113>>2]|0;
   $1115 = $1114 >>> 8;
   $1116 = $1115 & 4095;
   $1117 = HEAP32[$keep>>2]|0;
   $1118 = (($1116) - ($1117))|0;
   $col = $1118;
   $1119 = $i;
   $1120 = $badpix;
   $1121 = (($1120) + ($1119<<2)|0);
   $1122 = HEAP32[$1121>>2]|0;
   $1123 = $1122 >>> 20;
   $1124 = (($keep) + 4|0);
   $1125 = HEAP32[$1124>>2]|0;
   $1126 = (($1123) - ($1125))|0;
   $row = $1126;
   $1127 = $row;
   $1128 = (($1127) - 1)|0;
   $1129 = HEAP16[132112>>1]|0;
   $1130 = $1129&65535;
   $1131 = (($1130) - 3)|0;
   $1132 = ($1128>>>0)>($1131>>>0);
   if ($1132) {
    label = 241;
   } else {
    $1133 = $col;
    $1134 = (($1133) - 1)|0;
    $1135 = HEAP16[132120>>1]|0;
    $1136 = $1135&65535;
    $1137 = (($1136) - 3)|0;
    $1138 = ($1134>>>0)>($1137>>>0);
    if ($1138) {
     label = 241;
    } else {
     ;HEAP32[$fsum+0>>2]=0|0;HEAP32[$fsum+4>>2]=0|0;HEAP32[$fsum+8>>2]=0|0;
     $j = 0;
     $sum = 0;
     while(1) {
      $1139 = $j;
      $1140 = ($1139|0)<(8);
      if (!($1140)) {
       break;
      }
      $1141 = $i;
      $1142 = $badpix;
      $1143 = (($1142) + ($1141<<2)|0);
      $1144 = HEAP32[$1143>>2]|0;
      $1145 = $j;
      $1146 = 1 << $1145;
      $1147 = $1144 & $1146;
      $1148 = ($1147|0)!=(0);
      if ($1148) {
       $c = 0;
       while(1) {
        $1149 = $c;
        $1150 = ($1149|0)<(3);
        if (!($1150)) {
         break;
        }
        $1151 = $c;
        $1152 = $row;
        $1153 = $j;
        $1154 = $1153<<1;
        $1155 = (190072 + ($1154<<1)|0);
        $1156 = HEAP16[$1155>>1]|0;
        $1157 = $1156 << 16 >> 16;
        $1158 = (($1152) + ($1157))|0;
        $1159 = HEAP16[132120>>1]|0;
        $1160 = $1159&65535;
        $1161 = Math_imul($1158, $1160)|0;
        $1162 = $col;
        $1163 = (($1161) + ($1162))|0;
        $1164 = $j;
        $1165 = $1164<<1;
        $1166 = (($1165) + 1)|0;
        $1167 = (190072 + ($1166<<1)|0);
        $1168 = HEAP16[$1167>>1]|0;
        $1169 = $1168 << 16 >> 16;
        $1170 = (($1163) + ($1169))|0;
        $1171 = HEAP32[132144>>2]|0;
        $1172 = (($1171) + ($1170<<3)|0);
        $1173 = (($1172) + ($1151<<1)|0);
        $1174 = HEAP16[$1173>>1]|0;
        $1175 = $1174 << 16 >> 16;
        $1176 = (+($1175|0));
        $1177 = $c;
        $1178 = (($fsum) + ($1177<<2)|0);
        $1179 = +HEAPF32[$1178>>2];
        $1180 = $1179 + $1176;
        HEAPF32[$1178>>2] = $1180;
        $1181 = $c;
        $1182 = (($1181) + 1)|0;
        $c = $1182;
       }
       $1183 = $sum;
       $1184 = (($1183) + 1)|0;
       $sum = $1184;
      }
      $1185 = $j;
      $1186 = (($1185) + 1)|0;
      $j = $1186;
     }
     $1187 = $sum;
     $1188 = ($1187|0)!=(0);
     if ($1188) {
      $c = 0;
      while(1) {
       $1189 = $c;
       $1190 = ($1189|0)<(3);
       if (!($1190)) {
        break;
       }
       $1191 = $c;
       $1192 = (($fsum) + ($1191<<2)|0);
       $1193 = +HEAPF32[$1192>>2];
       $1194 = $sum;
       $1195 = (+($1194|0));
       $1196 = $1193 / $1195;
       $1197 = (~~(($1196)));
       $1198 = $c;
       $1199 = $row;
       $1200 = HEAP16[132120>>1]|0;
       $1201 = $1200&65535;
       $1202 = Math_imul($1199, $1201)|0;
       $1203 = $col;
       $1204 = (($1202) + ($1203))|0;
       $1205 = HEAP32[132144>>2]|0;
       $1206 = (($1205) + ($1204<<3)|0);
       $1207 = (($1206) + ($1198<<1)|0);
       HEAP16[$1207>>1] = $1197;
       $1208 = $c;
       $1209 = (($1208) + 1)|0;
       $c = $1209;
      }
     }
    }
   }
   if ((label|0) == 241) {
    label = 0;
   }
   $1210 = $i;
   $1211 = (($1210) + 1)|0;
   $i = $1211;
  }
  $1212 = $badpix;
  _free($1212);
 }
 $1213 = HEAP16[132120>>1]|0;
 $1214 = $1213&65535;
 $1215 = ($1214*5)|0;
 $1216 = (_calloc($1215,12)|0);
 $1217 = (($smrow) + 24|0);
 HEAP32[$1217>>2] = $1216;
 $1218 = (($smrow) + 24|0);
 $1219 = HEAP32[$1218>>2]|0;
 _merror($1219,190480);
 $i = 0;
 while(1) {
  $1220 = $i;
  $1221 = ($1220|0)<(5);
  if (!($1221)) {
   break;
  }
  $1222 = (($smrow) + 24|0);
  $1223 = HEAP32[$1222>>2]|0;
  $1224 = $i;
  $1225 = HEAP16[132120>>1]|0;
  $1226 = $1225&65535;
  $1227 = Math_imul($1224, $1226)|0;
  $1228 = (($1223) + (($1227*12)|0)|0);
  $1229 = $i;
  $1230 = (($smrow) + ($1229<<2)|0);
  HEAP32[$1230>>2] = $1228;
  $1231 = $i;
  $1232 = (($1231) + 1)|0;
  $i = $1232;
 }
 $smlast = -1;
 $row = 2;
 while(1) {
  $1233 = $row;
  $1234 = HEAP16[132112>>1]|0;
  $1235 = $1234&65535;
  $1236 = (($1235) - 2)|0;
  $1237 = ($1233|0)<($1236|0);
  if (!($1237)) {
   break;
  }
  while(1) {
   $1238 = $smlast;
   $1239 = $row;
   $1240 = (($1239) + 2)|0;
   $1241 = ($1238|0)<($1240|0);
   if (!($1241)) {
    break;
   }
   $i = 0;
   while(1) {
    $1242 = $i;
    $1243 = ($1242|0)<(6);
    if (!($1243)) {
     break;
    }
    $1244 = $i;
    $1245 = (($smrow) + ($1244<<2)|0);
    $1246 = HEAP32[$1245>>2]|0;
    $1247 = $i;
    $1248 = (($1247) + 5)|0;
    $1249 = (($1248|0) % 6)&-1;
    $1250 = (($smrow) + ($1249<<2)|0);
    HEAP32[$1250>>2] = $1246;
    $1251 = $i;
    $1252 = (($1251) + 1)|0;
    $i = $1252;
   }
   $1253 = $smlast;
   $1254 = (($1253) + 1)|0;
   $smlast = $1254;
   $1255 = HEAP16[132120>>1]|0;
   $1256 = $1255&65535;
   $1257 = Math_imul($1254, $1256)|0;
   $1258 = (($1257) + 2)|0;
   $1259 = HEAP32[132144>>2]|0;
   $1260 = (($1259) + ($1258<<3)|0);
   $pix = $1260;
   $col = 2;
   while(1) {
    $1261 = $col;
    $1262 = HEAP16[132120>>1]|0;
    $1263 = $1262&65535;
    $1264 = (($1263) - 2)|0;
    $1265 = ($1261|0)<($1264|0);
    if (!($1265)) {
     break;
    }
    $1266 = $pix;
    $1267 = HEAP16[$1266>>1]|0;
    $1268 = $1267 << 16 >> 16;
    $1269 = ($1268*6)|0;
    $1270 = $pix;
    $1271 = (($1270) + -8|0);
    $1272 = HEAP16[$1271>>1]|0;
    $1273 = $1272 << 16 >> 16;
    $1274 = $pix;
    $1275 = (($1274) + 8|0);
    $1276 = HEAP16[$1275>>1]|0;
    $1277 = $1276 << 16 >> 16;
    $1278 = (($1273) + ($1277))|0;
    $1279 = $1278<<2;
    $1280 = (($1269) + ($1279))|0;
    $1281 = $pix;
    $1282 = (($1281) + -16|0);
    $1283 = HEAP16[$1282>>1]|0;
    $1284 = $1283 << 16 >> 16;
    $1285 = (($1280) + ($1284))|0;
    $1286 = $pix;
    $1287 = (($1286) + 16|0);
    $1288 = HEAP16[$1287>>1]|0;
    $1289 = $1288 << 16 >> 16;
    $1290 = (($1285) + ($1289))|0;
    $1291 = (($1290) + 8)|0;
    $1292 = $1291 >> 4;
    $1293 = $col;
    $1294 = (($smrow) + 16|0);
    $1295 = HEAP32[$1294>>2]|0;
    $1296 = (($1295) + (($1293*12)|0)|0);
    HEAP32[$1296>>2] = $1292;
    $1297 = $pix;
    $1298 = (($1297) + 8|0);
    $pix = $1298;
    $1299 = $col;
    $1300 = (($1299) + 1)|0;
    $col = $1300;
   }
  }
  $1301 = $row;
  $1302 = HEAP16[132120>>1]|0;
  $1303 = $1302&65535;
  $1304 = Math_imul($1301, $1303)|0;
  $1305 = (($1304) + 2)|0;
  $1306 = HEAP32[132144>>2]|0;
  $1307 = (($1306) + ($1305<<3)|0);
  $pix = $1307;
  $col = 2;
  while(1) {
   $1308 = $col;
   $1309 = HEAP16[132120>>1]|0;
   $1310 = $1309&65535;
   $1311 = (($1310) - 2)|0;
   $1312 = ($1308|0)<($1311|0);
   if (!($1312)) {
    break;
   }
   $1313 = $col;
   $1314 = (($smrow) + 8|0);
   $1315 = HEAP32[$1314>>2]|0;
   $1316 = (($1315) + (($1313*12)|0)|0);
   $1317 = HEAP32[$1316>>2]|0;
   $1318 = ($1317*6)|0;
   $1319 = $col;
   $1320 = (($smrow) + 4|0);
   $1321 = HEAP32[$1320>>2]|0;
   $1322 = (($1321) + (($1319*12)|0)|0);
   $1323 = HEAP32[$1322>>2]|0;
   $1324 = $col;
   $1325 = (($smrow) + 12|0);
   $1326 = HEAP32[$1325>>2]|0;
   $1327 = (($1326) + (($1324*12)|0)|0);
   $1328 = HEAP32[$1327>>2]|0;
   $1329 = (($1323) + ($1328))|0;
   $1330 = $1329<<2;
   $1331 = (($1318) + ($1330))|0;
   $1332 = $col;
   $1333 = HEAP32[$smrow>>2]|0;
   $1334 = (($1333) + (($1332*12)|0)|0);
   $1335 = HEAP32[$1334>>2]|0;
   $1336 = (($1331) + ($1335))|0;
   $1337 = $col;
   $1338 = (($smrow) + 16|0);
   $1339 = HEAP32[$1338>>2]|0;
   $1340 = (($1339) + (($1337*12)|0)|0);
   $1341 = HEAP32[$1340>>2]|0;
   $1342 = (($1336) + ($1341))|0;
   $1343 = (($1342) + 8)|0;
   $1344 = $1343 >> 4;
   $smred = $1344;
   $1345 = $col;
   $1346 = ($1345|0)==(2);
   if ($1346) {
    $1347 = $smred;
    $smred_p = $1347;
   }
   $1348 = $pix;
   $1349 = HEAP16[$1348>>1]|0;
   $1350 = $1349 << 16 >> 16;
   $1351 = $pix;
   $1352 = HEAP16[$1351>>1]|0;
   $1353 = $1352 << 16 >> 16;
   $1354 = $smred;
   $1355 = ($1354*7)|0;
   $1356 = $smred_p;
   $1357 = (($1355) + ($1356))|0;
   $1358 = $1357 >> 3;
   $1359 = (($1353) - ($1358))|0;
   $1360 = $1359 >> 3;
   $1361 = (($1350) + ($1360))|0;
   $i = $1361;
   $1362 = $i;
   $1363 = ($1362|0)>(32000);
   if ($1363) {
    $i = 32000;
   }
   $1364 = $i;
   $1365 = $1364&65535;
   $1366 = $pix;
   HEAP16[$1366>>1] = $1365;
   $1367 = $smred;
   $smred_p = $1367;
   $1368 = $pix;
   $1369 = (($1368) + 8|0);
   $pix = $1369;
   $1370 = $col;
   $1371 = (($1370) + 1)|0;
   $col = $1371;
  }
  $1372 = $row;
  $1373 = (($1372) + 1)|0;
  $row = $1373;
 }
 $min = 65535;
 $c = 0;
 while(1) {
  $1374 = $c;
  $1375 = ($1374|0)<(3);
  if (!($1375)) {
   break;
  }
  $1376 = $c;
  $1377 = (($satlev) + ($1376<<2)|0);
  $1378 = HEAP32[$1377>>2]|0;
  $1379 = (+($1378|0));
  $1380 = $c;
  $1381 = (($div) + ($1380<<2)|0);
  $1382 = +HEAPF32[$1381>>2];
  $1383 = $1379 / $1382;
  $1384 = (~~(($1383)));
  $i = $1384;
  $1385 = $min;
  $1386 = $i;
  $1387 = ($1385|0)>($1386|0);
  if ($1387) {
   $1388 = $i;
   $min = $1388;
  }
  $1389 = $c;
  $1390 = (($1389) + 1)|0;
  $c = $1390;
 }
 $1391 = $min;
 $1392 = ($1391*9)|0;
 $1393 = $1392 >> 4;
 $limit = $1393;
 $1394 = HEAP32[132144>>2]|0;
 $pix = $1394;
 while(1) {
  $1395 = $pix;
  $1396 = HEAP16[132112>>1]|0;
  $1397 = $1396&65535;
  $1398 = HEAP16[132120>>1]|0;
  $1399 = $1398&65535;
  $1400 = Math_imul($1397, $1399)|0;
  $1401 = HEAP32[132144>>2]|0;
  $1402 = (($1401) + ($1400<<3)|0);
  $1403 = ($1395>>>0)<($1402>>>0);
  if (!($1403)) {
   break;
  }
  $1404 = $pix;
  $1405 = HEAP16[$1404>>1]|0;
  $1406 = $1405 << 16 >> 16;
  $1407 = $limit;
  $1408 = ($1406|0)<=($1407|0);
  if ($1408) {
   label = 299;
  } else {
   $1409 = $pix;
   $1410 = (($1409) + 2|0);
   $1411 = HEAP16[$1410>>1]|0;
   $1412 = $1411 << 16 >> 16;
   $1413 = $limit;
   $1414 = ($1412|0)<=($1413|0);
   if ($1414) {
    label = 299;
   } else {
    $1415 = $pix;
    $1416 = (($1415) + 4|0);
    $1417 = HEAP16[$1416>>1]|0;
    $1418 = $1417 << 16 >> 16;
    $1419 = $limit;
    $1420 = ($1418|0)<=($1419|0);
    if ($1420) {
     label = 299;
    } else {
     $1421 = $pix;
     $1422 = HEAP16[$1421>>1]|0;
     $1423 = $1422 << 16 >> 16;
     $max = $1423;
     $min = $1423;
     $c = 1;
     while(1) {
      $1424 = $c;
      $1425 = ($1424|0)<(3);
      if (!($1425)) {
       break;
      }
      $1426 = $min;
      $1427 = $c;
      $1428 = $pix;
      $1429 = (($1428) + ($1427<<1)|0);
      $1430 = HEAP16[$1429>>1]|0;
      $1431 = $1430 << 16 >> 16;
      $1432 = ($1426|0)>($1431|0);
      if ($1432) {
       $1433 = $c;
       $1434 = $pix;
       $1435 = (($1434) + ($1433<<1)|0);
       $1436 = HEAP16[$1435>>1]|0;
       $1437 = $1436 << 16 >> 16;
       $min = $1437;
      }
      $1438 = $max;
      $1439 = $c;
      $1440 = $pix;
      $1441 = (($1440) + ($1439<<1)|0);
      $1442 = HEAP16[$1441>>1]|0;
      $1443 = $1442 << 16 >> 16;
      $1444 = ($1438|0)<($1443|0);
      if ($1444) {
       $1445 = $c;
       $1446 = $pix;
       $1447 = (($1446) + ($1445<<1)|0);
       $1448 = HEAP16[$1447>>1]|0;
       $1449 = $1448 << 16 >> 16;
       $max = $1449;
      }
      $1450 = $c;
      $1451 = (($1450) + 1)|0;
      $c = $1451;
     }
     $1452 = $min;
     $1453 = $limit;
     $1454 = $1453<<1;
     $1455 = ($1452|0)>=($1454|0);
     if ($1455) {
      $1456 = $max;
      $1457 = $1456&65535;
      $1458 = $pix;
      $1459 = (($1458) + 4|0);
      HEAP16[$1459>>1] = $1457;
      $1460 = $pix;
      $1461 = (($1460) + 2|0);
      HEAP16[$1461>>1] = $1457;
      $1462 = $pix;
      HEAP16[$1462>>1] = $1457;
     } else {
      $1463 = $min;
      $1464 = $limit;
      $1465 = (($1463) - ($1464))|0;
      $1466 = $1465 << 14;
      $1467 = $limit;
      $1468 = (($1466|0) / ($1467|0))&-1;
      $1469 = (16384 - ($1468))|0;
      $i = $1469;
      $1470 = $i;
      $1471 = $i;
      $1472 = Math_imul($1470, $1471)|0;
      $1473 = $1472 >> 14;
      $1474 = (16384 - ($1473))|0;
      $i = $1474;
      $1475 = $i;
      $1476 = $i;
      $1477 = Math_imul($1475, $1476)|0;
      $1478 = $1477 >> 14;
      $i = $1478;
      $c = 0;
      while(1) {
       $1479 = $c;
       $1480 = ($1479|0)<(3);
       if (!($1480)) {
        break;
       }
       $1481 = $max;
       $1482 = $c;
       $1483 = $pix;
       $1484 = (($1483) + ($1482<<1)|0);
       $1485 = HEAP16[$1484>>1]|0;
       $1486 = $1485 << 16 >> 16;
       $1487 = (($1481) - ($1486))|0;
       $1488 = $i;
       $1489 = Math_imul($1487, $1488)|0;
       $1490 = $1489 >> 14;
       $1491 = $c;
       $1492 = $pix;
       $1493 = (($1492) + ($1491<<1)|0);
       $1494 = HEAP16[$1493>>1]|0;
       $1495 = $1494 << 16 >> 16;
       $1496 = (($1495) + ($1490))|0;
       $1497 = $1496&65535;
       HEAP16[$1493>>1] = $1497;
       $1498 = $c;
       $1499 = (($1498) + 1)|0;
       $c = $1499;
      }
     }
    }
   }
  }
  if ((label|0) == 299) {
   label = 0;
  }
  $1500 = $pix;
  $1501 = (($1500) + 8|0);
  $pix = $1501;
 }
 $smlast = -1;
 $row = 2;
 while(1) {
  $1502 = $row;
  $1503 = HEAP16[132112>>1]|0;
  $1504 = $1503&65535;
  $1505 = (($1504) - 2)|0;
  $1506 = ($1502|0)<($1505|0);
  if (!($1506)) {
   break;
  }
  while(1) {
   $1507 = $smlast;
   $1508 = $row;
   $1509 = (($1508) + 2)|0;
   $1510 = ($1507|0)<($1509|0);
   if (!($1510)) {
    break;
   }
   $i = 0;
   while(1) {
    $1511 = $i;
    $1512 = ($1511|0)<(6);
    if (!($1512)) {
     break;
    }
    $1513 = $i;
    $1514 = (($smrow) + ($1513<<2)|0);
    $1515 = HEAP32[$1514>>2]|0;
    $1516 = $i;
    $1517 = (($1516) + 5)|0;
    $1518 = (($1517|0) % 6)&-1;
    $1519 = (($smrow) + ($1518<<2)|0);
    HEAP32[$1519>>2] = $1515;
    $1520 = $i;
    $1521 = (($1520) + 1)|0;
    $i = $1521;
   }
   $1522 = $smlast;
   $1523 = (($1522) + 1)|0;
   $smlast = $1523;
   $1524 = HEAP16[132120>>1]|0;
   $1525 = $1524&65535;
   $1526 = Math_imul($1523, $1525)|0;
   $1527 = (($1526) + 2)|0;
   $1528 = HEAP32[132144>>2]|0;
   $1529 = (($1528) + ($1527<<3)|0);
   $pix = $1529;
   $col = 2;
   while(1) {
    $1530 = $col;
    $1531 = HEAP16[132120>>1]|0;
    $1532 = $1531&65535;
    $1533 = (($1532) - 2)|0;
    $1534 = ($1530|0)<($1533|0);
    if (!($1534)) {
     break;
    }
    $c = 0;
    while(1) {
     $1535 = $c;
     $1536 = ($1535|0)<(3);
     if (!($1536)) {
      break;
     }
     $1537 = $c;
     $1538 = (($1537) - 4)|0;
     $1539 = $pix;
     $1540 = (($1539) + ($1538<<1)|0);
     $1541 = HEAP16[$1540>>1]|0;
     $1542 = $1541 << 16 >> 16;
     $1543 = $c;
     $1544 = $pix;
     $1545 = (($1544) + ($1543<<1)|0);
     $1546 = HEAP16[$1545>>1]|0;
     $1547 = $1546 << 16 >> 16;
     $1548 = $1547<<1;
     $1549 = (($1542) + ($1548))|0;
     $1550 = $c;
     $1551 = (($1550) + 4)|0;
     $1552 = $pix;
     $1553 = (($1552) + ($1551<<1)|0);
     $1554 = HEAP16[$1553>>1]|0;
     $1555 = $1554 << 16 >> 16;
     $1556 = (($1549) + ($1555))|0;
     $1557 = (($1556) + 2)|0;
     $1558 = $1557 >> 2;
     $1559 = $c;
     $1560 = $col;
     $1561 = (($smrow) + 16|0);
     $1562 = HEAP32[$1561>>2]|0;
     $1563 = (($1562) + (($1560*12)|0)|0);
     $1564 = (($1563) + ($1559<<2)|0);
     HEAP32[$1564>>2] = $1558;
     $1565 = $c;
     $1566 = (($1565) + 1)|0;
     $c = $1566;
    }
    $1567 = $pix;
    $1568 = (($1567) + 8|0);
    $pix = $1568;
    $1569 = $col;
    $1570 = (($1569) + 1)|0;
    $col = $1570;
   }
  }
  $1571 = $row;
  $1572 = HEAP16[132120>>1]|0;
  $1573 = $1572&65535;
  $1574 = Math_imul($1571, $1573)|0;
  $1575 = (($1574) + 2)|0;
  $1576 = HEAP32[132144>>2]|0;
  $1577 = (($1576) + ($1575<<3)|0);
  $pix = $1577;
  $col = 2;
  while(1) {
   $1578 = $col;
   $1579 = HEAP16[132120>>1]|0;
   $1580 = $1579&65535;
   $1581 = (($1580) - 2)|0;
   $1582 = ($1578|0)<($1581|0);
   if (!($1582)) {
    break;
   }
   $c = 0;
   while(1) {
    $1583 = $c;
    $1584 = ($1583|0)<(3);
    if (!($1584)) {
     break;
    }
    $1585 = (($curve) + 28|0);
    $1586 = HEAP32[$1585>>2]|0;
    $1587 = $c;
    $1588 = $pix;
    $1589 = (($1588) + ($1587<<1)|0);
    $1590 = HEAP16[$1589>>1]|0;
    $1591 = $1590 << 16 >> 16;
    $1592 = $c;
    $1593 = $col;
    $1594 = (($smrow) + 4|0);
    $1595 = HEAP32[$1594>>2]|0;
    $1596 = (($1595) + (($1593*12)|0)|0);
    $1597 = (($1596) + ($1592<<2)|0);
    $1598 = HEAP32[$1597>>2]|0;
    $1599 = $c;
    $1600 = $col;
    $1601 = (($smrow) + 8|0);
    $1602 = HEAP32[$1601>>2]|0;
    $1603 = (($1602) + (($1600*12)|0)|0);
    $1604 = (($1603) + ($1599<<2)|0);
    $1605 = HEAP32[$1604>>2]|0;
    $1606 = $1605<<1;
    $1607 = (($1598) + ($1606))|0;
    $1608 = $c;
    $1609 = $col;
    $1610 = (($smrow) + 12|0);
    $1611 = HEAP32[$1610>>2]|0;
    $1612 = (($1611) + (($1609*12)|0)|0);
    $1613 = (($1612) + ($1608<<2)|0);
    $1614 = HEAP32[$1613>>2]|0;
    $1615 = (($1607) + ($1614))|0;
    $1616 = $1615 >> 2;
    $1617 = (($1591) - ($1616))|0;
    $1618 = (_foveon_apply_curve($1586,$1617)|0);
    $1619 = (0 - ($1618))|0;
    $1620 = $c;
    $1621 = (($dev) + ($1620<<2)|0);
    HEAP32[$1621>>2] = $1619;
    $1622 = $c;
    $1623 = (($1622) + 1)|0;
    $c = $1623;
   }
   $1624 = HEAP32[$dev>>2]|0;
   $1625 = (($dev) + 4|0);
   $1626 = HEAP32[$1625>>2]|0;
   $1627 = (($1624) + ($1626))|0;
   $1628 = (($dev) + 8|0);
   $1629 = HEAP32[$1628>>2]|0;
   $1630 = (($1627) + ($1629))|0;
   $1631 = $1630 >> 3;
   $sum = $1631;
   $c = 0;
   while(1) {
    $1632 = $c;
    $1633 = ($1632|0)<(3);
    if (!($1633)) {
     break;
    }
    $1634 = $c;
    $1635 = (($dev) + ($1634<<2)|0);
    $1636 = HEAP32[$1635>>2]|0;
    $1637 = $sum;
    $1638 = (($1636) - ($1637))|0;
    $1639 = $c;
    $1640 = $pix;
    $1641 = (($1640) + ($1639<<1)|0);
    $1642 = HEAP16[$1641>>1]|0;
    $1643 = $1642 << 16 >> 16;
    $1644 = (($1643) + ($1638))|0;
    $1645 = $1644&65535;
    HEAP16[$1641>>1] = $1645;
    $1646 = $c;
    $1647 = (($1646) + 1)|0;
    $c = $1647;
   }
   $1648 = $pix;
   $1649 = (($1648) + 8|0);
   $pix = $1649;
   $1650 = $col;
   $1651 = (($1650) + 1)|0;
   $col = $1651;
  }
  $1652 = $row;
  $1653 = (($1652) + 1)|0;
  $row = $1653;
 }
 $smlast = -1;
 $row = 2;
 while(1) {
  $1654 = $row;
  $1655 = HEAP16[132112>>1]|0;
  $1656 = $1655&65535;
  $1657 = (($1656) - 2)|0;
  $1658 = ($1654|0)<($1657|0);
  if (!($1658)) {
   break;
  }
  while(1) {
   $1659 = $smlast;
   $1660 = $row;
   $1661 = (($1660) + 2)|0;
   $1662 = ($1659|0)<($1661|0);
   if (!($1662)) {
    break;
   }
   $i = 0;
   while(1) {
    $1663 = $i;
    $1664 = ($1663|0)<(6);
    if (!($1664)) {
     break;
    }
    $1665 = $i;
    $1666 = (($smrow) + ($1665<<2)|0);
    $1667 = HEAP32[$1666>>2]|0;
    $1668 = $i;
    $1669 = (($1668) + 5)|0;
    $1670 = (($1669|0) % 6)&-1;
    $1671 = (($smrow) + ($1670<<2)|0);
    HEAP32[$1671>>2] = $1667;
    $1672 = $i;
    $1673 = (($1672) + 1)|0;
    $i = $1673;
   }
   $1674 = $smlast;
   $1675 = (($1674) + 1)|0;
   $smlast = $1675;
   $1676 = HEAP16[132120>>1]|0;
   $1677 = $1676&65535;
   $1678 = Math_imul($1675, $1677)|0;
   $1679 = (($1678) + 2)|0;
   $1680 = HEAP32[132144>>2]|0;
   $1681 = (($1680) + ($1679<<3)|0);
   $pix = $1681;
   $col = 2;
   while(1) {
    $1682 = $col;
    $1683 = HEAP16[132120>>1]|0;
    $1684 = $1683&65535;
    $1685 = (($1684) - 2)|0;
    $1686 = ($1682|0)<($1685|0);
    if (!($1686)) {
     break;
    }
    $c = 0;
    while(1) {
     $1687 = $c;
     $1688 = ($1687|0)<(3);
     if (!($1688)) {
      break;
     }
     $1689 = $c;
     $1690 = (($1689) - 8)|0;
     $1691 = $pix;
     $1692 = (($1691) + ($1690<<1)|0);
     $1693 = HEAP16[$1692>>1]|0;
     $1694 = $1693 << 16 >> 16;
     $1695 = $c;
     $1696 = (($1695) - 4)|0;
     $1697 = $pix;
     $1698 = (($1697) + ($1696<<1)|0);
     $1699 = HEAP16[$1698>>1]|0;
     $1700 = $1699 << 16 >> 16;
     $1701 = (($1694) + ($1700))|0;
     $1702 = $c;
     $1703 = $pix;
     $1704 = (($1703) + ($1702<<1)|0);
     $1705 = HEAP16[$1704>>1]|0;
     $1706 = $1705 << 16 >> 16;
     $1707 = (($1701) + ($1706))|0;
     $1708 = $c;
     $1709 = (($1708) + 4)|0;
     $1710 = $pix;
     $1711 = (($1710) + ($1709<<1)|0);
     $1712 = HEAP16[$1711>>1]|0;
     $1713 = $1712 << 16 >> 16;
     $1714 = (($1707) + ($1713))|0;
     $1715 = $c;
     $1716 = (($1715) + 8)|0;
     $1717 = $pix;
     $1718 = (($1717) + ($1716<<1)|0);
     $1719 = HEAP16[$1718>>1]|0;
     $1720 = $1719 << 16 >> 16;
     $1721 = (($1714) + ($1720))|0;
     $1722 = (($1721) + 2)|0;
     $1723 = $1722 >> 2;
     $1724 = $c;
     $1725 = $col;
     $1726 = (($smrow) + 16|0);
     $1727 = HEAP32[$1726>>2]|0;
     $1728 = (($1727) + (($1725*12)|0)|0);
     $1729 = (($1728) + ($1724<<2)|0);
     HEAP32[$1729>>2] = $1723;
     $1730 = $c;
     $1731 = (($1730) + 1)|0;
     $c = $1731;
    }
    $1732 = $pix;
    $1733 = (($1732) + 8|0);
    $pix = $1733;
    $1734 = $col;
    $1735 = (($1734) + 1)|0;
    $col = $1735;
   }
  }
  $1736 = $row;
  $1737 = HEAP16[132120>>1]|0;
  $1738 = $1737&65535;
  $1739 = Math_imul($1736, $1738)|0;
  $1740 = (($1739) + 2)|0;
  $1741 = HEAP32[132144>>2]|0;
  $1742 = (($1741) + ($1740<<3)|0);
  $pix = $1742;
  $col = 2;
  while(1) {
   $1743 = $col;
   $1744 = HEAP16[132120>>1]|0;
   $1745 = $1744&65535;
   $1746 = (($1745) - 2)|0;
   $1747 = ($1743|0)<($1746|0);
   if (!($1747)) {
    break;
   }
   $1748 = (($total) + 12|0);
   HEAP32[$1748>>2] = 375;
   $sum = 60;
   $c = 0;
   while(1) {
    $1749 = $c;
    $1750 = ($1749|0)<(3);
    if (!($1750)) {
     break;
    }
    $i = 0;
    $1751 = $c;
    $1752 = (($total) + ($1751<<2)|0);
    HEAP32[$1752>>2] = 0;
    while(1) {
     $1753 = $i;
     $1754 = ($1753|0)<(5);
     if (!($1754)) {
      break;
     }
     $1755 = $c;
     $1756 = $col;
     $1757 = $i;
     $1758 = (($smrow) + ($1757<<2)|0);
     $1759 = HEAP32[$1758>>2]|0;
     $1760 = (($1759) + (($1756*12)|0)|0);
     $1761 = (($1760) + ($1755<<2)|0);
     $1762 = HEAP32[$1761>>2]|0;
     $1763 = $c;
     $1764 = (($total) + ($1763<<2)|0);
     $1765 = HEAP32[$1764>>2]|0;
     $1766 = (($1765) + ($1762))|0;
     HEAP32[$1764>>2] = $1766;
     $1767 = $i;
     $1768 = (($1767) + 1)|0;
     $i = $1768;
    }
    $1769 = $c;
    $1770 = (($total) + ($1769<<2)|0);
    $1771 = HEAP32[$1770>>2]|0;
    $1772 = (($total) + 12|0);
    $1773 = HEAP32[$1772>>2]|0;
    $1774 = (($1773) + ($1771))|0;
    HEAP32[$1772>>2] = $1774;
    $1775 = $c;
    $1776 = $pix;
    $1777 = (($1776) + ($1775<<1)|0);
    $1778 = HEAP16[$1777>>1]|0;
    $1779 = $1778 << 16 >> 16;
    $1780 = $sum;
    $1781 = (($1780) + ($1779))|0;
    $sum = $1781;
    $1782 = $c;
    $1783 = (($1782) + 1)|0;
    $c = $1783;
   }
   $1784 = $sum;
   $1785 = ($1784|0)<(0);
   if ($1785) {
    $sum = 0;
   }
   $1786 = (($total) + 12|0);
   $1787 = HEAP32[$1786>>2]|0;
   $1788 = ($1787|0)>(375);
   if ($1788) {
    $1789 = $sum;
    $1790 = $1789 << 16;
    $1791 = (($total) + 12|0);
    $1792 = HEAP32[$1791>>2]|0;
    $1793 = (($1790|0) / ($1792|0))&-1;
    $1796 = $1793;
   } else {
    $1794 = $sum;
    $1795 = ($1794*174)|0;
    $1796 = $1795;
   }
   $j = $1796;
   $c = 0;
   while(1) {
    $1797 = $c;
    $1798 = ($1797|0)<(3);
    if (!($1798)) {
     break;
    }
    $1799 = (($curve) + 24|0);
    $1800 = HEAP32[$1799>>2]|0;
    $1801 = $j;
    $1802 = $c;
    $1803 = (($total) + ($1802<<2)|0);
    $1804 = HEAP32[$1803>>2]|0;
    $1805 = Math_imul($1801, $1804)|0;
    $1806 = (($1805) + 32768)|0;
    $1807 = $1806 >> 16;
    $1808 = $c;
    $1809 = $pix;
    $1810 = (($1809) + ($1808<<1)|0);
    $1811 = HEAP16[$1810>>1]|0;
    $1812 = $1811 << 16 >> 16;
    $1813 = (($1807) - ($1812))|0;
    $1814 = (_foveon_apply_curve($1800,$1813)|0);
    $1815 = $c;
    $1816 = $pix;
    $1817 = (($1816) + ($1815<<1)|0);
    $1818 = HEAP16[$1817>>1]|0;
    $1819 = $1818 << 16 >> 16;
    $1820 = (($1819) + ($1814))|0;
    $1821 = $1820&65535;
    HEAP16[$1817>>1] = $1821;
    $1822 = $c;
    $1823 = (($1822) + 1)|0;
    $c = $1823;
   }
   $1824 = $pix;
   $1825 = (($1824) + 8|0);
   $pix = $1825;
   $1826 = $col;
   $1827 = (($1826) + 1)|0;
   $col = $1827;
  }
  $1828 = $row;
  $1829 = (($1828) + 1)|0;
  $row = $1829;
 }
 $1830 = HEAP32[132144>>2]|0;
 $pix = $1830;
 while(1) {
  $1831 = $pix;
  $1832 = HEAP16[132112>>1]|0;
  $1833 = $1832&65535;
  $1834 = HEAP16[132120>>1]|0;
  $1835 = $1834&65535;
  $1836 = Math_imul($1833, $1835)|0;
  $1837 = HEAP32[132144>>2]|0;
  $1838 = (($1837) + ($1836<<3)|0);
  $1839 = ($1831>>>0)<($1838>>>0);
  if (!($1839)) {
   break;
  }
  $c = 0;
  while(1) {
   $1840 = $c;
   $1841 = ($1840|0)<(3);
   if (!($1841)) {
    break;
   }
   $1842 = $c;
   $1843 = (($curve) + ($1842<<2)|0);
   $1844 = HEAP32[$1843>>2]|0;
   $1845 = $c;
   $1846 = $pix;
   $1847 = (($1846) + ($1845<<1)|0);
   $1848 = HEAP16[$1847>>1]|0;
   $1849 = $1848 << 16 >> 16;
   $1850 = (_foveon_apply_curve($1844,$1849)|0);
   $1851 = $c;
   $1852 = $pix;
   $1853 = (($1852) + ($1851<<1)|0);
   $1854 = HEAP16[$1853>>1]|0;
   $1855 = $1854 << 16 >> 16;
   $1856 = (($1855) - ($1850))|0;
   $1857 = $1856&65535;
   HEAP16[$1853>>1] = $1857;
   $1858 = $c;
   $1859 = (($1858) + 1)|0;
   $c = $1859;
  }
  $1860 = $pix;
  $1861 = HEAP16[$1860>>1]|0;
  $1862 = $1861 << 16 >> 16;
  $1863 = $pix;
  $1864 = (($1863) + 2|0);
  $1865 = HEAP16[$1864>>1]|0;
  $1866 = $1865 << 16 >> 16;
  $1867 = (($1862) + ($1866))|0;
  $1868 = $pix;
  $1869 = (($1868) + 2|0);
  $1870 = HEAP16[$1869>>1]|0;
  $1871 = $1870 << 16 >> 16;
  $1872 = (($1867) + ($1871))|0;
  $1873 = $pix;
  $1874 = (($1873) + 4|0);
  $1875 = HEAP16[$1874>>1]|0;
  $1876 = $1875 << 16 >> 16;
  $1877 = (($1872) + ($1876))|0;
  $1878 = $1877 >> 2;
  $sum = $1878;
  $c = 0;
  while(1) {
   $1879 = $c;
   $1880 = ($1879|0)<(3);
   if (!($1880)) {
    break;
   }
   $1881 = $c;
   $1882 = (($curve) + ($1881<<2)|0);
   $1883 = HEAP32[$1882>>2]|0;
   $1884 = $c;
   $1885 = $pix;
   $1886 = (($1885) + ($1884<<1)|0);
   $1887 = HEAP16[$1886>>1]|0;
   $1888 = $1887 << 16 >> 16;
   $1889 = $sum;
   $1890 = (($1888) - ($1889))|0;
   $1891 = (_foveon_apply_curve($1883,$1890)|0);
   $1892 = $c;
   $1893 = $pix;
   $1894 = (($1893) + ($1892<<1)|0);
   $1895 = HEAP16[$1894>>1]|0;
   $1896 = $1895 << 16 >> 16;
   $1897 = (($1896) - ($1891))|0;
   $1898 = $1897&65535;
   HEAP16[$1894>>1] = $1898;
   $1899 = $c;
   $1900 = (($1899) + 1)|0;
   $c = $1900;
  }
  $c = 0;
  while(1) {
   $1901 = $c;
   $1902 = ($1901|0)<(3);
   if (!($1902)) {
    break;
   }
   $i = 0;
   $dsum = 0.0;
   while(1) {
    $1903 = $i;
    $1904 = ($1903|0)<(3);
    if (!($1904)) {
     break;
    }
    $1905 = $i;
    $1906 = $c;
    $1907 = (($trans) + (($1906*12)|0)|0);
    $1908 = (($1907) + ($1905<<2)|0);
    $1909 = +HEAPF32[$1908>>2];
    $1910 = $i;
    $1911 = $pix;
    $1912 = (($1911) + ($1910<<1)|0);
    $1913 = HEAP16[$1912>>1]|0;
    $1914 = $1913 << 16 >> 16;
    $1915 = (+($1914|0));
    $1916 = $1909 * $1915;
    $1917 = $1916;
    $1918 = $dsum;
    $1919 = $1918 + $1917;
    $dsum = $1919;
    $1920 = $i;
    $1921 = (($1920) + 1)|0;
    $i = $1921;
   }
   $1922 = $dsum;
   $1923 = $1922 < 0.0;
   if ($1923) {
    $dsum = 0.0;
   }
   $1924 = $dsum;
   $1925 = $1924 > 24000.0;
   if ($1925) {
    $dsum = 24000.0;
   }
   $1926 = $dsum;
   $1927 = $1926 + 0.5;
   $1928 = (~~(($1927)));
   $1929 = $c;
   $1930 = (($ipix) + ($1929<<2)|0);
   HEAP32[$1930>>2] = $1928;
   $1931 = $c;
   $1932 = (($1931) + 1)|0;
   $c = $1932;
  }
  $c = 0;
  while(1) {
   $1933 = $c;
   $1934 = ($1933|0)<(3);
   if (!($1934)) {
    break;
   }
   $1935 = $c;
   $1936 = (($ipix) + ($1935<<2)|0);
   $1937 = HEAP32[$1936>>2]|0;
   $1938 = $1937&65535;
   $1939 = $c;
   $1940 = $pix;
   $1941 = (($1940) + ($1939<<1)|0);
   HEAP16[$1941>>1] = $1938;
   $1942 = $c;
   $1943 = (($1942) + 1)|0;
   $c = $1943;
  }
  $1944 = $pix;
  $1945 = (($1944) + 8|0);
  $pix = $1945;
 }
 $1946 = HEAP16[132112>>1]|0;
 $1947 = $1946&65535;
 $1948 = (($1947|0) / 4)&-1;
 $1949 = HEAP16[132120>>1]|0;
 $1950 = $1949&65535;
 $1951 = (($1950|0) / 4)&-1;
 $1952 = ($1951*6)|0;
 $1953 = (_calloc($1948,$1952)|0);
 $shrink = $1953;
 $1954 = $shrink;
 _merror($1954,190480);
 $1955 = HEAP16[132112>>1]|0;
 $1956 = $1955&65535;
 $1957 = (($1956|0) / 4)&-1;
 $row = $1957;
 while(1) {
  $1958 = $row;
  $1959 = (($1958) + -1)|0;
  $row = $1959;
  $1960 = ($1958|0)!=(0);
  if (!($1960)) {
   break;
  }
  $col = 0;
  while(1) {
   $1961 = $col;
   $1962 = HEAP16[132120>>1]|0;
   $1963 = $1962&65535;
   $1964 = (($1963|0) / 4)&-1;
   $1965 = ($1961|0)<($1964|0);
   if (!($1965)) {
    break;
   }
   $1966 = (($ipix) + 8|0);
   HEAP32[$1966>>2] = 0;
   $1967 = (($ipix) + 4|0);
   HEAP32[$1967>>2] = 0;
   HEAP32[$ipix>>2] = 0;
   $i = 0;
   while(1) {
    $1968 = $i;
    $1969 = ($1968|0)<(4);
    if (!($1969)) {
     break;
    }
    $j = 0;
    while(1) {
     $1970 = $j;
     $1971 = ($1970|0)<(4);
     if (!($1971)) {
      break;
     }
     $c = 0;
     while(1) {
      $1972 = $c;
      $1973 = ($1972|0)<(3);
      if (!($1973)) {
       break;
      }
      $1974 = $c;
      $1975 = $row;
      $1976 = $1975<<2;
      $1977 = $i;
      $1978 = (($1976) + ($1977))|0;
      $1979 = HEAP16[132120>>1]|0;
      $1980 = $1979&65535;
      $1981 = Math_imul($1978, $1980)|0;
      $1982 = $col;
      $1983 = $1982<<2;
      $1984 = (($1981) + ($1983))|0;
      $1985 = $j;
      $1986 = (($1984) + ($1985))|0;
      $1987 = HEAP32[132144>>2]|0;
      $1988 = (($1987) + ($1986<<3)|0);
      $1989 = (($1988) + ($1974<<1)|0);
      $1990 = HEAP16[$1989>>1]|0;
      $1991 = $1990 << 16 >> 16;
      $1992 = $c;
      $1993 = (($ipix) + ($1992<<2)|0);
      $1994 = HEAP32[$1993>>2]|0;
      $1995 = (($1994) + ($1991))|0;
      HEAP32[$1993>>2] = $1995;
      $1996 = $c;
      $1997 = (($1996) + 1)|0;
      $c = $1997;
     }
     $1998 = $j;
     $1999 = (($1998) + 1)|0;
     $j = $1999;
    }
    $2000 = $i;
    $2001 = (($2000) + 1)|0;
    $i = $2001;
   }
   $c = 0;
   while(1) {
    $2002 = $c;
    $2003 = ($2002|0)<(3);
    if (!($2003)) {
     break;
    }
    $2004 = $row;
    $2005 = (($2004) + 2)|0;
    $2006 = HEAP16[132112>>1]|0;
    $2007 = $2006&65535;
    $2008 = (($2007|0) / 4)&-1;
    $2009 = ($2005|0)>($2008|0);
    if ($2009) {
     $2010 = $c;
     $2011 = (($ipix) + ($2010<<2)|0);
     $2012 = HEAP32[$2011>>2]|0;
     $2013 = $2012 >> 4;
     $2014 = $2013&65535;
     $2015 = $c;
     $2016 = $row;
     $2017 = HEAP16[132120>>1]|0;
     $2018 = $2017&65535;
     $2019 = (($2018|0) / 4)&-1;
     $2020 = Math_imul($2016, $2019)|0;
     $2021 = $col;
     $2022 = (($2020) + ($2021))|0;
     $2023 = $shrink;
     $2024 = (($2023) + (($2022*6)|0)|0);
     $2025 = (($2024) + ($2015<<1)|0);
     HEAP16[$2025>>1] = $2014;
    } else {
     $2026 = $c;
     $2027 = $row;
     $2028 = (($2027) + 1)|0;
     $2029 = HEAP16[132120>>1]|0;
     $2030 = $2029&65535;
     $2031 = (($2030|0) / 4)&-1;
     $2032 = Math_imul($2028, $2031)|0;
     $2033 = $col;
     $2034 = (($2032) + ($2033))|0;
     $2035 = $shrink;
     $2036 = (($2035) + (($2034*6)|0)|0);
     $2037 = (($2036) + ($2026<<1)|0);
     $2038 = HEAP16[$2037>>1]|0;
     $2039 = $2038 << 16 >> 16;
     $2040 = ($2039*1840)|0;
     $2041 = $c;
     $2042 = (($ipix) + ($2041<<2)|0);
     $2043 = HEAP32[$2042>>2]|0;
     $2044 = ($2043*141)|0;
     $2045 = (($2040) + ($2044))|0;
     $2046 = (($2045) + 2048)|0;
     $2047 = $2046 >> 12;
     $2048 = $2047&65535;
     $2049 = $c;
     $2050 = $row;
     $2051 = HEAP16[132120>>1]|0;
     $2052 = $2051&65535;
     $2053 = (($2052|0) / 4)&-1;
     $2054 = Math_imul($2050, $2053)|0;
     $2055 = $col;
     $2056 = (($2054) + ($2055))|0;
     $2057 = $shrink;
     $2058 = (($2057) + (($2056*6)|0)|0);
     $2059 = (($2058) + ($2049<<1)|0);
     HEAP16[$2059>>1] = $2048;
    }
    $2060 = $c;
    $2061 = (($2060) + 1)|0;
    $c = $2061;
   }
   $2062 = $col;
   $2063 = (($2062) + 1)|0;
   $col = $2063;
  }
 }
 $row = 0;
 while(1) {
  $2064 = $row;
  $2065 = HEAP16[132112>>1]|0;
  $2066 = $2065&65535;
  $2067 = $2066 & -4;
  $2068 = ($2064|0)<($2067|0);
  if (!($2068)) {
   break;
  }
  $2069 = (($ipix) + 8|0);
  HEAP32[$2069>>2] = 0;
  $2070 = (($ipix) + 4|0);
  HEAP32[$2070>>2] = 0;
  HEAP32[$ipix>>2] = 0;
  $2071 = $row;
  $2072 = $2071 & 3;
  $2073 = ($2072|0)==(0);
  if ($2073) {
   $2074 = HEAP16[132120>>1]|0;
   $2075 = $2074&65535;
   $2076 = $2075 & -4;
   $col = $2076;
   while(1) {
    $2077 = $col;
    $2078 = (($2077) + -1)|0;
    $col = $2078;
    $2079 = ($2077|0)!=(0);
    if (!($2079)) {
     break;
    }
    $c = 0;
    while(1) {
     $2080 = $c;
     $2081 = ($2080|0)<(3);
     if (!($2081)) {
      break;
     }
     $2082 = $c;
     $2083 = $row;
     $2084 = (($2083|0) / 4)&-1;
     $2085 = HEAP16[132120>>1]|0;
     $2086 = $2085&65535;
     $2087 = (($2086|0) / 4)&-1;
     $2088 = Math_imul($2084, $2087)|0;
     $2089 = $col;
     $2090 = (($2089|0) / 4)&-1;
     $2091 = (($2088) + ($2090))|0;
     $2092 = $shrink;
     $2093 = (($2092) + (($2091*6)|0)|0);
     $2094 = (($2093) + ($2082<<1)|0);
     $2095 = HEAP16[$2094>>1]|0;
     $2096 = $2095 << 16 >> 16;
     $2097 = ($2096*1485)|0;
     $2098 = $c;
     $2099 = (($ipix) + ($2098<<2)|0);
     $2100 = HEAP32[$2099>>2]|0;
     $2101 = ($2100*6707)|0;
     $2102 = (($2097) + ($2101))|0;
     $2103 = (($2102) + 4096)|0;
     $2104 = $2103 >> 13;
     $2105 = $c;
     $2106 = (($ipix) + ($2105<<2)|0);
     HEAP32[$2106>>2] = $2104;
     $2107 = $c;
     $2108 = $col;
     $2109 = HEAP32[$smrow>>2]|0;
     $2110 = (($2109) + (($2108*12)|0)|0);
     $2111 = (($2110) + ($2107<<2)|0);
     HEAP32[$2111>>2] = $2104;
     $2112 = $c;
     $2113 = (($2112) + 1)|0;
     $c = $2113;
    }
   }
  }
  $2114 = (($ipix) + 8|0);
  HEAP32[$2114>>2] = 0;
  $2115 = (($ipix) + 4|0);
  HEAP32[$2115>>2] = 0;
  HEAP32[$ipix>>2] = 0;
  $col = 0;
  while(1) {
   $2116 = $col;
   $2117 = HEAP16[132120>>1]|0;
   $2118 = $2117&65535;
   $2119 = $2118 & -4;
   $2120 = ($2116|0)<($2119|0);
   if (!($2120)) {
    break;
   }
   $c = 0;
   while(1) {
    $2121 = $c;
    $2122 = ($2121|0)<(3);
    if (!($2122)) {
     break;
    }
    $2123 = $c;
    $2124 = $col;
    $2125 = HEAP32[$smrow>>2]|0;
    $2126 = (($2125) + (($2124*12)|0)|0);
    $2127 = (($2126) + ($2123<<2)|0);
    $2128 = HEAP32[$2127>>2]|0;
    $2129 = ($2128*1485)|0;
    $2130 = $c;
    $2131 = (($ipix) + ($2130<<2)|0);
    $2132 = HEAP32[$2131>>2]|0;
    $2133 = ($2132*6707)|0;
    $2134 = (($2129) + ($2133))|0;
    $2135 = (($2134) + 4096)|0;
    $2136 = $2135 >> 13;
    $2137 = $c;
    $2138 = (($ipix) + ($2137<<2)|0);
    HEAP32[$2138>>2] = $2136;
    $2139 = $c;
    $2140 = $col;
    $2141 = (($smrow) + 4|0);
    $2142 = HEAP32[$2141>>2]|0;
    $2143 = (($2142) + (($2140*12)|0)|0);
    $2144 = (($2143) + ($2139<<2)|0);
    HEAP32[$2144>>2] = $2136;
    $2145 = $c;
    $2146 = (($2145) + 1)|0;
    $c = $2146;
   }
   $2147 = $col;
   $2148 = (($2147) + 1)|0;
   $col = $2148;
  }
  $2149 = $row;
  $2150 = ($2149|0)==(0);
  if ($2150) {
   $2151 = (($smrow) + 8|0);
   $2152 = HEAP32[$2151>>2]|0;
   $2153 = (($smrow) + 4|0);
   $2154 = HEAP32[$2153>>2]|0;
   $2155 = HEAP16[132120>>1]|0;
   $2156 = $2155&65535;
   $2157 = ($2156*12)|0;
   _memcpy(($2152|0),($2154|0),($2157|0))|0;
  } else {
   $col = 0;
   while(1) {
    $2158 = $col;
    $2159 = HEAP16[132120>>1]|0;
    $2160 = $2159&65535;
    $2161 = $2160 & -4;
    $2162 = ($2158|0)<($2161|0);
    if (!($2162)) {
     break;
    }
    $c = 0;
    while(1) {
     $2163 = $c;
     $2164 = ($2163|0)<(3);
     if (!($2164)) {
      break;
     }
     $2165 = $c;
     $2166 = $col;
     $2167 = (($smrow) + 8|0);
     $2168 = HEAP32[$2167>>2]|0;
     $2169 = (($2168) + (($2166*12)|0)|0);
     $2170 = (($2169) + ($2165<<2)|0);
     $2171 = HEAP32[$2170>>2]|0;
     $2172 = ($2171*6707)|0;
     $2173 = $c;
     $2174 = $col;
     $2175 = (($smrow) + 4|0);
     $2176 = HEAP32[$2175>>2]|0;
     $2177 = (($2176) + (($2174*12)|0)|0);
     $2178 = (($2177) + ($2173<<2)|0);
     $2179 = HEAP32[$2178>>2]|0;
     $2180 = ($2179*1485)|0;
     $2181 = (($2172) + ($2180))|0;
     $2182 = (($2181) + 4096)|0;
     $2183 = $2182 >> 13;
     $2184 = $c;
     $2185 = $col;
     $2186 = (($smrow) + 8|0);
     $2187 = HEAP32[$2186>>2]|0;
     $2188 = (($2187) + (($2185*12)|0)|0);
     $2189 = (($2188) + ($2184<<2)|0);
     HEAP32[$2189>>2] = $2183;
     $2190 = $c;
     $2191 = (($2190) + 1)|0;
     $c = $2191;
    }
    $2192 = $col;
    $2193 = (($2192) + 1)|0;
    $col = $2193;
   }
  }
  $col = 0;
  while(1) {
   $2194 = $col;
   $2195 = HEAP16[132120>>1]|0;
   $2196 = $2195&65535;
   $2197 = $2196 & -4;
   $2198 = ($2194|0)<($2197|0);
   if (!($2198)) {
    break;
   }
   $j = 30;
   $i = 30;
   $c = 0;
   while(1) {
    $2199 = $c;
    $2200 = ($2199|0)<(3);
    if (!($2200)) {
     break;
    }
    $2201 = $c;
    $2202 = $col;
    $2203 = (($smrow) + 8|0);
    $2204 = HEAP32[$2203>>2]|0;
    $2205 = (($2204) + (($2202*12)|0)|0);
    $2206 = (($2205) + ($2201<<2)|0);
    $2207 = HEAP32[$2206>>2]|0;
    $2208 = $i;
    $2209 = (($2208) + ($2207))|0;
    $i = $2209;
    $2210 = $c;
    $2211 = $row;
    $2212 = HEAP16[132120>>1]|0;
    $2213 = $2212&65535;
    $2214 = Math_imul($2211, $2213)|0;
    $2215 = $col;
    $2216 = (($2214) + ($2215))|0;
    $2217 = HEAP32[132144>>2]|0;
    $2218 = (($2217) + ($2216<<3)|0);
    $2219 = (($2218) + ($2210<<1)|0);
    $2220 = HEAP16[$2219>>1]|0;
    $2221 = $2220 << 16 >> 16;
    $2222 = $j;
    $2223 = (($2222) + ($2221))|0;
    $j = $2223;
    $2224 = $c;
    $2225 = (($2224) + 1)|0;
    $c = $2225;
   }
   $2226 = $j;
   $2227 = $2226 << 16;
   $2228 = $i;
   $2229 = (($2227|0) / ($2228|0))&-1;
   $j = $2229;
   $c = 0;
   $sum = 0;
   while(1) {
    $2230 = $c;
    $2231 = ($2230|0)<(3);
    if (!($2231)) {
     break;
    }
    $2232 = $c;
    $2233 = (($2232) + 3)|0;
    $2234 = (($curve) + ($2233<<2)|0);
    $2235 = HEAP32[$2234>>2]|0;
    $2236 = $c;
    $2237 = $col;
    $2238 = (($smrow) + 8|0);
    $2239 = HEAP32[$2238>>2]|0;
    $2240 = (($2239) + (($2237*12)|0)|0);
    $2241 = (($2240) + ($2236<<2)|0);
    $2242 = HEAP32[$2241>>2]|0;
    $2243 = $j;
    $2244 = Math_imul($2242, $2243)|0;
    $2245 = (($2244) + 32768)|0;
    $2246 = $2245 >> 16;
    $2247 = $c;
    $2248 = $row;
    $2249 = HEAP16[132120>>1]|0;
    $2250 = $2249&65535;
    $2251 = Math_imul($2248, $2250)|0;
    $2252 = $col;
    $2253 = (($2251) + ($2252))|0;
    $2254 = HEAP32[132144>>2]|0;
    $2255 = (($2254) + ($2253<<3)|0);
    $2256 = (($2255) + ($2247<<1)|0);
    $2257 = HEAP16[$2256>>1]|0;
    $2258 = $2257 << 16 >> 16;
    $2259 = (($2246) - ($2258))|0;
    $2260 = (_foveon_apply_curve($2235,$2259)|0);
    $2261 = $c;
    $2262 = (($ipix) + ($2261<<2)|0);
    HEAP32[$2262>>2] = $2260;
    $2263 = $c;
    $2264 = (($ipix) + ($2263<<2)|0);
    $2265 = HEAP32[$2264>>2]|0;
    $2266 = $sum;
    $2267 = (($2266) + ($2265))|0;
    $sum = $2267;
    $2268 = $c;
    $2269 = (($2268) + 1)|0;
    $c = $2269;
   }
   $2270 = $sum;
   $2271 = $2270 >> 3;
   $sum = $2271;
   $c = 0;
   while(1) {
    $2272 = $c;
    $2273 = ($2272|0)<(3);
    if (!($2273)) {
     break;
    }
    $2274 = $c;
    $2275 = $row;
    $2276 = HEAP16[132120>>1]|0;
    $2277 = $2276&65535;
    $2278 = Math_imul($2275, $2277)|0;
    $2279 = $col;
    $2280 = (($2278) + ($2279))|0;
    $2281 = HEAP32[132144>>2]|0;
    $2282 = (($2281) + ($2280<<3)|0);
    $2283 = (($2282) + ($2274<<1)|0);
    $2284 = HEAP16[$2283>>1]|0;
    $2285 = $2284 << 16 >> 16;
    $2286 = $c;
    $2287 = (($ipix) + ($2286<<2)|0);
    $2288 = HEAP32[$2287>>2]|0;
    $2289 = (($2285) + ($2288))|0;
    $2290 = $sum;
    $2291 = (($2289) - ($2290))|0;
    $i = $2291;
    $2292 = $i;
    $2293 = ($2292|0)<(0);
    if ($2293) {
     $i = 0;
    }
    $2294 = $i;
    $2295 = $2294&65535;
    $2296 = $c;
    $2297 = $row;
    $2298 = HEAP16[132120>>1]|0;
    $2299 = $2298&65535;
    $2300 = Math_imul($2297, $2299)|0;
    $2301 = $col;
    $2302 = (($2300) + ($2301))|0;
    $2303 = HEAP32[132144>>2]|0;
    $2304 = (($2303) + ($2302<<3)|0);
    $2305 = (($2304) + ($2296<<1)|0);
    HEAP16[$2305>>1] = $2295;
    $2306 = $c;
    $2307 = (($2306) + 1)|0;
    $c = $2307;
   }
   $2308 = $col;
   $2309 = (($2308) + 1)|0;
   $col = $2309;
  }
  $2310 = $row;
  $2311 = (($2310) + 1)|0;
  $row = $2311;
 }
 $2312 = $shrink;
 _free($2312);
 $2313 = (($smrow) + 24|0);
 $2314 = HEAP32[$2313>>2]|0;
 _free($2314);
 $i = 0;
 while(1) {
  $2315 = $i;
  $2316 = ($2315|0)<(8);
  if (!($2316)) {
   break;
  }
  $2317 = $i;
  $2318 = (($curve) + ($2317<<2)|0);
  $2319 = HEAP32[$2318>>2]|0;
  _free($2319);
  $2320 = $i;
  $2321 = (($2320) + 1)|0;
  $i = $2321;
 }
 $2322 = (($keep) + 4|0);
 $2323 = HEAP32[$2322>>2]|0;
 $2324 = (($active) + 4|0);
 $2325 = HEAP32[$2324>>2]|0;
 $2326 = (($2325) - ($2323))|0;
 HEAP32[$2324>>2] = $2326;
 $2327 = (($active) + 12|0);
 $2328 = HEAP32[$2327>>2]|0;
 $2329 = (($2328) - 2)|0;
 HEAP32[$2327>>2] = $2329;
 $2330 = (($active) + 8|0);
 $2331 = HEAP32[$2330>>2]|0;
 $2332 = HEAP32[$active>>2]|0;
 $2333 = (($2331) - ($2332))|0;
 $i = $2333;
 $row = 0;
 while(1) {
  $2334 = $row;
  $2335 = (($active) + 12|0);
  $2336 = HEAP32[$2335>>2]|0;
  $2337 = (($active) + 4|0);
  $2338 = HEAP32[$2337>>2]|0;
  $2339 = (($2336) - ($2338))|0;
  $2340 = ($2334|0)<($2339|0);
  if (!($2340)) {
   break;
  }
  $2341 = $row;
  $2342 = $i;
  $2343 = Math_imul($2341, $2342)|0;
  $2344 = HEAP32[132144>>2]|0;
  $2345 = (($2344) + ($2343<<3)|0);
  $2346 = $row;
  $2347 = (($active) + 4|0);
  $2348 = HEAP32[$2347>>2]|0;
  $2349 = (($2346) + ($2348))|0;
  $2350 = HEAP16[132120>>1]|0;
  $2351 = $2350&65535;
  $2352 = Math_imul($2349, $2351)|0;
  $2353 = HEAP32[$active>>2]|0;
  $2354 = (($2352) + ($2353))|0;
  $2355 = HEAP32[132144>>2]|0;
  $2356 = (($2355) + ($2354<<3)|0);
  $2357 = $i;
  $2358 = $2357<<3;
  _memcpy(($2345|0),($2356|0),($2358|0))|0;
  $2359 = $row;
  $2360 = (($2359) + 1)|0;
  $row = $2360;
 }
 $2361 = $i;
 $2362 = $2361&65535;
 HEAP16[132120>>1] = $2362;
 $2363 = $row;
 $2364 = $2363&65535;
 HEAP16[132112>>1] = $2364;
 STACKTOP = sp;return;
}
function _crop_masked_pixels() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $col = 0;
 var $m = 0, $mblack = 0, $r = 0, $row = 0, $val = 0, $zero = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mblack = sp + 16|0;
 $0 = HEAP32[190504>>2]|0;
 $1 = ($0|0)==(2|0);
 if ($1) {
  label = 3;
 } else {
  $2 = HEAP32[190504>>2]|0;
  $3 = ($2|0)==(3|0);
  if ($3) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  _phase_one_correct();
 }
 $4 = HEAP16[190512>>1]|0;
 $5 = ($4<<16>>16)!=(0);
 if ($5) {
  $row = 0;
  while(1) {
   $6 = $row;
   $7 = HEAP16[133096>>1]|0;
   $8 = $7&65535;
   $9 = HEAP16[616>>1]|0;
   $10 = $9&65535;
   $11 = $10<<1;
   $12 = (($8) - ($11))|0;
   $13 = ($6|0)<($12|0);
   if (!($13)) {
    break;
   }
   $col = 0;
   while(1) {
    $14 = $col;
    $15 = HEAP16[190512>>1]|0;
    $16 = $15&65535;
    $17 = HEAP32[190520>>2]|0;
    $18 = ($17|0)!=(0);
    $19 = $18 ^ 1;
    $20 = $19&1;
    $21 = $16 << $20;
    $22 = ($14|0)<($21|0);
    if (!($22)) {
     break;
    }
    $23 = HEAP32[190520>>2]|0;
    $24 = ($23|0)!=(0);
    if ($24) {
     $25 = HEAP16[190512>>1]|0;
     $26 = $25&65535;
     $27 = (($26) - 1)|0;
     $28 = $col;
     $29 = (($27) - ($28))|0;
     $30 = $row;
     $31 = $30 >> 1;
     $32 = (($29) + ($31))|0;
     $r = $32;
     $33 = $col;
     $34 = $row;
     $35 = (($34) + 1)|0;
     $36 = $35 >> 1;
     $37 = (($33) + ($36))|0;
     $c = $37;
    } else {
     $38 = HEAP16[190512>>1]|0;
     $39 = $38&65535;
     $40 = (($39) - 1)|0;
     $41 = $row;
     $42 = (($40) + ($41))|0;
     $43 = $col;
     $44 = $43 >> 1;
     $45 = (($42) - ($44))|0;
     $r = $45;
     $46 = $row;
     $47 = $col;
     $48 = (($47) + 1)|0;
     $49 = $48 >> 1;
     $50 = (($46) + ($49))|0;
     $c = $50;
    }
    $51 = $r;
    $52 = HEAP16[132112>>1]|0;
    $53 = $52&65535;
    $54 = ($51>>>0)<($53>>>0);
    if ($54) {
     $55 = $c;
     $56 = HEAP16[132120>>1]|0;
     $57 = $56&65535;
     $58 = ($55>>>0)<($57>>>0);
     if ($58) {
      $59 = $row;
      $60 = HEAP16[616>>1]|0;
      $61 = $60&65535;
      $62 = (($59) + ($61))|0;
      $63 = HEAP16[132368>>1]|0;
      $64 = $63&65535;
      $65 = Math_imul($62, $64)|0;
      $66 = $col;
      $67 = HEAP16[608>>1]|0;
      $68 = $67&65535;
      $69 = (($66) + ($68))|0;
      $70 = (($65) + ($69))|0;
      $71 = HEAP32[132360>>2]|0;
      $72 = (($71) + ($70<<1)|0);
      $73 = HEAP16[$72>>1]|0;
      $74 = HEAP32[600>>2]|0;
      $75 = $r;
      $76 = $75 << 1;
      $77 = $76 & 14;
      $78 = $c;
      $79 = $78 & 1;
      $80 = (($77) + ($79))|0;
      $81 = $80 << 1;
      $82 = $74 >>> $81;
      $83 = $82 & 3;
      $84 = $r;
      $85 = HEAP16[132128>>1]|0;
      $86 = $85&65535;
      $87 = $84 >>> $86;
      $88 = HEAP16[132136>>1]|0;
      $89 = $88&65535;
      $90 = Math_imul($87, $89)|0;
      $91 = $c;
      $92 = HEAP16[132128>>1]|0;
      $93 = $92&65535;
      $94 = $91 >>> $93;
      $95 = (($90) + ($94))|0;
      $96 = HEAP32[132144>>2]|0;
      $97 = (($96) + ($95<<3)|0);
      $98 = (($97) + ($83<<1)|0);
      HEAP16[$98>>1] = $73;
     }
    }
    $99 = $col;
    $100 = (($99) + 1)|0;
    $col = $100;
   }
   $101 = $row;
   $102 = (($101) + 1)|0;
   $row = $102;
  }
 } else {
  $row = 0;
  while(1) {
   $103 = $row;
   $104 = HEAP16[132112>>1]|0;
   $105 = $104&65535;
   $106 = ($103|0)<($105|0);
   if (!($106)) {
    break;
   }
   $col = 0;
   while(1) {
    $107 = $col;
    $108 = HEAP16[132120>>1]|0;
    $109 = $108&65535;
    $110 = ($107|0)<($109|0);
    if (!($110)) {
     break;
    }
    $111 = $row;
    $112 = HEAP16[616>>1]|0;
    $113 = $112&65535;
    $114 = (($111) + ($113))|0;
    $115 = HEAP16[132368>>1]|0;
    $116 = $115&65535;
    $117 = Math_imul($114, $116)|0;
    $118 = $col;
    $119 = HEAP16[608>>1]|0;
    $120 = $119&65535;
    $121 = (($118) + ($120))|0;
    $122 = (($117) + ($121))|0;
    $123 = HEAP32[132360>>2]|0;
    $124 = (($123) + ($122<<1)|0);
    $125 = HEAP16[$124>>1]|0;
    $126 = $row;
    $127 = $col;
    $128 = (_fcol($126,$127)|0);
    $129 = $row;
    $130 = HEAP16[132128>>1]|0;
    $131 = $130&65535;
    $132 = $129 >> $131;
    $133 = HEAP16[132136>>1]|0;
    $134 = $133&65535;
    $135 = Math_imul($132, $134)|0;
    $136 = $col;
    $137 = HEAP16[132128>>1]|0;
    $138 = $137&65535;
    $139 = $136 >> $138;
    $140 = (($135) + ($139))|0;
    $141 = HEAP32[132144>>2]|0;
    $142 = (($141) + ($140<<3)|0);
    $143 = (($142) + ($128<<1)|0);
    HEAP16[$143>>1] = $125;
    $144 = $col;
    $145 = (($144) + 1)|0;
    $col = $145;
   }
   $146 = $row;
   $147 = (($146) + 1)|0;
   $row = $147;
  }
 }
 $148 = HEAP32[((190528 + 12|0))>>2]|0;
 $149 = ($148|0)>(0);
 if ($149) {
 } else {
  $150 = HEAP32[190504>>2]|0;
  $151 = ($150|0)==(4|0);
  L40: do {
   if ($151) {
    label = 33;
   } else {
    $152 = HEAP32[190504>>2]|0;
    $153 = ($152|0)==(5|0);
    if ($153) {
     label = 33;
    } else {
     $158 = HEAP32[190504>>2]|0;
     $159 = ($158|0)==(6|0);
     do {
      if (!($159)) {
       $160 = HEAP32[190504>>2]|0;
       $161 = ($160|0)==(7|0);
       if (!($161)) {
        $162 = HEAP32[190504>>2]|0;
        $163 = ($162|0)==(8|0);
        if ($163) {
         $164 = (_strncmp(134232,190656,3)|0);
         $165 = ($164|0)!=(0);
         if ($165) {
          break;
         }
        }
        $166 = HEAP32[190504>>2]|0;
        $167 = ($166|0)==(9|0);
        if (!($167)) {
         $168 = HEAP32[190504>>2]|0;
         $169 = ($168|0)==(10|0);
         if (!($169)) {
          break L40;
         }
         $170 = HEAP32[133128>>2]|0;
         $171 = $170 & 32;
         $172 = ($171|0)!=(0);
         if (!($172)) {
          break L40;
         }
        }
       }
      }
     } while(0);
     label = 42;
    }
   }
  } while(0);
  if ((label|0) == 33) {
   $154 = HEAP32[((190528 + 20|0))>>2]|0;
   $155 = (($154) + 2)|0;
   HEAP32[((190528 + 20|0))>>2] = $155;
   HEAP32[((190528 + 4|0))>>2] = $155;
   $156 = HEAP32[((190528 + 12|0))>>2]|0;
   $157 = (($156) - 2)|0;
   HEAP32[((190528 + 12|0))>>2] = $157;
   label = 42;
  }
  if ((label|0) == 42) {
   $173 = HEAP16[616>>1]|0;
   $174 = $173&65535;
   HEAP32[((190528 + 16|0))>>2] = $174;
   HEAP32[190528>>2] = $174;
   $175 = HEAP16[616>>1]|0;
   $176 = $175&65535;
   $177 = HEAP16[132112>>1]|0;
   $178 = $177&65535;
   $179 = (($176) + ($178))|0;
   HEAP32[((190528 + 24|0))>>2] = $179;
   HEAP32[((190528 + 8|0))>>2] = $179;
   $180 = HEAP16[608>>1]|0;
   $181 = $180&65535;
   $182 = HEAP32[((190528 + 12|0))>>2]|0;
   $183 = (($182) + ($181))|0;
   HEAP32[((190528 + 12|0))>>2] = $183;
   $184 = HEAP16[608>>1]|0;
   $185 = $184&65535;
   $186 = HEAP16[132120>>1]|0;
   $187 = $186&65535;
   $188 = (($185) + ($187))|0;
   $189 = HEAP32[((190528 + 20|0))>>2]|0;
   $190 = (($189) + ($188))|0;
   HEAP32[((190528 + 20|0))>>2] = $190;
   $191 = HEAP16[132368>>1]|0;
   $192 = $191&65535;
   $193 = HEAP32[((190528 + 28|0))>>2]|0;
   $194 = (($193) + ($192))|0;
   HEAP32[((190528 + 28|0))>>2] = $194;
  }
  $195 = HEAP32[190504>>2]|0;
  $196 = ($195|0)==(11|0);
  if ($196) {
   $197 = HEAP16[616>>1]|0;
   $198 = $197&65535;
   HEAP32[((190528 + 8|0))>>2] = $198;
   $199 = HEAP16[132120>>1]|0;
   $200 = $199&65535;
   HEAP32[((190528 + 12|0))>>2] = $200;
  }
 }
 ;HEAP32[$mblack+0>>2]=0|0;HEAP32[$mblack+4>>2]=0|0;HEAP32[$mblack+8>>2]=0|0;HEAP32[$mblack+12>>2]=0|0;HEAP32[$mblack+16>>2]=0|0;HEAP32[$mblack+20>>2]=0|0;HEAP32[$mblack+24>>2]=0|0;HEAP32[$mblack+28>>2]=0|0;
 $m = 0;
 $zero = 0;
 while(1) {
  $201 = $m;
  $202 = ($201>>>0)<(8);
  if (!($202)) {
   break;
  }
  $203 = $m;
  $204 = (190528 + ($203<<4)|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = ($205|0)>(0);
  if ($206) {
   $207 = $m;
   $208 = (190528 + ($207<<4)|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = $209;
  } else {
   $210 = 0;
  }
  $row = $210;
  while(1) {
   $211 = $row;
   $212 = $m;
   $213 = (190528 + ($212<<4)|0);
   $214 = (($213) + 8|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = HEAP16[133096>>1]|0;
   $217 = $216&65535;
   $218 = ($215|0)<($217|0);
   if ($218) {
    $219 = $m;
    $220 = (190528 + ($219<<4)|0);
    $221 = (($220) + 8|0);
    $222 = HEAP32[$221>>2]|0;
    $226 = $222;
   } else {
    $223 = HEAP16[133096>>1]|0;
    $224 = $223&65535;
    $226 = $224;
   }
   $225 = ($211|0)<($226|0);
   if (!($225)) {
    break;
   }
   $227 = $m;
   $228 = (190528 + ($227<<4)|0);
   $229 = (($228) + 4|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = ($230|0)>(0);
   if ($231) {
    $232 = $m;
    $233 = (190528 + ($232<<4)|0);
    $234 = (($233) + 4|0);
    $235 = HEAP32[$234>>2]|0;
    $236 = $235;
   } else {
    $236 = 0;
   }
   $col = $236;
   while(1) {
    $237 = $col;
    $238 = $m;
    $239 = (190528 + ($238<<4)|0);
    $240 = (($239) + 12|0);
    $241 = HEAP32[$240>>2]|0;
    $242 = HEAP16[132368>>1]|0;
    $243 = $242&65535;
    $244 = ($241|0)<($243|0);
    if ($244) {
     $245 = $m;
     $246 = (190528 + ($245<<4)|0);
     $247 = (($246) + 12|0);
     $248 = HEAP32[$247>>2]|0;
     $252 = $248;
    } else {
     $249 = HEAP16[132368>>1]|0;
     $250 = $249&65535;
     $252 = $250;
    }
    $251 = ($237|0)<($252|0);
    if (!($251)) {
     break;
    }
    $253 = HEAP32[600>>2]|0;
    $254 = $row;
    $255 = HEAP16[616>>1]|0;
    $256 = $255&65535;
    $257 = (($254) - ($256))|0;
    $258 = $257 << 1;
    $259 = $258 & 14;
    $260 = $col;
    $261 = HEAP16[608>>1]|0;
    $262 = $261&65535;
    $263 = (($260) - ($262))|0;
    $264 = $263 & 1;
    $265 = (($259) + ($264))|0;
    $266 = $265 << 1;
    $267 = $253 >>> $266;
    $268 = $267 & 3;
    $c = $268;
    $269 = $row;
    $270 = HEAP16[132368>>1]|0;
    $271 = $270&65535;
    $272 = Math_imul($269, $271)|0;
    $273 = $col;
    $274 = (($272) + ($273))|0;
    $275 = HEAP32[132360>>2]|0;
    $276 = (($275) + ($274<<1)|0);
    $277 = HEAP16[$276>>1]|0;
    $278 = $277&65535;
    $val = $278;
    $279 = $c;
    $280 = (($mblack) + ($279<<2)|0);
    $281 = HEAP32[$280>>2]|0;
    $282 = (($281) + ($278))|0;
    HEAP32[$280>>2] = $282;
    $283 = $c;
    $284 = (4 + ($283))|0;
    $285 = (($mblack) + ($284<<2)|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = (($286) + 1)|0;
    HEAP32[$285>>2] = $287;
    $288 = $val;
    $289 = ($288|0)!=(0);
    $290 = $289 ^ 1;
    $291 = $290&1;
    $292 = $zero;
    $293 = (($292) + ($291))|0;
    $zero = $293;
    $294 = $col;
    $295 = (($294) + 1)|0;
    $col = $295;
   }
   $296 = $row;
   $297 = (($296) + 1)|0;
   $row = $297;
  }
  $298 = $m;
  $299 = (($298) + 1)|0;
  $m = $299;
 }
 $300 = HEAP32[190504>>2]|0;
 $301 = ($300|0)==(6|0);
 if ($301) {
  $302 = HEAP16[132120>>1]|0;
  $303 = $302&65535;
  $304 = HEAP16[132368>>1]|0;
  $305 = $304&65535;
  $306 = ($303|0)<($305|0);
  if ($306) {
   $307 = HEAP32[$mblack>>2]|0;
   $308 = (($mblack) + 4|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = (($307) + ($309))|0;
   $311 = (($mblack) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = (($310) + ($312))|0;
   $314 = (($mblack) + 12|0);
   $315 = HEAP32[$314>>2]|0;
   $316 = (($313) + ($315))|0;
   $317 = (($mblack) + 16|0);
   $318 = HEAP32[$317>>2]|0;
   $319 = (($mblack) + 20|0);
   $320 = HEAP32[$319>>2]|0;
   $321 = (($318) + ($320))|0;
   $322 = (($mblack) + 24|0);
   $323 = HEAP32[$322>>2]|0;
   $324 = (($321) + ($323))|0;
   $325 = (($mblack) + 28|0);
   $326 = HEAP32[$325>>2]|0;
   $327 = (($324) + ($326))|0;
   $328 = (($316>>>0) / ($327>>>0))&-1;
   $329 = (($328) - 4)|0;
   HEAP32[132392>>2] = $329;
   _canon_600_correct();
   STACKTOP = sp;return;
  }
 }
 $330 = $zero;
 $331 = (($mblack) + 16|0);
 $332 = HEAP32[$331>>2]|0;
 $333 = ($330>>>0)<($332>>>0);
 if ($333) {
  $334 = (($mblack) + 20|0);
  $335 = HEAP32[$334>>2]|0;
  $336 = ($335|0)!=(0);
  if ($336) {
   $337 = (($mblack) + 24|0);
   $338 = HEAP32[$337>>2]|0;
   $339 = ($338|0)!=(0);
   if ($339) {
    $340 = (($mblack) + 28|0);
    $341 = HEAP32[$340>>2]|0;
    $342 = ($341|0)!=(0);
    if ($342) {
     $c = 0;
     while(1) {
      $343 = $c;
      $344 = ($343>>>0)<(4);
      if (!($344)) {
       break;
      }
      $345 = $c;
      $346 = (($mblack) + ($345<<2)|0);
      $347 = HEAP32[$346>>2]|0;
      $348 = $c;
      $349 = (4 + ($348))|0;
      $350 = (($mblack) + ($349<<2)|0);
      $351 = HEAP32[$350>>2]|0;
      $352 = (($347>>>0) / ($351>>>0))&-1;
      $353 = $352&65535;
      $354 = $c;
      $355 = (134720 + ($354<<1)|0);
      HEAP16[$355>>1] = $353;
      $356 = $c;
      $357 = (($356) + 1)|0;
      $c = $357;
     }
     HEAP16[((134720 + 12|0))>>1] = 0;
     HEAP16[((134720 + 10|0))>>1] = 0;
     HEAP16[((134720 + 8|0))>>1] = 0;
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _remove_zeroes() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $col = 0, $n = 0, $r = 0, $row = 0;
 var $tot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $row = 0;
 while(1) {
  $0 = $row;
  $1 = HEAP16[132112>>1]|0;
  $2 = $1&65535;
  $3 = ($0>>>0)<($2>>>0);
  if (!($3)) {
   break;
  }
  $col = 0;
  while(1) {
   $4 = $col;
   $5 = HEAP16[132120>>1]|0;
   $6 = $5&65535;
   $7 = ($4>>>0)<($6>>>0);
   if (!($7)) {
    break;
   }
   $8 = HEAP32[600>>2]|0;
   $9 = $row;
   $10 = $9 << 1;
   $11 = $10 & 14;
   $12 = $col;
   $13 = $12 & 1;
   $14 = (($11) + ($13))|0;
   $15 = $14 << 1;
   $16 = $8 >>> $15;
   $17 = $16 & 3;
   $18 = $row;
   $19 = HEAP16[132128>>1]|0;
   $20 = $19&65535;
   $21 = $18 >>> $20;
   $22 = HEAP16[132136>>1]|0;
   $23 = $22&65535;
   $24 = Math_imul($21, $23)|0;
   $25 = $col;
   $26 = HEAP16[132128>>1]|0;
   $27 = $26&65535;
   $28 = $25 >>> $27;
   $29 = (($24) + ($28))|0;
   $30 = HEAP32[132144>>2]|0;
   $31 = (($30) + ($29<<3)|0);
   $32 = (($31) + ($17<<1)|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = $33&65535;
   $35 = ($34|0)==(0);
   if ($35) {
    $n = 0;
    $tot = 0;
    $36 = $row;
    $37 = (($36) - 2)|0;
    $r = $37;
    while(1) {
     $38 = $r;
     $39 = $row;
     $40 = (($39) + 2)|0;
     $41 = ($38>>>0)<=($40>>>0);
     if (!($41)) {
      break;
     }
     $42 = $col;
     $43 = (($42) - 2)|0;
     $c = $43;
     while(1) {
      $44 = $c;
      $45 = $col;
      $46 = (($45) + 2)|0;
      $47 = ($44>>>0)<=($46>>>0);
      if (!($47)) {
       break;
      }
      $48 = $r;
      $49 = HEAP16[132112>>1]|0;
      $50 = $49&65535;
      $51 = ($48>>>0)<($50>>>0);
      if ($51) {
       $52 = $c;
       $53 = HEAP16[132120>>1]|0;
       $54 = $53&65535;
       $55 = ($52>>>0)<($54>>>0);
       if ($55) {
        $56 = HEAP32[600>>2]|0;
        $57 = $r;
        $58 = $57 << 1;
        $59 = $58 & 14;
        $60 = $c;
        $61 = $60 & 1;
        $62 = (($59) + ($61))|0;
        $63 = $62 << 1;
        $64 = $56 >>> $63;
        $65 = $64 & 3;
        $66 = HEAP32[600>>2]|0;
        $67 = $row;
        $68 = $67 << 1;
        $69 = $68 & 14;
        $70 = $col;
        $71 = $70 & 1;
        $72 = (($69) + ($71))|0;
        $73 = $72 << 1;
        $74 = $66 >>> $73;
        $75 = $74 & 3;
        $76 = ($65|0)==($75|0);
        if ($76) {
         $77 = HEAP32[600>>2]|0;
         $78 = $r;
         $79 = $78 << 1;
         $80 = $79 & 14;
         $81 = $c;
         $82 = $81 & 1;
         $83 = (($80) + ($82))|0;
         $84 = $83 << 1;
         $85 = $77 >>> $84;
         $86 = $85 & 3;
         $87 = $r;
         $88 = HEAP16[132128>>1]|0;
         $89 = $88&65535;
         $90 = $87 >>> $89;
         $91 = HEAP16[132136>>1]|0;
         $92 = $91&65535;
         $93 = Math_imul($90, $92)|0;
         $94 = $c;
         $95 = HEAP16[132128>>1]|0;
         $96 = $95&65535;
         $97 = $94 >>> $96;
         $98 = (($93) + ($97))|0;
         $99 = HEAP32[132144>>2]|0;
         $100 = (($99) + ($98<<3)|0);
         $101 = (($100) + ($86<<1)|0);
         $102 = HEAP16[$101>>1]|0;
         $103 = $102&65535;
         $104 = ($103|0)!=(0);
         if ($104) {
          $105 = $n;
          $106 = (($105) + 1)|0;
          $n = $106;
          $107 = HEAP32[600>>2]|0;
          $108 = $r;
          $109 = $108 << 1;
          $110 = $109 & 14;
          $111 = $c;
          $112 = $111 & 1;
          $113 = (($110) + ($112))|0;
          $114 = $113 << 1;
          $115 = $107 >>> $114;
          $116 = $115 & 3;
          $117 = $r;
          $118 = HEAP16[132128>>1]|0;
          $119 = $118&65535;
          $120 = $117 >>> $119;
          $121 = HEAP16[132136>>1]|0;
          $122 = $121&65535;
          $123 = Math_imul($120, $122)|0;
          $124 = $c;
          $125 = HEAP16[132128>>1]|0;
          $126 = $125&65535;
          $127 = $124 >>> $126;
          $128 = (($123) + ($127))|0;
          $129 = HEAP32[132144>>2]|0;
          $130 = (($129) + ($128<<3)|0);
          $131 = (($130) + ($116<<1)|0);
          $132 = HEAP16[$131>>1]|0;
          $133 = $132&65535;
          $134 = $tot;
          $135 = (($134) + ($133))|0;
          $tot = $135;
         }
        }
       }
      }
      $136 = $c;
      $137 = (($136) + 1)|0;
      $c = $137;
     }
     $138 = $r;
     $139 = (($138) + 1)|0;
     $r = $139;
    }
    $140 = $n;
    $141 = ($140|0)!=(0);
    if ($141) {
     $142 = $tot;
     $143 = $n;
     $144 = (($142>>>0) / ($143>>>0))&-1;
     $145 = $144&65535;
     $146 = HEAP32[600>>2]|0;
     $147 = $row;
     $148 = $147 << 1;
     $149 = $148 & 14;
     $150 = $col;
     $151 = $150 & 1;
     $152 = (($149) + ($151))|0;
     $153 = $152 << 1;
     $154 = $146 >>> $153;
     $155 = $154 & 3;
     $156 = $row;
     $157 = HEAP16[132128>>1]|0;
     $158 = $157&65535;
     $159 = $156 >>> $158;
     $160 = HEAP16[132136>>1]|0;
     $161 = $160&65535;
     $162 = Math_imul($159, $161)|0;
     $163 = $col;
     $164 = HEAP16[132128>>1]|0;
     $165 = $164&65535;
     $166 = $163 >>> $165;
     $167 = (($162) + ($166))|0;
     $168 = HEAP32[132144>>2]|0;
     $169 = (($168) + ($167<<3)|0);
     $170 = (($169) + ($155<<1)|0);
     HEAP16[$170>>1] = $145;
    }
   }
   $171 = $col;
   $172 = (($171) + 1)|0;
   $col = $172;
  }
  $173 = $row;
  $174 = (($173) + 1)|0;
  $row = $174;
 }
 STACKTOP = sp;return;
}
function _bad_pixels($cfname) {
 $cfname = $cfname|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0;
 var $col = 0, $cp = 0, $fixed = 0, $fname = 0, $fp = 0, $len = 0, $line = 0, $n = 0, $r = 0, $rad = 0, $row = 0, $time = 0, $tot = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp;
 $vararg_buffer = sp + 8|0;
 $line = sp + 88|0;
 $time = sp + 84|0;
 $row = sp + 36|0;
 $col = sp + 32|0;
 $0 = $cfname;
 $fp = 0;
 $fixed = 0;
 $1 = HEAP32[600>>2]|0;
 $2 = ($1|0)!=(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $0;
   $6 = (_fopen(($5|0),(190664|0))|0);
   $fp = $6;
  } else {
   $len = 32;
   while(1) {
    $7 = $len;
    $8 = (_malloc($7)|0);
    $fname = $8;
    $9 = $fname;
    $10 = ($9|0)!=(0|0);
    if (!($10)) {
     label = 7;
     break;
    }
    $11 = $fname;
    $12 = $len;
    $13 = (($12) - 16)|0;
    $14 = (_getcwd(($11|0),($13|0))|0);
    $15 = ($14|0)!=(0|0);
    if ($15) {
     label = 9;
     break;
    }
    $16 = $fname;
    _free($16);
    $17 = (___errno_location()|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)!=(34);
    if ($19) {
     label = 11;
     break;
    }
    $20 = $len;
    $21 = $20<<1;
    $len = $21;
   }
   if ((label|0) == 7) {
    STACKTOP = sp;return;
   }
   else if ((label|0) == 9) {
    $22 = $fname;
    $23 = $fname;
    $24 = (_strlen(($23|0))|0);
    $25 = (($22) + ($24)|0);
    $cp = $25;
    $26 = $cp;
    $27 = (($26) + -1|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($29|0)==(47);
    if ($30) {
     $31 = $cp;
     $32 = (($31) + -1|0);
     $cp = $32;
    }
    while(1) {
     $33 = $fname;
     $34 = HEAP8[$33>>0]|0;
     $35 = $34 << 24 >> 24;
     $36 = ($35|0)==(47);
     if (!($36)) {
      break;
     }
     $37 = $cp;
     (_strcpy(($37|0),(190672|0))|0);
     $38 = $fname;
     $39 = (_fopen(($38|0),(190664|0))|0);
     $fp = $39;
     $40 = ($39|0)!=(0|0);
     if ($40) {
      label = 19;
      break;
     }
     $41 = $cp;
     $42 = $fname;
     $43 = ($41|0)==($42|0);
     if ($43) {
      label = 21;
      break;
     }
     while(1) {
      $44 = $cp;
      $45 = (($44) + -1|0);
      $cp = $45;
      $46 = HEAP8[$45>>0]|0;
      $47 = $46 << 24 >> 24;
      $48 = ($47|0)!=(47);
      if (!($48)) {
       break;
      }
     }
    }
    if ((label|0) == 19) {
    }
    else if ((label|0) == 21) {
    }
    $49 = $fname;
    _free($49);
    break;
   }
   else if ((label|0) == 11) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $50 = $fp;
 $51 = ($50|0)!=(0|0);
 if (!($51)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $52 = $fp;
  $53 = (_fgets(($line|0),128,($52|0))|0);
  $54 = ($53|0)!=(0|0);
  if (!($54)) {
   break;
  }
  $55 = (_strchr($line,35)|0);
  $cp = $55;
  $56 = $cp;
  $57 = ($56|0)!=(0|0);
  if ($57) {
   $58 = $cp;
   HEAP8[$58>>0] = 0;
  }
  HEAP32[$vararg_buffer>>2] = $col;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $row;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $time;
  $59 = (_sscanf($line,190688,$vararg_buffer)|0);
  $60 = ($59|0)!=(3);
  if ($60) {
   continue;
  }
  $61 = HEAP32[$col>>2]|0;
  $62 = HEAP16[132120>>1]|0;
  $63 = $62&65535;
  $64 = ($61>>>0)>=($63>>>0);
  if (!($64)) {
   $65 = HEAP32[$row>>2]|0;
   $66 = HEAP16[132112>>1]|0;
   $67 = $66&65535;
   $68 = ($65>>>0)>=($67>>>0);
   if (!($68)) {
    $69 = HEAP32[$time>>2]|0;
    $70 = HEAP32[190704>>2]|0;
    $71 = ($69|0)>($70|0);
    if ($71) {
     continue;
    }
    $n = 0;
    $tot = 0;
    $rad = 1;
    while(1) {
     $72 = $rad;
     $73 = ($72|0)<(3);
     if ($73) {
      $74 = $n;
      $75 = ($74|0)==(0);
      $178 = $75;
     } else {
      $178 = 0;
     }
     if (!($178)) {
      break;
     }
     $76 = HEAP32[$row>>2]|0;
     $77 = $rad;
     $78 = (($76) - ($77))|0;
     $r = $78;
     while(1) {
      $79 = $r;
      $80 = HEAP32[$row>>2]|0;
      $81 = $rad;
      $82 = (($80) + ($81))|0;
      $83 = ($79|0)<=($82|0);
      if (!($83)) {
       break;
      }
      $84 = HEAP32[$col>>2]|0;
      $85 = $rad;
      $86 = (($84) - ($85))|0;
      $c = $86;
      while(1) {
       $87 = $c;
       $88 = HEAP32[$col>>2]|0;
       $89 = $rad;
       $90 = (($88) + ($89))|0;
       $91 = ($87|0)<=($90|0);
       if (!($91)) {
        break;
       }
       $92 = $r;
       $93 = HEAP16[132112>>1]|0;
       $94 = $93&65535;
       $95 = ($92>>>0)<($94>>>0);
       do {
        if ($95) {
         $96 = $c;
         $97 = HEAP16[132120>>1]|0;
         $98 = $97&65535;
         $99 = ($96>>>0)<($98>>>0);
         if (!($99)) {
          break;
         }
         $100 = $r;
         $101 = HEAP32[$row>>2]|0;
         $102 = ($100|0)!=($101|0);
         if (!($102)) {
          $103 = $c;
          $104 = HEAP32[$col>>2]|0;
          $105 = ($103|0)!=($104|0);
          if (!($105)) {
           break;
          }
         }
         $106 = $r;
         $107 = $c;
         $108 = (_fcol($106,$107)|0);
         $109 = HEAP32[$row>>2]|0;
         $110 = HEAP32[$col>>2]|0;
         $111 = (_fcol($109,$110)|0);
         $112 = ($108|0)==($111|0);
         if (!($112)) {
          break;
         }
         $113 = $r;
         $114 = $c;
         $115 = (_fcol($113,$114)|0);
         $116 = $r;
         $117 = HEAP16[132128>>1]|0;
         $118 = $117&65535;
         $119 = $116 >> $118;
         $120 = HEAP16[132136>>1]|0;
         $121 = $120&65535;
         $122 = Math_imul($119, $121)|0;
         $123 = $c;
         $124 = HEAP16[132128>>1]|0;
         $125 = $124&65535;
         $126 = $123 >> $125;
         $127 = (($122) + ($126))|0;
         $128 = HEAP32[132144>>2]|0;
         $129 = (($128) + ($127<<3)|0);
         $130 = (($129) + ($115<<1)|0);
         $131 = HEAP16[$130>>1]|0;
         $132 = $131&65535;
         $133 = $tot;
         $134 = (($133) + ($132))|0;
         $tot = $134;
         $135 = $n;
         $136 = (($135) + 1)|0;
         $n = $136;
        }
       } while(0);
       $137 = $c;
       $138 = (($137) + 1)|0;
       $c = $138;
      }
      $139 = $r;
      $140 = (($139) + 1)|0;
      $r = $140;
     }
     $141 = $rad;
     $142 = (($141) + 1)|0;
     $rad = $142;
    }
    $143 = $tot;
    $144 = $n;
    $145 = (($143|0) / ($144|0))&-1;
    $146 = $145&65535;
    $147 = HEAP32[$row>>2]|0;
    $148 = HEAP32[$col>>2]|0;
    $149 = (_fcol($147,$148)|0);
    $150 = HEAP32[$row>>2]|0;
    $151 = HEAP16[132128>>1]|0;
    $152 = $151&65535;
    $153 = $150 >> $152;
    $154 = HEAP16[132136>>1]|0;
    $155 = $154&65535;
    $156 = Math_imul($153, $155)|0;
    $157 = HEAP32[$col>>2]|0;
    $158 = HEAP16[132128>>1]|0;
    $159 = $158&65535;
    $160 = $157 >> $159;
    $161 = (($156) + ($160))|0;
    $162 = HEAP32[132144>>2]|0;
    $163 = (($162) + ($161<<3)|0);
    $164 = (($163) + ($149<<1)|0);
    HEAP16[$164>>1] = $146;
    $165 = HEAP32[168>>2]|0;
    $166 = ($165|0)!=(0);
    if ($166) {
     $167 = $fixed;
     $168 = (($167) + 1)|0;
     $fixed = $168;
     $169 = ($167|0)!=(0);
     if (!($169)) {
      $170 = HEAP32[_stderr>>2]|0;
      (_fprintf(($170|0),(190712|0),($vararg_buffer3|0))|0);
     }
     $171 = HEAP32[_stderr>>2]|0;
     $172 = HEAP32[$col>>2]|0;
     $173 = HEAP32[$row>>2]|0;
     HEAP32[$vararg_buffer5>>2] = $172;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAP32[$vararg_ptr8>>2] = $173;
     (_fprintf(($171|0),(190736|0),($vararg_buffer5|0))|0);
    }
    continue;
   }
  }
 }
 $174 = $fixed;
 $175 = ($174|0)!=(0);
 if ($175) {
  $176 = HEAP32[_stderr>>2]|0;
  (_fputc(10,($176|0))|0);
 }
 $177 = $fp;
 (_fclose(($177|0))|0);
 STACKTOP = sp;return;
}
function _subtract($fname) {
 $fname = $fname|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $col = 0, $comment = 0, $dim = 0, $error = 0, $fp = 0, $nd = 0, $number = 0, $pixel = 0, $row = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $dim = sp + 40|0;
 $0 = $fname;
 ;HEAP32[$dim+0>>2]=0|0;HEAP32[$dim+4>>2]=0|0;HEAP32[$dim+8>>2]=0|0;
 $comment = 0;
 $number = 0;
 $error = 0;
 $nd = 0;
 $1 = $0;
 $2 = (_fopen(($1|0),(190744|0))|0);
 $fp = $2;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $4 = $0;
  _perror(($4|0));
  STACKTOP = sp;return;
 }
 $5 = $fp;
 $6 = (_getc_unlocked(($5|0))|0);
 $7 = ($6|0)!=(80);
 if ($7) {
  label = 5;
 } else {
  $8 = $fp;
  $9 = (_getc_unlocked(($8|0))|0);
  $10 = ($9|0)!=(53);
  if ($10) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $error = 1;
 }
 while(1) {
  $11 = $error;
  $12 = ($11|0)!=(0);
  if ($12) {
   $186 = 0;
  } else {
   $13 = $nd;
   $14 = ($13|0)<(3);
   if ($14) {
    $15 = $fp;
    $16 = (_getc_unlocked(($15|0))|0);
    $c = $16;
    $17 = ($16|0)!=(-1);
    $186 = $17;
   } else {
    $186 = 0;
   }
  }
  if (!($186)) {
   break;
  }
  $18 = $c;
  $19 = ($18|0)==(35);
  if ($19) {
   $comment = 1;
  }
  $20 = $c;
  $21 = ($20|0)==(10);
  if ($21) {
   $comment = 0;
  }
  $22 = $comment;
  $23 = ($22|0)!=(0);
  if ($23) {
   continue;
  }
  $24 = $c;
  $25 = (_isdigit($24)|0);
  $26 = ($25|0)!=(0);
  if ($26) {
   $number = 1;
  }
  $27 = $number;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $c;
   $30 = (_isdigit($29)|0);
   $31 = ($30|0)!=(0);
   if ($31) {
    $32 = $nd;
    $33 = (($dim) + ($32<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34*10)|0;
    $36 = $c;
    $37 = (($35) + ($36))|0;
    $38 = (($37) - 48)|0;
    $39 = $nd;
    $40 = (($dim) + ($39<<2)|0);
    HEAP32[$40>>2] = $38;
   } else {
    $41 = $c;
    $42 = (_isspace($41)|0);
    $43 = ($42|0)!=(0);
    if ($43) {
     $number = 0;
     $44 = $nd;
     $45 = (($44) + 1)|0;
     $nd = $45;
    } else {
     $error = 1;
    }
   }
  }
 }
 $46 = $error;
 $47 = ($46|0)!=(0);
 if (!($47)) {
  $48 = $nd;
  $49 = ($48|0)<(3);
  if (!($49)) {
   $53 = HEAP32[$dim>>2]|0;
   $54 = HEAP16[132120>>1]|0;
   $55 = $54&65535;
   $56 = ($53|0)!=($55|0);
   if (!($56)) {
    $57 = (($dim) + 4|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = HEAP16[132112>>1]|0;
    $60 = $59&65535;
    $61 = ($58|0)!=($60|0);
    if (!($61)) {
     $62 = (($dim) + 8|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ($63|0)!=(65535);
     if (!($64)) {
      $68 = HEAP16[132120>>1]|0;
      $69 = $68&65535;
      $70 = (_calloc($69,2)|0);
      $pixel = $70;
      $71 = $pixel;
      _merror($71,190816);
      $row = 0;
      while(1) {
       $72 = $row;
       $73 = HEAP16[132112>>1]|0;
       $74 = $73&65535;
       $75 = ($72|0)<($74|0);
       if (!($75)) {
        break;
       }
       $76 = $pixel;
       $77 = HEAP16[132120>>1]|0;
       $78 = $77&65535;
       $79 = $fp;
       (_fread(($76|0),2,($78|0),($79|0))|0);
       $col = 0;
       while(1) {
        $80 = $col;
        $81 = HEAP16[132120>>1]|0;
        $82 = $81&65535;
        $83 = ($80|0)<($82|0);
        if (!($83)) {
         break;
        }
        $84 = HEAP32[600>>2]|0;
        $85 = $row;
        $86 = $85 << 1;
        $87 = $86 & 14;
        $88 = $col;
        $89 = $88 & 1;
        $90 = (($87) + ($89))|0;
        $91 = $90 << 1;
        $92 = $84 >>> $91;
        $93 = $92 & 3;
        $94 = $row;
        $95 = HEAP16[132128>>1]|0;
        $96 = $95&65535;
        $97 = $94 >> $96;
        $98 = HEAP16[132136>>1]|0;
        $99 = $98&65535;
        $100 = Math_imul($97, $99)|0;
        $101 = $col;
        $102 = HEAP16[132128>>1]|0;
        $103 = $102&65535;
        $104 = $101 >> $103;
        $105 = (($100) + ($104))|0;
        $106 = HEAP32[132144>>2]|0;
        $107 = (($106) + ($105<<3)|0);
        $108 = (($107) + ($93<<1)|0);
        $109 = HEAP16[$108>>1]|0;
        $110 = $109&65535;
        $111 = $col;
        $112 = $pixel;
        $113 = (($112) + ($111<<1)|0);
        $114 = HEAP16[$113>>1]|0;
        $115 = (_ntohs(($114|0))|0);
        $116 = $115&65535;
        $117 = (($110) - ($116))|0;
        $118 = ($117|0)>(0);
        if ($118) {
         $119 = HEAP32[600>>2]|0;
         $120 = $row;
         $121 = $120 << 1;
         $122 = $121 & 14;
         $123 = $col;
         $124 = $123 & 1;
         $125 = (($122) + ($124))|0;
         $126 = $125 << 1;
         $127 = $119 >>> $126;
         $128 = $127 & 3;
         $129 = $row;
         $130 = HEAP16[132128>>1]|0;
         $131 = $130&65535;
         $132 = $129 >> $131;
         $133 = HEAP16[132136>>1]|0;
         $134 = $133&65535;
         $135 = Math_imul($132, $134)|0;
         $136 = $col;
         $137 = HEAP16[132128>>1]|0;
         $138 = $137&65535;
         $139 = $136 >> $138;
         $140 = (($135) + ($139))|0;
         $141 = HEAP32[132144>>2]|0;
         $142 = (($141) + ($140<<3)|0);
         $143 = (($142) + ($128<<1)|0);
         $144 = HEAP16[$143>>1]|0;
         $145 = $144&65535;
         $146 = $col;
         $147 = $pixel;
         $148 = (($147) + ($146<<1)|0);
         $149 = HEAP16[$148>>1]|0;
         $150 = (_ntohs(($149|0))|0);
         $151 = $150&65535;
         $152 = (($145) - ($151))|0;
         $154 = $152;
        } else {
         $154 = 0;
        }
        $153 = $154&65535;
        $155 = HEAP32[600>>2]|0;
        $156 = $row;
        $157 = $156 << 1;
        $158 = $157 & 14;
        $159 = $col;
        $160 = $159 & 1;
        $161 = (($158) + ($160))|0;
        $162 = $161 << 1;
        $163 = $155 >>> $162;
        $164 = $163 & 3;
        $165 = $row;
        $166 = HEAP16[132128>>1]|0;
        $167 = $166&65535;
        $168 = $165 >> $167;
        $169 = HEAP16[132136>>1]|0;
        $170 = $169&65535;
        $171 = Math_imul($168, $170)|0;
        $172 = $col;
        $173 = HEAP16[132128>>1]|0;
        $174 = $173&65535;
        $175 = $172 >> $174;
        $176 = (($171) + ($175))|0;
        $177 = HEAP32[132144>>2]|0;
        $178 = (($177) + ($176<<3)|0);
        $179 = (($178) + ($164<<1)|0);
        HEAP16[$179>>1] = $153;
        $180 = $col;
        $181 = (($180) + 1)|0;
        $col = $181;
       }
       $182 = $row;
       $183 = (($182) + 1)|0;
       $row = $183;
      }
      $184 = $pixel;
      _free($184);
      $185 = $fp;
      (_fclose(($185|0))|0);
      _memset((134720|0),0,8204)|0;
      HEAP32[132392>>2] = 0;
      STACKTOP = sp;return;
     }
    }
   }
   $65 = HEAP32[_stderr>>2]|0;
   $66 = $0;
   HEAP32[$vararg_buffer1>>2] = $66;
   (_fprintf(($65|0),(190784|0),($vararg_buffer1|0))|0);
   $67 = $fp;
   (_fclose(($67|0))|0);
   STACKTOP = sp;return;
  }
 }
 $50 = HEAP32[_stderr>>2]|0;
 $51 = $0;
 HEAP32[$vararg_buffer>>2] = $51;
 (_fprintf(($50|0),(190752|0),($vararg_buffer|0))|0);
 $52 = $fp;
 (_fclose(($52|0))|0);
 STACKTOP = sp;return;
}
function _gamma_curve($pwr,$ts,$mode,$imax) {
 $pwr = +$pwr;
 $ts = +$ts;
 $mode = $mode|0;
 $imax = $imax|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0.0;
 var $206 = 0.0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0;
 var $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $bnd = 0, $g = 0, $i = 0, $r = 0.0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $g = sp + 32|0;
 $bnd = sp + 16|0;
 $0 = $pwr;
 $1 = $ts;
 $2 = $mode;
 $3 = $imax;
 ;HEAP32[$bnd+0>>2]=0|0;HEAP32[$bnd+4>>2]=0|0;HEAP32[$bnd+8>>2]=0|0;HEAP32[$bnd+12>>2]=0|0;
 $4 = $0;
 HEAPF64[$g>>3] = $4;
 $5 = $1;
 $6 = (($g) + 8|0);
 HEAPF64[$6>>3] = $5;
 $7 = (($g) + 32|0);
 HEAPF64[$7>>3] = 0.0;
 $8 = (($g) + 24|0);
 HEAPF64[$8>>3] = 0.0;
 $9 = (($g) + 16|0);
 HEAPF64[$9>>3] = 0.0;
 $10 = (($g) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $11 >= 1.0;
 $13 = $12&1;
 $14 = (($bnd) + ($13<<3)|0);
 HEAPF64[$14>>3] = 1.0;
 $15 = (($g) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $16 != 0.0;
 if ($17) {
  $18 = (($g) + 8|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $19 - 1.0;
  $21 = +HEAPF64[$g>>3];
  $22 = $21 - 1.0;
  $23 = $20 * $22;
  $24 = $23 <= 0.0;
  if ($24) {
   $i = 0;
   while(1) {
    $25 = $i;
    $26 = ($25|0)<(48);
    if (!($26)) {
     break;
    }
    $27 = +HEAPF64[$bnd>>3];
    $28 = (($bnd) + 8|0);
    $29 = +HEAPF64[$28>>3];
    $30 = $27 + $29;
    $31 = $30 / 2.0;
    $32 = (($g) + 16|0);
    HEAPF64[$32>>3] = $31;
    $33 = +HEAPF64[$g>>3];
    $34 = $33 != 0.0;
    if ($34) {
     $35 = (($g) + 16|0);
     $36 = +HEAPF64[$35>>3];
     $37 = (($g) + 16|0);
     $38 = +HEAPF64[$37>>3];
     $39 = (($g) + 8|0);
     $40 = +HEAPF64[$39>>3];
     $41 = $38 / $40;
     $42 = +HEAPF64[$g>>3];
     $43 = -$42;
     $44 = (+Math_pow((+$41),(+$43)));
     $45 = $44 - 1.0;
     $46 = +HEAPF64[$g>>3];
     $47 = $45 / $46;
     $48 = (($g) + 16|0);
     $49 = +HEAPF64[$48>>3];
     $50 = 1.0 / $49;
     $51 = $47 - $50;
     $52 = $51 > -1.0;
     $53 = $52&1;
     $54 = (($bnd) + ($53<<3)|0);
     HEAPF64[$54>>3] = $36;
    } else {
     $55 = (($g) + 16|0);
     $56 = +HEAPF64[$55>>3];
     $57 = (($g) + 16|0);
     $58 = +HEAPF64[$57>>3];
     $59 = (($g) + 16|0);
     $60 = +HEAPF64[$59>>3];
     $61 = 1.0 / $60;
     $62 = 1.0 - $61;
     $63 = (+Math_exp((+$62)));
     $64 = $58 / $63;
     $65 = (($g) + 8|0);
     $66 = +HEAPF64[$65>>3];
     $67 = $64 < $66;
     $68 = $67&1;
     $69 = (($bnd) + ($68<<3)|0);
     HEAPF64[$69>>3] = $56;
    }
    $70 = $i;
    $71 = (($70) + 1)|0;
    $i = $71;
   }
   $72 = (($g) + 16|0);
   $73 = +HEAPF64[$72>>3];
   $74 = (($g) + 8|0);
   $75 = +HEAPF64[$74>>3];
   $76 = $73 / $75;
   $77 = (($g) + 24|0);
   HEAPF64[$77>>3] = $76;
   $78 = +HEAPF64[$g>>3];
   $79 = $78 != 0.0;
   if ($79) {
    $80 = (($g) + 16|0);
    $81 = +HEAPF64[$80>>3];
    $82 = +HEAPF64[$g>>3];
    $83 = 1.0 / $82;
    $84 = $83 - 1.0;
    $85 = $81 * $84;
    $86 = (($g) + 32|0);
    HEAPF64[$86>>3] = $85;
   }
  }
 }
 $87 = +HEAPF64[$g>>3];
 $88 = $87 != 0.0;
 if ($88) {
  $89 = (($g) + 8|0);
  $90 = +HEAPF64[$89>>3];
  $91 = (($g) + 24|0);
  $92 = +HEAPF64[$91>>3];
  $93 = (($g) + 24|0);
  $94 = +HEAPF64[$93>>3];
  $95 = $92 * $94;
  $96 = $90 * $95;
  $97 = $96 / 2.0;
  $98 = (($g) + 32|0);
  $99 = +HEAPF64[$98>>3];
  $100 = (($g) + 24|0);
  $101 = +HEAPF64[$100>>3];
  $102 = 1.0 - $101;
  $103 = $99 * $102;
  $104 = $97 - $103;
  $105 = (($g) + 24|0);
  $106 = +HEAPF64[$105>>3];
  $107 = +HEAPF64[$g>>3];
  $108 = 1.0 + $107;
  $109 = (+Math_pow((+$106),(+$108)));
  $110 = 1.0 - $109;
  $111 = (($g) + 32|0);
  $112 = +HEAPF64[$111>>3];
  $113 = 1.0 + $112;
  $114 = $110 * $113;
  $115 = +HEAPF64[$g>>3];
  $116 = 1.0 + $115;
  $117 = $114 / $116;
  $118 = $104 + $117;
  $119 = 1.0 / $118;
  $120 = $119 - 1.0;
  $121 = (($g) + 40|0);
  HEAPF64[$121>>3] = $120;
 } else {
  $122 = (($g) + 8|0);
  $123 = +HEAPF64[$122>>3];
  $124 = (($g) + 24|0);
  $125 = +HEAPF64[$124>>3];
  $126 = (($g) + 24|0);
  $127 = +HEAPF64[$126>>3];
  $128 = $125 * $127;
  $129 = $123 * $128;
  $130 = $129 / 2.0;
  $131 = $130 + 1.0;
  $132 = (($g) + 16|0);
  $133 = +HEAPF64[$132>>3];
  $134 = $131 - $133;
  $135 = (($g) + 24|0);
  $136 = +HEAPF64[$135>>3];
  $137 = $134 - $136;
  $138 = (($g) + 16|0);
  $139 = +HEAPF64[$138>>3];
  $140 = (($g) + 24|0);
  $141 = +HEAPF64[$140>>3];
  $142 = $139 * $141;
  $143 = (($g) + 24|0);
  $144 = +HEAPF64[$143>>3];
  $145 = (+Math_log((+$144)));
  $146 = $145 - 1.0;
  $147 = $142 * $146;
  $148 = $137 - $147;
  $149 = 1.0 / $148;
  $150 = $149 - 1.0;
  $151 = (($g) + 40|0);
  HEAPF64[$151>>3] = $150;
 }
 $152 = $2;
 $153 = (($152) + -1)|0;
 $2 = $153;
 $154 = ($152|0)!=(0);
 if (!($154)) {
  dest=56+0|0; src=$g+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $155 = $i;
  $156 = ($155|0)<(65536);
  if (!($156)) {
   break;
  }
  $157 = $i;
  $158 = (968 + ($157<<1)|0);
  HEAP16[$158>>1] = -1;
  $159 = $i;
  $160 = (+($159|0));
  $161 = $3;
  $162 = (+($161|0));
  $163 = $160 / $162;
  $r = $163;
  $164 = $163 < 1.0;
  if ($164) {
   $165 = $2;
   $166 = ($165|0)!=(0);
   if ($166) {
    $167 = $r;
    $168 = (($g) + 24|0);
    $169 = +HEAPF64[$168>>3];
    $170 = $167 < $169;
    if ($170) {
     $171 = $r;
     $172 = (($g) + 8|0);
     $173 = +HEAPF64[$172>>3];
     $174 = $171 * $173;
     $227 = $174;
    } else {
     $175 = +HEAPF64[$g>>3];
     $176 = $175 != 0.0;
     if ($176) {
      $177 = $r;
      $178 = +HEAPF64[$g>>3];
      $179 = (+Math_pow((+$177),(+$178)));
      $180 = (($g) + 32|0);
      $181 = +HEAPF64[$180>>3];
      $182 = 1.0 + $181;
      $183 = $179 * $182;
      $184 = (($g) + 32|0);
      $185 = +HEAPF64[$184>>3];
      $186 = $183 - $185;
      $228 = $186;
     } else {
      $187 = $r;
      $188 = (+Math_log((+$187)));
      $189 = (($g) + 16|0);
      $190 = +HEAPF64[$189>>3];
      $191 = $188 * $190;
      $192 = $191 + 1.0;
      $228 = $192;
     }
     $227 = $228;
    }
    $221 = $227;
   } else {
    $193 = $r;
    $194 = (($g) + 16|0);
    $195 = +HEAPF64[$194>>3];
    $196 = $193 < $195;
    if ($196) {
     $197 = $r;
     $198 = (($g) + 8|0);
     $199 = +HEAPF64[$198>>3];
     $200 = $197 / $199;
     $229 = $200;
    } else {
     $201 = +HEAPF64[$g>>3];
     $202 = $201 != 0.0;
     if ($202) {
      $203 = $r;
      $204 = (($g) + 32|0);
      $205 = +HEAPF64[$204>>3];
      $206 = $203 + $205;
      $207 = (($g) + 32|0);
      $208 = +HEAPF64[$207>>3];
      $209 = 1.0 + $208;
      $210 = $206 / $209;
      $211 = +HEAPF64[$g>>3];
      $212 = 1.0 / $211;
      $213 = (+Math_pow((+$210),(+$212)));
      $230 = $213;
     } else {
      $214 = $r;
      $215 = $214 - 1.0;
      $216 = (($g) + 16|0);
      $217 = +HEAPF64[$216>>3];
      $218 = $215 / $217;
      $219 = (+Math_exp((+$218)));
      $230 = $219;
     }
     $229 = $230;
    }
    $221 = $229;
   }
   $220 = 65536.0 * $221;
   $222 = (~~(($220))&65535);
   $223 = $i;
   $224 = (968 + ($223<<1)|0);
   HEAP16[$224>>1] = $222;
  }
  $225 = $i;
  $226 = (($225) + 1)|0;
  $i = $226;
 }
 STACKTOP = sp;return;
}
function _pseudoinverse($in,$out,$size) {
 $in = $in|0;
 $out = $out|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0;
 var $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $k = 0, $num = 0.0;
 var $work = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $work = sp;
 $0 = $in;
 $1 = $out;
 $2 = $size;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(3);
  if (!($4)) {
   break;
  }
  $j = 0;
  while(1) {
   $5 = $j;
   $6 = ($5|0)<(6);
   if (!($6)) {
    break;
   }
   $7 = $j;
   $8 = $i;
   $9 = (($8) + 3)|0;
   $10 = ($7|0)==($9|0);
   $11 = $10&1;
   $12 = (+($11|0));
   $13 = $j;
   $14 = $i;
   $15 = (($work) + (($14*48)|0)|0);
   $16 = (($15) + ($13<<3)|0);
   HEAPF64[$16>>3] = $12;
   $17 = $j;
   $18 = (($17) + 1)|0;
   $j = $18;
  }
  $j = 0;
  while(1) {
   $19 = $j;
   $20 = ($19|0)<(3);
   if (!($20)) {
    break;
   }
   $k = 0;
   while(1) {
    $21 = $k;
    $22 = $2;
    $23 = ($21|0)<($22|0);
    if (!($23)) {
     break;
    }
    $24 = $i;
    $25 = $k;
    $26 = $0;
    $27 = (($26) + (($25*24)|0)|0);
    $28 = (($27) + ($24<<3)|0);
    $29 = +HEAPF64[$28>>3];
    $30 = $j;
    $31 = $k;
    $32 = $0;
    $33 = (($32) + (($31*24)|0)|0);
    $34 = (($33) + ($30<<3)|0);
    $35 = +HEAPF64[$34>>3];
    $36 = $29 * $35;
    $37 = $j;
    $38 = $i;
    $39 = (($work) + (($38*48)|0)|0);
    $40 = (($39) + ($37<<3)|0);
    $41 = +HEAPF64[$40>>3];
    $42 = $41 + $36;
    HEAPF64[$40>>3] = $42;
    $43 = $k;
    $44 = (($43) + 1)|0;
    $k = $44;
   }
   $45 = $j;
   $46 = (($45) + 1)|0;
   $j = $46;
  }
  $47 = $i;
  $48 = (($47) + 1)|0;
  $i = $48;
 }
 $i = 0;
 while(1) {
  $49 = $i;
  $50 = ($49|0)<(3);
  if (!($50)) {
   break;
  }
  $51 = $i;
  $52 = $i;
  $53 = (($work) + (($52*48)|0)|0);
  $54 = (($53) + ($51<<3)|0);
  $55 = +HEAPF64[$54>>3];
  $num = $55;
  $j = 0;
  while(1) {
   $56 = $j;
   $57 = ($56|0)<(6);
   if (!($57)) {
    break;
   }
   $58 = $num;
   $59 = $j;
   $60 = $i;
   $61 = (($work) + (($60*48)|0)|0);
   $62 = (($61) + ($59<<3)|0);
   $63 = +HEAPF64[$62>>3];
   $64 = $63 / $58;
   HEAPF64[$62>>3] = $64;
   $65 = $j;
   $66 = (($65) + 1)|0;
   $j = $66;
  }
  $k = 0;
  while(1) {
   $67 = $k;
   $68 = ($67|0)<(3);
   if (!($68)) {
    break;
   }
   $69 = $k;
   $70 = $i;
   $71 = ($69|0)==($70|0);
   if ($71) {
   } else {
    $72 = $i;
    $73 = $k;
    $74 = (($work) + (($73*48)|0)|0);
    $75 = (($74) + ($72<<3)|0);
    $76 = +HEAPF64[$75>>3];
    $num = $76;
    $j = 0;
    while(1) {
     $77 = $j;
     $78 = ($77|0)<(6);
     if (!($78)) {
      break;
     }
     $79 = $j;
     $80 = $i;
     $81 = (($work) + (($80*48)|0)|0);
     $82 = (($81) + ($79<<3)|0);
     $83 = +HEAPF64[$82>>3];
     $84 = $num;
     $85 = $83 * $84;
     $86 = $j;
     $87 = $k;
     $88 = (($work) + (($87*48)|0)|0);
     $89 = (($88) + ($86<<3)|0);
     $90 = +HEAPF64[$89>>3];
     $91 = $90 - $85;
     HEAPF64[$89>>3] = $91;
     $92 = $j;
     $93 = (($92) + 1)|0;
     $j = $93;
    }
   }
   $94 = $k;
   $95 = (($94) + 1)|0;
   $k = $95;
  }
  $96 = $i;
  $97 = (($96) + 1)|0;
  $i = $97;
 }
 $i = 0;
 while(1) {
  $98 = $i;
  $99 = $2;
  $100 = ($98|0)<($99|0);
  if (!($100)) {
   break;
  }
  $j = 0;
  while(1) {
   $101 = $j;
   $102 = ($101|0)<(3);
   if (!($102)) {
    break;
   }
   $k = 0;
   $103 = $j;
   $104 = $i;
   $105 = $1;
   $106 = (($105) + (($104*24)|0)|0);
   $107 = (($106) + ($103<<3)|0);
   HEAPF64[$107>>3] = 0.0;
   while(1) {
    $108 = $k;
    $109 = ($108|0)<(3);
    if (!($109)) {
     break;
    }
    $110 = $k;
    $111 = (($110) + 3)|0;
    $112 = $j;
    $113 = (($work) + (($112*48)|0)|0);
    $114 = (($113) + ($111<<3)|0);
    $115 = +HEAPF64[$114>>3];
    $116 = $k;
    $117 = $i;
    $118 = $0;
    $119 = (($118) + (($117*24)|0)|0);
    $120 = (($119) + ($116<<3)|0);
    $121 = +HEAPF64[$120>>3];
    $122 = $115 * $121;
    $123 = $j;
    $124 = $i;
    $125 = $1;
    $126 = (($125) + (($124*24)|0)|0);
    $127 = (($126) + ($123<<3)|0);
    $128 = +HEAPF64[$127>>3];
    $129 = $128 + $122;
    HEAPF64[$127>>3] = $129;
    $130 = $k;
    $131 = (($130) + 1)|0;
    $k = $131;
   }
   $132 = $j;
   $133 = (($132) + 1)|0;
   $j = $133;
  }
  $134 = $i;
  $135 = (($134) + 1)|0;
  $i = $135;
 }
 STACKTOP = sp;return;
}
function _cam_xyz_coeff($rgb_cam,$cam_xyz) {
 $rgb_cam = $rgb_cam|0;
 $cam_xyz = $cam_xyz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $cam_rgb = 0, $i = 0, $inverse = 0, $j = 0, $k = 0, $num = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cam_rgb = sp + 96|0;
 $inverse = sp;
 $0 = $rgb_cam;
 $1 = $cam_xyz;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = HEAP32[132304>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if (!($4)) {
   break;
  }
  $j = 0;
  while(1) {
   $5 = $j;
   $6 = ($5|0)<(3);
   if (!($6)) {
    break;
   }
   $k = 0;
   $7 = $j;
   $8 = $i;
   $9 = (($cam_rgb) + (($8*24)|0)|0);
   $10 = (($9) + ($7<<3)|0);
   HEAPF64[$10>>3] = 0.0;
   while(1) {
    $11 = $k;
    $12 = ($11|0)<(3);
    if (!($12)) {
     break;
    }
    $13 = $k;
    $14 = $i;
    $15 = $1;
    $16 = (($15) + (($14*24)|0)|0);
    $17 = (($16) + ($13<<3)|0);
    $18 = +HEAPF64[$17>>3];
    $19 = $j;
    $20 = $k;
    $21 = (256 + (($20*24)|0)|0);
    $22 = (($21) + ($19<<3)|0);
    $23 = +HEAPF64[$22>>3];
    $24 = $18 * $23;
    $25 = $j;
    $26 = $i;
    $27 = (($cam_rgb) + (($26*24)|0)|0);
    $28 = (($27) + ($25<<3)|0);
    $29 = +HEAPF64[$28>>3];
    $30 = $29 + $24;
    HEAPF64[$28>>3] = $30;
    $31 = $k;
    $32 = (($31) + 1)|0;
    $k = $32;
   }
   $33 = $j;
   $34 = (($33) + 1)|0;
   $j = $34;
  }
  $35 = $i;
  $36 = (($35) + 1)|0;
  $i = $36;
 }
 $i = 0;
 while(1) {
  $37 = $i;
  $38 = HEAP32[132304>>2]|0;
  $39 = ($37>>>0)<($38>>>0);
  if (!($39)) {
   break;
  }
  $j = 0;
  $num = 0.0;
  while(1) {
   $40 = $j;
   $41 = ($40|0)<(3);
   if (!($41)) {
    break;
   }
   $42 = $j;
   $43 = $i;
   $44 = (($cam_rgb) + (($43*24)|0)|0);
   $45 = (($44) + ($42<<3)|0);
   $46 = +HEAPF64[$45>>3];
   $47 = $num;
   $48 = $47 + $46;
   $num = $48;
   $49 = $j;
   $50 = (($49) + 1)|0;
   $j = $50;
  }
  $j = 0;
  while(1) {
   $51 = $j;
   $52 = ($51|0)<(3);
   if (!($52)) {
    break;
   }
   $53 = $num;
   $54 = $j;
   $55 = $i;
   $56 = (($cam_rgb) + (($55*24)|0)|0);
   $57 = (($56) + ($54<<3)|0);
   $58 = +HEAPF64[$57>>3];
   $59 = $58 / $53;
   HEAPF64[$57>>3] = $59;
   $60 = $j;
   $61 = (($60) + 1)|0;
   $j = $61;
  }
  $62 = $num;
  $63 = 1.0 / $62;
  $64 = $63;
  $65 = $i;
  $66 = (132080 + ($65<<2)|0);
  HEAPF32[$66>>2] = $64;
  $67 = $i;
  $68 = (($67) + 1)|0;
  $i = $68;
 }
 $69 = HEAP32[132304>>2]|0;
 _pseudoinverse($cam_rgb,$inverse,$69);
 $i = 0;
 while(1) {
  $70 = $i;
  $71 = ($70|0)<(3);
  if (!($71)) {
   break;
  }
  $j = 0;
  while(1) {
   $72 = $j;
   $73 = HEAP32[132304>>2]|0;
   $74 = ($72>>>0)<($73>>>0);
   if (!($74)) {
    break;
   }
   $75 = $i;
   $76 = $j;
   $77 = (($inverse) + (($76*24)|0)|0);
   $78 = (($77) + ($75<<3)|0);
   $79 = +HEAPF64[$78>>3];
   $80 = $79;
   $81 = $j;
   $82 = $i;
   $83 = $0;
   $84 = (($83) + ($82<<4)|0);
   $85 = (($84) + ($81<<2)|0);
   HEAPF32[$85>>2] = $80;
   $86 = $j;
   $87 = (($86) + 1)|0;
   $j = $87;
  }
  $88 = $i;
  $89 = (($88) + 1)|0;
  $i = $89;
 }
 STACKTOP = sp;return;
}
function _hat_transform($temp,$base,$st,$size,$sc) {
 $temp = $temp|0;
 $base = $base|0;
 $st = $st|0;
 $size = $size|0;
 $sc = $sc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $temp;
 $1 = $base;
 $2 = $st;
 $3 = $size;
 $4 = $sc;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $4;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $9 = $i;
  $10 = Math_imul($8, $9)|0;
  $11 = $1;
  $12 = (($11) + ($10<<2)|0);
  $13 = +HEAPF32[$12>>2];
  $14 = 2.0 * $13;
  $15 = $2;
  $16 = $4;
  $17 = $i;
  $18 = (($16) - ($17))|0;
  $19 = Math_imul($15, $18)|0;
  $20 = $1;
  $21 = (($20) + ($19<<2)|0);
  $22 = +HEAPF32[$21>>2];
  $23 = $14 + $22;
  $24 = $2;
  $25 = $i;
  $26 = $4;
  $27 = (($25) + ($26))|0;
  $28 = Math_imul($24, $27)|0;
  $29 = $1;
  $30 = (($29) + ($28<<2)|0);
  $31 = +HEAPF32[$30>>2];
  $32 = $23 + $31;
  $33 = $i;
  $34 = $0;
  $35 = (($34) + ($33<<2)|0);
  HEAPF32[$35>>2] = $32;
  $36 = $i;
  $37 = (($36) + 1)|0;
  $i = $37;
 }
 while(1) {
  $38 = $i;
  $39 = $4;
  $40 = (($38) + ($39))|0;
  $41 = $3;
  $42 = ($40|0)<($41|0);
  if (!($42)) {
   break;
  }
  $43 = $2;
  $44 = $i;
  $45 = Math_imul($43, $44)|0;
  $46 = $1;
  $47 = (($46) + ($45<<2)|0);
  $48 = +HEAPF32[$47>>2];
  $49 = 2.0 * $48;
  $50 = $2;
  $51 = $i;
  $52 = $4;
  $53 = (($51) - ($52))|0;
  $54 = Math_imul($50, $53)|0;
  $55 = $1;
  $56 = (($55) + ($54<<2)|0);
  $57 = +HEAPF32[$56>>2];
  $58 = $49 + $57;
  $59 = $2;
  $60 = $i;
  $61 = $4;
  $62 = (($60) + ($61))|0;
  $63 = Math_imul($59, $62)|0;
  $64 = $1;
  $65 = (($64) + ($63<<2)|0);
  $66 = +HEAPF32[$65>>2];
  $67 = $58 + $66;
  $68 = $i;
  $69 = $0;
  $70 = (($69) + ($68<<2)|0);
  HEAPF32[$70>>2] = $67;
  $71 = $i;
  $72 = (($71) + 1)|0;
  $i = $72;
 }
 while(1) {
  $73 = $i;
  $74 = $3;
  $75 = ($73|0)<($74|0);
  if (!($75)) {
   break;
  }
  $76 = $2;
  $77 = $i;
  $78 = Math_imul($76, $77)|0;
  $79 = $1;
  $80 = (($79) + ($78<<2)|0);
  $81 = +HEAPF32[$80>>2];
  $82 = 2.0 * $81;
  $83 = $2;
  $84 = $i;
  $85 = $4;
  $86 = (($84) - ($85))|0;
  $87 = Math_imul($83, $86)|0;
  $88 = $1;
  $89 = (($88) + ($87<<2)|0);
  $90 = +HEAPF32[$89>>2];
  $91 = $82 + $90;
  $92 = $2;
  $93 = $3;
  $94 = $93<<1;
  $95 = (($94) - 2)|0;
  $96 = $i;
  $97 = $4;
  $98 = (($96) + ($97))|0;
  $99 = (($95) - ($98))|0;
  $100 = Math_imul($92, $99)|0;
  $101 = $1;
  $102 = (($101) + ($100<<2)|0);
  $103 = +HEAPF32[$102>>2];
  $104 = $91 + $103;
  $105 = $i;
  $106 = $0;
  $107 = (($106) + ($105<<2)|0);
  HEAPF32[$107>>2] = $104;
  $108 = $i;
  $109 = (($108) + 1)|0;
  $i = $109;
 }
 STACKTOP = sp;return;
}
function _wavelet_denoise() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0.0, $295 = 0.0, $296 = 0.0;
 var $297 = 0.0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0;
 var $350 = 0.0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0.0;
 var $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0.0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0.0, $552 = 0.0, $553 = 0.0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0.0, $566 = 0.0;
 var $567 = 0.0, $568 = 0.0, $569 = 0.0, $57 = 0, $570 = 0, $571 = 0.0, $572 = 0.0, $573 = 0.0, $574 = 0.0, $575 = 0.0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0.0, $603 = 0.0, $604 = 0.0, $605 = 0.0, $606 = 0.0, $607 = 0.0, $608 = 0.0, $609 = 0.0, $61 = 0, $610 = 0.0, $611 = 0, $612 = 0.0, $613 = 0.0, $614 = 0.0, $615 = 0.0, $616 = 0.0, $617 = 0, $618 = 0.0, $619 = 0.0, $62 = 0;
 var $620 = 0.0, $621 = 0.0, $622 = 0.0, $623 = 0.0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0.0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0, $631 = 0, $632 = 0.0, $633 = 0.0, $634 = 0.0, $635 = 0.0, $636 = 0.0, $637 = 0.0, $638 = 0.0;
 var $639 = 0.0, $64 = 0, $640 = 0.0, $641 = 0, $642 = 0, $643 = 0, $644 = 0.0, $645 = 0.0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0.0, $652 = 0.0, $653 = 0, $654 = 0, $655 = 0.0, $656 = 0.0;
 var $657 = 0.0, $658 = 0.0, $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0.0, $663 = 0.0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0.0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $avg = 0.0;
 var $blk = 0, $c = 0, $col = 0, $diff = 0.0, $fimg = 0, $hpass = 0, $i = 0, $lev = 0, $lpass = 0, $mul = 0, $nc = 0, $row = 0, $scale = 0, $size = 0, $temp = 0, $thold = 0.0, $vararg_buffer = 0, $window = 0, $wlast = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $mul = sp + 88|0;
 $blk = sp + 32|0;
 $window = sp + 48|0;
 $fimg = 0;
 $scale = 1;
 $0 = HEAP32[168>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  $2 = HEAP32[_stderr>>2]|0;
  (_fprintf(($2|0),(190864|0),($vararg_buffer|0))|0);
 }
 while(1) {
  $3 = HEAP32[132400>>2]|0;
  $4 = $scale;
  $5 = $3 << $4;
  $6 = ($5>>>0)<(65536);
  if (!($6)) {
   break;
  }
  $7 = $scale;
  $8 = (($7) + 1)|0;
  $scale = $8;
 }
 $9 = $scale;
 $10 = (($9) + -1)|0;
 $scale = $10;
 $11 = HEAP32[132400>>2]|0;
 $12 = $11 << $10;
 HEAP32[132400>>2] = $12;
 $13 = $scale;
 $14 = HEAP32[132392>>2]|0;
 $15 = $14 << $13;
 HEAP32[132392>>2] = $15;
 $c = 0;
 while(1) {
  $16 = $c;
  $17 = ($16|0)<(4);
  if (!($17)) {
   break;
  }
  $18 = $scale;
  $19 = $c;
  $20 = (134720 + ($19<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = $22 << $18;
  $24 = $23&65535;
  HEAP16[$20>>1] = $24;
  $25 = $c;
  $26 = (($25) + 1)|0;
  $c = $26;
 }
 $27 = HEAP16[190888>>1]|0;
 $28 = $27&65535;
 $29 = HEAP16[132136>>1]|0;
 $30 = $29&65535;
 $31 = Math_imul($28, $30)|0;
 $size = $31;
 $32 = ($31|0)<(357892096);
 if ($32) {
  $33 = $size;
  $34 = ($33*3)|0;
  $35 = HEAP16[190888>>1]|0;
  $36 = $35&65535;
  $37 = (($34) + ($36))|0;
  $38 = HEAP16[132136>>1]|0;
  $39 = $38&65535;
  $40 = (($37) + ($39))|0;
  $41 = $40<<2;
  $42 = (_malloc($41)|0);
  $fimg = $42;
 }
 $43 = $fimg;
 _merror($43,190896);
 $44 = $fimg;
 $45 = $size;
 $46 = ($45*3)|0;
 $47 = (($44) + ($46<<2)|0);
 $temp = $47;
 $48 = HEAP32[132304>>2]|0;
 $nc = $48;
 $49 = ($48|0)==(3);
 if ($49) {
  $50 = HEAP32[600>>2]|0;
  $51 = ($50|0)!=(0);
  if ($51) {
   $52 = $nc;
   $53 = (($52) + 1)|0;
   $nc = $53;
  }
 }
 $c = 0;
 while(1) {
  $54 = $c;
  $55 = $nc;
  $56 = ($54|0)<($55|0);
  if (!($56)) {
   break;
  }
  $i = 0;
  while(1) {
   $57 = $i;
   $58 = $size;
   $59 = ($57|0)<($58|0);
   if (!($59)) {
    break;
   }
   $60 = $c;
   $61 = $i;
   $62 = HEAP32[132144>>2]|0;
   $63 = (($62) + ($61<<3)|0);
   $64 = (($63) + ($60<<1)|0);
   $65 = HEAP16[$64>>1]|0;
   $66 = $65&65535;
   $67 = $scale;
   $68 = $66 << $67;
   $69 = (+($68|0));
   $70 = (+Math_sqrt((+$69)));
   $71 = 256.0 * $70;
   $72 = $71;
   $73 = $i;
   $74 = $fimg;
   $75 = (($74) + ($73<<2)|0);
   HEAPF32[$75>>2] = $72;
   $76 = $i;
   $77 = (($76) + 1)|0;
   $i = $77;
  }
  $lev = 0;
  $hpass = 0;
  while(1) {
   $78 = $lev;
   $79 = ($78|0)<(5);
   if (!($79)) {
    break;
   }
   $80 = $size;
   $81 = $lev;
   $82 = $81 & 1;
   $83 = (($82) + 1)|0;
   $84 = Math_imul($80, $83)|0;
   $lpass = $84;
   $row = 0;
   while(1) {
    $85 = $row;
    $86 = HEAP16[190888>>1]|0;
    $87 = $86&65535;
    $88 = ($85|0)<($87|0);
    if (!($88)) {
     break;
    }
    $89 = $temp;
    $90 = $fimg;
    $91 = $hpass;
    $92 = (($90) + ($91<<2)|0);
    $93 = $row;
    $94 = HEAP16[132136>>1]|0;
    $95 = $94&65535;
    $96 = Math_imul($93, $95)|0;
    $97 = (($92) + ($96<<2)|0);
    $98 = HEAP16[132136>>1]|0;
    $99 = $98&65535;
    $100 = $lev;
    $101 = 1 << $100;
    _hat_transform($89,$97,1,$99,$101);
    $col = 0;
    while(1) {
     $102 = $col;
     $103 = HEAP16[132136>>1]|0;
     $104 = $103&65535;
     $105 = ($102|0)<($104|0);
     if (!($105)) {
      break;
     }
     $106 = $col;
     $107 = $temp;
     $108 = (($107) + ($106<<2)|0);
     $109 = +HEAPF32[$108>>2];
     $110 = $109;
     $111 = $110 * 0.25;
     $112 = $111;
     $113 = $lpass;
     $114 = $row;
     $115 = HEAP16[132136>>1]|0;
     $116 = $115&65535;
     $117 = Math_imul($114, $116)|0;
     $118 = (($113) + ($117))|0;
     $119 = $col;
     $120 = (($118) + ($119))|0;
     $121 = $fimg;
     $122 = (($121) + ($120<<2)|0);
     HEAPF32[$122>>2] = $112;
     $123 = $col;
     $124 = (($123) + 1)|0;
     $col = $124;
    }
    $125 = $row;
    $126 = (($125) + 1)|0;
    $row = $126;
   }
   $col = 0;
   while(1) {
    $127 = $col;
    $128 = HEAP16[132136>>1]|0;
    $129 = $128&65535;
    $130 = ($127|0)<($129|0);
    if (!($130)) {
     break;
    }
    $131 = $temp;
    $132 = $fimg;
    $133 = $lpass;
    $134 = (($132) + ($133<<2)|0);
    $135 = $col;
    $136 = (($134) + ($135<<2)|0);
    $137 = HEAP16[132136>>1]|0;
    $138 = $137&65535;
    $139 = HEAP16[190888>>1]|0;
    $140 = $139&65535;
    $141 = $lev;
    $142 = 1 << $141;
    _hat_transform($131,$136,$138,$140,$142);
    $row = 0;
    while(1) {
     $143 = $row;
     $144 = HEAP16[190888>>1]|0;
     $145 = $144&65535;
     $146 = ($143|0)<($145|0);
     if (!($146)) {
      break;
     }
     $147 = $row;
     $148 = $temp;
     $149 = (($148) + ($147<<2)|0);
     $150 = +HEAPF32[$149>>2];
     $151 = $150;
     $152 = $151 * 0.25;
     $153 = $152;
     $154 = $lpass;
     $155 = $row;
     $156 = HEAP16[132136>>1]|0;
     $157 = $156&65535;
     $158 = Math_imul($155, $157)|0;
     $159 = (($154) + ($158))|0;
     $160 = $col;
     $161 = (($159) + ($160))|0;
     $162 = $fimg;
     $163 = (($162) + ($161<<2)|0);
     HEAPF32[$163>>2] = $153;
     $164 = $row;
     $165 = (($164) + 1)|0;
     $row = $165;
    }
    $166 = $col;
    $167 = (($166) + 1)|0;
    $col = $167;
   }
   $168 = +HEAPF32[128>>2];
   $169 = $lev;
   $170 = (190832 + ($169<<2)|0);
   $171 = +HEAPF32[$170>>2];
   $172 = $168 * $171;
   $thold = $172;
   $i = 0;
   while(1) {
    $173 = $i;
    $174 = $size;
    $175 = ($173|0)<($174|0);
    if (!($175)) {
     break;
    }
    $176 = $lpass;
    $177 = $i;
    $178 = (($176) + ($177))|0;
    $179 = $fimg;
    $180 = (($179) + ($178<<2)|0);
    $181 = +HEAPF32[$180>>2];
    $182 = $hpass;
    $183 = $i;
    $184 = (($182) + ($183))|0;
    $185 = $fimg;
    $186 = (($185) + ($184<<2)|0);
    $187 = +HEAPF32[$186>>2];
    $188 = $187 - $181;
    HEAPF32[$186>>2] = $188;
    $189 = $hpass;
    $190 = $i;
    $191 = (($189) + ($190))|0;
    $192 = $fimg;
    $193 = (($192) + ($191<<2)|0);
    $194 = +HEAPF32[$193>>2];
    $195 = $thold;
    $196 = -$195;
    $197 = $194 < $196;
    if ($197) {
     $198 = $thold;
     $199 = $hpass;
     $200 = $i;
     $201 = (($199) + ($200))|0;
     $202 = $fimg;
     $203 = (($202) + ($201<<2)|0);
     $204 = +HEAPF32[$203>>2];
     $205 = $204 + $198;
     HEAPF32[$203>>2] = $205;
    } else {
     $206 = $hpass;
     $207 = $i;
     $208 = (($206) + ($207))|0;
     $209 = $fimg;
     $210 = (($209) + ($208<<2)|0);
     $211 = +HEAPF32[$210>>2];
     $212 = $thold;
     $213 = $211 > $212;
     if ($213) {
      $214 = $thold;
      $215 = $hpass;
      $216 = $i;
      $217 = (($215) + ($216))|0;
      $218 = $fimg;
      $219 = (($218) + ($217<<2)|0);
      $220 = +HEAPF32[$219>>2];
      $221 = $220 - $214;
      HEAPF32[$219>>2] = $221;
     } else {
      $222 = $hpass;
      $223 = $i;
      $224 = (($222) + ($223))|0;
      $225 = $fimg;
      $226 = (($225) + ($224<<2)|0);
      HEAPF32[$226>>2] = 0.0;
     }
    }
    $227 = $hpass;
    $228 = ($227|0)!=(0);
    if ($228) {
     $229 = $hpass;
     $230 = $i;
     $231 = (($229) + ($230))|0;
     $232 = $fimg;
     $233 = (($232) + ($231<<2)|0);
     $234 = +HEAPF32[$233>>2];
     $235 = $i;
     $236 = $fimg;
     $237 = (($236) + ($235<<2)|0);
     $238 = +HEAPF32[$237>>2];
     $239 = $238 + $234;
     HEAPF32[$237>>2] = $239;
    }
    $240 = $i;
    $241 = (($240) + 1)|0;
    $i = $241;
   }
   $242 = $lpass;
   $hpass = $242;
   $243 = $lev;
   $244 = (($243) + 1)|0;
   $lev = $244;
  }
  $i = 0;
  while(1) {
   $245 = $i;
   $246 = $size;
   $247 = ($245|0)<($246|0);
   if (!($247)) {
    break;
   }
   $248 = $i;
   $249 = $fimg;
   $250 = (($249) + ($248<<2)|0);
   $251 = +HEAPF32[$250>>2];
   $252 = $lpass;
   $253 = $i;
   $254 = (($252) + ($253))|0;
   $255 = $fimg;
   $256 = (($255) + ($254<<2)|0);
   $257 = +HEAPF32[$256>>2];
   $258 = $251 + $257;
   $259 = $i;
   $260 = $fimg;
   $261 = (($260) + ($259<<2)|0);
   $262 = +HEAPF32[$261>>2];
   $263 = $lpass;
   $264 = $i;
   $265 = (($263) + ($264))|0;
   $266 = $fimg;
   $267 = (($266) + ($265<<2)|0);
   $268 = +HEAPF32[$267>>2];
   $269 = $262 + $268;
   $270 = $258 * $269;
   $271 = $270 / 65536.0;
   $272 = (~~(($271)));
   $273 = ($272|0)<(65535);
   if ($273) {
    $274 = $i;
    $275 = $fimg;
    $276 = (($275) + ($274<<2)|0);
    $277 = +HEAPF32[$276>>2];
    $278 = $lpass;
    $279 = $i;
    $280 = (($278) + ($279))|0;
    $281 = $fimg;
    $282 = (($281) + ($280<<2)|0);
    $283 = +HEAPF32[$282>>2];
    $284 = $277 + $283;
    $285 = $i;
    $286 = $fimg;
    $287 = (($286) + ($285<<2)|0);
    $288 = +HEAPF32[$287>>2];
    $289 = $lpass;
    $290 = $i;
    $291 = (($289) + ($290))|0;
    $292 = $fimg;
    $293 = (($292) + ($291<<2)|0);
    $294 = +HEAPF32[$293>>2];
    $295 = $288 + $294;
    $296 = $284 * $295;
    $297 = $296 / 65536.0;
    $298 = (~~(($297)));
    $300 = $298;
   } else {
    $300 = 65535;
   }
   $299 = (0)>($300|0);
   if ($299) {
    $353 = 0;
   } else {
    $301 = $i;
    $302 = $fimg;
    $303 = (($302) + ($301<<2)|0);
    $304 = +HEAPF32[$303>>2];
    $305 = $lpass;
    $306 = $i;
    $307 = (($305) + ($306))|0;
    $308 = $fimg;
    $309 = (($308) + ($307<<2)|0);
    $310 = +HEAPF32[$309>>2];
    $311 = $304 + $310;
    $312 = $i;
    $313 = $fimg;
    $314 = (($313) + ($312<<2)|0);
    $315 = +HEAPF32[$314>>2];
    $316 = $lpass;
    $317 = $i;
    $318 = (($316) + ($317))|0;
    $319 = $fimg;
    $320 = (($319) + ($318<<2)|0);
    $321 = +HEAPF32[$320>>2];
    $322 = $315 + $321;
    $323 = $311 * $322;
    $324 = $323 / 65536.0;
    $325 = (~~(($324)));
    $326 = ($325|0)<(65535);
    if ($326) {
     $327 = $i;
     $328 = $fimg;
     $329 = (($328) + ($327<<2)|0);
     $330 = +HEAPF32[$329>>2];
     $331 = $lpass;
     $332 = $i;
     $333 = (($331) + ($332))|0;
     $334 = $fimg;
     $335 = (($334) + ($333<<2)|0);
     $336 = +HEAPF32[$335>>2];
     $337 = $330 + $336;
     $338 = $i;
     $339 = $fimg;
     $340 = (($339) + ($338<<2)|0);
     $341 = +HEAPF32[$340>>2];
     $342 = $lpass;
     $343 = $i;
     $344 = (($342) + ($343))|0;
     $345 = $fimg;
     $346 = (($345) + ($344<<2)|0);
     $347 = +HEAPF32[$346>>2];
     $348 = $341 + $347;
     $349 = $337 * $348;
     $350 = $349 / 65536.0;
     $351 = (~~(($350)));
     $697 = $351;
    } else {
     $697 = 65535;
    }
    $353 = $697;
   }
   $352 = $353&65535;
   $354 = $c;
   $355 = $i;
   $356 = HEAP32[132144>>2]|0;
   $357 = (($356) + ($355<<3)|0);
   $358 = (($357) + ($354<<1)|0);
   HEAP16[$358>>1] = $352;
   $359 = $i;
   $360 = (($359) + 1)|0;
   $i = $360;
  }
  $361 = $c;
  $362 = (($361) + 1)|0;
  $c = $362;
 }
 $363 = HEAP32[600>>2]|0;
 $364 = ($363|0)!=(0);
 if (!($364)) {
  $696 = $fimg;
  _free($696);
  STACKTOP = sp;return;
 }
 $365 = HEAP32[132304>>2]|0;
 $366 = ($365|0)==(3);
 if (!($366)) {
  $696 = $fimg;
  _free($696);
  STACKTOP = sp;return;
 }
 $row = 0;
 while(1) {
  $367 = $row;
  $368 = ($367|0)<(2);
  if (!($368)) {
   break;
  }
  $369 = HEAP32[600>>2]|0;
  $370 = $row;
  $371 = (($370) + 1)|0;
  $372 = $371 << 1;
  $373 = $372 & 14;
  $374 = (($373) + 0)|0;
  $375 = $374 << 1;
  $376 = $369 >>> $375;
  $377 = $376 & 3;
  $378 = $377 | 1;
  $379 = (132080 + ($378<<2)|0);
  $380 = +HEAPF32[$379>>2];
  $381 = $380;
  $382 = 0.125 * $381;
  $383 = HEAP32[600>>2]|0;
  $384 = $row;
  $385 = $384 << 1;
  $386 = $385 & 14;
  $387 = (($386) + 0)|0;
  $388 = $387 << 1;
  $389 = $383 >>> $388;
  $390 = $389 & 3;
  $391 = $390 | 1;
  $392 = (132080 + ($391<<2)|0);
  $393 = +HEAPF32[$392>>2];
  $394 = $393;
  $395 = $382 / $394;
  $396 = $395;
  $397 = $row;
  $398 = (($mul) + ($397<<2)|0);
  HEAPF32[$398>>2] = $396;
  $399 = HEAP32[600>>2]|0;
  $400 = $row;
  $401 = $400 << 1;
  $402 = $401 & 14;
  $403 = (($402) + 0)|0;
  $404 = $403 << 1;
  $405 = $399 >>> $404;
  $406 = $405 & 3;
  $407 = $406 | 1;
  $408 = (134720 + ($407<<1)|0);
  $409 = HEAP16[$408>>1]|0;
  $410 = $409&65535;
  $411 = $row;
  $412 = (($blk) + ($411<<2)|0);
  HEAP32[$412>>2] = $410;
  $413 = $row;
  $414 = (($413) + 1)|0;
  $row = $414;
 }
 $i = 0;
 while(1) {
  $415 = $i;
  $416 = ($415|0)<(4);
  if (!($416)) {
   break;
  }
  $417 = $fimg;
  $418 = HEAP16[132120>>1]|0;
  $419 = $418&65535;
  $420 = $i;
  $421 = Math_imul($419, $420)|0;
  $422 = (($417) + ($421<<1)|0);
  $423 = $i;
  $424 = (($window) + ($423<<2)|0);
  HEAP32[$424>>2] = $422;
  $425 = $i;
  $426 = (($425) + 1)|0;
  $i = $426;
 }
 $wlast = -1;
 $row = 1;
 while(1) {
  $427 = $row;
  $428 = HEAP16[132112>>1]|0;
  $429 = $428&65535;
  $430 = (($429) - 1)|0;
  $431 = ($427|0)<($430|0);
  if (!($431)) {
   break;
  }
  while(1) {
   $432 = $wlast;
   $433 = $row;
   $434 = (($433) + 1)|0;
   $435 = ($432|0)<($434|0);
   if (!($435)) {
    break;
   }
   $436 = $wlast;
   $437 = (($436) + 1)|0;
   $wlast = $437;
   $i = 0;
   while(1) {
    $438 = $i;
    $439 = ($438|0)<(4);
    if (!($439)) {
     break;
    }
    $440 = $i;
    $441 = (($window) + ($440<<2)|0);
    $442 = HEAP32[$441>>2]|0;
    $443 = $i;
    $444 = (($443) + 3)|0;
    $445 = $444 & 3;
    $446 = (($window) + ($445<<2)|0);
    HEAP32[$446>>2] = $442;
    $447 = $i;
    $448 = (($447) + 1)|0;
    $i = $448;
   }
   $449 = HEAP32[600>>2]|0;
   $450 = $wlast;
   $451 = $450 << 1;
   $452 = $451 & 14;
   $453 = (($452) + 1)|0;
   $454 = $453 << 1;
   $455 = $449 >>> $454;
   $456 = $455 & 3;
   $457 = $456 & 1;
   $col = $457;
   while(1) {
    $458 = $col;
    $459 = HEAP16[132120>>1]|0;
    $460 = $459&65535;
    $461 = ($458|0)<($460|0);
    if (!($461)) {
     break;
    }
    $462 = HEAP32[600>>2]|0;
    $463 = $wlast;
    $464 = $463 << 1;
    $465 = $464 & 14;
    $466 = $col;
    $467 = $466 & 1;
    $468 = (($465) + ($467))|0;
    $469 = $468 << 1;
    $470 = $462 >>> $469;
    $471 = $470 & 3;
    $472 = $wlast;
    $473 = HEAP16[132128>>1]|0;
    $474 = $473&65535;
    $475 = $472 >> $474;
    $476 = HEAP16[132136>>1]|0;
    $477 = $476&65535;
    $478 = Math_imul($475, $477)|0;
    $479 = $col;
    $480 = HEAP16[132128>>1]|0;
    $481 = $480&65535;
    $482 = $479 >> $481;
    $483 = (($478) + ($482))|0;
    $484 = HEAP32[132144>>2]|0;
    $485 = (($484) + ($483<<3)|0);
    $486 = (($485) + ($471<<1)|0);
    $487 = HEAP16[$486>>1]|0;
    $488 = $col;
    $489 = (($window) + 8|0);
    $490 = HEAP32[$489>>2]|0;
    $491 = (($490) + ($488<<1)|0);
    HEAP16[$491>>1] = $487;
    $492 = $col;
    $493 = (($492) + 2)|0;
    $col = $493;
   }
  }
  $494 = +HEAPF32[128>>2];
  $495 = $494 / 512.0;
  $thold = $495;
  $496 = HEAP32[600>>2]|0;
  $497 = $row;
  $498 = $497 << 1;
  $499 = $498 & 14;
  $500 = (($499) + 0)|0;
  $501 = $500 << 1;
  $502 = $496 >>> $501;
  $503 = $502 & 3;
  $504 = $503 & 1;
  $505 = (($504) + 1)|0;
  $col = $505;
  while(1) {
   $506 = $col;
   $507 = HEAP16[132120>>1]|0;
   $508 = $507&65535;
   $509 = (($508) - 1)|0;
   $510 = ($506|0)<($509|0);
   if (!($510)) {
    break;
   }
   $511 = $col;
   $512 = (($511) - 1)|0;
   $513 = HEAP32[$window>>2]|0;
   $514 = (($513) + ($512<<1)|0);
   $515 = HEAP16[$514>>1]|0;
   $516 = $515&65535;
   $517 = $col;
   $518 = (($517) + 1)|0;
   $519 = HEAP32[$window>>2]|0;
   $520 = (($519) + ($518<<1)|0);
   $521 = HEAP16[$520>>1]|0;
   $522 = $521&65535;
   $523 = (($516) + ($522))|0;
   $524 = $col;
   $525 = (($524) - 1)|0;
   $526 = (($window) + 8|0);
   $527 = HEAP32[$526>>2]|0;
   $528 = (($527) + ($525<<1)|0);
   $529 = HEAP16[$528>>1]|0;
   $530 = $529&65535;
   $531 = (($523) + ($530))|0;
   $532 = $col;
   $533 = (($532) + 1)|0;
   $534 = (($window) + 8|0);
   $535 = HEAP32[$534>>2]|0;
   $536 = (($535) + ($533<<1)|0);
   $537 = HEAP16[$536>>1]|0;
   $538 = $537&65535;
   $539 = (($531) + ($538))|0;
   $540 = $row;
   $541 = $540 ^ -1;
   $542 = $541 & 1;
   $543 = (($blk) + ($542<<2)|0);
   $544 = HEAP32[$543>>2]|0;
   $545 = $544<<2;
   $546 = (($539) - ($545))|0;
   $547 = (+($546|0));
   $548 = $row;
   $549 = $548 & 1;
   $550 = (($mul) + ($549<<2)|0);
   $551 = +HEAPF32[$550>>2];
   $552 = $547 * $551;
   $553 = $552;
   $554 = $col;
   $555 = (($window) + 4|0);
   $556 = HEAP32[$555>>2]|0;
   $557 = (($556) + ($554<<1)|0);
   $558 = HEAP16[$557>>1]|0;
   $559 = $558&65535;
   $560 = $row;
   $561 = $560 & 1;
   $562 = (($blk) + ($561<<2)|0);
   $563 = HEAP32[$562>>2]|0;
   $564 = (($559) + ($563))|0;
   $565 = (+($564|0));
   $566 = $565 * 0.5;
   $567 = $553 + $566;
   $568 = $567;
   $avg = $568;
   $569 = $avg;
   $570 = $569 < 0.0;
   if ($570) {
    $575 = 0.0;
   } else {
    $571 = $avg;
    $572 = $571;
    $573 = (+Math_sqrt((+$572)));
    $575 = $573;
   }
   $574 = $575;
   $avg = $574;
   $576 = HEAP32[600>>2]|0;
   $577 = $row;
   $578 = $577 << 1;
   $579 = $578 & 14;
   $580 = $col;
   $581 = $580 & 1;
   $582 = (($579) + ($581))|0;
   $583 = $582 << 1;
   $584 = $576 >>> $583;
   $585 = $584 & 3;
   $586 = $row;
   $587 = HEAP16[132128>>1]|0;
   $588 = $587&65535;
   $589 = $586 >> $588;
   $590 = HEAP16[132136>>1]|0;
   $591 = $590&65535;
   $592 = Math_imul($589, $591)|0;
   $593 = $col;
   $594 = HEAP16[132128>>1]|0;
   $595 = $594&65535;
   $596 = $593 >> $595;
   $597 = (($592) + ($596))|0;
   $598 = HEAP32[132144>>2]|0;
   $599 = (($598) + ($597<<3)|0);
   $600 = (($599) + ($585<<1)|0);
   $601 = HEAP16[$600>>1]|0;
   $602 = (+($601&65535));
   $603 = (+Math_sqrt((+$602)));
   $604 = $avg;
   $605 = $604;
   $606 = $603 - $605;
   $607 = $606;
   $diff = $607;
   $608 = $diff;
   $609 = $thold;
   $610 = -$609;
   $611 = $608 < $610;
   if ($611) {
    $612 = $thold;
    $613 = $diff;
    $614 = $613 + $612;
    $diff = $614;
   } else {
    $615 = $diff;
    $616 = $thold;
    $617 = $615 > $616;
    if ($617) {
     $618 = $thold;
     $619 = $diff;
     $620 = $619 - $618;
     $diff = $620;
    } else {
     $diff = 0.0;
    }
   }
   $621 = $avg;
   $622 = $diff;
   $623 = $621 + $622;
   $624 = $avg;
   $625 = $diff;
   $626 = $624 + $625;
   $627 = $623 * $626;
   $628 = $627;
   $629 = $628 + 0.5;
   $630 = (~~(($629)));
   $631 = ($630|0)<(65535);
   if ($631) {
    $632 = $avg;
    $633 = $diff;
    $634 = $632 + $633;
    $635 = $avg;
    $636 = $diff;
    $637 = $635 + $636;
    $638 = $634 * $637;
    $639 = $638;
    $640 = $639 + 0.5;
    $641 = (~~(($640)));
    $643 = $641;
   } else {
    $643 = 65535;
   }
   $642 = (0)>($643|0);
   if ($642) {
    $666 = 0;
   } else {
    $644 = $avg;
    $645 = $diff;
    $646 = $644 + $645;
    $647 = $avg;
    $648 = $diff;
    $649 = $647 + $648;
    $650 = $646 * $649;
    $651 = $650;
    $652 = $651 + 0.5;
    $653 = (~~(($652)));
    $654 = ($653|0)<(65535);
    if ($654) {
     $655 = $avg;
     $656 = $diff;
     $657 = $655 + $656;
     $658 = $avg;
     $659 = $diff;
     $660 = $658 + $659;
     $661 = $657 * $660;
     $662 = $661;
     $663 = $662 + 0.5;
     $664 = (~~(($663)));
     $698 = $664;
    } else {
     $698 = 65535;
    }
    $666 = $698;
   }
   $665 = $666&65535;
   $667 = HEAP32[600>>2]|0;
   $668 = $row;
   $669 = $668 << 1;
   $670 = $669 & 14;
   $671 = $col;
   $672 = $671 & 1;
   $673 = (($670) + ($672))|0;
   $674 = $673 << 1;
   $675 = $667 >>> $674;
   $676 = $675 & 3;
   $677 = $row;
   $678 = HEAP16[132128>>1]|0;
   $679 = $678&65535;
   $680 = $677 >> $679;
   $681 = HEAP16[132136>>1]|0;
   $682 = $681&65535;
   $683 = Math_imul($680, $682)|0;
   $684 = $col;
   $685 = HEAP16[132128>>1]|0;
   $686 = $685&65535;
   $687 = $684 >> $686;
   $688 = (($683) + ($687))|0;
   $689 = HEAP32[132144>>2]|0;
   $690 = (($689) + ($688<<3)|0);
   $691 = (($690) + ($676<<1)|0);
   HEAP16[$691>>1] = $665;
   $692 = $col;
   $693 = (($692) + 2)|0;
   $col = $693;
  }
  $694 = $row;
  $695 = (($694) + 1)|0;
  $row = $695;
 }
 $696 = $fimg;
 _free($696);
 STACKTOP = sp;return;
}
function _scale_colors() {
 var $0 = 0.0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0;
 var $422 = 0.0, $423 = 0.0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0.0, $441 = 0, $442 = 0.0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0.0, $479 = 0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0.0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0.0, $513 = 0.0, $514 = 0.0, $515 = 0, $516 = 0, $517 = 0.0, $518 = 0.0, $519 = 0, $52 = 0, $520 = 0, $521 = 0.0, $522 = 0.0, $523 = 0.0, $524 = 0.0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0.0, $533 = 0.0, $534 = 0.0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0.0, $547 = 0.0, $548 = 0.0;
 var $549 = 0.0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0.0, $555 = 0.0, $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0.0, $568 = 0.0, $569 = 0.0, $57 = 0, $570 = 0.0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0.0, $579 = 0.0, $58 = 0, $580 = 0.0, $581 = 0.0, $582 = 0.0, $583 = 0.0, $584 = 0.0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0.0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bottom = 0, $c = 0, $col = 0, $dark = 0, $dmax = 0.0, $dmin = 0.0, $dsum = 0, $fc = 0.0, $fr = 0.0, $i = 0, $img = 0, $pix = 0, $right = 0, $row = 0;
 var $sat = 0, $scale_mul = 0, $size = 0, $sum = 0, $uc = 0, $ur = 0, $val = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr4 = 0, $x = 0, $y = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 80|0;
 $vararg_buffer5 = sp + 104|0;
 $vararg_buffer1 = sp + 88|0;
 $vararg_buffer = sp + 96|0;
 $sum = sp + 120|0;
 $dsum = sp;
 $scale_mul = sp + 168|0;
 $img = 0;
 $0 = +HEAPF32[112>>2];
 $1 = $0 != 0.0;
 if ($1) {
  ;HEAP32[132080+0>>2]=HEAP32[112+0>>2]|0;HEAP32[132080+4>>2]=HEAP32[112+4>>2]|0;HEAP32[132080+8>>2]=HEAP32[112+8>>2]|0;HEAP32[132080+12>>2]=HEAP32[112+12>>2]|0;
 }
 $2 = HEAP32[176>>2]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  label = 6;
 } else {
  $4 = HEAP32[184>>2]|0;
  $5 = ($4|0)!=(0);
  if ($5) {
   $6 = +HEAPF32[134016>>2];
   $7 = $6 == -1.0;
   if ($7) {
    label = 6;
   }
  }
 }
 if ((label|0) == 6) {
  dest=$dsum+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $8 = HEAP32[((240 + 4|0))>>2]|0;
  $9 = HEAP32[((240 + 12|0))>>2]|0;
  $10 = (($8) + ($9))|0;
  $11 = HEAP16[132112>>1]|0;
  $12 = $11&65535;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = HEAP32[((240 + 4|0))>>2]|0;
   $15 = HEAP32[((240 + 12|0))>>2]|0;
   $16 = (($14) + ($15))|0;
   $19 = $16;
  } else {
   $17 = HEAP16[132112>>1]|0;
   $18 = $17&65535;
   $19 = $18;
  }
  $bottom = $19;
  $20 = HEAP32[240>>2]|0;
  $21 = HEAP32[((240 + 8|0))>>2]|0;
  $22 = (($20) + ($21))|0;
  $23 = HEAP16[132120>>1]|0;
  $24 = $23&65535;
  $25 = ($22>>>0)<($24>>>0);
  if ($25) {
   $26 = HEAP32[240>>2]|0;
   $27 = HEAP32[((240 + 8|0))>>2]|0;
   $28 = (($26) + ($27))|0;
   $31 = $28;
  } else {
   $29 = HEAP16[132120>>1]|0;
   $30 = $29&65535;
   $31 = $30;
  }
  $right = $31;
  $32 = HEAP32[((240 + 4|0))>>2]|0;
  $row = $32;
  while(1) {
   $33 = $row;
   $34 = $bottom;
   $35 = ($33>>>0)<($34>>>0);
   if (!($35)) {
    break;
   }
   $36 = HEAP32[240>>2]|0;
   $col = $36;
   while(1) {
    $37 = $col;
    $38 = $right;
    $39 = ($37>>>0)<($38>>>0);
    if (!($39)) {
     break;
    }
    ;HEAP32[$sum+0>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;HEAP32[$sum+16>>2]=0|0;HEAP32[$sum+20>>2]=0|0;HEAP32[$sum+24>>2]=0|0;HEAP32[$sum+28>>2]=0|0;
    $40 = $row;
    $y = $40;
    L23: while(1) {
     $41 = $y;
     $42 = $row;
     $43 = (($42) + 8)|0;
     $44 = ($41>>>0)<($43>>>0);
     if ($44) {
      $45 = $y;
      $46 = $bottom;
      $47 = ($45>>>0)<($46>>>0);
      $603 = $47;
     } else {
      $603 = 0;
     }
     if (!($603)) {
      label = 41;
      break;
     }
     $48 = $col;
     $x = $48;
     while(1) {
      $49 = $x;
      $50 = $col;
      $51 = (($50) + 8)|0;
      $52 = ($49>>>0)<($51>>>0);
      if ($52) {
       $53 = $x;
       $54 = $right;
       $55 = ($53>>>0)<($54>>>0);
       $604 = $55;
      } else {
       $604 = 0;
      }
      if (!($604)) {
       break;
      }
      $c = 0;
      while(1) {
       $56 = $c;
       $57 = ($56>>>0)<(4);
       if (!($57)) {
        break;
       }
       $58 = HEAP32[600>>2]|0;
       $59 = ($58|0)!=(0);
       if ($59) {
        $60 = $y;
        $61 = $x;
        $62 = (_fcol($60,$61)|0);
        $c = $62;
        $63 = $y;
        $64 = $x;
        $65 = (_fcol($63,$64)|0);
        $66 = $y;
        $67 = HEAP16[132128>>1]|0;
        $68 = $67&65535;
        $69 = $66 >>> $68;
        $70 = HEAP16[132136>>1]|0;
        $71 = $70&65535;
        $72 = Math_imul($69, $71)|0;
        $73 = $x;
        $74 = HEAP16[132128>>1]|0;
        $75 = $74&65535;
        $76 = $73 >>> $75;
        $77 = (($72) + ($76))|0;
        $78 = HEAP32[132144>>2]|0;
        $79 = (($78) + ($77<<3)|0);
        $80 = (($79) + ($65<<1)|0);
        $81 = HEAP16[$80>>1]|0;
        $82 = $81&65535;
        $val = $82;
       } else {
        $83 = $c;
        $84 = $y;
        $85 = HEAP16[132120>>1]|0;
        $86 = $85&65535;
        $87 = Math_imul($84, $86)|0;
        $88 = $x;
        $89 = (($87) + ($88))|0;
        $90 = HEAP32[132144>>2]|0;
        $91 = (($90) + ($89<<3)|0);
        $92 = (($91) + ($83<<1)|0);
        $93 = HEAP16[$92>>1]|0;
        $94 = $93&65535;
        $val = $94;
       }
       $95 = $val;
       $96 = HEAP32[132400>>2]|0;
       $97 = (($96) - 25)|0;
       $98 = ($95>>>0)>($97>>>0);
       if ($98) {
        label = 30;
        break L23;
       }
       $99 = $c;
       $100 = (134720 + ($99<<1)|0);
       $101 = HEAP16[$100>>1]|0;
       $102 = $101&65535;
       $103 = $val;
       $104 = (($103) - ($102))|0;
       $val = $104;
       $105 = ($104|0)<(0);
       if ($105) {
        $val = 0;
       }
       $106 = $val;
       $107 = $c;
       $108 = (($sum) + ($107<<2)|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = (($109) + ($106))|0;
       HEAP32[$108>>2] = $110;
       $111 = $c;
       $112 = (($111) + 4)|0;
       $113 = (($sum) + ($112<<2)|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = (($114) + 1)|0;
       HEAP32[$113>>2] = $115;
       $116 = HEAP32[600>>2]|0;
       $117 = ($116|0)!=(0);
       if ($117) {
        label = 34;
        break;
       }
       $118 = $c;
       $119 = (($118) + 1)|0;
       $c = $119;
      }
      if ((label|0) == 34) {
       label = 0;
      }
      $120 = $x;
      $121 = (($120) + 1)|0;
      $x = $121;
     }
     $122 = $y;
     $123 = (($122) + 1)|0;
     $y = $123;
    }
    if ((label|0) == 30) {
     label = 0;
    }
    else if ((label|0) == 41) {
     label = 0;
     $c = 0;
     while(1) {
      $124 = $c;
      $125 = ($124>>>0)<(8);
      if (!($125)) {
       break;
      }
      $126 = $c;
      $127 = (($sum) + ($126<<2)|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = (+($128>>>0));
      $130 = $c;
      $131 = (($dsum) + ($130<<3)|0);
      $132 = +HEAPF64[$131>>3];
      $133 = $132 + $129;
      HEAPF64[$131>>3] = $133;
      $134 = $c;
      $135 = (($134) + 1)|0;
      $c = $135;
     }
    }
    $136 = $col;
    $137 = (($136) + 8)|0;
    $col = $137;
   }
   $138 = $row;
   $139 = (($138) + 8)|0;
   $row = $139;
  }
  $c = 0;
  while(1) {
   $140 = $c;
   $141 = ($140>>>0)<(4);
   if (!($141)) {
    break;
   }
   $142 = $c;
   $143 = (($dsum) + ($142<<3)|0);
   $144 = +HEAPF64[$143>>3];
   $145 = $144 != 0.0;
   if ($145) {
    $146 = $c;
    $147 = (($146) + 4)|0;
    $148 = (($dsum) + ($147<<3)|0);
    $149 = +HEAPF64[$148>>3];
    $150 = $c;
    $151 = (($dsum) + ($150<<3)|0);
    $152 = +HEAPF64[$151>>3];
    $153 = $149 / $152;
    $154 = $153;
    $155 = $c;
    $156 = (132080 + ($155<<2)|0);
    HEAPF32[$156>>2] = $154;
   }
   $157 = $c;
   $158 = (($157) + 1)|0;
   $c = $158;
  }
 }
 $159 = HEAP32[184>>2]|0;
 $160 = ($159|0)!=(0);
 if ($160) {
  $161 = +HEAPF32[134016>>2];
  $162 = $161 != -1.0;
  if ($162) {
   ;HEAP32[$sum+0>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;HEAP32[$sum+16>>2]=0|0;HEAP32[$sum+20>>2]=0|0;HEAP32[$sum+24>>2]=0|0;HEAP32[$sum+28>>2]=0|0;
   $row = 0;
   while(1) {
    $163 = $row;
    $164 = ($163>>>0)<(8);
    if (!($164)) {
     break;
    }
    $col = 0;
    while(1) {
     $165 = $col;
     $166 = ($165>>>0)<(8);
     if (!($166)) {
      break;
     }
     $167 = HEAP32[600>>2]|0;
     $168 = $row;
     $169 = $168 << 1;
     $170 = $169 & 14;
     $171 = $col;
     $172 = $171 & 1;
     $173 = (($170) + ($172))|0;
     $174 = $173 << 1;
     $175 = $167 >>> $174;
     $176 = $175 & 3;
     $c = $176;
     $177 = $col;
     $178 = $row;
     $179 = (190920 + ($178<<4)|0);
     $180 = (($179) + ($177<<1)|0);
     $181 = HEAP16[$180>>1]|0;
     $182 = $181&65535;
     $183 = $c;
     $184 = (134720 + ($183<<1)|0);
     $185 = HEAP16[$184>>1]|0;
     $186 = $185&65535;
     $187 = (($182) - ($186))|0;
     $val = $187;
     $188 = ($187|0)>(0);
     if ($188) {
      $189 = $val;
      $190 = $c;
      $191 = (($sum) + ($190<<2)|0);
      $192 = HEAP32[$191>>2]|0;
      $193 = (($192) + ($189))|0;
      HEAP32[$191>>2] = $193;
     }
     $194 = $c;
     $195 = (($194) + 4)|0;
     $196 = (($sum) + ($195<<2)|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = (($197) + 1)|0;
     HEAP32[$196>>2] = $198;
     $199 = $col;
     $200 = (($199) + 1)|0;
     $col = $200;
    }
    $201 = $row;
    $202 = (($201) + 1)|0;
    $row = $202;
   }
   $203 = HEAP32[$sum>>2]|0;
   $204 = ($203|0)!=(0);
   if ($204) {
    $205 = (($sum) + 4|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = ($206|0)!=(0);
    if ($207) {
     $208 = (($sum) + 8|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = ($209|0)!=(0);
     if ($210) {
      $211 = (($sum) + 12|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = ($212|0)!=(0);
      if ($213) {
       $c = 0;
       while(1) {
        $214 = $c;
        $215 = ($214>>>0)<(4);
        if (!($215)) {
         break;
        }
        $216 = $c;
        $217 = (($216) + 4)|0;
        $218 = (($sum) + ($217<<2)|0);
        $219 = HEAP32[$218>>2]|0;
        $220 = (+($219>>>0));
        $221 = $c;
        $222 = (($sum) + ($221<<2)|0);
        $223 = HEAP32[$222>>2]|0;
        $224 = (+($223>>>0));
        $225 = $220 / $224;
        $226 = $c;
        $227 = (132080 + ($226<<2)|0);
        HEAPF32[$227>>2] = $225;
        $228 = $c;
        $229 = (($228) + 1)|0;
        $c = $229;
       }
      } else {
       label = 78;
      }
     } else {
      label = 78;
     }
    } else {
     label = 78;
    }
   } else {
    label = 78;
   }
   if ((label|0) == 78) {
    $230 = +HEAPF32[134016>>2];
    $231 = $230 != 0.0;
    if ($231) {
     $232 = +HEAPF32[((134016 + 8|0))>>2];
     $233 = $232 != 0.0;
     if ($233) {
      ;HEAP32[132080+0>>2]=HEAP32[134016+0>>2]|0;HEAP32[132080+4>>2]=HEAP32[134016+4>>2]|0;HEAP32[132080+8>>2]=HEAP32[134016+8>>2]|0;HEAP32[132080+12>>2]=HEAP32[134016+12>>2]|0;
     } else {
      label = 81;
     }
    } else {
     label = 81;
    }
    if ((label|0) == 81) {
     $234 = HEAP32[_stderr>>2]|0;
     $235 = HEAP32[696>>2]|0;
     HEAP32[$vararg_buffer>>2] = $235;
     (_fprintf(($234|0),(191048|0),($vararg_buffer|0))|0);
    }
   }
  }
 }
 $236 = +HEAPF32[((132080 + 4|0))>>2];
 $237 = $236 == 0.0;
 if ($237) {
  HEAPF32[((132080 + 4|0))>>2] = 1.0;
 }
 $238 = +HEAPF32[((132080 + 12|0))>>2];
 $239 = $238 == 0.0;
 if ($239) {
  $240 = HEAP32[132304>>2]|0;
  $241 = ($240>>>0)<(4);
  if ($241) {
   $242 = +HEAPF32[((132080 + 4|0))>>2];
   $243 = $242;
  } else {
   $243 = 1.0;
  }
  HEAPF32[((132080 + 12|0))>>2] = $243;
 }
 $244 = HEAP32[132392>>2]|0;
 $dark = $244;
 $245 = HEAP32[132400>>2]|0;
 $sat = $245;
 $246 = +HEAPF32[128>>2];
 $247 = $246 != 0.0;
 if ($247) {
  _wavelet_denoise();
 }
 $248 = HEAP32[132392>>2]|0;
 $249 = HEAP32[132400>>2]|0;
 $250 = (($249) - ($248))|0;
 HEAP32[132400>>2] = $250;
 $dmin = 1.7976931348623157E+308;
 $c = 0;
 $dmax = 0.0;
 while(1) {
  $251 = $c;
  $252 = ($251>>>0)<(4);
  if (!($252)) {
   break;
  }
  $253 = $dmin;
  $254 = $c;
  $255 = (132080 + ($254<<2)|0);
  $256 = +HEAPF32[$255>>2];
  $257 = $256;
  $258 = $253 > $257;
  if ($258) {
   $259 = $c;
   $260 = (132080 + ($259<<2)|0);
   $261 = +HEAPF32[$260>>2];
   $262 = $261;
   $dmin = $262;
  }
  $263 = $dmax;
  $264 = $c;
  $265 = (132080 + ($264<<2)|0);
  $266 = +HEAPF32[$265>>2];
  $267 = $266;
  $268 = $263 < $267;
  if ($268) {
   $269 = $c;
   $270 = (132080 + ($269<<2)|0);
   $271 = +HEAPF32[$270>>2];
   $272 = $271;
   $dmax = $272;
  }
  $273 = $c;
  $274 = (($273) + 1)|0;
  $c = $274;
 }
 $275 = HEAP32[160>>2]|0;
 $276 = ($275|0)!=(0);
 if (!($276)) {
  $277 = $dmin;
  $dmax = $277;
 }
 $c = 0;
 while(1) {
  $278 = $c;
  $279 = ($278>>>0)<(4);
  if (!($279)) {
   break;
  }
  $280 = $dmax;
  $281 = $c;
  $282 = (132080 + ($281<<2)|0);
  $283 = +HEAPF32[$282>>2];
  $284 = $283;
  $285 = $284 / $280;
  $286 = $285;
  HEAPF32[$282>>2] = $286;
  $287 = $286;
  $288 = $287 * 65535.0;
  $289 = HEAP32[132400>>2]|0;
  $290 = (+($289>>>0));
  $291 = $288 / $290;
  $292 = $291;
  $293 = $c;
  $294 = (($scale_mul) + ($293<<2)|0);
  HEAPF32[$294>>2] = $292;
  $295 = $c;
  $296 = (($295) + 1)|0;
  $c = $296;
 }
 $297 = HEAP32[168>>2]|0;
 $298 = ($297|0)!=(0);
 if ($298) {
  $299 = HEAP32[_stderr>>2]|0;
  $300 = $dark;
  $301 = $sat;
  HEAP32[$vararg_buffer1>>2] = $300;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $301;
  (_fprintf(($299|0),(191088|0),($vararg_buffer1|0))|0);
  $c = 0;
  while(1) {
   $302 = $c;
   $303 = ($302>>>0)<(4);
   if (!($303)) {
    break;
   }
   $304 = HEAP32[_stderr>>2]|0;
   $305 = $c;
   $306 = (132080 + ($305<<2)|0);
   $307 = +HEAPF32[$306>>2];
   $308 = $307;
   HEAPF64[tempDoublePtr>>3]=$308;HEAP32[$vararg_buffer5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer5+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_fprintf(($304|0),(191152|0),($vararg_buffer5|0))|0);
   $309 = $c;
   $310 = (($309) + 1)|0;
   $c = $310;
  }
  $311 = HEAP32[_stderr>>2]|0;
  (_fputc(10,($311|0))|0);
 }
 $312 = HEAP32[600>>2]|0;
 $313 = ($312>>>0)>(1000);
 if ($313) {
  $314 = HEAP16[((134720 + 8|0))>>1]|0;
  $315 = $314&65535;
  $316 = (($315) + 1)|0;
  $317 = (($316|0) / 2)&-1;
  $318 = ($317|0)==(1);
  if ($318) {
   $319 = HEAP16[((134720 + 10|0))>>1]|0;
   $320 = $319&65535;
   $321 = (($320) + 1)|0;
   $322 = (($321|0) / 2)&-1;
   $323 = ($322|0)==(1);
   if ($323) {
    $c = 0;
    while(1) {
     $324 = $c;
     $325 = ($324>>>0)<(4);
     if (!($325)) {
      break;
     }
     $326 = $c;
     $327 = (($326>>>0) / 2)&-1;
     $328 = HEAP16[((134720 + 8|0))>>1]|0;
     $329 = $328&65535;
     $330 = (($327>>>0) % ($329>>>0))&-1;
     $331 = HEAP16[((134720 + 10|0))>>1]|0;
     $332 = $331&65535;
     $333 = Math_imul($330, $332)|0;
     $334 = (6 + ($333))|0;
     $335 = $c;
     $336 = (($335>>>0) % 2)&-1;
     $337 = HEAP16[((134720 + 10|0))>>1]|0;
     $338 = $337&65535;
     $339 = (($336>>>0) % ($338>>>0))&-1;
     $340 = (($334) + ($339))|0;
     $341 = (134720 + ($340<<1)|0);
     $342 = HEAP16[$341>>1]|0;
     $343 = $342&65535;
     $344 = HEAP32[600>>2]|0;
     $345 = $c;
     $346 = (($345>>>0) / 2)&-1;
     $347 = $346 << 1;
     $348 = $347 & 14;
     $349 = $c;
     $350 = (($349>>>0) % 2)&-1;
     $351 = $350 & 1;
     $352 = (($348) + ($351))|0;
     $353 = $352 << 1;
     $354 = $344 >>> $353;
     $355 = $354 & 3;
     $356 = (134720 + ($355<<1)|0);
     $357 = HEAP16[$356>>1]|0;
     $358 = $357&65535;
     $359 = (($358) + ($343))|0;
     $360 = $359&65535;
     HEAP16[$356>>1] = $360;
     $361 = $c;
     $362 = (($361) + 1)|0;
     $c = $362;
    }
    HEAP16[((134720 + 10|0))>>1] = 0;
    HEAP16[((134720 + 8|0))>>1] = 0;
   }
  }
 }
 $363 = HEAP16[190888>>1]|0;
 $364 = $363&65535;
 $365 = HEAP16[132136>>1]|0;
 $366 = $365&65535;
 $367 = Math_imul($364, $366)|0;
 $size = $367;
 $i = 0;
 while(1) {
  $368 = $i;
  $369 = $size;
  $370 = $369<<2;
  $371 = ($368>>>0)<($370>>>0);
  if (!($371)) {
   break;
  }
  $372 = $i;
  $373 = HEAP32[132144>>2]|0;
  $374 = (($373) + ($372<<1)|0);
  $375 = HEAP16[$374>>1]|0;
  $376 = $375&65535;
  $val = $376;
  $377 = ($376|0)!=(0);
  if ($377) {
   $378 = HEAP16[((134720 + 8|0))>>1]|0;
   $379 = $378&65535;
   $380 = ($379|0)!=(0);
   if ($380) {
    $381 = HEAP16[((134720 + 10|0))>>1]|0;
    $382 = $381&65535;
    $383 = ($382|0)!=(0);
    if ($383) {
     $384 = $i;
     $385 = (($384>>>0) / 4)&-1;
     $386 = HEAP16[132136>>1]|0;
     $387 = $386&65535;
     $388 = (($385>>>0) / ($387>>>0))&-1;
     $389 = HEAP16[((134720 + 8|0))>>1]|0;
     $390 = $389&65535;
     $391 = (($388>>>0) % ($390>>>0))&-1;
     $392 = HEAP16[((134720 + 10|0))>>1]|0;
     $393 = $392&65535;
     $394 = Math_imul($391, $393)|0;
     $395 = (6 + ($394))|0;
     $396 = $i;
     $397 = (($396>>>0) / 4)&-1;
     $398 = HEAP16[132136>>1]|0;
     $399 = $398&65535;
     $400 = (($397>>>0) % ($399>>>0))&-1;
     $401 = HEAP16[((134720 + 10|0))>>1]|0;
     $402 = $401&65535;
     $403 = (($400>>>0) % ($402>>>0))&-1;
     $404 = (($395) + ($403))|0;
     $405 = (134720 + ($404<<1)|0);
     $406 = HEAP16[$405>>1]|0;
     $407 = $406&65535;
     $408 = $val;
     $409 = (($408) - ($407))|0;
     $val = $409;
    }
   }
   $410 = $i;
   $411 = $410 & 3;
   $412 = (134720 + ($411<<1)|0);
   $413 = HEAP16[$412>>1]|0;
   $414 = $413&65535;
   $415 = $val;
   $416 = (($415) - ($414))|0;
   $val = $416;
   $417 = $i;
   $418 = $417 & 3;
   $419 = (($scale_mul) + ($418<<2)|0);
   $420 = +HEAPF32[$419>>2];
   $421 = $val;
   $422 = (+($421|0));
   $423 = $422 * $420;
   $424 = (~~(($423)));
   $val = $424;
   $425 = $val;
   $426 = ($425|0)<(65535);
   if ($426) {
    $427 = $val;
    $429 = $427;
   } else {
    $429 = 65535;
   }
   $428 = (0)>($429|0);
   if ($428) {
    $434 = 0;
   } else {
    $430 = $val;
    $431 = ($430|0)<(65535);
    if ($431) {
     $432 = $val;
     $605 = $432;
    } else {
     $605 = 65535;
    }
    $434 = $605;
   }
   $433 = $434&65535;
   $435 = $i;
   $436 = HEAP32[132144>>2]|0;
   $437 = (($436) + ($435<<1)|0);
   HEAP16[$437>>1] = $433;
  } else {
  }
  $438 = $i;
  $439 = (($438) + 1)|0;
  $i = $439;
 }
 $440 = +HEAPF64[24>>3];
 $441 = $440 != 1.0;
 if (!($441)) {
  $442 = +HEAPF64[((24 + 16|0))>>3];
  $443 = $442 != 1.0;
  if (!($443)) {
   STACKTOP = sp;return;
  }
 }
 $444 = HEAP32[132304>>2]|0;
 $445 = ($444|0)==(3);
 if (!($445)) {
  STACKTOP = sp;return;
 }
 $446 = HEAP32[168>>2]|0;
 $447 = ($446|0)!=(0);
 if ($447) {
  $448 = HEAP32[_stderr>>2]|0;
  (_fprintf(($448|0),(191160|0),($vararg_buffer8|0))|0);
 }
 $c = 0;
 while(1) {
  $449 = $c;
  $450 = ($449>>>0)<(4);
  if (!($450)) {
   break;
  }
  $451 = $c;
  $452 = (24 + ($451<<3)|0);
  $453 = +HEAPF64[$452>>3];
  $454 = $453 == 1.0;
  if ($454) {
  } else {
   $455 = $size;
   $456 = $455<<1;
   $457 = (_malloc($456)|0);
   $img = $457;
   $458 = $img;
   _merror($458,191200);
   $i = 0;
   while(1) {
    $459 = $i;
    $460 = $size;
    $461 = ($459>>>0)<($460>>>0);
    if (!($461)) {
     break;
    }
    $462 = $c;
    $463 = $i;
    $464 = HEAP32[132144>>2]|0;
    $465 = (($464) + ($463<<3)|0);
    $466 = (($465) + ($462<<1)|0);
    $467 = HEAP16[$466>>1]|0;
    $468 = $i;
    $469 = $img;
    $470 = (($469) + ($468<<1)|0);
    HEAP16[$470>>1] = $467;
    $471 = $i;
    $472 = (($471) + 1)|0;
    $i = $472;
   }
   $row = 0;
   while(1) {
    $473 = $row;
    $474 = HEAP16[190888>>1]|0;
    $475 = $474&65535;
    $476 = ($473>>>0)<($475>>>0);
    if (!($476)) {
     break;
    }
    $477 = $row;
    $478 = (+($477>>>0));
    $479 = HEAP16[190888>>1]|0;
    $480 = $479&65535;
    $481 = (+($480|0));
    $482 = $481 * 0.5;
    $483 = $478 - $482;
    $484 = $c;
    $485 = (24 + ($484<<3)|0);
    $486 = +HEAPF64[$485>>3];
    $487 = $483 * $486;
    $488 = HEAP16[190888>>1]|0;
    $489 = $488&65535;
    $490 = (+($489|0));
    $491 = $490 * 0.5;
    $492 = $487 + $491;
    $493 = $492;
    $fr = $493;
    $494 = (~~(($493))>>>0);
    $ur = $494;
    $495 = $ur;
    $496 = HEAP16[190888>>1]|0;
    $497 = $496&65535;
    $498 = (($497) - 2)|0;
    $499 = ($495>>>0)>($498>>>0);
    if ($499) {
    } else {
     $500 = $ur;
     $501 = (+($500>>>0));
     $502 = $fr;
     $503 = $502 - $501;
     $fr = $503;
     $col = 0;
     while(1) {
      $504 = $col;
      $505 = HEAP16[132136>>1]|0;
      $506 = $505&65535;
      $507 = ($504>>>0)<($506>>>0);
      if (!($507)) {
       break;
      }
      $508 = $col;
      $509 = (+($508>>>0));
      $510 = HEAP16[132136>>1]|0;
      $511 = $510&65535;
      $512 = (+($511|0));
      $513 = $512 * 0.5;
      $514 = $509 - $513;
      $515 = $c;
      $516 = (24 + ($515<<3)|0);
      $517 = +HEAPF64[$516>>3];
      $518 = $514 * $517;
      $519 = HEAP16[132136>>1]|0;
      $520 = $519&65535;
      $521 = (+($520|0));
      $522 = $521 * 0.5;
      $523 = $518 + $522;
      $524 = $523;
      $fc = $524;
      $525 = (~~(($524))>>>0);
      $uc = $525;
      $526 = $uc;
      $527 = HEAP16[132136>>1]|0;
      $528 = $527&65535;
      $529 = (($528) - 2)|0;
      $530 = ($526>>>0)>($529>>>0);
      if ($530) {
      } else {
       $531 = $uc;
       $532 = (+($531>>>0));
       $533 = $fc;
       $534 = $533 - $532;
       $fc = $534;
       $535 = $img;
       $536 = $ur;
       $537 = HEAP16[132136>>1]|0;
       $538 = $537&65535;
       $539 = Math_imul($536, $538)|0;
       $540 = (($535) + ($539<<1)|0);
       $541 = $uc;
       $542 = (($540) + ($541<<1)|0);
       $pix = $542;
       $543 = $pix;
       $544 = HEAP16[$543>>1]|0;
       $545 = $544&65535;
       $546 = (+($545|0));
       $547 = $fc;
       $548 = 1.0 - $547;
       $549 = $546 * $548;
       $550 = $pix;
       $551 = (($550) + 2|0);
       $552 = HEAP16[$551>>1]|0;
       $553 = $552&65535;
       $554 = (+($553|0));
       $555 = $fc;
       $556 = $554 * $555;
       $557 = $549 + $556;
       $558 = $fr;
       $559 = 1.0 - $558;
       $560 = $557 * $559;
       $561 = HEAP16[132136>>1]|0;
       $562 = $561&65535;
       $563 = $pix;
       $564 = (($563) + ($562<<1)|0);
       $565 = HEAP16[$564>>1]|0;
       $566 = $565&65535;
       $567 = (+($566|0));
       $568 = $fc;
       $569 = 1.0 - $568;
       $570 = $567 * $569;
       $571 = HEAP16[132136>>1]|0;
       $572 = $571&65535;
       $573 = (($572) + 1)|0;
       $574 = $pix;
       $575 = (($574) + ($573<<1)|0);
       $576 = HEAP16[$575>>1]|0;
       $577 = $576&65535;
       $578 = (+($577|0));
       $579 = $fc;
       $580 = $578 * $579;
       $581 = $570 + $580;
       $582 = $fr;
       $583 = $581 * $582;
       $584 = $560 + $583;
       $585 = (~~(($584))&65535);
       $586 = $c;
       $587 = $row;
       $588 = HEAP16[132136>>1]|0;
       $589 = $588&65535;
       $590 = Math_imul($587, $589)|0;
       $591 = $col;
       $592 = (($590) + ($591))|0;
       $593 = HEAP32[132144>>2]|0;
       $594 = (($593) + ($592<<3)|0);
       $595 = (($594) + ($586<<1)|0);
       HEAP16[$595>>1] = $585;
      }
      $596 = $col;
      $597 = (($596) + 1)|0;
      $col = $597;
     }
    }
    $598 = $row;
    $599 = (($598) + 1)|0;
    $row = $599;
   }
   $600 = $img;
   _free($600);
  }
  $601 = $c;
  $602 = (($601) + 2)|0;
  $c = $602;
 }
 STACKTOP = sp;return;
}
function _pre_interpolate() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $col = 0;
 var $img = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP16[132128>>1]|0;
 $1 = ($0<<16>>16)!=(0);
 if ($1) {
  $2 = HEAP32[136>>2]|0;
  $3 = ($2|0)!=(0);
  if ($3) {
   $4 = HEAP16[190888>>1]|0;
   HEAP16[132112>>1] = $4;
   $5 = HEAP16[132136>>1]|0;
   HEAP16[132120>>1] = $5;
   $6 = HEAP32[600>>2]|0;
   $7 = ($6|0)==(9);
   if ($7) {
    $row = 0;
    L18: while(1) {
     $8 = $row;
     $9 = ($8|0)<(3);
     if (!($9)) {
      label = 14;
      break;
     }
     $col = 1;
     while(1) {
      $10 = $col;
      $11 = ($10|0)<(4);
      if (!($11)) {
       break;
      }
      $12 = $row;
      $13 = HEAP16[132120>>1]|0;
      $14 = $13&65535;
      $15 = Math_imul($12, $14)|0;
      $16 = $col;
      $17 = (($15) + ($16))|0;
      $18 = HEAP32[132144>>2]|0;
      $19 = (($18) + ($17<<3)|0);
      $20 = HEAP16[$19>>1]|0;
      $21 = $20&65535;
      $22 = $row;
      $23 = HEAP16[132120>>1]|0;
      $24 = $23&65535;
      $25 = Math_imul($22, $24)|0;
      $26 = $col;
      $27 = (($25) + ($26))|0;
      $28 = HEAP32[132144>>2]|0;
      $29 = (($28) + ($27<<3)|0);
      $30 = (($29) + 4|0);
      $31 = HEAP16[$30>>1]|0;
      $32 = $31&65535;
      $33 = $21 | $32;
      $34 = ($33|0)!=(0);
      if (!($34)) {
       label = 9;
       break L18;
      }
      $35 = $col;
      $36 = (($35) + 1)|0;
      $col = $36;
     }
     $37 = $row;
     $38 = (($37) + 1)|0;
     $row = $38;
    }
    if ((label|0) == 9) {
    }
    else if ((label|0) == 14) {
    }
    while(1) {
     $39 = $row;
     $40 = HEAP16[132112>>1]|0;
     $41 = $40&65535;
     $42 = ($39|0)<($41|0);
     if (!($42)) {
      break;
     }
     $43 = $col;
     $44 = (($43) - 1)|0;
     $45 = (($44|0) % 3)&-1;
     $46 = (($45) + 1)|0;
     $col = $46;
     while(1) {
      $47 = $col;
      $48 = HEAP16[132120>>1]|0;
      $49 = $48&65535;
      $50 = (($49) - 1)|0;
      $51 = ($47|0)<($50|0);
      if (!($51)) {
       break;
      }
      $52 = HEAP32[132144>>2]|0;
      $53 = $row;
      $54 = HEAP16[132120>>1]|0;
      $55 = $54&65535;
      $56 = Math_imul($53, $55)|0;
      $57 = (($52) + ($56<<3)|0);
      $58 = $col;
      $59 = (($57) + ($58<<3)|0);
      $img = $59;
      $c = 0;
      while(1) {
       $60 = $c;
       $61 = ($60|0)<(3);
       if (!($61)) {
        break;
       }
       $62 = $c;
       $63 = $img;
       $64 = (($63) + -8|0);
       $65 = (($64) + ($62<<1)|0);
       $66 = HEAP16[$65>>1]|0;
       $67 = $66&65535;
       $68 = $c;
       $69 = $img;
       $70 = (($69) + 8|0);
       $71 = (($70) + ($68<<1)|0);
       $72 = HEAP16[$71>>1]|0;
       $73 = $72&65535;
       $74 = (($67) + ($73))|0;
       $75 = $74 >> 1;
       $76 = $75&65535;
       $77 = $c;
       $78 = $img;
       $79 = (($78) + ($77<<1)|0);
       HEAP16[$79>>1] = $76;
       $80 = $c;
       $81 = (($80) + 2)|0;
       $c = $81;
      }
      $82 = $col;
      $83 = (($82) + 3)|0;
      $col = $83;
     }
     $84 = $row;
     $85 = (($84) + 3)|0;
     $row = $85;
    }
   }
  } else {
   $86 = HEAP16[132112>>1]|0;
   $87 = $86&65535;
   $88 = HEAP16[132120>>1]|0;
   $89 = $88&65535;
   $90 = $89<<3;
   $91 = (_calloc($87,$90)|0);
   $img = $91;
   $92 = $img;
   _merror($92,191216);
   $row = 0;
   while(1) {
    $93 = $row;
    $94 = HEAP16[132112>>1]|0;
    $95 = $94&65535;
    $96 = ($93|0)<($95|0);
    if (!($96)) {
     break;
    }
    $col = 0;
    while(1) {
     $97 = $col;
     $98 = HEAP16[132120>>1]|0;
     $99 = $98&65535;
     $100 = ($97|0)<($99|0);
     if (!($100)) {
      break;
     }
     $101 = $row;
     $102 = $col;
     $103 = (_fcol($101,$102)|0);
     $c = $103;
     $104 = $c;
     $105 = $row;
     $106 = $105 >> 1;
     $107 = HEAP16[132136>>1]|0;
     $108 = $107&65535;
     $109 = Math_imul($106, $108)|0;
     $110 = $col;
     $111 = $110 >> 1;
     $112 = (($109) + ($111))|0;
     $113 = HEAP32[132144>>2]|0;
     $114 = (($113) + ($112<<3)|0);
     $115 = (($114) + ($104<<1)|0);
     $116 = HEAP16[$115>>1]|0;
     $117 = $c;
     $118 = $row;
     $119 = HEAP16[132120>>1]|0;
     $120 = $119&65535;
     $121 = Math_imul($118, $120)|0;
     $122 = $col;
     $123 = (($121) + ($122))|0;
     $124 = $img;
     $125 = (($124) + ($123<<3)|0);
     $126 = (($125) + ($117<<1)|0);
     HEAP16[$126>>1] = $116;
     $127 = $col;
     $128 = (($127) + 1)|0;
     $col = $128;
    }
    $129 = $row;
    $130 = (($129) + 1)|0;
    $row = $130;
   }
   $131 = HEAP32[132144>>2]|0;
   _free($131);
   $132 = $img;
   HEAP32[132144>>2] = $132;
   HEAP16[132128>>1] = 0;
  }
 }
 $133 = HEAP32[600>>2]|0;
 $134 = ($133>>>0)>(1000);
 if ($134) {
  $135 = HEAP32[132304>>2]|0;
  $136 = ($135|0)==(3);
  if ($136) {
   $137 = HEAP32[144>>2]|0;
   $138 = HEAP32[136>>2]|0;
   $139 = $137 ^ $138;
   HEAP32[142928>>2] = $139;
   $140 = HEAP32[144>>2]|0;
   $141 = HEAP32[136>>2]|0;
   $142 = $140 | $141;
   $143 = ($142|0)!=(0);
   if ($143) {
    $144 = HEAP32[132304>>2]|0;
    $145 = (($144) + 1)|0;
    HEAP32[132304>>2] = $145;
   } else {
    $146 = HEAP32[600>>2]|0;
    $147 = $146 >>> 4;
    $148 = $147 & 3;
    $149 = $148 >>> 1;
    $row = $149;
    while(1) {
     $150 = $row;
     $151 = HEAP16[132112>>1]|0;
     $152 = $151&65535;
     $153 = ($150|0)<($152|0);
     if (!($153)) {
      break;
     }
     $154 = HEAP32[600>>2]|0;
     $155 = $row;
     $156 = $155 << 1;
     $157 = $156 & 14;
     $158 = (($157) + 1)|0;
     $159 = $158 << 1;
     $160 = $154 >>> $159;
     $161 = $160 & 3;
     $162 = $161 & 1;
     $col = $162;
     while(1) {
      $163 = $col;
      $164 = HEAP16[132120>>1]|0;
      $165 = $164&65535;
      $166 = ($163|0)<($165|0);
      if (!($166)) {
       break;
      }
      $167 = $row;
      $168 = HEAP16[132120>>1]|0;
      $169 = $168&65535;
      $170 = Math_imul($167, $169)|0;
      $171 = $col;
      $172 = (($170) + ($171))|0;
      $173 = HEAP32[132144>>2]|0;
      $174 = (($173) + ($172<<3)|0);
      $175 = (($174) + 6|0);
      $176 = HEAP16[$175>>1]|0;
      $177 = $row;
      $178 = HEAP16[132120>>1]|0;
      $179 = $178&65535;
      $180 = Math_imul($177, $179)|0;
      $181 = $col;
      $182 = (($180) + ($181))|0;
      $183 = HEAP32[132144>>2]|0;
      $184 = (($183) + ($182<<3)|0);
      $185 = (($184) + 2|0);
      HEAP16[$185>>1] = $176;
      $186 = $col;
      $187 = (($186) + 2)|0;
      $col = $187;
     }
     $188 = $row;
     $189 = (($188) + 2)|0;
     $row = $189;
    }
    $190 = HEAP32[600>>2]|0;
    $191 = $190 & 1431655765;
    $192 = $191 << 1;
    $193 = $192 ^ -1;
    $194 = HEAP32[600>>2]|0;
    $195 = $194 & $193;
    HEAP32[600>>2] = $195;
   }
  }
 }
 $196 = HEAP32[136>>2]|0;
 $197 = ($196|0)!=(0);
 if (!($197)) {
  STACKTOP = sp;return;
 }
 HEAP32[600>>2] = 0;
 STACKTOP = sp;return;
}
function _border_interpolate($border) {
 $border = $border|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $col = 0, $f = 0, $row = 0, $sum = 0, $x = 0, $y = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sum = sp + 24|0;
 $0 = $border;
 $row = 0;
 while(1) {
  $1 = $row;
  $2 = HEAP16[132112>>1]|0;
  $3 = $2&65535;
  $4 = ($1>>>0)<($3>>>0);
  if (!($4)) {
   break;
  }
  $col = 0;
  while(1) {
   $5 = $col;
   $6 = HEAP16[132120>>1]|0;
   $7 = $6&65535;
   $8 = ($5>>>0)<($7>>>0);
   if (!($8)) {
    break;
   }
   $9 = $col;
   $10 = $0;
   $11 = ($9|0)==($10|0);
   if ($11) {
    $12 = $row;
    $13 = $0;
    $14 = ($12>>>0)>=($13>>>0);
    if ($14) {
     $15 = $row;
     $16 = HEAP16[132112>>1]|0;
     $17 = $16&65535;
     $18 = $0;
     $19 = (($17) - ($18))|0;
     $20 = ($15>>>0)<($19>>>0);
     if ($20) {
      $21 = HEAP16[132120>>1]|0;
      $22 = $21&65535;
      $23 = $0;
      $24 = (($22) - ($23))|0;
      $col = $24;
     }
    }
   }
   ;HEAP32[$sum+0>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;HEAP32[$sum+16>>2]=0|0;HEAP32[$sum+20>>2]=0|0;HEAP32[$sum+24>>2]=0|0;HEAP32[$sum+28>>2]=0|0;
   $25 = $row;
   $26 = (($25) - 1)|0;
   $y = $26;
   while(1) {
    $27 = $y;
    $28 = $row;
    $29 = (($28) + 2)|0;
    $30 = ($27|0)!=($29|0);
    if (!($30)) {
     break;
    }
    $31 = $col;
    $32 = (($31) - 1)|0;
    $x = $32;
    while(1) {
     $33 = $x;
     $34 = $col;
     $35 = (($34) + 2)|0;
     $36 = ($33|0)!=($35|0);
     if (!($36)) {
      break;
     }
     $37 = $y;
     $38 = HEAP16[132112>>1]|0;
     $39 = $38&65535;
     $40 = ($37>>>0)<($39>>>0);
     if ($40) {
      $41 = $x;
      $42 = HEAP16[132120>>1]|0;
      $43 = $42&65535;
      $44 = ($41>>>0)<($43>>>0);
      if ($44) {
       $45 = $y;
       $46 = $x;
       $47 = (_fcol($45,$46)|0);
       $f = $47;
       $48 = $f;
       $49 = $y;
       $50 = HEAP16[132120>>1]|0;
       $51 = $50&65535;
       $52 = Math_imul($49, $51)|0;
       $53 = $x;
       $54 = (($52) + ($53))|0;
       $55 = HEAP32[132144>>2]|0;
       $56 = (($55) + ($54<<3)|0);
       $57 = (($56) + ($48<<1)|0);
       $58 = HEAP16[$57>>1]|0;
       $59 = $58&65535;
       $60 = $f;
       $61 = (($sum) + ($60<<2)|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = (($62) + ($59))|0;
       HEAP32[$61>>2] = $63;
       $64 = $f;
       $65 = (($64) + 4)|0;
       $66 = (($sum) + ($65<<2)|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = (($67) + 1)|0;
       HEAP32[$66>>2] = $68;
      }
     }
     $69 = $x;
     $70 = (($69) + 1)|0;
     $x = $70;
    }
    $71 = $y;
    $72 = (($71) + 1)|0;
    $y = $72;
   }
   $73 = $row;
   $74 = $col;
   $75 = (_fcol($73,$74)|0);
   $f = $75;
   $c = 0;
   while(1) {
    $76 = $c;
    $77 = HEAP32[132304>>2]|0;
    $78 = ($76>>>0)<($77>>>0);
    if (!($78)) {
     break;
    }
    $79 = $c;
    $80 = $f;
    $81 = ($79|0)!=($80|0);
    if ($81) {
     $82 = $c;
     $83 = (($82) + 4)|0;
     $84 = (($sum) + ($83<<2)|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)!=(0);
     if ($86) {
      $87 = $c;
      $88 = (($sum) + ($87<<2)|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = $c;
      $91 = (($90) + 4)|0;
      $92 = (($sum) + ($91<<2)|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = (($89>>>0) / ($93>>>0))&-1;
      $95 = $94&65535;
      $96 = $c;
      $97 = $row;
      $98 = HEAP16[132120>>1]|0;
      $99 = $98&65535;
      $100 = Math_imul($97, $99)|0;
      $101 = $col;
      $102 = (($100) + ($101))|0;
      $103 = HEAP32[132144>>2]|0;
      $104 = (($103) + ($102<<3)|0);
      $105 = (($104) + ($96<<1)|0);
      HEAP16[$105>>1] = $95;
     }
    }
    $106 = $c;
    $107 = (($106) + 1)|0;
    $c = $107;
   }
   $108 = $col;
   $109 = (($108) + 1)|0;
   $col = $109;
  }
  $110 = $row;
  $111 = (($110) + 1)|0;
  $row = $111;
 }
 STACKTOP = sp;return;
}
function _lin_interpolate() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $code = 0, $col = 0, $color = 0;
 var $f = 0, $i = 0, $ip = 0, $pix = 0, $row = 0, $shift = 0, $size = 0, $sum = 0, $vararg_buffer = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32848|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $code = sp + 64|0;
 $sum = sp + 40|0;
 $size = 16;
 $0 = HEAP32[168>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  $2 = HEAP32[_stderr>>2]|0;
  (_fprintf(($2|0),(191240|0),($vararg_buffer|0))|0);
 }
 $3 = HEAP32[600>>2]|0;
 $4 = ($3|0)==(9);
 if ($4) {
  $size = 6;
 }
 _border_interpolate(1);
 $row = 0;
 while(1) {
  $5 = $row;
  $6 = $size;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $col = 0;
  while(1) {
   $8 = $col;
   $9 = $size;
   $10 = ($8|0)<($9|0);
   if (!($10)) {
    break;
   }
   $11 = $col;
   $12 = $row;
   $13 = (($code) + ($12<<11)|0);
   $14 = (($13) + ($11<<7)|0);
   $15 = (($14) + 4|0);
   $ip = $15;
   $16 = $row;
   $17 = $col;
   $18 = (_fcol($16,$17)|0);
   $f = $18;
   ;HEAP32[$sum+0>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;
   $y = -1;
   while(1) {
    $19 = $y;
    $20 = ($19|0)<=(1);
    if (!($20)) {
     break;
    }
    $x = -1;
    while(1) {
     $21 = $x;
     $22 = ($21|0)<=(1);
     if (!($22)) {
      break;
     }
     $23 = $y;
     $24 = ($23|0)==(0);
     $25 = $24&1;
     $26 = $x;
     $27 = ($26|0)==(0);
     $28 = $27&1;
     $29 = (($25) + ($28))|0;
     $shift = $29;
     $30 = $row;
     $31 = $y;
     $32 = (($30) + ($31))|0;
     $33 = $col;
     $34 = $x;
     $35 = (($33) + ($34))|0;
     $36 = (_fcol($32,$35)|0);
     $color = $36;
     $37 = $color;
     $38 = $f;
     $39 = ($37|0)==($38|0);
     if ($39) {
     } else {
      $40 = HEAP16[132120>>1]|0;
      $41 = $40&65535;
      $42 = $y;
      $43 = Math_imul($41, $42)|0;
      $44 = $x;
      $45 = (($43) + ($44))|0;
      $46 = $45<<2;
      $47 = $color;
      $48 = (($46) + ($47))|0;
      $49 = $ip;
      $50 = (($49) + 4|0);
      $ip = $50;
      HEAP32[$49>>2] = $48;
      $51 = $shift;
      $52 = $ip;
      $53 = (($52) + 4|0);
      $ip = $53;
      HEAP32[$52>>2] = $51;
      $54 = $color;
      $55 = $ip;
      $56 = (($55) + 4|0);
      $ip = $56;
      HEAP32[$55>>2] = $54;
      $57 = $shift;
      $58 = 1 << $57;
      $59 = $color;
      $60 = (($sum) + ($59<<2)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = (($61) + ($58))|0;
      HEAP32[$60>>2] = $62;
     }
     $63 = $x;
     $64 = (($63) + 1)|0;
     $x = $64;
    }
    $65 = $y;
    $66 = (($65) + 1)|0;
    $y = $66;
   }
   $67 = $ip;
   $68 = $col;
   $69 = $row;
   $70 = (($code) + ($69<<11)|0);
   $71 = (($70) + ($68<<7)|0);
   $72 = $67;
   $73 = $71;
   $74 = (($72) - ($73))|0;
   $75 = (($74|0) / 4)&-1;
   $76 = (($75|0) / 3)&-1;
   $77 = $col;
   $78 = $row;
   $79 = (($code) + ($78<<11)|0);
   $80 = (($79) + ($77<<7)|0);
   HEAP32[$80>>2] = $76;
   $c = 0;
   while(1) {
    $81 = $c;
    $82 = HEAP32[132304>>2]|0;
    $83 = ($81>>>0)<($82>>>0);
    if (!($83)) {
     break;
    }
    $84 = $c;
    $85 = $f;
    $86 = ($84|0)!=($85|0);
    if ($86) {
     $87 = $c;
     $88 = $ip;
     $89 = (($88) + 4|0);
     $ip = $89;
     HEAP32[$88>>2] = $87;
     $90 = $c;
     $91 = (($sum) + ($90<<2)|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = (256 / ($92|0))&-1;
     $94 = $ip;
     $95 = (($94) + 4|0);
     $ip = $95;
     HEAP32[$94>>2] = $93;
    }
    $96 = $c;
    $97 = (($96) + 1)|0;
    $c = $97;
   }
   $98 = $col;
   $99 = (($98) + 1)|0;
   $col = $99;
  }
  $100 = $row;
  $101 = (($100) + 1)|0;
  $row = $101;
 }
 $row = 1;
 while(1) {
  $102 = $row;
  $103 = HEAP16[132112>>1]|0;
  $104 = $103&65535;
  $105 = (($104) - 1)|0;
  $106 = ($102|0)<($105|0);
  if (!($106)) {
   break;
  }
  $col = 1;
  while(1) {
   $107 = $col;
   $108 = HEAP16[132120>>1]|0;
   $109 = $108&65535;
   $110 = (($109) - 1)|0;
   $111 = ($107|0)<($110|0);
   if (!($111)) {
    break;
   }
   $112 = $row;
   $113 = HEAP16[132120>>1]|0;
   $114 = $113&65535;
   $115 = Math_imul($112, $114)|0;
   $116 = $col;
   $117 = (($115) + ($116))|0;
   $118 = HEAP32[132144>>2]|0;
   $119 = (($118) + ($117<<3)|0);
   $pix = $119;
   $120 = $col;
   $121 = $size;
   $122 = (($120|0) % ($121|0))&-1;
   $123 = $row;
   $124 = $size;
   $125 = (($123|0) % ($124|0))&-1;
   $126 = (($code) + ($125<<11)|0);
   $127 = (($126) + ($122<<7)|0);
   $ip = $127;
   ;HEAP32[$sum+0>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;
   $128 = $ip;
   $129 = (($128) + 4|0);
   $ip = $129;
   $130 = HEAP32[$128>>2]|0;
   $i = $130;
   while(1) {
    $131 = $i;
    $132 = (($131) + -1)|0;
    $i = $132;
    $133 = ($131|0)!=(0);
    if (!($133)) {
     break;
    }
    $134 = $ip;
    $135 = HEAP32[$134>>2]|0;
    $136 = $pix;
    $137 = (($136) + ($135<<1)|0);
    $138 = HEAP16[$137>>1]|0;
    $139 = $138&65535;
    $140 = $ip;
    $141 = (($140) + 4|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $139 << $142;
    $144 = $ip;
    $145 = (($144) + 8|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = (($sum) + ($146<<2)|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = (($148) + ($143))|0;
    HEAP32[$147>>2] = $149;
    $150 = $ip;
    $151 = (($150) + 12|0);
    $ip = $151;
   }
   $152 = HEAP32[132304>>2]|0;
   $i = $152;
   while(1) {
    $153 = $i;
    $154 = (($153) + -1)|0;
    $i = $154;
    $155 = ($154|0)!=(0);
    if (!($155)) {
     break;
    }
    $156 = $ip;
    $157 = HEAP32[$156>>2]|0;
    $158 = (($sum) + ($157<<2)|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = $ip;
    $161 = (($160) + 4|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = Math_imul($159, $162)|0;
    $164 = $163 >> 8;
    $165 = $164&65535;
    $166 = $ip;
    $167 = HEAP32[$166>>2]|0;
    $168 = $pix;
    $169 = (($168) + ($167<<1)|0);
    HEAP16[$169>>1] = $165;
    $170 = $ip;
    $171 = (($170) + 8|0);
    $ip = $171;
   }
   $172 = $col;
   $173 = (($172) + 1)|0;
   $col = $173;
  }
  $174 = $row;
  $175 = (($174) + 1)|0;
  $row = $175;
 }
 STACKTOP = sp;return;
}
function _vng_interpolate() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brow = 0, $c = 0, $code = 0, $col = 0, $color = 0;
 var $diag = 0, $diff = 0, $g = 0, $gmax = 0, $gmin = 0, $grads = 0, $gval = 0, $ip = 0, $num = 0, $pcol = 0, $pix = 0, $prow = 0, $row = 0, $sum = 0, $t = 0, $thold = 0, $vararg_buffer = 0, $weight = 0, $x = 0, $x1 = 0;
 var $x2 = 0, $y = 0, $y1 = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1200|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $brow = sp + 1168|0;
 $code = sp + 128|0;
 $gval = sp + 96|0;
 $sum = sp + 72|0;
 $prow = 8;
 $pcol = 2;
 _lin_interpolate();
 $0 = HEAP32[168>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  $2 = HEAP32[_stderr>>2]|0;
  (_fprintf(($2|0),(191680|0),($vararg_buffer|0))|0);
 }
 $3 = HEAP32[600>>2]|0;
 $4 = ($3|0)==(1);
 if ($4) {
  $pcol = 16;
  $prow = 16;
 }
 $5 = HEAP32[600>>2]|0;
 $6 = ($5|0)==(9);
 if ($6) {
  $pcol = 6;
  $prow = 6;
 }
 $7 = $prow;
 $8 = $pcol;
 $9 = Math_imul($7, $8)|0;
 $10 = (_calloc($9,1280)|0);
 $ip = $10;
 $11 = $ip;
 _merror($11,191704);
 $row = 0;
 while(1) {
  $12 = $row;
  $13 = $prow;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $col = 0;
  while(1) {
   $15 = $col;
   $16 = $pcol;
   $17 = ($15|0)<($16|0);
   if (!($17)) {
    break;
   }
   $18 = $ip;
   $19 = $col;
   $20 = $row;
   $21 = (($code) + ($20<<6)|0);
   $22 = (($21) + ($19<<2)|0);
   HEAP32[$22>>2] = $18;
   HEAP32[191272>>2] = 191280;
   $t = 0;
   while(1) {
    $23 = $t;
    $24 = ($23|0)<(64);
    if (!($24)) {
     break;
    }
    $25 = HEAP32[191272>>2]|0;
    $26 = (($25) + 1|0);
    HEAP32[191272>>2] = $26;
    $27 = HEAP8[$25>>0]|0;
    $28 = $27 << 24 >> 24;
    $y1 = $28;
    $29 = HEAP32[191272>>2]|0;
    $30 = (($29) + 1|0);
    HEAP32[191272>>2] = $30;
    $31 = HEAP8[$29>>0]|0;
    $32 = $31 << 24 >> 24;
    $x1 = $32;
    $33 = HEAP32[191272>>2]|0;
    $34 = (($33) + 1|0);
    HEAP32[191272>>2] = $34;
    $35 = HEAP8[$33>>0]|0;
    $36 = $35 << 24 >> 24;
    $y2 = $36;
    $37 = HEAP32[191272>>2]|0;
    $38 = (($37) + 1|0);
    HEAP32[191272>>2] = $38;
    $39 = HEAP8[$37>>0]|0;
    $40 = $39 << 24 >> 24;
    $x2 = $40;
    $41 = HEAP32[191272>>2]|0;
    $42 = (($41) + 1|0);
    HEAP32[191272>>2] = $42;
    $43 = HEAP8[$41>>0]|0;
    $44 = $43 << 24 >> 24;
    $weight = $44;
    $45 = HEAP32[191272>>2]|0;
    $46 = (($45) + 1|0);
    HEAP32[191272>>2] = $46;
    $47 = HEAP8[$45>>0]|0;
    $48 = $47 << 24 >> 24;
    $grads = $48;
    $49 = $row;
    $50 = $y1;
    $51 = (($49) + ($50))|0;
    $52 = $col;
    $53 = $x1;
    $54 = (($52) + ($53))|0;
    $55 = (_fcol($51,$54)|0);
    $color = $55;
    $56 = $row;
    $57 = $y2;
    $58 = (($56) + ($57))|0;
    $59 = $col;
    $60 = $x2;
    $61 = (($59) + ($60))|0;
    $62 = (_fcol($58,$61)|0);
    $63 = $color;
    $64 = ($62|0)!=($63|0);
    do {
     if ($64) {
     } else {
      $65 = $row;
      $66 = $col;
      $67 = (($66) + 1)|0;
      $68 = (_fcol($65,$67)|0);
      $69 = $color;
      $70 = ($68|0)==($69|0);
      if ($70) {
       $71 = $row;
       $72 = (($71) + 1)|0;
       $73 = $col;
       $74 = (_fcol($72,$73)|0);
       $75 = $color;
       $76 = ($74|0)==($75|0);
       $77 = $76;
      } else {
       $77 = 0;
      }
      $78 = $77 ? 2 : 1;
      $diag = $78;
      $79 = $y1;
      $80 = $y2;
      $81 = (($79) - ($80))|0;
      $82 = (Math_abs(($81|0))|0);
      $83 = $diag;
      $84 = ($82|0)==($83|0);
      if ($84) {
       $85 = $x1;
       $86 = $x2;
       $87 = (($85) - ($86))|0;
       $88 = (Math_abs(($87|0))|0);
       $89 = $diag;
       $90 = ($88|0)==($89|0);
       if ($90) {
        break;
       }
      }
      $91 = $y1;
      $92 = HEAP16[132120>>1]|0;
      $93 = $92&65535;
      $94 = Math_imul($91, $93)|0;
      $95 = $x1;
      $96 = (($94) + ($95))|0;
      $97 = $96<<2;
      $98 = $color;
      $99 = (($97) + ($98))|0;
      $100 = $ip;
      $101 = (($100) + 4|0);
      $ip = $101;
      HEAP32[$100>>2] = $99;
      $102 = $y2;
      $103 = HEAP16[132120>>1]|0;
      $104 = $103&65535;
      $105 = Math_imul($102, $104)|0;
      $106 = $x2;
      $107 = (($105) + ($106))|0;
      $108 = $107<<2;
      $109 = $color;
      $110 = (($108) + ($109))|0;
      $111 = $ip;
      $112 = (($111) + 4|0);
      $ip = $112;
      HEAP32[$111>>2] = $110;
      $113 = $weight;
      $114 = $ip;
      $115 = (($114) + 4|0);
      $ip = $115;
      HEAP32[$114>>2] = $113;
      $g = 0;
      while(1) {
       $116 = $g;
       $117 = ($116|0)<(8);
       if (!($117)) {
        break;
       }
       $118 = $grads;
       $119 = $g;
       $120 = 1 << $119;
       $121 = $118 & $120;
       $122 = ($121|0)!=(0);
       if ($122) {
        $123 = $g;
        $124 = $ip;
        $125 = (($124) + 4|0);
        $ip = $125;
        HEAP32[$124>>2] = $123;
       }
       $126 = $g;
       $127 = (($126) + 1)|0;
       $g = $127;
      }
      $128 = $ip;
      $129 = (($128) + 4|0);
      $ip = $129;
      HEAP32[$128>>2] = -1;
     }
    } while(0);
    $130 = $t;
    $131 = (($130) + 1)|0;
    $t = $131;
   }
   $132 = $ip;
   $133 = (($132) + 4|0);
   $ip = $133;
   HEAP32[$132>>2] = 2147483647;
   HEAP32[191272>>2] = 191664;
   $g = 0;
   while(1) {
    $134 = $g;
    $135 = ($134|0)<(8);
    if (!($135)) {
     break;
    }
    $136 = HEAP32[191272>>2]|0;
    $137 = (($136) + 1|0);
    HEAP32[191272>>2] = $137;
    $138 = HEAP8[$136>>0]|0;
    $139 = $138 << 24 >> 24;
    $y = $139;
    $140 = HEAP32[191272>>2]|0;
    $141 = (($140) + 1|0);
    HEAP32[191272>>2] = $141;
    $142 = HEAP8[$140>>0]|0;
    $143 = $142 << 24 >> 24;
    $x = $143;
    $144 = $y;
    $145 = HEAP16[132120>>1]|0;
    $146 = $145&65535;
    $147 = Math_imul($144, $146)|0;
    $148 = $x;
    $149 = (($147) + ($148))|0;
    $150 = $149<<2;
    $151 = $ip;
    $152 = (($151) + 4|0);
    $ip = $152;
    HEAP32[$151>>2] = $150;
    $153 = $row;
    $154 = $col;
    $155 = (_fcol($153,$154)|0);
    $color = $155;
    $156 = $row;
    $157 = $y;
    $158 = (($156) + ($157))|0;
    $159 = $col;
    $160 = $x;
    $161 = (($159) + ($160))|0;
    $162 = (_fcol($158,$161)|0);
    $163 = $color;
    $164 = ($162|0)!=($163|0);
    if ($164) {
     $165 = $row;
     $166 = $y;
     $167 = $166<<1;
     $168 = (($165) + ($167))|0;
     $169 = $col;
     $170 = $x;
     $171 = $170<<1;
     $172 = (($169) + ($171))|0;
     $173 = (_fcol($168,$172)|0);
     $174 = $color;
     $175 = ($173|0)==($174|0);
     if ($175) {
      $176 = $y;
      $177 = HEAP16[132120>>1]|0;
      $178 = $177&65535;
      $179 = Math_imul($176, $178)|0;
      $180 = $x;
      $181 = (($179) + ($180))|0;
      $182 = $181<<3;
      $183 = $color;
      $184 = (($182) + ($183))|0;
      $185 = $ip;
      $186 = (($185) + 4|0);
      $ip = $186;
      HEAP32[$185>>2] = $184;
     } else {
      label = 33;
     }
    } else {
     label = 33;
    }
    if ((label|0) == 33) {
     label = 0;
     $187 = $ip;
     $188 = (($187) + 4|0);
     $ip = $188;
     HEAP32[$187>>2] = 0;
    }
    $189 = $g;
    $190 = (($189) + 1)|0;
    $g = $190;
   }
   $191 = $col;
   $192 = (($191) + 1)|0;
   $col = $192;
  }
  $193 = $row;
  $194 = (($193) + 1)|0;
  $row = $194;
 }
 $195 = HEAP16[132120>>1]|0;
 $196 = $195&65535;
 $197 = ($196*3)|0;
 $198 = (_calloc($197,8)|0);
 $199 = (($brow) + 16|0);
 HEAP32[$199>>2] = $198;
 $200 = (($brow) + 16|0);
 $201 = HEAP32[$200>>2]|0;
 _merror($201,191704);
 $row = 0;
 while(1) {
  $202 = $row;
  $203 = ($202|0)<(3);
  if (!($203)) {
   break;
  }
  $204 = (($brow) + 16|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = $row;
  $207 = HEAP16[132120>>1]|0;
  $208 = $207&65535;
  $209 = Math_imul($206, $208)|0;
  $210 = (($205) + ($209<<3)|0);
  $211 = $row;
  $212 = (($brow) + ($211<<2)|0);
  HEAP32[$212>>2] = $210;
  $213 = $row;
  $214 = (($213) + 1)|0;
  $row = $214;
 }
 $row = 2;
 while(1) {
  $215 = $row;
  $216 = HEAP16[132112>>1]|0;
  $217 = $216&65535;
  $218 = (($217) - 2)|0;
  $219 = ($215|0)<($218|0);
  if (!($219)) {
   break;
  }
  $col = 2;
  while(1) {
   $220 = $col;
   $221 = HEAP16[132120>>1]|0;
   $222 = $221&65535;
   $223 = (($222) - 2)|0;
   $224 = ($220|0)<($223|0);
   if (!($224)) {
    break;
   }
   $225 = $row;
   $226 = HEAP16[132120>>1]|0;
   $227 = $226&65535;
   $228 = Math_imul($225, $227)|0;
   $229 = $col;
   $230 = (($228) + ($229))|0;
   $231 = HEAP32[132144>>2]|0;
   $232 = (($231) + ($230<<3)|0);
   $pix = $232;
   $233 = $col;
   $234 = $pcol;
   $235 = (($233|0) % ($234|0))&-1;
   $236 = $row;
   $237 = $prow;
   $238 = (($236|0) % ($237|0))&-1;
   $239 = (($code) + ($238<<6)|0);
   $240 = (($239) + ($235<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $ip = $241;
   ;HEAP32[$gval+0>>2]=0|0;HEAP32[$gval+4>>2]=0|0;HEAP32[$gval+8>>2]=0|0;HEAP32[$gval+12>>2]=0|0;HEAP32[$gval+16>>2]=0|0;HEAP32[$gval+20>>2]=0|0;HEAP32[$gval+24>>2]=0|0;HEAP32[$gval+28>>2]=0|0;
   while(1) {
    $242 = $ip;
    $243 = HEAP32[$242>>2]|0;
    $g = $243;
    $244 = ($243|0)!=(2147483647);
    if (!($244)) {
     break;
    }
    $245 = $g;
    $246 = $pix;
    $247 = (($246) + ($245<<1)|0);
    $248 = HEAP16[$247>>1]|0;
    $249 = $248&65535;
    $250 = $ip;
    $251 = (($250) + 4|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = $pix;
    $254 = (($253) + ($252<<1)|0);
    $255 = HEAP16[$254>>1]|0;
    $256 = $255&65535;
    $257 = (($249) - ($256))|0;
    $258 = $g;
    $259 = $pix;
    $260 = (($259) + ($258<<1)|0);
    $261 = HEAP16[$260>>1]|0;
    $262 = $261&65535;
    $263 = $ip;
    $264 = (($263) + 4|0);
    $265 = HEAP32[$264>>2]|0;
    $266 = $pix;
    $267 = (($266) + ($265<<1)|0);
    $268 = HEAP16[$267>>1]|0;
    $269 = $268&65535;
    $270 = (($262) - ($269))|0;
    $271 = $270 >> 31;
    $272 = $257 ^ $271;
    $273 = $g;
    $274 = $pix;
    $275 = (($274) + ($273<<1)|0);
    $276 = HEAP16[$275>>1]|0;
    $277 = $276&65535;
    $278 = $ip;
    $279 = (($278) + 4|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = $pix;
    $282 = (($281) + ($280<<1)|0);
    $283 = HEAP16[$282>>1]|0;
    $284 = $283&65535;
    $285 = (($277) - ($284))|0;
    $286 = $285 >> 31;
    $287 = (($272) - ($286))|0;
    $288 = $ip;
    $289 = (($288) + 8|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = $287 << $290;
    $diff = $291;
    $292 = $diff;
    $293 = $ip;
    $294 = (($293) + 12|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = (($gval) + ($295<<2)|0);
    $297 = HEAP32[$296>>2]|0;
    $298 = (($297) + ($292))|0;
    HEAP32[$296>>2] = $298;
    $299 = $ip;
    $300 = (($299) + 20|0);
    $ip = $300;
    $301 = $ip;
    $302 = (($301) + -4|0);
    $303 = HEAP32[$302>>2]|0;
    $g = $303;
    $304 = ($303|0)==(-1);
    if ($304) {
     continue;
    }
    $305 = $diff;
    $306 = $g;
    $307 = (($gval) + ($306<<2)|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = (($308) + ($305))|0;
    HEAP32[$307>>2] = $309;
    while(1) {
     $310 = $ip;
     $311 = (($310) + 4|0);
     $ip = $311;
     $312 = HEAP32[$310>>2]|0;
     $g = $312;
     $313 = ($312|0)!=(-1);
     if (!($313)) {
      break;
     }
     $314 = $diff;
     $315 = $g;
     $316 = (($gval) + ($315<<2)|0);
     $317 = HEAP32[$316>>2]|0;
     $318 = (($317) + ($314))|0;
     HEAP32[$316>>2] = $318;
    }
   }
   $319 = $ip;
   $320 = (($319) + 4|0);
   $ip = $320;
   $321 = HEAP32[$gval>>2]|0;
   $gmax = $321;
   $gmin = $321;
   $g = 1;
   while(1) {
    $322 = $g;
    $323 = ($322|0)<(8);
    if (!($323)) {
     break;
    }
    $324 = $gmin;
    $325 = $g;
    $326 = (($gval) + ($325<<2)|0);
    $327 = HEAP32[$326>>2]|0;
    $328 = ($324|0)>($327|0);
    if ($328) {
     $329 = $g;
     $330 = (($gval) + ($329<<2)|0);
     $331 = HEAP32[$330>>2]|0;
     $gmin = $331;
    }
    $332 = $gmax;
    $333 = $g;
    $334 = (($gval) + ($333<<2)|0);
    $335 = HEAP32[$334>>2]|0;
    $336 = ($332|0)<($335|0);
    if ($336) {
     $337 = $g;
     $338 = (($gval) + ($337<<2)|0);
     $339 = HEAP32[$338>>2]|0;
     $gmax = $339;
    }
    $340 = $g;
    $341 = (($340) + 1)|0;
    $g = $341;
   }
   $342 = $gmax;
   $343 = ($342|0)==(0);
   if ($343) {
    $344 = $col;
    $345 = (($brow) + 8|0);
    $346 = HEAP32[$345>>2]|0;
    $347 = (($346) + ($344<<3)|0);
    $348 = $pix;
    ;HEAP16[$347+0>>1]=HEAP16[$348+0>>1]|0;HEAP16[$347+2>>1]=HEAP16[$348+2>>1]|0;HEAP16[$347+4>>1]=HEAP16[$348+4>>1]|0;HEAP16[$347+6>>1]=HEAP16[$348+6>>1]|0;
   } else {
    $349 = $gmin;
    $350 = $gmax;
    $351 = $350 >> 1;
    $352 = (($349) + ($351))|0;
    $thold = $352;
    ;HEAP32[$sum+0>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;
    $353 = $row;
    $354 = $col;
    $355 = (_fcol($353,$354)|0);
    $color = $355;
    $g = 0;
    $num = 0;
    while(1) {
     $356 = $g;
     $357 = ($356|0)<(8);
     if (!($357)) {
      break;
     }
     $358 = $g;
     $359 = (($gval) + ($358<<2)|0);
     $360 = HEAP32[$359>>2]|0;
     $361 = $thold;
     $362 = ($360|0)<=($361|0);
     if ($362) {
      $c = 0;
      while(1) {
       $363 = $c;
       $364 = HEAP32[132304>>2]|0;
       $365 = ($363>>>0)<($364>>>0);
       if (!($365)) {
        break;
       }
       $366 = $c;
       $367 = $color;
       $368 = ($366|0)==($367|0);
       if ($368) {
        $369 = $ip;
        $370 = (($369) + 4|0);
        $371 = HEAP32[$370>>2]|0;
        $372 = ($371|0)!=(0);
        if ($372) {
         $373 = $c;
         $374 = $pix;
         $375 = (($374) + ($373<<1)|0);
         $376 = HEAP16[$375>>1]|0;
         $377 = $376&65535;
         $378 = $ip;
         $379 = (($378) + 4|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = $pix;
         $382 = (($381) + ($380<<1)|0);
         $383 = HEAP16[$382>>1]|0;
         $384 = $383&65535;
         $385 = (($377) + ($384))|0;
         $386 = $385 >> 1;
         $387 = $c;
         $388 = (($sum) + ($387<<2)|0);
         $389 = HEAP32[$388>>2]|0;
         $390 = (($389) + ($386))|0;
         HEAP32[$388>>2] = $390;
        } else {
         label = 74;
        }
       } else {
        label = 74;
       }
       if ((label|0) == 74) {
        label = 0;
        $391 = $ip;
        $392 = HEAP32[$391>>2]|0;
        $393 = $c;
        $394 = (($392) + ($393))|0;
        $395 = $pix;
        $396 = (($395) + ($394<<1)|0);
        $397 = HEAP16[$396>>1]|0;
        $398 = $397&65535;
        $399 = $c;
        $400 = (($sum) + ($399<<2)|0);
        $401 = HEAP32[$400>>2]|0;
        $402 = (($401) + ($398))|0;
        HEAP32[$400>>2] = $402;
       }
       $403 = $c;
       $404 = (($403) + 1)|0;
       $c = $404;
      }
      $405 = $num;
      $406 = (($405) + 1)|0;
      $num = $406;
     }
     $407 = $g;
     $408 = (($407) + 1)|0;
     $g = $408;
     $409 = $ip;
     $410 = (($409) + 8|0);
     $ip = $410;
    }
    $c = 0;
    while(1) {
     $411 = $c;
     $412 = HEAP32[132304>>2]|0;
     $413 = ($411>>>0)<($412>>>0);
     if (!($413)) {
      break;
     }
     $414 = $color;
     $415 = $pix;
     $416 = (($415) + ($414<<1)|0);
     $417 = HEAP16[$416>>1]|0;
     $418 = $417&65535;
     $t = $418;
     $419 = $c;
     $420 = $color;
     $421 = ($419|0)!=($420|0);
     if ($421) {
      $422 = $c;
      $423 = (($sum) + ($422<<2)|0);
      $424 = HEAP32[$423>>2]|0;
      $425 = $color;
      $426 = (($sum) + ($425<<2)|0);
      $427 = HEAP32[$426>>2]|0;
      $428 = (($424) - ($427))|0;
      $429 = $num;
      $430 = (($428|0) / ($429|0))&-1;
      $431 = $t;
      $432 = (($431) + ($430))|0;
      $t = $432;
     }
     $433 = $t;
     $434 = ($433|0)<(65535);
     if ($434) {
      $435 = $t;
      $437 = $435;
     } else {
      $437 = 65535;
     }
     $436 = (0)>($437|0);
     if ($436) {
      $442 = 0;
     } else {
      $438 = $t;
      $439 = ($438|0)<(65535);
      if ($439) {
       $440 = $t;
       $514 = $440;
      } else {
       $514 = 65535;
      }
      $442 = $514;
     }
     $441 = $442&65535;
     $443 = $c;
     $444 = $col;
     $445 = (($brow) + 8|0);
     $446 = HEAP32[$445>>2]|0;
     $447 = (($446) + ($444<<3)|0);
     $448 = (($447) + ($443<<1)|0);
     HEAP16[$448>>1] = $441;
     $449 = $c;
     $450 = (($449) + 1)|0;
     $c = $450;
    }
   }
   $451 = $col;
   $452 = (($451) + 1)|0;
   $col = $452;
  }
  $453 = $row;
  $454 = ($453|0)>(3);
  if ($454) {
   $455 = $row;
   $456 = (($455) - 2)|0;
   $457 = HEAP16[132120>>1]|0;
   $458 = $457&65535;
   $459 = Math_imul($456, $458)|0;
   $460 = (($459) + 2)|0;
   $461 = HEAP32[132144>>2]|0;
   $462 = (($461) + ($460<<3)|0);
   $463 = HEAP32[$brow>>2]|0;
   $464 = (($463) + 16|0);
   $465 = HEAP16[132120>>1]|0;
   $466 = $465&65535;
   $467 = (($466) - 4)|0;
   $468 = $467<<3;
   _memcpy(($462|0),($464|0),($468|0))|0;
  }
  $g = 0;
  while(1) {
   $469 = $g;
   $470 = ($469|0)<(4);
   if (!($470)) {
    break;
   }
   $471 = $g;
   $472 = (($brow) + ($471<<2)|0);
   $473 = HEAP32[$472>>2]|0;
   $474 = $g;
   $475 = (($474) - 1)|0;
   $476 = $475 & 3;
   $477 = (($brow) + ($476<<2)|0);
   HEAP32[$477>>2] = $473;
   $478 = $g;
   $479 = (($478) + 1)|0;
   $g = $479;
  }
  $480 = $row;
  $481 = (($480) + 1)|0;
  $row = $481;
 }
 $482 = $row;
 $483 = (($482) - 2)|0;
 $484 = HEAP16[132120>>1]|0;
 $485 = $484&65535;
 $486 = Math_imul($483, $485)|0;
 $487 = (($486) + 2)|0;
 $488 = HEAP32[132144>>2]|0;
 $489 = (($488) + ($487<<3)|0);
 $490 = HEAP32[$brow>>2]|0;
 $491 = (($490) + 16|0);
 $492 = HEAP16[132120>>1]|0;
 $493 = $492&65535;
 $494 = (($493) - 4)|0;
 $495 = $494<<3;
 _memcpy(($489|0),($491|0),($495|0))|0;
 $496 = $row;
 $497 = (($496) - 1)|0;
 $498 = HEAP16[132120>>1]|0;
 $499 = $498&65535;
 $500 = Math_imul($497, $499)|0;
 $501 = (($500) + 2)|0;
 $502 = HEAP32[132144>>2]|0;
 $503 = (($502) + ($501<<3)|0);
 $504 = (($brow) + 4|0);
 $505 = HEAP32[$504>>2]|0;
 $506 = (($505) + 16|0);
 $507 = HEAP16[132120>>1]|0;
 $508 = $507&65535;
 $509 = (($508) - 4)|0;
 $510 = $509<<3;
 _memcpy(($503|0),($506|0),($510|0))|0;
 $511 = (($brow) + 16|0);
 $512 = HEAP32[$511>>2]|0;
 _free($512);
 $513 = HEAP32[$code>>2]|0;
 _free($513);
 STACKTOP = sp;return;
}
function _ppg_interpolate() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0;
 var $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0;
 var $996 = 0, $997 = 0, $998 = 0, $999 = 0, $c = 0, $col = 0, $d = 0, $diff = 0, $dir = 0, $guess = 0, $i = 0, $pix = 0, $row = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $dir = sp + 40|0;
 $diff = sp + 24|0;
 $guess = sp + 64|0;
 HEAP32[$dir>>2] = 1;
 $0 = (($dir) + 4|0);
 $1 = HEAP16[132120>>1]|0;
 $2 = $1&65535;
 HEAP32[$0>>2] = $2;
 $3 = (($0) + 4|0);
 HEAP32[$3>>2] = -1;
 $4 = (($3) + 4|0);
 $5 = HEAP16[132120>>1]|0;
 $6 = $5&65535;
 $7 = (0 - ($6))|0;
 HEAP32[$4>>2] = $7;
 $8 = (($4) + 4|0);
 HEAP32[$8>>2] = 1;
 _border_interpolate(3);
 $9 = HEAP32[168>>2]|0;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = HEAP32[_stderr>>2]|0;
  (_fprintf(($11|0),(191728|0),($vararg_buffer|0))|0);
 }
 $row = 3;
 while(1) {
  $12 = $row;
  $13 = HEAP16[132112>>1]|0;
  $14 = $13&65535;
  $15 = (($14) - 3)|0;
  $16 = ($12|0)<($15|0);
  if (!($16)) {
   break;
  }
  $17 = HEAP32[600>>2]|0;
  $18 = $row;
  $19 = $18 << 1;
  $20 = $19 & 14;
  $21 = (($20) + 1)|0;
  $22 = $21 << 1;
  $23 = $17 >>> $22;
  $24 = $23 & 3;
  $25 = $24 & 1;
  $26 = (3 + ($25))|0;
  $col = $26;
  $27 = HEAP32[600>>2]|0;
  $28 = $row;
  $29 = $28 << 1;
  $30 = $29 & 14;
  $31 = $col;
  $32 = $31 & 1;
  $33 = (($30) + ($32))|0;
  $34 = $33 << 1;
  $35 = $27 >>> $34;
  $36 = $35 & 3;
  $c = $36;
  while(1) {
   $37 = $col;
   $38 = HEAP16[132120>>1]|0;
   $39 = $38&65535;
   $40 = (($39) - 3)|0;
   $41 = ($37|0)<($40|0);
   if (!($41)) {
    break;
   }
   $42 = HEAP32[132144>>2]|0;
   $43 = $row;
   $44 = HEAP16[132120>>1]|0;
   $45 = $44&65535;
   $46 = Math_imul($43, $45)|0;
   $47 = (($42) + ($46<<3)|0);
   $48 = $col;
   $49 = (($47) + ($48<<3)|0);
   $pix = $49;
   $i = 0;
   while(1) {
    $50 = $i;
    $51 = (($dir) + ($50<<2)|0);
    $52 = HEAP32[$51>>2]|0;
    $d = $52;
    $53 = ($52|0)>(0);
    if (!($53)) {
     break;
    }
    $54 = $d;
    $55 = (0 - ($54))|0;
    $56 = $pix;
    $57 = (($56) + ($55<<3)|0);
    $58 = (($57) + 2|0);
    $59 = HEAP16[$58>>1]|0;
    $60 = $59&65535;
    $61 = $c;
    $62 = $pix;
    $63 = (($62) + ($61<<1)|0);
    $64 = HEAP16[$63>>1]|0;
    $65 = $64&65535;
    $66 = (($60) + ($65))|0;
    $67 = $d;
    $68 = $pix;
    $69 = (($68) + ($67<<3)|0);
    $70 = (($69) + 2|0);
    $71 = HEAP16[$70>>1]|0;
    $72 = $71&65535;
    $73 = (($66) + ($72))|0;
    $74 = $73<<1;
    $75 = $c;
    $76 = $d;
    $77 = Math_imul(-2, $76)|0;
    $78 = $pix;
    $79 = (($78) + ($77<<3)|0);
    $80 = (($79) + ($75<<1)|0);
    $81 = HEAP16[$80>>1]|0;
    $82 = $81&65535;
    $83 = (($74) - ($82))|0;
    $84 = $c;
    $85 = $d;
    $86 = $85<<1;
    $87 = $pix;
    $88 = (($87) + ($86<<3)|0);
    $89 = (($88) + ($84<<1)|0);
    $90 = HEAP16[$89>>1]|0;
    $91 = $90&65535;
    $92 = (($83) - ($91))|0;
    $93 = $i;
    $94 = (($guess) + ($93<<2)|0);
    HEAP32[$94>>2] = $92;
    $95 = $c;
    $96 = $d;
    $97 = Math_imul(-2, $96)|0;
    $98 = $pix;
    $99 = (($98) + ($97<<3)|0);
    $100 = (($99) + ($95<<1)|0);
    $101 = HEAP16[$100>>1]|0;
    $102 = $101&65535;
    $103 = $c;
    $104 = $pix;
    $105 = (($104) + ($103<<1)|0);
    $106 = HEAP16[$105>>1]|0;
    $107 = $106&65535;
    $108 = (($102) - ($107))|0;
    $109 = $c;
    $110 = $d;
    $111 = Math_imul(-2, $110)|0;
    $112 = $pix;
    $113 = (($112) + ($111<<3)|0);
    $114 = (($113) + ($109<<1)|0);
    $115 = HEAP16[$114>>1]|0;
    $116 = $115&65535;
    $117 = $c;
    $118 = $pix;
    $119 = (($118) + ($117<<1)|0);
    $120 = HEAP16[$119>>1]|0;
    $121 = $120&65535;
    $122 = (($116) - ($121))|0;
    $123 = $122 >> 31;
    $124 = $108 ^ $123;
    $125 = $c;
    $126 = $d;
    $127 = Math_imul(-2, $126)|0;
    $128 = $pix;
    $129 = (($128) + ($127<<3)|0);
    $130 = (($129) + ($125<<1)|0);
    $131 = HEAP16[$130>>1]|0;
    $132 = $131&65535;
    $133 = $c;
    $134 = $pix;
    $135 = (($134) + ($133<<1)|0);
    $136 = HEAP16[$135>>1]|0;
    $137 = $136&65535;
    $138 = (($132) - ($137))|0;
    $139 = $138 >> 31;
    $140 = (($124) - ($139))|0;
    $141 = $c;
    $142 = $d;
    $143 = $142<<1;
    $144 = $pix;
    $145 = (($144) + ($143<<3)|0);
    $146 = (($145) + ($141<<1)|0);
    $147 = HEAP16[$146>>1]|0;
    $148 = $147&65535;
    $149 = $c;
    $150 = $pix;
    $151 = (($150) + ($149<<1)|0);
    $152 = HEAP16[$151>>1]|0;
    $153 = $152&65535;
    $154 = (($148) - ($153))|0;
    $155 = $c;
    $156 = $d;
    $157 = $156<<1;
    $158 = $pix;
    $159 = (($158) + ($157<<3)|0);
    $160 = (($159) + ($155<<1)|0);
    $161 = HEAP16[$160>>1]|0;
    $162 = $161&65535;
    $163 = $c;
    $164 = $pix;
    $165 = (($164) + ($163<<1)|0);
    $166 = HEAP16[$165>>1]|0;
    $167 = $166&65535;
    $168 = (($162) - ($167))|0;
    $169 = $168 >> 31;
    $170 = $154 ^ $169;
    $171 = $c;
    $172 = $d;
    $173 = $172<<1;
    $174 = $pix;
    $175 = (($174) + ($173<<3)|0);
    $176 = (($175) + ($171<<1)|0);
    $177 = HEAP16[$176>>1]|0;
    $178 = $177&65535;
    $179 = $c;
    $180 = $pix;
    $181 = (($180) + ($179<<1)|0);
    $182 = HEAP16[$181>>1]|0;
    $183 = $182&65535;
    $184 = (($178) - ($183))|0;
    $185 = $184 >> 31;
    $186 = (($170) - ($185))|0;
    $187 = (($140) + ($186))|0;
    $188 = $d;
    $189 = (0 - ($188))|0;
    $190 = $pix;
    $191 = (($190) + ($189<<3)|0);
    $192 = (($191) + 2|0);
    $193 = HEAP16[$192>>1]|0;
    $194 = $193&65535;
    $195 = $d;
    $196 = $pix;
    $197 = (($196) + ($195<<3)|0);
    $198 = (($197) + 2|0);
    $199 = HEAP16[$198>>1]|0;
    $200 = $199&65535;
    $201 = (($194) - ($200))|0;
    $202 = $d;
    $203 = (0 - ($202))|0;
    $204 = $pix;
    $205 = (($204) + ($203<<3)|0);
    $206 = (($205) + 2|0);
    $207 = HEAP16[$206>>1]|0;
    $208 = $207&65535;
    $209 = $d;
    $210 = $pix;
    $211 = (($210) + ($209<<3)|0);
    $212 = (($211) + 2|0);
    $213 = HEAP16[$212>>1]|0;
    $214 = $213&65535;
    $215 = (($208) - ($214))|0;
    $216 = $215 >> 31;
    $217 = $201 ^ $216;
    $218 = $d;
    $219 = (0 - ($218))|0;
    $220 = $pix;
    $221 = (($220) + ($219<<3)|0);
    $222 = (($221) + 2|0);
    $223 = HEAP16[$222>>1]|0;
    $224 = $223&65535;
    $225 = $d;
    $226 = $pix;
    $227 = (($226) + ($225<<3)|0);
    $228 = (($227) + 2|0);
    $229 = HEAP16[$228>>1]|0;
    $230 = $229&65535;
    $231 = (($224) - ($230))|0;
    $232 = $231 >> 31;
    $233 = (($217) - ($232))|0;
    $234 = (($187) + ($233))|0;
    $235 = ($234*3)|0;
    $236 = $d;
    $237 = ($236*3)|0;
    $238 = $pix;
    $239 = (($238) + ($237<<3)|0);
    $240 = (($239) + 2|0);
    $241 = HEAP16[$240>>1]|0;
    $242 = $241&65535;
    $243 = $d;
    $244 = $pix;
    $245 = (($244) + ($243<<3)|0);
    $246 = (($245) + 2|0);
    $247 = HEAP16[$246>>1]|0;
    $248 = $247&65535;
    $249 = (($242) - ($248))|0;
    $250 = $d;
    $251 = ($250*3)|0;
    $252 = $pix;
    $253 = (($252) + ($251<<3)|0);
    $254 = (($253) + 2|0);
    $255 = HEAP16[$254>>1]|0;
    $256 = $255&65535;
    $257 = $d;
    $258 = $pix;
    $259 = (($258) + ($257<<3)|0);
    $260 = (($259) + 2|0);
    $261 = HEAP16[$260>>1]|0;
    $262 = $261&65535;
    $263 = (($256) - ($262))|0;
    $264 = $263 >> 31;
    $265 = $249 ^ $264;
    $266 = $d;
    $267 = ($266*3)|0;
    $268 = $pix;
    $269 = (($268) + ($267<<3)|0);
    $270 = (($269) + 2|0);
    $271 = HEAP16[$270>>1]|0;
    $272 = $271&65535;
    $273 = $d;
    $274 = $pix;
    $275 = (($274) + ($273<<3)|0);
    $276 = (($275) + 2|0);
    $277 = HEAP16[$276>>1]|0;
    $278 = $277&65535;
    $279 = (($272) - ($278))|0;
    $280 = $279 >> 31;
    $281 = (($265) - ($280))|0;
    $282 = $d;
    $283 = Math_imul(-3, $282)|0;
    $284 = $pix;
    $285 = (($284) + ($283<<3)|0);
    $286 = (($285) + 2|0);
    $287 = HEAP16[$286>>1]|0;
    $288 = $287&65535;
    $289 = $d;
    $290 = (0 - ($289))|0;
    $291 = $pix;
    $292 = (($291) + ($290<<3)|0);
    $293 = (($292) + 2|0);
    $294 = HEAP16[$293>>1]|0;
    $295 = $294&65535;
    $296 = (($288) - ($295))|0;
    $297 = $d;
    $298 = Math_imul(-3, $297)|0;
    $299 = $pix;
    $300 = (($299) + ($298<<3)|0);
    $301 = (($300) + 2|0);
    $302 = HEAP16[$301>>1]|0;
    $303 = $302&65535;
    $304 = $d;
    $305 = (0 - ($304))|0;
    $306 = $pix;
    $307 = (($306) + ($305<<3)|0);
    $308 = (($307) + 2|0);
    $309 = HEAP16[$308>>1]|0;
    $310 = $309&65535;
    $311 = (($303) - ($310))|0;
    $312 = $311 >> 31;
    $313 = $296 ^ $312;
    $314 = $d;
    $315 = Math_imul(-3, $314)|0;
    $316 = $pix;
    $317 = (($316) + ($315<<3)|0);
    $318 = (($317) + 2|0);
    $319 = HEAP16[$318>>1]|0;
    $320 = $319&65535;
    $321 = $d;
    $322 = (0 - ($321))|0;
    $323 = $pix;
    $324 = (($323) + ($322<<3)|0);
    $325 = (($324) + 2|0);
    $326 = HEAP16[$325>>1]|0;
    $327 = $326&65535;
    $328 = (($320) - ($327))|0;
    $329 = $328 >> 31;
    $330 = (($313) - ($329))|0;
    $331 = (($281) + ($330))|0;
    $332 = $331<<1;
    $333 = (($235) + ($332))|0;
    $334 = $i;
    $335 = (($diff) + ($334<<2)|0);
    HEAP32[$335>>2] = $333;
    $336 = $i;
    $337 = (($336) + 1)|0;
    $i = $337;
   }
   $338 = HEAP32[$diff>>2]|0;
   $339 = (($diff) + 4|0);
   $340 = HEAP32[$339>>2]|0;
   $341 = ($338|0)>($340|0);
   $342 = $341&1;
   $i = $342;
   $343 = (($dir) + ($342<<2)|0);
   $344 = HEAP32[$343>>2]|0;
   $d = $344;
   $345 = $d;
   $346 = $pix;
   $347 = (($346) + ($345<<3)|0);
   $348 = (($347) + 2|0);
   $349 = HEAP16[$348>>1]|0;
   $350 = $349&65535;
   $351 = $d;
   $352 = (0 - ($351))|0;
   $353 = $pix;
   $354 = (($353) + ($352<<3)|0);
   $355 = (($354) + 2|0);
   $356 = HEAP16[$355>>1]|0;
   $357 = $356&65535;
   $358 = ($350|0)<($357|0);
   if ($358) {
    $359 = $d;
    $360 = $pix;
    $361 = (($360) + ($359<<3)|0);
    $362 = (($361) + 2|0);
    $363 = HEAP16[$362>>1]|0;
    $364 = $363&65535;
    $365 = $i;
    $366 = (($guess) + ($365<<2)|0);
    $367 = HEAP32[$366>>2]|0;
    $368 = $367 >> 2;
    $369 = $d;
    $370 = (0 - ($369))|0;
    $371 = $pix;
    $372 = (($371) + ($370<<3)|0);
    $373 = (($372) + 2|0);
    $374 = HEAP16[$373>>1]|0;
    $375 = $374&65535;
    $376 = ($368|0)<($375|0);
    if ($376) {
     $377 = $i;
     $378 = (($guess) + ($377<<2)|0);
     $379 = HEAP32[$378>>2]|0;
     $380 = $379 >> 2;
     $389 = $380;
    } else {
     $381 = $d;
     $382 = (0 - ($381))|0;
     $383 = $pix;
     $384 = (($383) + ($382<<3)|0);
     $385 = (($384) + 2|0);
     $386 = HEAP16[$385>>1]|0;
     $387 = $386&65535;
     $389 = $387;
    }
    $388 = ($364|0)>($389|0);
    if ($388) {
     $390 = $d;
     $391 = $pix;
     $392 = (($391) + ($390<<3)|0);
     $393 = (($392) + 2|0);
     $394 = HEAP16[$393>>1]|0;
     $395 = $394&65535;
     $997 = $395;
    } else {
     $396 = $i;
     $397 = (($guess) + ($396<<2)|0);
     $398 = HEAP32[$397>>2]|0;
     $399 = $398 >> 2;
     $400 = $d;
     $401 = (0 - ($400))|0;
     $402 = $pix;
     $403 = (($402) + ($401<<3)|0);
     $404 = (($403) + 2|0);
     $405 = HEAP16[$404>>1]|0;
     $406 = $405&65535;
     $407 = ($399|0)<($406|0);
     if ($407) {
      $408 = $i;
      $409 = (($guess) + ($408<<2)|0);
      $410 = HEAP32[$409>>2]|0;
      $411 = $410 >> 2;
      $998 = $411;
     } else {
      $412 = $d;
      $413 = (0 - ($412))|0;
      $414 = $pix;
      $415 = (($414) + ($413<<3)|0);
      $416 = (($415) + 2|0);
      $417 = HEAP16[$416>>1]|0;
      $418 = $417&65535;
      $998 = $418;
     }
     $997 = $998;
    }
    $478 = $997;
   } else {
    $419 = $d;
    $420 = (0 - ($419))|0;
    $421 = $pix;
    $422 = (($421) + ($420<<3)|0);
    $423 = (($422) + 2|0);
    $424 = HEAP16[$423>>1]|0;
    $425 = $424&65535;
    $426 = $i;
    $427 = (($guess) + ($426<<2)|0);
    $428 = HEAP32[$427>>2]|0;
    $429 = $428 >> 2;
    $430 = $d;
    $431 = $pix;
    $432 = (($431) + ($430<<3)|0);
    $433 = (($432) + 2|0);
    $434 = HEAP16[$433>>1]|0;
    $435 = $434&65535;
    $436 = ($429|0)<($435|0);
    if ($436) {
     $437 = $i;
     $438 = (($guess) + ($437<<2)|0);
     $439 = HEAP32[$438>>2]|0;
     $440 = $439 >> 2;
     $448 = $440;
    } else {
     $441 = $d;
     $442 = $pix;
     $443 = (($442) + ($441<<3)|0);
     $444 = (($443) + 2|0);
     $445 = HEAP16[$444>>1]|0;
     $446 = $445&65535;
     $448 = $446;
    }
    $447 = ($425|0)>($448|0);
    if ($447) {
     $449 = $d;
     $450 = (0 - ($449))|0;
     $451 = $pix;
     $452 = (($451) + ($450<<3)|0);
     $453 = (($452) + 2|0);
     $454 = HEAP16[$453>>1]|0;
     $455 = $454&65535;
     $999 = $455;
    } else {
     $456 = $i;
     $457 = (($guess) + ($456<<2)|0);
     $458 = HEAP32[$457>>2]|0;
     $459 = $458 >> 2;
     $460 = $d;
     $461 = $pix;
     $462 = (($461) + ($460<<3)|0);
     $463 = (($462) + 2|0);
     $464 = HEAP16[$463>>1]|0;
     $465 = $464&65535;
     $466 = ($459|0)<($465|0);
     if ($466) {
      $467 = $i;
      $468 = (($guess) + ($467<<2)|0);
      $469 = HEAP32[$468>>2]|0;
      $470 = $469 >> 2;
      $1000 = $470;
     } else {
      $471 = $d;
      $472 = $pix;
      $473 = (($472) + ($471<<3)|0);
      $474 = (($473) + 2|0);
      $475 = HEAP16[$474>>1]|0;
      $476 = $475&65535;
      $1000 = $476;
     }
     $999 = $1000;
    }
    $478 = $999;
   }
   $477 = $478&65535;
   $479 = $pix;
   $480 = (($479) + 2|0);
   HEAP16[$480>>1] = $477;
   $481 = $col;
   $482 = (($481) + 2)|0;
   $col = $482;
  }
  $483 = $row;
  $484 = (($483) + 1)|0;
  $row = $484;
 }
 $row = 1;
 while(1) {
  $485 = $row;
  $486 = HEAP16[132112>>1]|0;
  $487 = $486&65535;
  $488 = (($487) - 1)|0;
  $489 = ($485|0)<($488|0);
  if (!($489)) {
   break;
  }
  $490 = HEAP32[600>>2]|0;
  $491 = $row;
  $492 = $491 << 1;
  $493 = $492 & 14;
  $494 = (($493) + 0)|0;
  $495 = $494 << 1;
  $496 = $490 >>> $495;
  $497 = $496 & 3;
  $498 = $497 & 1;
  $499 = (1 + ($498))|0;
  $col = $499;
  $500 = HEAP32[600>>2]|0;
  $501 = $row;
  $502 = $501 << 1;
  $503 = $502 & 14;
  $504 = $col;
  $505 = (($504) + 1)|0;
  $506 = $505 & 1;
  $507 = (($503) + ($506))|0;
  $508 = $507 << 1;
  $509 = $500 >>> $508;
  $510 = $509 & 3;
  $c = $510;
  while(1) {
   $511 = $col;
   $512 = HEAP16[132120>>1]|0;
   $513 = $512&65535;
   $514 = (($513) - 1)|0;
   $515 = ($511|0)<($514|0);
   if (!($515)) {
    break;
   }
   $516 = HEAP32[132144>>2]|0;
   $517 = $row;
   $518 = HEAP16[132120>>1]|0;
   $519 = $518&65535;
   $520 = Math_imul($517, $519)|0;
   $521 = (($516) + ($520<<3)|0);
   $522 = $col;
   $523 = (($521) + ($522<<3)|0);
   $pix = $523;
   $i = 0;
   while(1) {
    $524 = $i;
    $525 = (($dir) + ($524<<2)|0);
    $526 = HEAP32[$525>>2]|0;
    $d = $526;
    $527 = ($526|0)>(0);
    if (!($527)) {
     break;
    }
    $528 = $c;
    $529 = $d;
    $530 = (0 - ($529))|0;
    $531 = $pix;
    $532 = (($531) + ($530<<3)|0);
    $533 = (($532) + ($528<<1)|0);
    $534 = HEAP16[$533>>1]|0;
    $535 = $534&65535;
    $536 = $c;
    $537 = $d;
    $538 = $pix;
    $539 = (($538) + ($537<<3)|0);
    $540 = (($539) + ($536<<1)|0);
    $541 = HEAP16[$540>>1]|0;
    $542 = $541&65535;
    $543 = (($535) + ($542))|0;
    $544 = $pix;
    $545 = (($544) + 2|0);
    $546 = HEAP16[$545>>1]|0;
    $547 = $546&65535;
    $548 = $547<<1;
    $549 = (($543) + ($548))|0;
    $550 = $d;
    $551 = (0 - ($550))|0;
    $552 = $pix;
    $553 = (($552) + ($551<<3)|0);
    $554 = (($553) + 2|0);
    $555 = HEAP16[$554>>1]|0;
    $556 = $555&65535;
    $557 = (($549) - ($556))|0;
    $558 = $d;
    $559 = $pix;
    $560 = (($559) + ($558<<3)|0);
    $561 = (($560) + 2|0);
    $562 = HEAP16[$561>>1]|0;
    $563 = $562&65535;
    $564 = (($557) - ($563))|0;
    $565 = $564 >> 1;
    $566 = ($565|0)<(65535);
    if ($566) {
     $567 = $c;
     $568 = $d;
     $569 = (0 - ($568))|0;
     $570 = $pix;
     $571 = (($570) + ($569<<3)|0);
     $572 = (($571) + ($567<<1)|0);
     $573 = HEAP16[$572>>1]|0;
     $574 = $573&65535;
     $575 = $c;
     $576 = $d;
     $577 = $pix;
     $578 = (($577) + ($576<<3)|0);
     $579 = (($578) + ($575<<1)|0);
     $580 = HEAP16[$579>>1]|0;
     $581 = $580&65535;
     $582 = (($574) + ($581))|0;
     $583 = $pix;
     $584 = (($583) + 2|0);
     $585 = HEAP16[$584>>1]|0;
     $586 = $585&65535;
     $587 = $586<<1;
     $588 = (($582) + ($587))|0;
     $589 = $d;
     $590 = (0 - ($589))|0;
     $591 = $pix;
     $592 = (($591) + ($590<<3)|0);
     $593 = (($592) + 2|0);
     $594 = HEAP16[$593>>1]|0;
     $595 = $594&65535;
     $596 = (($588) - ($595))|0;
     $597 = $d;
     $598 = $pix;
     $599 = (($598) + ($597<<3)|0);
     $600 = (($599) + 2|0);
     $601 = HEAP16[$600>>1]|0;
     $602 = $601&65535;
     $603 = (($596) - ($602))|0;
     $604 = $603 >> 1;
     $606 = $604;
    } else {
     $606 = 65535;
    }
    $605 = (0)>($606|0);
    if ($605) {
     $685 = 0;
    } else {
     $607 = $c;
     $608 = $d;
     $609 = (0 - ($608))|0;
     $610 = $pix;
     $611 = (($610) + ($609<<3)|0);
     $612 = (($611) + ($607<<1)|0);
     $613 = HEAP16[$612>>1]|0;
     $614 = $613&65535;
     $615 = $c;
     $616 = $d;
     $617 = $pix;
     $618 = (($617) + ($616<<3)|0);
     $619 = (($618) + ($615<<1)|0);
     $620 = HEAP16[$619>>1]|0;
     $621 = $620&65535;
     $622 = (($614) + ($621))|0;
     $623 = $pix;
     $624 = (($623) + 2|0);
     $625 = HEAP16[$624>>1]|0;
     $626 = $625&65535;
     $627 = $626<<1;
     $628 = (($622) + ($627))|0;
     $629 = $d;
     $630 = (0 - ($629))|0;
     $631 = $pix;
     $632 = (($631) + ($630<<3)|0);
     $633 = (($632) + 2|0);
     $634 = HEAP16[$633>>1]|0;
     $635 = $634&65535;
     $636 = (($628) - ($635))|0;
     $637 = $d;
     $638 = $pix;
     $639 = (($638) + ($637<<3)|0);
     $640 = (($639) + 2|0);
     $641 = HEAP16[$640>>1]|0;
     $642 = $641&65535;
     $643 = (($636) - ($642))|0;
     $644 = $643 >> 1;
     $645 = ($644|0)<(65535);
     if ($645) {
      $646 = $c;
      $647 = $d;
      $648 = (0 - ($647))|0;
      $649 = $pix;
      $650 = (($649) + ($648<<3)|0);
      $651 = (($650) + ($646<<1)|0);
      $652 = HEAP16[$651>>1]|0;
      $653 = $652&65535;
      $654 = $c;
      $655 = $d;
      $656 = $pix;
      $657 = (($656) + ($655<<3)|0);
      $658 = (($657) + ($654<<1)|0);
      $659 = HEAP16[$658>>1]|0;
      $660 = $659&65535;
      $661 = (($653) + ($660))|0;
      $662 = $pix;
      $663 = (($662) + 2|0);
      $664 = HEAP16[$663>>1]|0;
      $665 = $664&65535;
      $666 = $665<<1;
      $667 = (($661) + ($666))|0;
      $668 = $d;
      $669 = (0 - ($668))|0;
      $670 = $pix;
      $671 = (($670) + ($669<<3)|0);
      $672 = (($671) + 2|0);
      $673 = HEAP16[$672>>1]|0;
      $674 = $673&65535;
      $675 = (($667) - ($674))|0;
      $676 = $d;
      $677 = $pix;
      $678 = (($677) + ($676<<3)|0);
      $679 = (($678) + 2|0);
      $680 = HEAP16[$679>>1]|0;
      $681 = $680&65535;
      $682 = (($675) - ($681))|0;
      $683 = $682 >> 1;
      $1001 = $683;
     } else {
      $1001 = 65535;
     }
     $685 = $1001;
    }
    $684 = $685&65535;
    $686 = $c;
    $687 = $pix;
    $688 = (($687) + ($686<<1)|0);
    HEAP16[$688>>1] = $684;
    $689 = $c;
    $690 = (2 - ($689))|0;
    $c = $690;
    $691 = $i;
    $692 = (($691) + 1)|0;
    $i = $692;
   }
   $693 = $col;
   $694 = (($693) + 2)|0;
   $col = $694;
  }
  $695 = $row;
  $696 = (($695) + 1)|0;
  $row = $696;
 }
 $row = 1;
 while(1) {
  $697 = $row;
  $698 = HEAP16[132112>>1]|0;
  $699 = $698&65535;
  $700 = (($699) - 1)|0;
  $701 = ($697|0)<($700|0);
  if (!($701)) {
   break;
  }
  $702 = HEAP32[600>>2]|0;
  $703 = $row;
  $704 = $703 << 1;
  $705 = $704 & 14;
  $706 = (($705) + 1)|0;
  $707 = $706 << 1;
  $708 = $702 >>> $707;
  $709 = $708 & 3;
  $710 = $709 & 1;
  $711 = (1 + ($710))|0;
  $col = $711;
  $712 = HEAP32[600>>2]|0;
  $713 = $row;
  $714 = $713 << 1;
  $715 = $714 & 14;
  $716 = $col;
  $717 = $716 & 1;
  $718 = (($715) + ($717))|0;
  $719 = $718 << 1;
  $720 = $712 >>> $719;
  $721 = $720 & 3;
  $722 = (2 - ($721))|0;
  $c = $722;
  while(1) {
   $723 = $col;
   $724 = HEAP16[132120>>1]|0;
   $725 = $724&65535;
   $726 = (($725) - 1)|0;
   $727 = ($723|0)<($726|0);
   if (!($727)) {
    break;
   }
   $728 = HEAP32[132144>>2]|0;
   $729 = $row;
   $730 = HEAP16[132120>>1]|0;
   $731 = $730&65535;
   $732 = Math_imul($729, $731)|0;
   $733 = (($728) + ($732<<3)|0);
   $734 = $col;
   $735 = (($733) + ($734<<3)|0);
   $pix = $735;
   $i = 0;
   while(1) {
    $736 = $i;
    $737 = (($dir) + ($736<<2)|0);
    $738 = HEAP32[$737>>2]|0;
    $739 = $i;
    $740 = (($739) + 1)|0;
    $741 = (($dir) + ($740<<2)|0);
    $742 = HEAP32[$741>>2]|0;
    $743 = (($738) + ($742))|0;
    $d = $743;
    $744 = ($743|0)>(0);
    if (!($744)) {
     break;
    }
    $745 = $c;
    $746 = $d;
    $747 = (0 - ($746))|0;
    $748 = $pix;
    $749 = (($748) + ($747<<3)|0);
    $750 = (($749) + ($745<<1)|0);
    $751 = HEAP16[$750>>1]|0;
    $752 = $751&65535;
    $753 = $c;
    $754 = $d;
    $755 = $pix;
    $756 = (($755) + ($754<<3)|0);
    $757 = (($756) + ($753<<1)|0);
    $758 = HEAP16[$757>>1]|0;
    $759 = $758&65535;
    $760 = (($752) - ($759))|0;
    $761 = $c;
    $762 = $d;
    $763 = (0 - ($762))|0;
    $764 = $pix;
    $765 = (($764) + ($763<<3)|0);
    $766 = (($765) + ($761<<1)|0);
    $767 = HEAP16[$766>>1]|0;
    $768 = $767&65535;
    $769 = $c;
    $770 = $d;
    $771 = $pix;
    $772 = (($771) + ($770<<3)|0);
    $773 = (($772) + ($769<<1)|0);
    $774 = HEAP16[$773>>1]|0;
    $775 = $774&65535;
    $776 = (($768) - ($775))|0;
    $777 = $776 >> 31;
    $778 = $760 ^ $777;
    $779 = $c;
    $780 = $d;
    $781 = (0 - ($780))|0;
    $782 = $pix;
    $783 = (($782) + ($781<<3)|0);
    $784 = (($783) + ($779<<1)|0);
    $785 = HEAP16[$784>>1]|0;
    $786 = $785&65535;
    $787 = $c;
    $788 = $d;
    $789 = $pix;
    $790 = (($789) + ($788<<3)|0);
    $791 = (($790) + ($787<<1)|0);
    $792 = HEAP16[$791>>1]|0;
    $793 = $792&65535;
    $794 = (($786) - ($793))|0;
    $795 = $794 >> 31;
    $796 = (($778) - ($795))|0;
    $797 = $d;
    $798 = (0 - ($797))|0;
    $799 = $pix;
    $800 = (($799) + ($798<<3)|0);
    $801 = (($800) + 2|0);
    $802 = HEAP16[$801>>1]|0;
    $803 = $802&65535;
    $804 = $pix;
    $805 = (($804) + 2|0);
    $806 = HEAP16[$805>>1]|0;
    $807 = $806&65535;
    $808 = (($803) - ($807))|0;
    $809 = $d;
    $810 = (0 - ($809))|0;
    $811 = $pix;
    $812 = (($811) + ($810<<3)|0);
    $813 = (($812) + 2|0);
    $814 = HEAP16[$813>>1]|0;
    $815 = $814&65535;
    $816 = $pix;
    $817 = (($816) + 2|0);
    $818 = HEAP16[$817>>1]|0;
    $819 = $818&65535;
    $820 = (($815) - ($819))|0;
    $821 = $820 >> 31;
    $822 = $808 ^ $821;
    $823 = $d;
    $824 = (0 - ($823))|0;
    $825 = $pix;
    $826 = (($825) + ($824<<3)|0);
    $827 = (($826) + 2|0);
    $828 = HEAP16[$827>>1]|0;
    $829 = $828&65535;
    $830 = $pix;
    $831 = (($830) + 2|0);
    $832 = HEAP16[$831>>1]|0;
    $833 = $832&65535;
    $834 = (($829) - ($833))|0;
    $835 = $834 >> 31;
    $836 = (($822) - ($835))|0;
    $837 = (($796) + ($836))|0;
    $838 = $d;
    $839 = $pix;
    $840 = (($839) + ($838<<3)|0);
    $841 = (($840) + 2|0);
    $842 = HEAP16[$841>>1]|0;
    $843 = $842&65535;
    $844 = $pix;
    $845 = (($844) + 2|0);
    $846 = HEAP16[$845>>1]|0;
    $847 = $846&65535;
    $848 = (($843) - ($847))|0;
    $849 = $d;
    $850 = $pix;
    $851 = (($850) + ($849<<3)|0);
    $852 = (($851) + 2|0);
    $853 = HEAP16[$852>>1]|0;
    $854 = $853&65535;
    $855 = $pix;
    $856 = (($855) + 2|0);
    $857 = HEAP16[$856>>1]|0;
    $858 = $857&65535;
    $859 = (($854) - ($858))|0;
    $860 = $859 >> 31;
    $861 = $848 ^ $860;
    $862 = $d;
    $863 = $pix;
    $864 = (($863) + ($862<<3)|0);
    $865 = (($864) + 2|0);
    $866 = HEAP16[$865>>1]|0;
    $867 = $866&65535;
    $868 = $pix;
    $869 = (($868) + 2|0);
    $870 = HEAP16[$869>>1]|0;
    $871 = $870&65535;
    $872 = (($867) - ($871))|0;
    $873 = $872 >> 31;
    $874 = (($861) - ($873))|0;
    $875 = (($837) + ($874))|0;
    $876 = $i;
    $877 = (($diff) + ($876<<2)|0);
    HEAP32[$877>>2] = $875;
    $878 = $c;
    $879 = $d;
    $880 = (0 - ($879))|0;
    $881 = $pix;
    $882 = (($881) + ($880<<3)|0);
    $883 = (($882) + ($878<<1)|0);
    $884 = HEAP16[$883>>1]|0;
    $885 = $884&65535;
    $886 = $c;
    $887 = $d;
    $888 = $pix;
    $889 = (($888) + ($887<<3)|0);
    $890 = (($889) + ($886<<1)|0);
    $891 = HEAP16[$890>>1]|0;
    $892 = $891&65535;
    $893 = (($885) + ($892))|0;
    $894 = $pix;
    $895 = (($894) + 2|0);
    $896 = HEAP16[$895>>1]|0;
    $897 = $896&65535;
    $898 = $897<<1;
    $899 = (($893) + ($898))|0;
    $900 = $d;
    $901 = (0 - ($900))|0;
    $902 = $pix;
    $903 = (($902) + ($901<<3)|0);
    $904 = (($903) + 2|0);
    $905 = HEAP16[$904>>1]|0;
    $906 = $905&65535;
    $907 = (($899) - ($906))|0;
    $908 = $d;
    $909 = $pix;
    $910 = (($909) + ($908<<3)|0);
    $911 = (($910) + 2|0);
    $912 = HEAP16[$911>>1]|0;
    $913 = $912&65535;
    $914 = (($907) - ($913))|0;
    $915 = $i;
    $916 = (($guess) + ($915<<2)|0);
    HEAP32[$916>>2] = $914;
    $917 = $i;
    $918 = (($917) + 1)|0;
    $i = $918;
   }
   $919 = HEAP32[$diff>>2]|0;
   $920 = (($diff) + 4|0);
   $921 = HEAP32[$920>>2]|0;
   $922 = ($919|0)!=($921|0);
   if ($922) {
    $923 = HEAP32[$diff>>2]|0;
    $924 = (($diff) + 4|0);
    $925 = HEAP32[$924>>2]|0;
    $926 = ($923|0)>($925|0);
    $927 = $926&1;
    $928 = (($guess) + ($927<<2)|0);
    $929 = HEAP32[$928>>2]|0;
    $930 = $929 >> 1;
    $931 = ($930|0)<(65535);
    if ($931) {
     $932 = HEAP32[$diff>>2]|0;
     $933 = (($diff) + 4|0);
     $934 = HEAP32[$933>>2]|0;
     $935 = ($932|0)>($934|0);
     $936 = $935&1;
     $937 = (($guess) + ($936<<2)|0);
     $938 = HEAP32[$937>>2]|0;
     $939 = $938 >> 1;
     $941 = $939;
    } else {
     $941 = 65535;
    }
    $940 = (0)>($941|0);
    if ($940) {
     $960 = 0;
    } else {
     $942 = HEAP32[$diff>>2]|0;
     $943 = (($diff) + 4|0);
     $944 = HEAP32[$943>>2]|0;
     $945 = ($942|0)>($944|0);
     $946 = $945&1;
     $947 = (($guess) + ($946<<2)|0);
     $948 = HEAP32[$947>>2]|0;
     $949 = $948 >> 1;
     $950 = ($949|0)<(65535);
     if ($950) {
      $951 = HEAP32[$diff>>2]|0;
      $952 = (($diff) + 4|0);
      $953 = HEAP32[$952>>2]|0;
      $954 = ($951|0)>($953|0);
      $955 = $954&1;
      $956 = (($guess) + ($955<<2)|0);
      $957 = HEAP32[$956>>2]|0;
      $958 = $957 >> 1;
      $1002 = $958;
     } else {
      $1002 = 65535;
     }
     $960 = $1002;
    }
    $959 = $960&65535;
    $961 = $c;
    $962 = $pix;
    $963 = (($962) + ($961<<1)|0);
    HEAP16[$963>>1] = $959;
   } else {
    $964 = HEAP32[$guess>>2]|0;
    $965 = (($guess) + 4|0);
    $966 = HEAP32[$965>>2]|0;
    $967 = (($964) + ($966))|0;
    $968 = $967 >> 2;
    $969 = ($968|0)<(65535);
    if ($969) {
     $970 = HEAP32[$guess>>2]|0;
     $971 = (($guess) + 4|0);
     $972 = HEAP32[$971>>2]|0;
     $973 = (($970) + ($972))|0;
     $974 = $973 >> 2;
     $976 = $974;
    } else {
     $976 = 65535;
    }
    $975 = (0)>($976|0);
    if ($975) {
     $989 = 0;
    } else {
     $977 = HEAP32[$guess>>2]|0;
     $978 = (($guess) + 4|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = (($977) + ($979))|0;
     $981 = $980 >> 2;
     $982 = ($981|0)<(65535);
     if ($982) {
      $983 = HEAP32[$guess>>2]|0;
      $984 = (($guess) + 4|0);
      $985 = HEAP32[$984>>2]|0;
      $986 = (($983) + ($985))|0;
      $987 = $986 >> 2;
      $1003 = $987;
     } else {
      $1003 = 65535;
     }
     $989 = $1003;
    }
    $988 = $989&65535;
    $990 = $c;
    $991 = $pix;
    $992 = (($991) + ($990<<1)|0);
    HEAP16[$992>>1] = $988;
   }
   $993 = $col;
   $994 = (($993) + 2)|0;
   $col = $994;
  }
  $995 = $row;
  $996 = (($995) + 1)|0;
  $row = $996;
 }
 STACKTOP = sp;return;
}
function _cielab($rgb,$lab) {
 $rgb = $rgb|0;
 $lab = $lab|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0.0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0;
 var $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $c = 0, $i = 0, $j = 0, $k = 0, $r = 0.0;
 var $xyz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xyz = sp + 24|0;
 $0 = $rgb;
 $1 = $lab;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $i = 0;
  while(1) {
   $4 = $i;
   $5 = ($4|0)<(65536);
   if (!($5)) {
    break;
   }
   $6 = $i;
   $7 = (+($6|0));
   $8 = $7 / 65535.0;
   $9 = $8;
   $r = $9;
   $10 = $r;
   $11 = $10;
   $12 = $11 > 0.0088559999999999993;
   if ($12) {
    $13 = $r;
    $14 = $13;
    $15 = (+Math_pow((+$14),0.33333333333333331));
    $21 = $15;
   } else {
    $16 = $r;
    $17 = $16;
    $18 = 7.7869999999999999 * $17;
    $19 = $18 + 0.13793103448275862;
    $21 = $19;
   }
   $20 = $21;
   $22 = $i;
   $23 = (191752 + ($22<<2)|0);
   HEAPF32[$23>>2] = $20;
   $24 = $i;
   $25 = (($24) + 1)|0;
   $i = $25;
  }
  $i = 0;
  while(1) {
   $26 = $i;
   $27 = ($26|0)<(3);
   if (!($27)) {
    break;
   }
   $j = 0;
   while(1) {
    $28 = $j;
    $29 = HEAP32[132304>>2]|0;
    $30 = ($28>>>0)<($29>>>0);
    if (!($30)) {
     break;
    }
    $k = 0;
    $31 = $j;
    $32 = $i;
    $33 = (453896 + ($32<<4)|0);
    $34 = (($33) + ($31<<2)|0);
    HEAPF32[$34>>2] = 0.0;
    while(1) {
     $35 = $k;
     $36 = ($35|0)<(3);
     if (!($36)) {
      break;
     }
     $37 = $k;
     $38 = $i;
     $39 = (256 + (($38*24)|0)|0);
     $40 = (($39) + ($37<<3)|0);
     $41 = +HEAPF64[$40>>3];
     $42 = $j;
     $43 = $k;
     $44 = (132312 + ($43<<4)|0);
     $45 = (($44) + ($42<<2)|0);
     $46 = +HEAPF32[$45>>2];
     $47 = $46;
     $48 = $41 * $47;
     $49 = $i;
     $50 = (328 + ($49<<2)|0);
     $51 = +HEAPF32[$50>>2];
     $52 = $51;
     $53 = $48 / $52;
     $54 = $j;
     $55 = $i;
     $56 = (453896 + ($55<<4)|0);
     $57 = (($56) + ($54<<2)|0);
     $58 = +HEAPF32[$57>>2];
     $59 = $58;
     $60 = $59 + $53;
     $61 = $60;
     HEAPF32[$57>>2] = $61;
     $62 = $k;
     $63 = (($62) + 1)|0;
     $k = $63;
    }
    $64 = $j;
    $65 = (($64) + 1)|0;
    $j = $65;
   }
   $66 = $i;
   $67 = (($66) + 1)|0;
   $i = $67;
  }
  STACKTOP = sp;return;
 }
 $68 = (($xyz) + 8|0);
 HEAPF32[$68>>2] = 0.5;
 $69 = (($xyz) + 4|0);
 HEAPF32[$69>>2] = 0.5;
 HEAPF32[$xyz>>2] = 0.5;
 $c = 0;
 while(1) {
  $70 = $c;
  $71 = HEAP32[132304>>2]|0;
  $72 = ($70>>>0)<($71>>>0);
  if (!($72)) {
   break;
  }
  $73 = $c;
  $74 = (453896 + ($73<<2)|0);
  $75 = +HEAPF32[$74>>2];
  $76 = $c;
  $77 = $0;
  $78 = (($77) + ($76<<1)|0);
  $79 = HEAP16[$78>>1]|0;
  $80 = $79&65535;
  $81 = (+($80|0));
  $82 = $75 * $81;
  $83 = +HEAPF32[$xyz>>2];
  $84 = $83 + $82;
  HEAPF32[$xyz>>2] = $84;
  $85 = $c;
  $86 = (((453896 + 16|0)) + ($85<<2)|0);
  $87 = +HEAPF32[$86>>2];
  $88 = $c;
  $89 = $0;
  $90 = (($89) + ($88<<1)|0);
  $91 = HEAP16[$90>>1]|0;
  $92 = $91&65535;
  $93 = (+($92|0));
  $94 = $87 * $93;
  $95 = (($xyz) + 4|0);
  $96 = +HEAPF32[$95>>2];
  $97 = $96 + $94;
  HEAPF32[$95>>2] = $97;
  $98 = $c;
  $99 = (((453896 + 32|0)) + ($98<<2)|0);
  $100 = +HEAPF32[$99>>2];
  $101 = $c;
  $102 = $0;
  $103 = (($102) + ($101<<1)|0);
  $104 = HEAP16[$103>>1]|0;
  $105 = $104&65535;
  $106 = (+($105|0));
  $107 = $100 * $106;
  $108 = (($xyz) + 8|0);
  $109 = +HEAPF32[$108>>2];
  $110 = $109 + $107;
  HEAPF32[$108>>2] = $110;
  $111 = $c;
  $112 = (($111) + 1)|0;
  $c = $112;
 }
 $113 = +HEAPF32[$xyz>>2];
 $114 = (~~(($113)));
 $115 = ($114|0)<(65535);
 if ($115) {
  $116 = +HEAPF32[$xyz>>2];
  $117 = (~~(($116)));
  $119 = $117;
 } else {
  $119 = 65535;
 }
 $118 = (0)>($119|0);
 if ($118) {
  $126 = 0;
 } else {
  $120 = +HEAPF32[$xyz>>2];
  $121 = (~~(($120)));
  $122 = ($121|0)<(65535);
  if ($122) {
   $123 = +HEAPF32[$xyz>>2];
   $124 = (~~(($123)));
   $192 = $124;
  } else {
   $192 = 65535;
  }
  $126 = $192;
 }
 $125 = (191752 + ($126<<2)|0);
 $127 = +HEAPF32[$125>>2];
 HEAPF32[$xyz>>2] = $127;
 $128 = (($xyz) + 4|0);
 $129 = +HEAPF32[$128>>2];
 $130 = (~~(($129)));
 $131 = ($130|0)<(65535);
 if ($131) {
  $132 = (($xyz) + 4|0);
  $133 = +HEAPF32[$132>>2];
  $134 = (~~(($133)));
  $136 = $134;
 } else {
  $136 = 65535;
 }
 $135 = (0)>($136|0);
 if ($135) {
  $145 = 0;
 } else {
  $137 = (($xyz) + 4|0);
  $138 = +HEAPF32[$137>>2];
  $139 = (~~(($138)));
  $140 = ($139|0)<(65535);
  if ($140) {
   $141 = (($xyz) + 4|0);
   $142 = +HEAPF32[$141>>2];
   $143 = (~~(($142)));
   $193 = $143;
  } else {
   $193 = 65535;
  }
  $145 = $193;
 }
 $144 = (191752 + ($145<<2)|0);
 $146 = +HEAPF32[$144>>2];
 $147 = (($xyz) + 4|0);
 HEAPF32[$147>>2] = $146;
 $148 = (($xyz) + 8|0);
 $149 = +HEAPF32[$148>>2];
 $150 = (~~(($149)));
 $151 = ($150|0)<(65535);
 if ($151) {
  $152 = (($xyz) + 8|0);
  $153 = +HEAPF32[$152>>2];
  $154 = (~~(($153)));
  $156 = $154;
 } else {
  $156 = 65535;
 }
 $155 = (0)>($156|0);
 if ($155) {
  $165 = 0;
 } else {
  $157 = (($xyz) + 8|0);
  $158 = +HEAPF32[$157>>2];
  $159 = (~~(($158)));
  $160 = ($159|0)<(65535);
  if ($160) {
   $161 = (($xyz) + 8|0);
   $162 = +HEAPF32[$161>>2];
   $163 = (~~(($162)));
   $194 = $163;
  } else {
   $194 = 65535;
  }
  $165 = $194;
 }
 $164 = (191752 + ($165<<2)|0);
 $166 = +HEAPF32[$164>>2];
 $167 = (($xyz) + 8|0);
 HEAPF32[$167>>2] = $166;
 $168 = (($xyz) + 4|0);
 $169 = +HEAPF32[$168>>2];
 $170 = 116.0 * $169;
 $171 = $170 - 16.0;
 $172 = 64.0 * $171;
 $173 = (~~(($172)));
 $174 = $1;
 HEAP16[$174>>1] = $173;
 $175 = +HEAPF32[$xyz>>2];
 $176 = (($xyz) + 4|0);
 $177 = +HEAPF32[$176>>2];
 $178 = $175 - $177;
 $179 = 32000.0 * $178;
 $180 = (~~(($179)));
 $181 = $1;
 $182 = (($181) + 2|0);
 HEAP16[$182>>1] = $180;
 $183 = (($xyz) + 4|0);
 $184 = +HEAPF32[$183>>2];
 $185 = (($xyz) + 8|0);
 $186 = +HEAPF32[$185>>2];
 $187 = $184 - $186;
 $188 = 12800.0 * $187;
 $189 = (~~(($188)));
 $190 = $1;
 $191 = (($190) + 4|0);
 HEAP16[$191>>1] = $189;
 STACKTOP = sp;return;
}
function _xtrans_interpolate($passes) {
 $passes = $passes|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0.0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0.0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0.0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0.0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0.0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0.0, $2051 = 0.0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0.0, $2071 = 0.0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0;
 var $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0;
 var $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0;
 var $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0;
 var $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0;
 var $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0;
 var $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0;
 var $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0;
 var $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0;
 var $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0;
 var $978 = 0, $979 = 0, $98 = 0, $980 = 0.0, $981 = 0, $982 = 0, $983 = 0.0, $984 = 0.0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0;
 var $996 = 0, $997 = 0.0, $998 = 0, $999 = 0, $allhex = 0, $avg = 0, $buffer = 0, $c = 0, $col = 0, $color = 0, $d = 0, $diff = 0, $drv = 0, $f = 0, $g = 0, $h = 0, $hex = 0, $hm = 0, $homo = 0, $i = 0;
 var $lab = 0, $left = 0, $lix = 0, $max = 0, $mcol = 0, $min = 0, $mrow = 0, $ndir = 0, $ng = 0, $pass = 0, $pix = 0, $rgb = 0, $rix = 0, $row = 0, $sgcol = 0, $sgrow = 0, $top = 0, $tr = 0.0, $v = 0, $val = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $hm = sp + 248|0;
 $avg = sp + 8|0;
 $color = sp + 32|0;
 $allhex = sp + 304|0;
 $diff = sp + 176|0;
 $0 = $passes;
 $1 = HEAP32[168>>2]|0;
 $2 = ($1|0)!=(0);
 if ($2) {
  $3 = HEAP32[_stderr>>2]|0;
  $4 = $0;
  HEAP32[$vararg_buffer>>2] = $4;
  (_fprintf(($3|0),(454040|0),($vararg_buffer|0))|0);
 }
 _cielab(0,0);
 $5 = $0;
 $6 = ($5|0)>(1);
 $7 = $6&1;
 $8 = 4 << $7;
 $ndir = $8;
 $9 = $ndir;
 $10 = ($9*11)|0;
 $11 = (($10) + 6)|0;
 $12 = $11<<18;
 $13 = (_malloc($12)|0);
 $buffer = $13;
 $14 = $buffer;
 _merror($14,454080);
 $15 = $buffer;
 $rgb = $15;
 $16 = $buffer;
 $17 = $ndir;
 $18 = ($17*6)|0;
 $19 = $18<<18;
 $20 = (($16) + ($19)|0);
 $lab = $20;
 $21 = $buffer;
 $22 = $ndir;
 $23 = ($22*6)|0;
 $24 = (($23) + 6)|0;
 $25 = $24<<18;
 $26 = (($21) + ($25)|0);
 $drv = $26;
 $27 = $buffer;
 $28 = $ndir;
 $29 = ($28*10)|0;
 $30 = (($29) + 6)|0;
 $31 = $30<<18;
 $32 = (($27) + ($31)|0);
 $homo = $32;
 $row = 0;
 while(1) {
  $33 = $row;
  $34 = ($33|0)<(3);
  if (!($34)) {
   break;
  }
  $col = 0;
  while(1) {
   $35 = $col;
   $36 = ($35|0)<(3);
   if (!($36)) {
    break;
   }
   $d = 0;
   $ng = 0;
   while(1) {
    $37 = $d;
    $38 = ($37|0)<(10);
    if (!($38)) {
     break;
    }
    $39 = $col;
    $40 = (($39) + 6)|0;
    $41 = (($40|0) % 6)&-1;
    $42 = $row;
    $43 = (($42) + 6)|0;
    $44 = (($43|0) % 6)&-1;
    $45 = (624 + (($44*6)|0)|0);
    $46 = (($45) + ($41)|0);
    $47 = HEAP8[$46>>0]|0;
    $48 = $47 << 24 >> 24;
    $49 = ($48|0)==(1);
    $50 = $49&1;
    $g = $50;
    $51 = $col;
    $52 = $d;
    $53 = (($52) + 2)|0;
    $54 = (453944 + ($53<<1)|0);
    $55 = HEAP16[$54>>1]|0;
    $56 = $55 << 16 >> 16;
    $57 = (($51) + ($56))|0;
    $58 = (($57) + 6)|0;
    $59 = (($58|0) % 6)&-1;
    $60 = $row;
    $61 = $d;
    $62 = (453944 + ($61<<1)|0);
    $63 = HEAP16[$62>>1]|0;
    $64 = $63 << 16 >> 16;
    $65 = (($60) + ($64))|0;
    $66 = (($65) + 6)|0;
    $67 = (($66|0) % 6)&-1;
    $68 = (624 + (($67*6)|0)|0);
    $69 = (($68) + ($59)|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = $70 << 24 >> 24;
    $72 = ($71|0)==(1);
    if ($72) {
     $ng = 0;
    } else {
     $73 = $ng;
     $74 = (($73) + 1)|0;
     $ng = $74;
    }
    $75 = $ng;
    $76 = ($75|0)==(4);
    if ($76) {
     $77 = $row;
     $78 = $77&65535;
     $sgrow = $78;
     $79 = $col;
     $80 = $79&65535;
     $sgcol = $80;
    }
    $81 = $ng;
    $82 = $g;
    $83 = (($82) + 1)|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $c = 0;
     while(1) {
      $85 = $c;
      $86 = ($85|0)<(8);
      if (!($86)) {
       break;
      }
      $87 = $d;
      $88 = (453944 + ($87<<1)|0);
      $89 = HEAP16[$88>>1]|0;
      $90 = $89 << 16 >> 16;
      $91 = $c;
      $92 = $91<<1;
      $93 = $g;
      $94 = (453968 + ($93<<5)|0);
      $95 = (($94) + ($92<<1)|0);
      $96 = HEAP16[$95>>1]|0;
      $97 = $96 << 16 >> 16;
      $98 = Math_imul($90, $97)|0;
      $99 = $d;
      $100 = (($99) + 1)|0;
      $101 = (453944 + ($100<<1)|0);
      $102 = HEAP16[$101>>1]|0;
      $103 = $102 << 16 >> 16;
      $104 = $c;
      $105 = $104<<1;
      $106 = (($105) + 1)|0;
      $107 = $g;
      $108 = (453968 + ($107<<5)|0);
      $109 = (($108) + ($106<<1)|0);
      $110 = HEAP16[$109>>1]|0;
      $111 = $110 << 16 >> 16;
      $112 = Math_imul($103, $111)|0;
      $113 = (($98) + ($112))|0;
      $v = $113;
      $114 = $d;
      $115 = (($114) + 2)|0;
      $116 = (453944 + ($115<<1)|0);
      $117 = HEAP16[$116>>1]|0;
      $118 = $117 << 16 >> 16;
      $119 = $c;
      $120 = $119<<1;
      $121 = $g;
      $122 = (453968 + ($121<<5)|0);
      $123 = (($122) + ($120<<1)|0);
      $124 = HEAP16[$123>>1]|0;
      $125 = $124 << 16 >> 16;
      $126 = Math_imul($118, $125)|0;
      $127 = $d;
      $128 = (($127) + 3)|0;
      $129 = (453944 + ($128<<1)|0);
      $130 = HEAP16[$129>>1]|0;
      $131 = $130 << 16 >> 16;
      $132 = $c;
      $133 = $132<<1;
      $134 = (($133) + 1)|0;
      $135 = $g;
      $136 = (453968 + ($135<<5)|0);
      $137 = (($136) + ($134<<1)|0);
      $138 = HEAP16[$137>>1]|0;
      $139 = $138 << 16 >> 16;
      $140 = Math_imul($131, $139)|0;
      $141 = (($126) + ($140))|0;
      $h = $141;
      $142 = $h;
      $143 = $v;
      $144 = HEAP16[132120>>1]|0;
      $145 = $144&65535;
      $146 = Math_imul($143, $145)|0;
      $147 = (($142) + ($146))|0;
      $148 = $147&65535;
      $149 = $c;
      $150 = $g;
      $151 = $150<<1;
      $152 = $d;
      $153 = $151 & $152;
      $154 = $149 ^ $153;
      $155 = $col;
      $156 = $row;
      $157 = (($allhex) + (($156*96)|0)|0);
      $158 = (($157) + ($155<<5)|0);
      $159 = (($158) + ($154<<1)|0);
      HEAP16[$159>>1] = $148;
      $160 = $h;
      $161 = $v;
      $162 = $161<<9;
      $163 = (($160) + ($162))|0;
      $164 = $163&65535;
      $165 = $c;
      $166 = $g;
      $167 = $166<<1;
      $168 = $d;
      $169 = $167 & $168;
      $170 = $165 ^ $169;
      $171 = $col;
      $172 = $row;
      $173 = (($allhex) + (($172*96)|0)|0);
      $174 = (($173) + ($171<<5)|0);
      $175 = (($174) + 16|0);
      $176 = (($175) + ($170<<1)|0);
      HEAP16[$176>>1] = $164;
      $177 = $c;
      $178 = (($177) + 1)|0;
      $c = $178;
     }
    }
    $179 = $d;
    $180 = (($179) + 2)|0;
    $d = $180;
   }
   $181 = $col;
   $182 = (($181) + 1)|0;
   $col = $182;
  }
  $183 = $row;
  $184 = (($183) + 1)|0;
  $row = $184;
 }
 $row = 2;
 while(1) {
  $185 = $row;
  $186 = HEAP16[132112>>1]|0;
  $187 = $186&65535;
  $188 = (($187) - 2)|0;
  $189 = ($185|0)<($188|0);
  if (!($189)) {
   break;
  }
  $max = 0;
  $min = -1;
  $col = 2;
  while(1) {
   $190 = $col;
   $191 = HEAP16[132120>>1]|0;
   $192 = $191&65535;
   $193 = (($192) - 2)|0;
   $194 = ($190|0)<($193|0);
   if (!($194)) {
    break;
   }
   $195 = $col;
   $196 = (($195) + 6)|0;
   $197 = (($196|0) % 6)&-1;
   $198 = $row;
   $199 = (($198) + 6)|0;
   $200 = (($199|0) % 6)&-1;
   $201 = (624 + (($200*6)|0)|0);
   $202 = (($201) + ($197)|0);
   $203 = HEAP8[$202>>0]|0;
   $204 = $203 << 24 >> 24;
   $205 = ($204|0)==(1);
   if ($205) {
    $max = 0;
    $min = -1;
   } else {
    $206 = HEAP32[132144>>2]|0;
    $207 = $row;
    $208 = HEAP16[132120>>1]|0;
    $209 = $208&65535;
    $210 = Math_imul($207, $209)|0;
    $211 = (($206) + ($210<<3)|0);
    $212 = $col;
    $213 = (($211) + ($212<<3)|0);
    $pix = $213;
    $214 = $col;
    $215 = (($214|0) % 3)&-1;
    $216 = $row;
    $217 = (($216|0) % 3)&-1;
    $218 = (($allhex) + (($217*96)|0)|0);
    $219 = (($218) + ($215<<5)|0);
    $hex = $219;
    $220 = $max;
    $221 = ($220<<16>>16)!=(0);
    if (!($221)) {
     $c = 0;
     while(1) {
      $222 = $c;
      $223 = ($222|0)<(6);
      if (!($223)) {
       break;
      }
      $224 = $c;
      $225 = $hex;
      $226 = (($225) + ($224<<1)|0);
      $227 = HEAP16[$226>>1]|0;
      $228 = $227 << 16 >> 16;
      $229 = $pix;
      $230 = (($229) + ($228<<3)|0);
      $231 = (($230) + 2|0);
      $232 = HEAP16[$231>>1]|0;
      $233 = $232&65535;
      $val = $233;
      $234 = $min;
      $235 = $234&65535;
      $236 = $val;
      $237 = ($235|0)>($236|0);
      if ($237) {
       $238 = $val;
       $239 = $238&65535;
       $min = $239;
      }
      $240 = $max;
      $241 = $240&65535;
      $242 = $val;
      $243 = ($241|0)<($242|0);
      if ($243) {
       $244 = $val;
       $245 = $244&65535;
       $max = $245;
      }
      $246 = $c;
      $247 = (($246) + 1)|0;
      $c = $247;
     }
    }
    $248 = $min;
    $249 = $pix;
    $250 = (($249) + 2|0);
    HEAP16[$250>>1] = $248;
    $251 = $max;
    $252 = $pix;
    $253 = (($252) + 6|0);
    HEAP16[$253>>1] = $251;
    $254 = $row;
    $255 = $sgrow;
    $256 = $255&65535;
    $257 = (($254) - ($256))|0;
    $258 = (($257|0) % 3)&-1;
    if ((($258|0) == 2)) {
     $max = 0;
     $min = -1;
     $268 = $col;
     $269 = (($268) + 2)|0;
     $col = $269;
     $270 = HEAP16[132120>>1]|0;
     $271 = $270&65535;
     $272 = (($271) - 3)|0;
     $273 = ($269|0)<($272|0);
     if ($273) {
      $274 = $row;
      $275 = ($274|0)>(2);
      if ($275) {
       $276 = $row;
       $277 = (($276) + -1)|0;
       $row = $277;
      }
     }
    } else if ((($258|0) == 1)) {
     $259 = $row;
     $260 = HEAP16[132112>>1]|0;
     $261 = $260&65535;
     $262 = (($261) - 3)|0;
     $263 = ($259|0)<($262|0);
     if ($263) {
      $264 = $row;
      $265 = (($264) + 1)|0;
      $row = $265;
      $266 = $col;
      $267 = (($266) + -1)|0;
      $col = $267;
     }
    }
   }
   $278 = $col;
   $279 = (($278) + 1)|0;
   $col = $279;
  }
  $280 = $row;
  $281 = (($280) + 1)|0;
  $row = $281;
 }
 $top = 3;
 while(1) {
  $282 = $top;
  $283 = HEAP16[132112>>1]|0;
  $284 = $283&65535;
  $285 = (($284) - 19)|0;
  $286 = ($282|0)<($285|0);
  if (!($286)) {
   break;
  }
  $left = 3;
  while(1) {
   $287 = $left;
   $288 = HEAP16[132120>>1]|0;
   $289 = $288&65535;
   $290 = (($289) - 19)|0;
   $291 = ($287|0)<($290|0);
   if (!($291)) {
    break;
   }
   $292 = $top;
   $293 = (($292) + 512)|0;
   $294 = HEAP16[132112>>1]|0;
   $295 = $294&65535;
   $296 = (($295) - 3)|0;
   $297 = ($293|0)<($296|0);
   if ($297) {
    $298 = $top;
    $299 = (($298) + 512)|0;
    $303 = $299;
   } else {
    $300 = HEAP16[132112>>1]|0;
    $301 = $300&65535;
    $302 = (($301) - 3)|0;
    $303 = $302;
   }
   $mrow = $303;
   $304 = $left;
   $305 = (($304) + 512)|0;
   $306 = HEAP16[132120>>1]|0;
   $307 = $306&65535;
   $308 = (($307) - 3)|0;
   $309 = ($305|0)<($308|0);
   if ($309) {
    $310 = $left;
    $311 = (($310) + 512)|0;
    $315 = $311;
   } else {
    $312 = HEAP16[132120>>1]|0;
    $313 = $312&65535;
    $314 = (($313) - 3)|0;
    $315 = $314;
   }
   $mcol = $315;
   $316 = $top;
   $row = $316;
   while(1) {
    $317 = $row;
    $318 = $mrow;
    $319 = ($317|0)<($318|0);
    if (!($319)) {
     break;
    }
    $320 = $left;
    $col = $320;
    while(1) {
     $321 = $col;
     $322 = $mcol;
     $323 = ($321|0)<($322|0);
     if (!($323)) {
      break;
     }
     $324 = $col;
     $325 = $left;
     $326 = (($324) - ($325))|0;
     $327 = $row;
     $328 = $top;
     $329 = (($327) - ($328))|0;
     $330 = $rgb;
     $331 = (($330) + (($329*3072)|0)|0);
     $332 = (($331) + (($326*6)|0)|0);
     $333 = $row;
     $334 = HEAP16[132120>>1]|0;
     $335 = $334&65535;
     $336 = Math_imul($333, $335)|0;
     $337 = $col;
     $338 = (($336) + ($337))|0;
     $339 = HEAP32[132144>>2]|0;
     $340 = (($339) + ($338<<3)|0);
     ;HEAP16[$332+0>>1]=HEAP16[$340+0>>1]|0;HEAP16[$332+2>>1]=HEAP16[$340+2>>1]|0;HEAP16[$332+4>>1]=HEAP16[$340+4>>1]|0;
     $341 = $col;
     $342 = (($341) + 1)|0;
     $col = $342;
    }
    $343 = $row;
    $344 = (($343) + 1)|0;
    $row = $344;
   }
   $c = 0;
   while(1) {
    $345 = $c;
    $346 = ($345|0)<(3);
    if (!($346)) {
     break;
    }
    $347 = $c;
    $348 = (($347) + 1)|0;
    $349 = $rgb;
    $350 = (($349) + (Math_imul($348, 1572864)|0)|0);
    $351 = $rgb;
    _memcpy(($350|0),($351|0),1572864)|0;
    $352 = $c;
    $353 = (($352) + 1)|0;
    $c = $353;
   }
   $354 = $top;
   $row = $354;
   while(1) {
    $355 = $row;
    $356 = $mrow;
    $357 = ($355|0)<($356|0);
    if (!($357)) {
     break;
    }
    $358 = $left;
    $col = $358;
    while(1) {
     $359 = $col;
     $360 = $mcol;
     $361 = ($359|0)<($360|0);
     if (!($361)) {
      break;
     }
     $362 = $col;
     $363 = (($362) + 6)|0;
     $364 = (($363|0) % 6)&-1;
     $365 = $row;
     $366 = (($365) + 6)|0;
     $367 = (($366|0) % 6)&-1;
     $368 = (624 + (($367*6)|0)|0);
     $369 = (($368) + ($364)|0);
     $370 = HEAP8[$369>>0]|0;
     $371 = $370 << 24 >> 24;
     $f = $371;
     $372 = ($371|0)==(1);
     if ($372) {
     } else {
      $373 = HEAP32[132144>>2]|0;
      $374 = $row;
      $375 = HEAP16[132120>>1]|0;
      $376 = $375&65535;
      $377 = Math_imul($374, $376)|0;
      $378 = (($373) + ($377<<3)|0);
      $379 = $col;
      $380 = (($378) + ($379<<3)|0);
      $pix = $380;
      $381 = $col;
      $382 = (($381|0) % 3)&-1;
      $383 = $row;
      $384 = (($383|0) % 3)&-1;
      $385 = (($allhex) + (($384*96)|0)|0);
      $386 = (($385) + ($382<<5)|0);
      $hex = $386;
      $387 = $hex;
      $388 = (($387) + 2|0);
      $389 = HEAP16[$388>>1]|0;
      $390 = $389 << 16 >> 16;
      $391 = $pix;
      $392 = (($391) + ($390<<3)|0);
      $393 = (($392) + 2|0);
      $394 = HEAP16[$393>>1]|0;
      $395 = $394&65535;
      $396 = $hex;
      $397 = HEAP16[$396>>1]|0;
      $398 = $397 << 16 >> 16;
      $399 = $pix;
      $400 = (($399) + ($398<<3)|0);
      $401 = (($400) + 2|0);
      $402 = HEAP16[$401>>1]|0;
      $403 = $402&65535;
      $404 = (($395) + ($403))|0;
      $405 = ($404*174)|0;
      $406 = $hex;
      $407 = (($406) + 2|0);
      $408 = HEAP16[$407>>1]|0;
      $409 = $408 << 16 >> 16;
      $410 = $409<<1;
      $411 = $pix;
      $412 = (($411) + ($410<<3)|0);
      $413 = (($412) + 2|0);
      $414 = HEAP16[$413>>1]|0;
      $415 = $414&65535;
      $416 = $hex;
      $417 = HEAP16[$416>>1]|0;
      $418 = $417 << 16 >> 16;
      $419 = $418<<1;
      $420 = $pix;
      $421 = (($420) + ($419<<3)|0);
      $422 = (($421) + 2|0);
      $423 = HEAP16[$422>>1]|0;
      $424 = $423&65535;
      $425 = (($415) + ($424))|0;
      $426 = ($425*46)|0;
      $427 = (($405) - ($426))|0;
      $428 = (($color) + 32|0);
      HEAP32[$428>>2] = $427;
      $429 = $hex;
      $430 = (($429) + 6|0);
      $431 = HEAP16[$430>>1]|0;
      $432 = $431 << 16 >> 16;
      $433 = $pix;
      $434 = (($433) + ($432<<3)|0);
      $435 = (($434) + 2|0);
      $436 = HEAP16[$435>>1]|0;
      $437 = $436&65535;
      $438 = ($437*223)|0;
      $439 = $hex;
      $440 = (($439) + 4|0);
      $441 = HEAP16[$440>>1]|0;
      $442 = $441 << 16 >> 16;
      $443 = $pix;
      $444 = (($443) + ($442<<3)|0);
      $445 = (($444) + 2|0);
      $446 = HEAP16[$445>>1]|0;
      $447 = $446&65535;
      $448 = ($447*33)|0;
      $449 = (($438) + ($448))|0;
      $450 = $f;
      $451 = $pix;
      $452 = (($451) + ($450<<1)|0);
      $453 = HEAP16[$452>>1]|0;
      $454 = $453&65535;
      $455 = $f;
      $456 = $hex;
      $457 = (($456) + 4|0);
      $458 = HEAP16[$457>>1]|0;
      $459 = $458 << 16 >> 16;
      $460 = (0 - ($459))|0;
      $461 = $pix;
      $462 = (($461) + ($460<<3)|0);
      $463 = (($462) + ($455<<1)|0);
      $464 = HEAP16[$463>>1]|0;
      $465 = $464&65535;
      $466 = (($454) - ($465))|0;
      $467 = ($466*92)|0;
      $468 = (($449) + ($467))|0;
      $469 = (($color) + 32|0);
      $470 = (($469) + 4|0);
      HEAP32[$470>>2] = $468;
      $c = 0;
      while(1) {
       $471 = $c;
       $472 = ($471|0)<(2);
       if (!($472)) {
        break;
       }
       $473 = $c;
       $474 = (4 + ($473))|0;
       $475 = $hex;
       $476 = (($475) + ($474<<1)|0);
       $477 = HEAP16[$476>>1]|0;
       $478 = $477 << 16 >> 16;
       $479 = $pix;
       $480 = (($479) + ($478<<3)|0);
       $481 = (($480) + 2|0);
       $482 = HEAP16[$481>>1]|0;
       $483 = $482&65535;
       $484 = ($483*164)|0;
       $485 = $c;
       $486 = (4 + ($485))|0;
       $487 = $hex;
       $488 = (($487) + ($486<<1)|0);
       $489 = HEAP16[$488>>1]|0;
       $490 = $489 << 16 >> 16;
       $491 = Math_imul(-2, $490)|0;
       $492 = $pix;
       $493 = (($492) + ($491<<3)|0);
       $494 = (($493) + 2|0);
       $495 = HEAP16[$494>>1]|0;
       $496 = $495&65535;
       $497 = ($496*92)|0;
       $498 = (($484) + ($497))|0;
       $499 = $f;
       $500 = $pix;
       $501 = (($500) + ($499<<1)|0);
       $502 = HEAP16[$501>>1]|0;
       $503 = $502&65535;
       $504 = $503<<1;
       $505 = $f;
       $506 = $c;
       $507 = (4 + ($506))|0;
       $508 = $hex;
       $509 = (($508) + ($507<<1)|0);
       $510 = HEAP16[$509>>1]|0;
       $511 = $510 << 16 >> 16;
       $512 = ($511*3)|0;
       $513 = $pix;
       $514 = (($513) + ($512<<3)|0);
       $515 = (($514) + ($505<<1)|0);
       $516 = HEAP16[$515>>1]|0;
       $517 = $516&65535;
       $518 = (($504) - ($517))|0;
       $519 = $f;
       $520 = $c;
       $521 = (4 + ($520))|0;
       $522 = $hex;
       $523 = (($522) + ($521<<1)|0);
       $524 = HEAP16[$523>>1]|0;
       $525 = $524 << 16 >> 16;
       $526 = Math_imul(-3, $525)|0;
       $527 = $pix;
       $528 = (($527) + ($526<<3)|0);
       $529 = (($528) + ($519<<1)|0);
       $530 = HEAP16[$529>>1]|0;
       $531 = $530&65535;
       $532 = (($518) - ($531))|0;
       $533 = ($532*33)|0;
       $534 = (($498) + ($533))|0;
       $535 = $c;
       $536 = (2 + ($535))|0;
       $537 = (($color) + 32|0);
       $538 = (($537) + ($536<<2)|0);
       HEAP32[$538>>2] = $534;
       $539 = $c;
       $540 = (($539) + 1)|0;
       $c = $540;
      }
      $c = 0;
      while(1) {
       $541 = $c;
       $542 = ($541|0)<(4);
       if (!($542)) {
        break;
       }
       $543 = $pix;
       $544 = (($543) + 2|0);
       $545 = HEAP16[$544>>1]|0;
       $546 = $545&65535;
       $547 = $c;
       $548 = (($color) + 32|0);
       $549 = (($548) + ($547<<2)|0);
       $550 = HEAP32[$549>>2]|0;
       $551 = $550 >> 8;
       $552 = $pix;
       $553 = (($552) + 6|0);
       $554 = HEAP16[$553>>1]|0;
       $555 = $554&65535;
       $556 = ($551|0)<($555|0);
       if ($556) {
        $557 = $c;
        $558 = (($color) + 32|0);
        $559 = (($558) + ($557<<2)|0);
        $560 = HEAP32[$559>>2]|0;
        $561 = $560 >> 8;
        $567 = $561;
       } else {
        $562 = $pix;
        $563 = (($562) + 6|0);
        $564 = HEAP16[$563>>1]|0;
        $565 = $564&65535;
        $567 = $565;
       }
       $566 = ($546|0)>($567|0);
       if ($566) {
        $568 = $pix;
        $569 = (($568) + 2|0);
        $570 = HEAP16[$569>>1]|0;
        $571 = $570&65535;
        $592 = $571;
       } else {
        $572 = $c;
        $573 = (($color) + 32|0);
        $574 = (($573) + ($572<<2)|0);
        $575 = HEAP32[$574>>2]|0;
        $576 = $575 >> 8;
        $577 = $pix;
        $578 = (($577) + 6|0);
        $579 = HEAP16[$578>>1]|0;
        $580 = $579&65535;
        $581 = ($576|0)<($580|0);
        if ($581) {
         $582 = $c;
         $583 = (($color) + 32|0);
         $584 = (($583) + ($582<<2)|0);
         $585 = HEAP32[$584>>2]|0;
         $586 = $585 >> 8;
         $2278 = $586;
        } else {
         $587 = $pix;
         $588 = (($587) + 6|0);
         $589 = HEAP16[$588>>1]|0;
         $590 = $589&65535;
         $2278 = $590;
        }
        $592 = $2278;
       }
       $591 = $592&65535;
       $593 = $col;
       $594 = $left;
       $595 = (($593) - ($594))|0;
       $596 = $row;
       $597 = $top;
       $598 = (($596) - ($597))|0;
       $599 = $c;
       $600 = $row;
       $601 = $sgrow;
       $602 = $601&65535;
       $603 = (($600) - ($602))|0;
       $604 = (($603|0) % 3)&-1;
       $605 = ($604|0)!=(0);
       $606 = $605 ^ 1;
       $607 = $606&1;
       $608 = $599 ^ $607;
       $609 = $rgb;
       $610 = (($609) + (Math_imul($608, 1572864)|0)|0);
       $611 = (($610) + (($598*3072)|0)|0);
       $612 = (($611) + (($595*6)|0)|0);
       $613 = (($612) + 2|0);
       HEAP16[$613>>1] = $591;
       $614 = $c;
       $615 = (($614) + 1)|0;
       $c = $615;
      }
     }
     $616 = $col;
     $617 = (($616) + 1)|0;
     $col = $617;
    }
    $618 = $row;
    $619 = (($618) + 1)|0;
    $row = $619;
   }
   $pass = 0;
   while(1) {
    $620 = $pass;
    $621 = $0;
    $622 = ($620|0)<($621|0);
    if (!($622)) {
     break;
    }
    $623 = $pass;
    $624 = ($623|0)==(1);
    if ($624) {
     $625 = $rgb;
     $626 = (($625) + 6291456|0);
     $rgb = $626;
     $627 = $buffer;
     _memcpy(($626|0),($627|0),6291456)|0;
    }
    $628 = $pass;
    $629 = ($628|0)!=(0);
    if ($629) {
     $630 = $top;
     $631 = (($630) + 2)|0;
     $row = $631;
     while(1) {
      $632 = $row;
      $633 = $mrow;
      $634 = (($633) - 2)|0;
      $635 = ($632|0)<($634|0);
      if (!($635)) {
       break;
      }
      $636 = $left;
      $637 = (($636) + 2)|0;
      $col = $637;
      while(1) {
       $638 = $col;
       $639 = $mcol;
       $640 = (($639) - 2)|0;
       $641 = ($638|0)<($640|0);
       if (!($641)) {
        break;
       }
       $642 = $col;
       $643 = (($642) + 6)|0;
       $644 = (($643|0) % 6)&-1;
       $645 = $row;
       $646 = (($645) + 6)|0;
       $647 = (($646|0) % 6)&-1;
       $648 = (624 + (($647*6)|0)|0);
       $649 = (($648) + ($644)|0);
       $650 = HEAP8[$649>>0]|0;
       $651 = $650 << 24 >> 24;
       $f = $651;
       $652 = ($651|0)==(1);
       if ($652) {
       } else {
        $653 = HEAP32[132144>>2]|0;
        $654 = $row;
        $655 = HEAP16[132120>>1]|0;
        $656 = $655&65535;
        $657 = Math_imul($654, $656)|0;
        $658 = (($653) + ($657<<3)|0);
        $659 = $col;
        $660 = (($658) + ($659<<3)|0);
        $pix = $660;
        $661 = $col;
        $662 = (($661|0) % 3)&-1;
        $663 = $row;
        $664 = (($663|0) % 3)&-1;
        $665 = (($allhex) + (($664*96)|0)|0);
        $666 = (($665) + ($662<<5)|0);
        $667 = (($666) + 16|0);
        $hex = $667;
        $d = 3;
        while(1) {
         $668 = $d;
         $669 = ($668|0)<(6);
         if (!($669)) {
          break;
         }
         $670 = $col;
         $671 = $left;
         $672 = (($670) - ($671))|0;
         $673 = $row;
         $674 = $top;
         $675 = (($673) - ($674))|0;
         $676 = $d;
         $677 = (($676) - 2)|0;
         $678 = $row;
         $679 = $sgrow;
         $680 = $679&65535;
         $681 = (($678) - ($680))|0;
         $682 = (($681|0) % 3)&-1;
         $683 = ($682|0)!=(0);
         $684 = $683 ^ 1;
         $685 = $684&1;
         $686 = $677 ^ $685;
         $687 = $rgb;
         $688 = (($687) + (Math_imul($686, 1572864)|0)|0);
         $689 = (($688) + (($675*3072)|0)|0);
         $690 = (($689) + (($672*6)|0)|0);
         $rix = $690;
         $691 = $d;
         $692 = $hex;
         $693 = (($692) + ($691<<1)|0);
         $694 = HEAP16[$693>>1]|0;
         $695 = $694 << 16 >> 16;
         $696 = Math_imul(-2, $695)|0;
         $697 = $rix;
         $698 = (($697) + (($696*6)|0)|0);
         $699 = (($698) + 2|0);
         $700 = HEAP16[$699>>1]|0;
         $701 = $700&65535;
         $702 = $d;
         $703 = $hex;
         $704 = (($703) + ($702<<1)|0);
         $705 = HEAP16[$704>>1]|0;
         $706 = $705 << 16 >> 16;
         $707 = $rix;
         $708 = (($707) + (($706*6)|0)|0);
         $709 = (($708) + 2|0);
         $710 = HEAP16[$709>>1]|0;
         $711 = $710&65535;
         $712 = $711<<1;
         $713 = (($701) + ($712))|0;
         $714 = $f;
         $715 = $d;
         $716 = $hex;
         $717 = (($716) + ($715<<1)|0);
         $718 = HEAP16[$717>>1]|0;
         $719 = $718 << 16 >> 16;
         $720 = Math_imul(-2, $719)|0;
         $721 = $rix;
         $722 = (($721) + (($720*6)|0)|0);
         $723 = (($722) + ($714<<1)|0);
         $724 = HEAP16[$723>>1]|0;
         $725 = $724&65535;
         $726 = (($713) - ($725))|0;
         $727 = $f;
         $728 = $d;
         $729 = $hex;
         $730 = (($729) + ($728<<1)|0);
         $731 = HEAP16[$730>>1]|0;
         $732 = $731 << 16 >> 16;
         $733 = $rix;
         $734 = (($733) + (($732*6)|0)|0);
         $735 = (($734) + ($727<<1)|0);
         $736 = HEAP16[$735>>1]|0;
         $737 = $736&65535;
         $738 = $737<<1;
         $739 = (($726) - ($738))|0;
         $740 = $f;
         $741 = $rix;
         $742 = (($741) + ($740<<1)|0);
         $743 = HEAP16[$742>>1]|0;
         $744 = $743&65535;
         $745 = ($744*3)|0;
         $746 = (($739) + ($745))|0;
         $val = $746;
         $747 = $pix;
         $748 = (($747) + 2|0);
         $749 = HEAP16[$748>>1]|0;
         $750 = $749&65535;
         $751 = $val;
         $752 = (($751|0) / 3)&-1;
         $753 = $pix;
         $754 = (($753) + 6|0);
         $755 = HEAP16[$754>>1]|0;
         $756 = $755&65535;
         $757 = ($752|0)<($756|0);
         if ($757) {
          $758 = $val;
          $759 = (($758|0) / 3)&-1;
          $765 = $759;
         } else {
          $760 = $pix;
          $761 = (($760) + 6|0);
          $762 = HEAP16[$761>>1]|0;
          $763 = $762&65535;
          $765 = $763;
         }
         $764 = ($750|0)>($765|0);
         if ($764) {
          $766 = $pix;
          $767 = (($766) + 2|0);
          $768 = HEAP16[$767>>1]|0;
          $769 = $768&65535;
          $784 = $769;
         } else {
          $770 = $val;
          $771 = (($770|0) / 3)&-1;
          $772 = $pix;
          $773 = (($772) + 6|0);
          $774 = HEAP16[$773>>1]|0;
          $775 = $774&65535;
          $776 = ($771|0)<($775|0);
          if ($776) {
           $777 = $val;
           $778 = (($777|0) / 3)&-1;
           $2279 = $778;
          } else {
           $779 = $pix;
           $780 = (($779) + 6|0);
           $781 = HEAP16[$780>>1]|0;
           $782 = $781&65535;
           $2279 = $782;
          }
          $784 = $2279;
         }
         $783 = $784&65535;
         $785 = $rix;
         $786 = (($785) + 2|0);
         HEAP16[$786>>1] = $783;
         $787 = $d;
         $788 = (($787) + 1)|0;
         $d = $788;
        }
       }
       $789 = $col;
       $790 = (($789) + 1)|0;
       $col = $790;
      }
      $791 = $row;
      $792 = (($791) + 1)|0;
      $row = $792;
     }
    }
    $793 = $top;
    $794 = $sgrow;
    $795 = $794&65535;
    $796 = (($793) - ($795))|0;
    $797 = (($796) + 4)|0;
    $798 = (($797|0) / 3)&-1;
    $799 = ($798*3)|0;
    $800 = $sgrow;
    $801 = $800&65535;
    $802 = (($799) + ($801))|0;
    $row = $802;
    while(1) {
     $803 = $row;
     $804 = $mrow;
     $805 = (($804) - 2)|0;
     $806 = ($803|0)<($805|0);
     if (!($806)) {
      break;
     }
     $807 = $left;
     $808 = $sgcol;
     $809 = $808&65535;
     $810 = (($807) - ($809))|0;
     $811 = (($810) + 4)|0;
     $812 = (($811|0) / 3)&-1;
     $813 = ($812*3)|0;
     $814 = $sgcol;
     $815 = $814&65535;
     $816 = (($813) + ($815))|0;
     $col = $816;
     while(1) {
      $817 = $col;
      $818 = $mcol;
      $819 = (($818) - 2)|0;
      $820 = ($817|0)<($819|0);
      if (!($820)) {
       break;
      }
      $821 = $col;
      $822 = $left;
      $823 = (($821) - ($822))|0;
      $824 = $row;
      $825 = $top;
      $826 = (($824) - ($825))|0;
      $827 = $rgb;
      $828 = (($827) + (($826*3072)|0)|0);
      $829 = (($828) + (($823*6)|0)|0);
      $rix = $829;
      $830 = $col;
      $831 = (($830) + 1)|0;
      $832 = (($831) + 6)|0;
      $833 = (($832|0) % 6)&-1;
      $834 = $row;
      $835 = (($834) + 6)|0;
      $836 = (($835|0) % 6)&-1;
      $837 = (624 + (($836*6)|0)|0);
      $838 = (($837) + ($833)|0);
      $839 = HEAP8[$838>>0]|0;
      $840 = $839 << 24 >> 24;
      $h = $840;
      ;HEAP32[$diff+0>>2]=0|0;HEAP32[$diff+4>>2]=0|0;HEAP32[$diff+8>>2]=0|0;HEAP32[$diff+12>>2]=0|0;HEAP32[$diff+16>>2]=0|0;HEAP32[$diff+20>>2]=0|0;
      $i = 1;
      $d = 0;
      while(1) {
       $841 = $d;
       $842 = ($841|0)<(6);
       if (!($842)) {
        break;
       }
       $c = 0;
       while(1) {
        $843 = $c;
        $844 = ($843|0)<(2);
        if (!($844)) {
         break;
        }
        $845 = $rix;
        $846 = (($845) + 2|0);
        $847 = HEAP16[$846>>1]|0;
        $848 = $847&65535;
        $849 = $848<<1;
        $850 = $i;
        $851 = $c;
        $852 = $850 << $851;
        $853 = $rix;
        $854 = (($853) + (($852*6)|0)|0);
        $855 = (($854) + 2|0);
        $856 = HEAP16[$855>>1]|0;
        $857 = $856&65535;
        $858 = (($849) - ($857))|0;
        $859 = $i;
        $860 = (0 - ($859))|0;
        $861 = $c;
        $862 = $860 << $861;
        $863 = $rix;
        $864 = (($863) + (($862*6)|0)|0);
        $865 = (($864) + 2|0);
        $866 = HEAP16[$865>>1]|0;
        $867 = $866&65535;
        $868 = (($858) - ($867))|0;
        $g = $868;
        $869 = $g;
        $870 = $h;
        $871 = $i;
        $872 = $c;
        $873 = $871 << $872;
        $874 = $rix;
        $875 = (($874) + (($873*6)|0)|0);
        $876 = (($875) + ($870<<1)|0);
        $877 = HEAP16[$876>>1]|0;
        $878 = $877&65535;
        $879 = (($869) + ($878))|0;
        $880 = $h;
        $881 = $i;
        $882 = (0 - ($881))|0;
        $883 = $c;
        $884 = $882 << $883;
        $885 = $rix;
        $886 = (($885) + (($884*6)|0)|0);
        $887 = (($886) + ($880<<1)|0);
        $888 = HEAP16[$887>>1]|0;
        $889 = $888&65535;
        $890 = (($879) + ($889))|0;
        $891 = $d;
        $892 = $h;
        $893 = (($color) + ($892<<5)|0);
        $894 = (($893) + ($891<<2)|0);
        HEAP32[$894>>2] = $890;
        $895 = $d;
        $896 = ($895|0)>(1);
        if ($896) {
         $897 = $i;
         $898 = $c;
         $899 = $897 << $898;
         $900 = $rix;
         $901 = (($900) + (($899*6)|0)|0);
         $902 = (($901) + 2|0);
         $903 = HEAP16[$902>>1]|0;
         $904 = $903&65535;
         $905 = $i;
         $906 = (0 - ($905))|0;
         $907 = $c;
         $908 = $906 << $907;
         $909 = $rix;
         $910 = (($909) + (($908*6)|0)|0);
         $911 = (($910) + 2|0);
         $912 = HEAP16[$911>>1]|0;
         $913 = $912&65535;
         $914 = (($904) - ($913))|0;
         $915 = $h;
         $916 = $i;
         $917 = $c;
         $918 = $916 << $917;
         $919 = $rix;
         $920 = (($919) + (($918*6)|0)|0);
         $921 = (($920) + ($915<<1)|0);
         $922 = HEAP16[$921>>1]|0;
         $923 = $922&65535;
         $924 = (($914) - ($923))|0;
         $925 = $h;
         $926 = $i;
         $927 = (0 - ($926))|0;
         $928 = $c;
         $929 = $927 << $928;
         $930 = $rix;
         $931 = (($930) + (($929*6)|0)|0);
         $932 = (($931) + ($925<<1)|0);
         $933 = HEAP16[$932>>1]|0;
         $934 = $933&65535;
         $935 = (($924) + ($934))|0;
         $936 = $i;
         $937 = $c;
         $938 = $936 << $937;
         $939 = $rix;
         $940 = (($939) + (($938*6)|0)|0);
         $941 = (($940) + 2|0);
         $942 = HEAP16[$941>>1]|0;
         $943 = $942&65535;
         $944 = $i;
         $945 = (0 - ($944))|0;
         $946 = $c;
         $947 = $945 << $946;
         $948 = $rix;
         $949 = (($948) + (($947*6)|0)|0);
         $950 = (($949) + 2|0);
         $951 = HEAP16[$950>>1]|0;
         $952 = $951&65535;
         $953 = (($943) - ($952))|0;
         $954 = $h;
         $955 = $i;
         $956 = $c;
         $957 = $955 << $956;
         $958 = $rix;
         $959 = (($958) + (($957*6)|0)|0);
         $960 = (($959) + ($954<<1)|0);
         $961 = HEAP16[$960>>1]|0;
         $962 = $961&65535;
         $963 = (($953) - ($962))|0;
         $964 = $h;
         $965 = $i;
         $966 = (0 - ($965))|0;
         $967 = $c;
         $968 = $966 << $967;
         $969 = $rix;
         $970 = (($969) + (($968*6)|0)|0);
         $971 = (($970) + ($964<<1)|0);
         $972 = HEAP16[$971>>1]|0;
         $973 = $972&65535;
         $974 = (($963) + ($973))|0;
         $975 = Math_imul($935, $974)|0;
         $976 = $g;
         $977 = $g;
         $978 = Math_imul($976, $977)|0;
         $979 = (($975) + ($978))|0;
         $980 = (+($979|0));
         $981 = $d;
         $982 = (($diff) + ($981<<2)|0);
         $983 = +HEAPF32[$982>>2];
         $984 = $983 + $980;
         HEAPF32[$982>>2] = $984;
        }
        $985 = $c;
        $986 = (($985) + 1)|0;
        $c = $986;
        $987 = $h;
        $988 = $987 ^ 2;
        $h = $988;
       }
       $989 = $d;
       $990 = ($989|0)>(1);
       if ($990) {
        $991 = $d;
        $992 = $991 & 1;
        $993 = ($992|0)!=(0);
        if ($993) {
         $994 = $d;
         $995 = (($994) - 1)|0;
         $996 = (($diff) + ($995<<2)|0);
         $997 = +HEAPF32[$996>>2];
         $998 = $d;
         $999 = (($diff) + ($998<<2)|0);
         $1000 = +HEAPF32[$999>>2];
         $1001 = $997 < $1000;
         if ($1001) {
          $c = 0;
          while(1) {
           $1002 = $c;
           $1003 = ($1002|0)<(2);
           if (!($1003)) {
            break;
           }
           $1004 = $d;
           $1005 = (($1004) - 1)|0;
           $1006 = $c;
           $1007 = $1006<<1;
           $1008 = (($color) + ($1007<<5)|0);
           $1009 = (($1008) + ($1005<<2)|0);
           $1010 = HEAP32[$1009>>2]|0;
           $1011 = $d;
           $1012 = $c;
           $1013 = $1012<<1;
           $1014 = (($color) + ($1013<<5)|0);
           $1015 = (($1014) + ($1011<<2)|0);
           HEAP32[$1015>>2] = $1010;
           $1016 = $c;
           $1017 = (($1016) + 1)|0;
           $c = $1017;
          }
         }
        }
       }
       $1018 = $d;
       $1019 = ($1018|0)<(2);
       if ($1019) {
        label = 157;
       } else {
        $1020 = $d;
        $1021 = $1020 & 1;
        $1022 = ($1021|0)!=(0);
        if ($1022) {
         label = 157;
        }
       }
       if ((label|0) == 157) {
        label = 0;
        $c = 0;
        while(1) {
         $1023 = $c;
         $1024 = ($1023|0)<(2);
         if (!($1024)) {
          break;
         }
         $1025 = $d;
         $1026 = $c;
         $1027 = $1026<<1;
         $1028 = (($color) + ($1027<<5)|0);
         $1029 = (($1028) + ($1025<<2)|0);
         $1030 = HEAP32[$1029>>2]|0;
         $1031 = (($1030|0) / 2)&-1;
         $1032 = ($1031|0)<(65535);
         if ($1032) {
          $1033 = $d;
          $1034 = $c;
          $1035 = $1034<<1;
          $1036 = (($color) + ($1035<<5)|0);
          $1037 = (($1036) + ($1033<<2)|0);
          $1038 = HEAP32[$1037>>2]|0;
          $1039 = (($1038|0) / 2)&-1;
          $1041 = $1039;
         } else {
          $1041 = 65535;
         }
         $1040 = (0)>($1041|0);
         if ($1040) {
          $1058 = 0;
         } else {
          $1042 = $d;
          $1043 = $c;
          $1044 = $1043<<1;
          $1045 = (($color) + ($1044<<5)|0);
          $1046 = (($1045) + ($1042<<2)|0);
          $1047 = HEAP32[$1046>>2]|0;
          $1048 = (($1047|0) / 2)&-1;
          $1049 = ($1048|0)<(65535);
          if ($1049) {
           $1050 = $d;
           $1051 = $c;
           $1052 = $1051<<1;
           $1053 = (($color) + ($1052<<5)|0);
           $1054 = (($1053) + ($1050<<2)|0);
           $1055 = HEAP32[$1054>>2]|0;
           $1056 = (($1055|0) / 2)&-1;
           $2280 = $1056;
          } else {
           $2280 = 65535;
          }
          $1058 = $2280;
         }
         $1057 = $1058&65535;
         $1059 = $c;
         $1060 = $1059<<1;
         $1061 = $rix;
         $1062 = (($1061) + ($1060<<1)|0);
         HEAP16[$1062>>1] = $1057;
         $1063 = $c;
         $1064 = (($1063) + 1)|0;
         $c = $1064;
        }
        $1065 = $rix;
        $1066 = (($1065) + 1572864|0);
        $rix = $1066;
       }
       $1067 = $d;
       $1068 = (($1067) + 1)|0;
       $d = $1068;
       $1069 = $i;
       $1070 = $1069 ^ 513;
       $i = $1070;
       $1071 = $h;
       $1072 = $1071 ^ 2;
       $h = $1072;
      }
      $1073 = $col;
      $1074 = (($1073) + 3)|0;
      $col = $1074;
     }
     $1075 = $row;
     $1076 = (($1075) + 3)|0;
     $row = $1076;
    }
    $1077 = $top;
    $1078 = (($1077) + 3)|0;
    $row = $1078;
    while(1) {
     $1079 = $row;
     $1080 = $mrow;
     $1081 = (($1080) - 3)|0;
     $1082 = ($1079|0)<($1081|0);
     if (!($1082)) {
      break;
     }
     $1083 = $left;
     $1084 = (($1083) + 3)|0;
     $col = $1084;
     while(1) {
      $1085 = $col;
      $1086 = $mcol;
      $1087 = (($1086) - 3)|0;
      $1088 = ($1085|0)<($1087|0);
      if (!($1088)) {
       break;
      }
      $1089 = $col;
      $1090 = (($1089) + 6)|0;
      $1091 = (($1090|0) % 6)&-1;
      $1092 = $row;
      $1093 = (($1092) + 6)|0;
      $1094 = (($1093|0) % 6)&-1;
      $1095 = (624 + (($1094*6)|0)|0);
      $1096 = (($1095) + ($1091)|0);
      $1097 = HEAP8[$1096>>0]|0;
      $1098 = $1097 << 24 >> 24;
      $1099 = (2 - ($1098))|0;
      $f = $1099;
      $1100 = ($1099|0)==(1);
      if ($1100) {
      } else {
       $1101 = $col;
       $1102 = $left;
       $1103 = (($1101) - ($1102))|0;
       $1104 = $row;
       $1105 = $top;
       $1106 = (($1104) - ($1105))|0;
       $1107 = $rgb;
       $1108 = (($1107) + (($1106*3072)|0)|0);
       $1109 = (($1108) + (($1103*6)|0)|0);
       $rix = $1109;
       $1110 = $row;
       $1111 = $sgrow;
       $1112 = $1111&65535;
       $1113 = (($1110) - ($1112))|0;
       $1114 = (($1113|0) % 3)&-1;
       $1115 = ($1114|0)!=(0);
       $1116 = $1115 ? 512 : 1;
       $c = $1116;
       $1117 = $c;
       $1118 = $1117 ^ 512;
       $1119 = $1118 ^ 1;
       $1120 = ($1119*3)|0;
       $h = $1120;
       $d = 0;
       while(1) {
        $1121 = $d;
        $1122 = ($1121|0)<(4);
        if (!($1122)) {
         break;
        }
        $1123 = $d;
        $1124 = ($1123|0)>(1);
        do {
         if ($1124) {
          label = 188;
         } else {
          $1125 = $d;
          $1126 = $c;
          $1127 = $1125 ^ $1126;
          $1128 = $1127 & 1;
          $1129 = ($1128|0)!=(0);
          if ($1129) {
           label = 188;
           break;
          }
          $1130 = $rix;
          $1131 = (($1130) + 2|0);
          $1132 = HEAP16[$1131>>1]|0;
          $1133 = $1132&65535;
          $1134 = $c;
          $1135 = $rix;
          $1136 = (($1135) + (($1134*6)|0)|0);
          $1137 = (($1136) + 2|0);
          $1138 = HEAP16[$1137>>1]|0;
          $1139 = $1138&65535;
          $1140 = (($1133) - ($1139))|0;
          $1141 = $rix;
          $1142 = (($1141) + 2|0);
          $1143 = HEAP16[$1142>>1]|0;
          $1144 = $1143&65535;
          $1145 = $c;
          $1146 = $rix;
          $1147 = (($1146) + (($1145*6)|0)|0);
          $1148 = (($1147) + 2|0);
          $1149 = HEAP16[$1148>>1]|0;
          $1150 = $1149&65535;
          $1151 = (($1144) - ($1150))|0;
          $1152 = $1151 >> 31;
          $1153 = $1140 ^ $1152;
          $1154 = $rix;
          $1155 = (($1154) + 2|0);
          $1156 = HEAP16[$1155>>1]|0;
          $1157 = $1156&65535;
          $1158 = $c;
          $1159 = $rix;
          $1160 = (($1159) + (($1158*6)|0)|0);
          $1161 = (($1160) + 2|0);
          $1162 = HEAP16[$1161>>1]|0;
          $1163 = $1162&65535;
          $1164 = (($1157) - ($1163))|0;
          $1165 = $1164 >> 31;
          $1166 = (($1153) - ($1165))|0;
          $1167 = $rix;
          $1168 = (($1167) + 2|0);
          $1169 = HEAP16[$1168>>1]|0;
          $1170 = $1169&65535;
          $1171 = $c;
          $1172 = (0 - ($1171))|0;
          $1173 = $rix;
          $1174 = (($1173) + (($1172*6)|0)|0);
          $1175 = (($1174) + 2|0);
          $1176 = HEAP16[$1175>>1]|0;
          $1177 = $1176&65535;
          $1178 = (($1170) - ($1177))|0;
          $1179 = $rix;
          $1180 = (($1179) + 2|0);
          $1181 = HEAP16[$1180>>1]|0;
          $1182 = $1181&65535;
          $1183 = $c;
          $1184 = (0 - ($1183))|0;
          $1185 = $rix;
          $1186 = (($1185) + (($1184*6)|0)|0);
          $1187 = (($1186) + 2|0);
          $1188 = HEAP16[$1187>>1]|0;
          $1189 = $1188&65535;
          $1190 = (($1182) - ($1189))|0;
          $1191 = $1190 >> 31;
          $1192 = $1178 ^ $1191;
          $1193 = $rix;
          $1194 = (($1193) + 2|0);
          $1195 = HEAP16[$1194>>1]|0;
          $1196 = $1195&65535;
          $1197 = $c;
          $1198 = (0 - ($1197))|0;
          $1199 = $rix;
          $1200 = (($1199) + (($1198*6)|0)|0);
          $1201 = (($1200) + 2|0);
          $1202 = HEAP16[$1201>>1]|0;
          $1203 = $1202&65535;
          $1204 = (($1196) - ($1203))|0;
          $1205 = $1204 >> 31;
          $1206 = (($1192) - ($1205))|0;
          $1207 = (($1166) + ($1206))|0;
          $1208 = $rix;
          $1209 = (($1208) + 2|0);
          $1210 = HEAP16[$1209>>1]|0;
          $1211 = $1210&65535;
          $1212 = $h;
          $1213 = $rix;
          $1214 = (($1213) + (($1212*6)|0)|0);
          $1215 = (($1214) + 2|0);
          $1216 = HEAP16[$1215>>1]|0;
          $1217 = $1216&65535;
          $1218 = (($1211) - ($1217))|0;
          $1219 = $rix;
          $1220 = (($1219) + 2|0);
          $1221 = HEAP16[$1220>>1]|0;
          $1222 = $1221&65535;
          $1223 = $h;
          $1224 = $rix;
          $1225 = (($1224) + (($1223*6)|0)|0);
          $1226 = (($1225) + 2|0);
          $1227 = HEAP16[$1226>>1]|0;
          $1228 = $1227&65535;
          $1229 = (($1222) - ($1228))|0;
          $1230 = $1229 >> 31;
          $1231 = $1218 ^ $1230;
          $1232 = $rix;
          $1233 = (($1232) + 2|0);
          $1234 = HEAP16[$1233>>1]|0;
          $1235 = $1234&65535;
          $1236 = $h;
          $1237 = $rix;
          $1238 = (($1237) + (($1236*6)|0)|0);
          $1239 = (($1238) + 2|0);
          $1240 = HEAP16[$1239>>1]|0;
          $1241 = $1240&65535;
          $1242 = (($1235) - ($1241))|0;
          $1243 = $1242 >> 31;
          $1244 = (($1231) - ($1243))|0;
          $1245 = $rix;
          $1246 = (($1245) + 2|0);
          $1247 = HEAP16[$1246>>1]|0;
          $1248 = $1247&65535;
          $1249 = $h;
          $1250 = (0 - ($1249))|0;
          $1251 = $rix;
          $1252 = (($1251) + (($1250*6)|0)|0);
          $1253 = (($1252) + 2|0);
          $1254 = HEAP16[$1253>>1]|0;
          $1255 = $1254&65535;
          $1256 = (($1248) - ($1255))|0;
          $1257 = $rix;
          $1258 = (($1257) + 2|0);
          $1259 = HEAP16[$1258>>1]|0;
          $1260 = $1259&65535;
          $1261 = $h;
          $1262 = (0 - ($1261))|0;
          $1263 = $rix;
          $1264 = (($1263) + (($1262*6)|0)|0);
          $1265 = (($1264) + 2|0);
          $1266 = HEAP16[$1265>>1]|0;
          $1267 = $1266&65535;
          $1268 = (($1260) - ($1267))|0;
          $1269 = $1268 >> 31;
          $1270 = $1256 ^ $1269;
          $1271 = $rix;
          $1272 = (($1271) + 2|0);
          $1273 = HEAP16[$1272>>1]|0;
          $1274 = $1273&65535;
          $1275 = $h;
          $1276 = (0 - ($1275))|0;
          $1277 = $rix;
          $1278 = (($1277) + (($1276*6)|0)|0);
          $1279 = (($1278) + 2|0);
          $1280 = HEAP16[$1279>>1]|0;
          $1281 = $1280&65535;
          $1282 = (($1274) - ($1281))|0;
          $1283 = $1282 >> 31;
          $1284 = (($1270) - ($1283))|0;
          $1285 = (($1244) + ($1284))|0;
          $1286 = $1285<<1;
          $1287 = ($1207|0)<($1286|0);
          if ($1287) {
           label = 188;
           break;
          }
          $1289 = $h;
          $1290 = $1289;
         }
        } while(0);
        if ((label|0) == 188) {
         label = 0;
         $1288 = $c;
         $1290 = $1288;
        }
        $i = $1290;
        $1291 = $f;
        $1292 = $i;
        $1293 = $rix;
        $1294 = (($1293) + (($1292*6)|0)|0);
        $1295 = (($1294) + ($1291<<1)|0);
        $1296 = HEAP16[$1295>>1]|0;
        $1297 = $1296&65535;
        $1298 = $f;
        $1299 = $i;
        $1300 = (0 - ($1299))|0;
        $1301 = $rix;
        $1302 = (($1301) + (($1300*6)|0)|0);
        $1303 = (($1302) + ($1298<<1)|0);
        $1304 = HEAP16[$1303>>1]|0;
        $1305 = $1304&65535;
        $1306 = (($1297) + ($1305))|0;
        $1307 = $rix;
        $1308 = (($1307) + 2|0);
        $1309 = HEAP16[$1308>>1]|0;
        $1310 = $1309&65535;
        $1311 = $1310<<1;
        $1312 = (($1306) + ($1311))|0;
        $1313 = $i;
        $1314 = $rix;
        $1315 = (($1314) + (($1313*6)|0)|0);
        $1316 = (($1315) + 2|0);
        $1317 = HEAP16[$1316>>1]|0;
        $1318 = $1317&65535;
        $1319 = (($1312) - ($1318))|0;
        $1320 = $i;
        $1321 = (0 - ($1320))|0;
        $1322 = $rix;
        $1323 = (($1322) + (($1321*6)|0)|0);
        $1324 = (($1323) + 2|0);
        $1325 = HEAP16[$1324>>1]|0;
        $1326 = $1325&65535;
        $1327 = (($1319) - ($1326))|0;
        $1328 = (($1327|0) / 2)&-1;
        $1329 = ($1328|0)<(65535);
        if ($1329) {
         $1330 = $f;
         $1331 = $i;
         $1332 = $rix;
         $1333 = (($1332) + (($1331*6)|0)|0);
         $1334 = (($1333) + ($1330<<1)|0);
         $1335 = HEAP16[$1334>>1]|0;
         $1336 = $1335&65535;
         $1337 = $f;
         $1338 = $i;
         $1339 = (0 - ($1338))|0;
         $1340 = $rix;
         $1341 = (($1340) + (($1339*6)|0)|0);
         $1342 = (($1341) + ($1337<<1)|0);
         $1343 = HEAP16[$1342>>1]|0;
         $1344 = $1343&65535;
         $1345 = (($1336) + ($1344))|0;
         $1346 = $rix;
         $1347 = (($1346) + 2|0);
         $1348 = HEAP16[$1347>>1]|0;
         $1349 = $1348&65535;
         $1350 = $1349<<1;
         $1351 = (($1345) + ($1350))|0;
         $1352 = $i;
         $1353 = $rix;
         $1354 = (($1353) + (($1352*6)|0)|0);
         $1355 = (($1354) + 2|0);
         $1356 = HEAP16[$1355>>1]|0;
         $1357 = $1356&65535;
         $1358 = (($1351) - ($1357))|0;
         $1359 = $i;
         $1360 = (0 - ($1359))|0;
         $1361 = $rix;
         $1362 = (($1361) + (($1360*6)|0)|0);
         $1363 = (($1362) + 2|0);
         $1364 = HEAP16[$1363>>1]|0;
         $1365 = $1364&65535;
         $1366 = (($1358) - ($1365))|0;
         $1367 = (($1366|0) / 2)&-1;
         $1369 = $1367;
        } else {
         $1369 = 65535;
        }
        $1368 = (0)>($1369|0);
        if ($1368) {
         $1448 = 0;
        } else {
         $1370 = $f;
         $1371 = $i;
         $1372 = $rix;
         $1373 = (($1372) + (($1371*6)|0)|0);
         $1374 = (($1373) + ($1370<<1)|0);
         $1375 = HEAP16[$1374>>1]|0;
         $1376 = $1375&65535;
         $1377 = $f;
         $1378 = $i;
         $1379 = (0 - ($1378))|0;
         $1380 = $rix;
         $1381 = (($1380) + (($1379*6)|0)|0);
         $1382 = (($1381) + ($1377<<1)|0);
         $1383 = HEAP16[$1382>>1]|0;
         $1384 = $1383&65535;
         $1385 = (($1376) + ($1384))|0;
         $1386 = $rix;
         $1387 = (($1386) + 2|0);
         $1388 = HEAP16[$1387>>1]|0;
         $1389 = $1388&65535;
         $1390 = $1389<<1;
         $1391 = (($1385) + ($1390))|0;
         $1392 = $i;
         $1393 = $rix;
         $1394 = (($1393) + (($1392*6)|0)|0);
         $1395 = (($1394) + 2|0);
         $1396 = HEAP16[$1395>>1]|0;
         $1397 = $1396&65535;
         $1398 = (($1391) - ($1397))|0;
         $1399 = $i;
         $1400 = (0 - ($1399))|0;
         $1401 = $rix;
         $1402 = (($1401) + (($1400*6)|0)|0);
         $1403 = (($1402) + 2|0);
         $1404 = HEAP16[$1403>>1]|0;
         $1405 = $1404&65535;
         $1406 = (($1398) - ($1405))|0;
         $1407 = (($1406|0) / 2)&-1;
         $1408 = ($1407|0)<(65535);
         if ($1408) {
          $1409 = $f;
          $1410 = $i;
          $1411 = $rix;
          $1412 = (($1411) + (($1410*6)|0)|0);
          $1413 = (($1412) + ($1409<<1)|0);
          $1414 = HEAP16[$1413>>1]|0;
          $1415 = $1414&65535;
          $1416 = $f;
          $1417 = $i;
          $1418 = (0 - ($1417))|0;
          $1419 = $rix;
          $1420 = (($1419) + (($1418*6)|0)|0);
          $1421 = (($1420) + ($1416<<1)|0);
          $1422 = HEAP16[$1421>>1]|0;
          $1423 = $1422&65535;
          $1424 = (($1415) + ($1423))|0;
          $1425 = $rix;
          $1426 = (($1425) + 2|0);
          $1427 = HEAP16[$1426>>1]|0;
          $1428 = $1427&65535;
          $1429 = $1428<<1;
          $1430 = (($1424) + ($1429))|0;
          $1431 = $i;
          $1432 = $rix;
          $1433 = (($1432) + (($1431*6)|0)|0);
          $1434 = (($1433) + 2|0);
          $1435 = HEAP16[$1434>>1]|0;
          $1436 = $1435&65535;
          $1437 = (($1430) - ($1436))|0;
          $1438 = $i;
          $1439 = (0 - ($1438))|0;
          $1440 = $rix;
          $1441 = (($1440) + (($1439*6)|0)|0);
          $1442 = (($1441) + 2|0);
          $1443 = HEAP16[$1442>>1]|0;
          $1444 = $1443&65535;
          $1445 = (($1437) - ($1444))|0;
          $1446 = (($1445|0) / 2)&-1;
          $2281 = $1446;
         } else {
          $2281 = 65535;
         }
         $1448 = $2281;
        }
        $1447 = $1448&65535;
        $1449 = $f;
        $1450 = $rix;
        $1451 = (($1450) + ($1449<<1)|0);
        HEAP16[$1451>>1] = $1447;
        $1452 = $d;
        $1453 = (($1452) + 1)|0;
        $d = $1453;
        $1454 = $rix;
        $1455 = (($1454) + 1572864|0);
        $rix = $1455;
       }
      }
      $1456 = $col;
      $1457 = (($1456) + 1)|0;
      $col = $1457;
     }
     $1458 = $row;
     $1459 = (($1458) + 1)|0;
     $row = $1459;
    }
    $1460 = $top;
    $1461 = (($1460) + 2)|0;
    $row = $1461;
    while(1) {
     $1462 = $row;
     $1463 = $mrow;
     $1464 = (($1463) - 2)|0;
     $1465 = ($1462|0)<($1464|0);
     if (!($1465)) {
      break;
     }
     $1466 = $row;
     $1467 = $sgrow;
     $1468 = $1467&65535;
     $1469 = (($1466) - ($1468))|0;
     $1470 = (($1469|0) % 3)&-1;
     $1471 = ($1470|0)!=(0);
     if ($1471) {
      $1472 = $left;
      $1473 = (($1472) + 2)|0;
      $col = $1473;
      while(1) {
       $1474 = $col;
       $1475 = $mcol;
       $1476 = (($1475) - 2)|0;
       $1477 = ($1474|0)<($1476|0);
       if (!($1477)) {
        break;
       }
       $1478 = $col;
       $1479 = $sgcol;
       $1480 = $1479&65535;
       $1481 = (($1478) - ($1480))|0;
       $1482 = (($1481|0) % 3)&-1;
       $1483 = ($1482|0)!=(0);
       if ($1483) {
        $1484 = $col;
        $1485 = $left;
        $1486 = (($1484) - ($1485))|0;
        $1487 = $row;
        $1488 = $top;
        $1489 = (($1487) - ($1488))|0;
        $1490 = $rgb;
        $1491 = (($1490) + (($1489*3072)|0)|0);
        $1492 = (($1491) + (($1486*6)|0)|0);
        $rix = $1492;
        $1493 = $col;
        $1494 = (($1493|0) % 3)&-1;
        $1495 = $row;
        $1496 = (($1495|0) % 3)&-1;
        $1497 = (($allhex) + (($1496*96)|0)|0);
        $1498 = (($1497) + ($1494<<5)|0);
        $1499 = (($1498) + 16|0);
        $hex = $1499;
        $d = 0;
        while(1) {
         $1500 = $d;
         $1501 = $ndir;
         $1502 = ($1500|0)<($1501|0);
         if (!($1502)) {
          break;
         }
         $1503 = $d;
         $1504 = $hex;
         $1505 = (($1504) + ($1503<<1)|0);
         $1506 = HEAP16[$1505>>1]|0;
         $1507 = $1506 << 16 >> 16;
         $1508 = $d;
         $1509 = (($1508) + 1)|0;
         $1510 = $hex;
         $1511 = (($1510) + ($1509<<1)|0);
         $1512 = HEAP16[$1511>>1]|0;
         $1513 = $1512 << 16 >> 16;
         $1514 = (($1507) + ($1513))|0;
         $1515 = ($1514|0)!=(0);
         if ($1515) {
          $1516 = $rix;
          $1517 = (($1516) + 2|0);
          $1518 = HEAP16[$1517>>1]|0;
          $1519 = $1518&65535;
          $1520 = ($1519*3)|0;
          $1521 = $d;
          $1522 = $hex;
          $1523 = (($1522) + ($1521<<1)|0);
          $1524 = HEAP16[$1523>>1]|0;
          $1525 = $1524 << 16 >> 16;
          $1526 = $rix;
          $1527 = (($1526) + (($1525*6)|0)|0);
          $1528 = (($1527) + 2|0);
          $1529 = HEAP16[$1528>>1]|0;
          $1530 = $1529&65535;
          $1531 = $1530<<1;
          $1532 = (($1520) - ($1531))|0;
          $1533 = $d;
          $1534 = (($1533) + 1)|0;
          $1535 = $hex;
          $1536 = (($1535) + ($1534<<1)|0);
          $1537 = HEAP16[$1536>>1]|0;
          $1538 = $1537 << 16 >> 16;
          $1539 = $rix;
          $1540 = (($1539) + (($1538*6)|0)|0);
          $1541 = (($1540) + 2|0);
          $1542 = HEAP16[$1541>>1]|0;
          $1543 = $1542&65535;
          $1544 = (($1532) - ($1543))|0;
          $g = $1544;
          $c = 0;
          while(1) {
           $1545 = $c;
           $1546 = ($1545|0)<(4);
           if (!($1546)) {
            break;
           }
           $1547 = $g;
           $1548 = $c;
           $1549 = $d;
           $1550 = $hex;
           $1551 = (($1550) + ($1549<<1)|0);
           $1552 = HEAP16[$1551>>1]|0;
           $1553 = $1552 << 16 >> 16;
           $1554 = $rix;
           $1555 = (($1554) + (($1553*6)|0)|0);
           $1556 = (($1555) + ($1548<<1)|0);
           $1557 = HEAP16[$1556>>1]|0;
           $1558 = $1557&65535;
           $1559 = $1558<<1;
           $1560 = (($1547) + ($1559))|0;
           $1561 = $c;
           $1562 = $d;
           $1563 = (($1562) + 1)|0;
           $1564 = $hex;
           $1565 = (($1564) + ($1563<<1)|0);
           $1566 = HEAP16[$1565>>1]|0;
           $1567 = $1566 << 16 >> 16;
           $1568 = $rix;
           $1569 = (($1568) + (($1567*6)|0)|0);
           $1570 = (($1569) + ($1561<<1)|0);
           $1571 = HEAP16[$1570>>1]|0;
           $1572 = $1571&65535;
           $1573 = (($1560) + ($1572))|0;
           $1574 = (($1573|0) / 3)&-1;
           $1575 = ($1574|0)<(65535);
           if ($1575) {
            $1576 = $g;
            $1577 = $c;
            $1578 = $d;
            $1579 = $hex;
            $1580 = (($1579) + ($1578<<1)|0);
            $1581 = HEAP16[$1580>>1]|0;
            $1582 = $1581 << 16 >> 16;
            $1583 = $rix;
            $1584 = (($1583) + (($1582*6)|0)|0);
            $1585 = (($1584) + ($1577<<1)|0);
            $1586 = HEAP16[$1585>>1]|0;
            $1587 = $1586&65535;
            $1588 = $1587<<1;
            $1589 = (($1576) + ($1588))|0;
            $1590 = $c;
            $1591 = $d;
            $1592 = (($1591) + 1)|0;
            $1593 = $hex;
            $1594 = (($1593) + ($1592<<1)|0);
            $1595 = HEAP16[$1594>>1]|0;
            $1596 = $1595 << 16 >> 16;
            $1597 = $rix;
            $1598 = (($1597) + (($1596*6)|0)|0);
            $1599 = (($1598) + ($1590<<1)|0);
            $1600 = HEAP16[$1599>>1]|0;
            $1601 = $1600&65535;
            $1602 = (($1589) + ($1601))|0;
            $1603 = (($1602|0) / 3)&-1;
            $1605 = $1603;
           } else {
            $1605 = 65535;
           }
           $1604 = (0)>($1605|0);
           if ($1604) {
            $1664 = 0;
           } else {
            $1606 = $g;
            $1607 = $c;
            $1608 = $d;
            $1609 = $hex;
            $1610 = (($1609) + ($1608<<1)|0);
            $1611 = HEAP16[$1610>>1]|0;
            $1612 = $1611 << 16 >> 16;
            $1613 = $rix;
            $1614 = (($1613) + (($1612*6)|0)|0);
            $1615 = (($1614) + ($1607<<1)|0);
            $1616 = HEAP16[$1615>>1]|0;
            $1617 = $1616&65535;
            $1618 = $1617<<1;
            $1619 = (($1606) + ($1618))|0;
            $1620 = $c;
            $1621 = $d;
            $1622 = (($1621) + 1)|0;
            $1623 = $hex;
            $1624 = (($1623) + ($1622<<1)|0);
            $1625 = HEAP16[$1624>>1]|0;
            $1626 = $1625 << 16 >> 16;
            $1627 = $rix;
            $1628 = (($1627) + (($1626*6)|0)|0);
            $1629 = (($1628) + ($1620<<1)|0);
            $1630 = HEAP16[$1629>>1]|0;
            $1631 = $1630&65535;
            $1632 = (($1619) + ($1631))|0;
            $1633 = (($1632|0) / 3)&-1;
            $1634 = ($1633|0)<(65535);
            if ($1634) {
             $1635 = $g;
             $1636 = $c;
             $1637 = $d;
             $1638 = $hex;
             $1639 = (($1638) + ($1637<<1)|0);
             $1640 = HEAP16[$1639>>1]|0;
             $1641 = $1640 << 16 >> 16;
             $1642 = $rix;
             $1643 = (($1642) + (($1641*6)|0)|0);
             $1644 = (($1643) + ($1636<<1)|0);
             $1645 = HEAP16[$1644>>1]|0;
             $1646 = $1645&65535;
             $1647 = $1646<<1;
             $1648 = (($1635) + ($1647))|0;
             $1649 = $c;
             $1650 = $d;
             $1651 = (($1650) + 1)|0;
             $1652 = $hex;
             $1653 = (($1652) + ($1651<<1)|0);
             $1654 = HEAP16[$1653>>1]|0;
             $1655 = $1654 << 16 >> 16;
             $1656 = $rix;
             $1657 = (($1656) + (($1655*6)|0)|0);
             $1658 = (($1657) + ($1649<<1)|0);
             $1659 = HEAP16[$1658>>1]|0;
             $1660 = $1659&65535;
             $1661 = (($1648) + ($1660))|0;
             $1662 = (($1661|0) / 3)&-1;
             $2282 = $1662;
            } else {
             $2282 = 65535;
            }
            $1664 = $2282;
           }
           $1663 = $1664&65535;
           $1665 = $c;
           $1666 = $rix;
           $1667 = (($1666) + ($1665<<1)|0);
           HEAP16[$1667>>1] = $1663;
           $1668 = $c;
           $1669 = (($1668) + 2)|0;
           $c = $1669;
          }
         } else {
          $1670 = $rix;
          $1671 = (($1670) + 2|0);
          $1672 = HEAP16[$1671>>1]|0;
          $1673 = $1672&65535;
          $1674 = $1673<<1;
          $1675 = $d;
          $1676 = $hex;
          $1677 = (($1676) + ($1675<<1)|0);
          $1678 = HEAP16[$1677>>1]|0;
          $1679 = $1678 << 16 >> 16;
          $1680 = $rix;
          $1681 = (($1680) + (($1679*6)|0)|0);
          $1682 = (($1681) + 2|0);
          $1683 = HEAP16[$1682>>1]|0;
          $1684 = $1683&65535;
          $1685 = (($1674) - ($1684))|0;
          $1686 = $d;
          $1687 = (($1686) + 1)|0;
          $1688 = $hex;
          $1689 = (($1688) + ($1687<<1)|0);
          $1690 = HEAP16[$1689>>1]|0;
          $1691 = $1690 << 16 >> 16;
          $1692 = $rix;
          $1693 = (($1692) + (($1691*6)|0)|0);
          $1694 = (($1693) + 2|0);
          $1695 = HEAP16[$1694>>1]|0;
          $1696 = $1695&65535;
          $1697 = (($1685) - ($1696))|0;
          $g = $1697;
          $c = 0;
          while(1) {
           $1698 = $c;
           $1699 = ($1698|0)<(4);
           if (!($1699)) {
            break;
           }
           $1700 = $g;
           $1701 = $c;
           $1702 = $d;
           $1703 = $hex;
           $1704 = (($1703) + ($1702<<1)|0);
           $1705 = HEAP16[$1704>>1]|0;
           $1706 = $1705 << 16 >> 16;
           $1707 = $rix;
           $1708 = (($1707) + (($1706*6)|0)|0);
           $1709 = (($1708) + ($1701<<1)|0);
           $1710 = HEAP16[$1709>>1]|0;
           $1711 = $1710&65535;
           $1712 = (($1700) + ($1711))|0;
           $1713 = $c;
           $1714 = $d;
           $1715 = (($1714) + 1)|0;
           $1716 = $hex;
           $1717 = (($1716) + ($1715<<1)|0);
           $1718 = HEAP16[$1717>>1]|0;
           $1719 = $1718 << 16 >> 16;
           $1720 = $rix;
           $1721 = (($1720) + (($1719*6)|0)|0);
           $1722 = (($1721) + ($1713<<1)|0);
           $1723 = HEAP16[$1722>>1]|0;
           $1724 = $1723&65535;
           $1725 = (($1712) + ($1724))|0;
           $1726 = (($1725|0) / 2)&-1;
           $1727 = ($1726|0)<(65535);
           if ($1727) {
            $1728 = $g;
            $1729 = $c;
            $1730 = $d;
            $1731 = $hex;
            $1732 = (($1731) + ($1730<<1)|0);
            $1733 = HEAP16[$1732>>1]|0;
            $1734 = $1733 << 16 >> 16;
            $1735 = $rix;
            $1736 = (($1735) + (($1734*6)|0)|0);
            $1737 = (($1736) + ($1729<<1)|0);
            $1738 = HEAP16[$1737>>1]|0;
            $1739 = $1738&65535;
            $1740 = (($1728) + ($1739))|0;
            $1741 = $c;
            $1742 = $d;
            $1743 = (($1742) + 1)|0;
            $1744 = $hex;
            $1745 = (($1744) + ($1743<<1)|0);
            $1746 = HEAP16[$1745>>1]|0;
            $1747 = $1746 << 16 >> 16;
            $1748 = $rix;
            $1749 = (($1748) + (($1747*6)|0)|0);
            $1750 = (($1749) + ($1741<<1)|0);
            $1751 = HEAP16[$1750>>1]|0;
            $1752 = $1751&65535;
            $1753 = (($1740) + ($1752))|0;
            $1754 = (($1753|0) / 2)&-1;
            $1756 = $1754;
           } else {
            $1756 = 65535;
           }
           $1755 = (0)>($1756|0);
           if ($1755) {
            $1813 = 0;
           } else {
            $1757 = $g;
            $1758 = $c;
            $1759 = $d;
            $1760 = $hex;
            $1761 = (($1760) + ($1759<<1)|0);
            $1762 = HEAP16[$1761>>1]|0;
            $1763 = $1762 << 16 >> 16;
            $1764 = $rix;
            $1765 = (($1764) + (($1763*6)|0)|0);
            $1766 = (($1765) + ($1758<<1)|0);
            $1767 = HEAP16[$1766>>1]|0;
            $1768 = $1767&65535;
            $1769 = (($1757) + ($1768))|0;
            $1770 = $c;
            $1771 = $d;
            $1772 = (($1771) + 1)|0;
            $1773 = $hex;
            $1774 = (($1773) + ($1772<<1)|0);
            $1775 = HEAP16[$1774>>1]|0;
            $1776 = $1775 << 16 >> 16;
            $1777 = $rix;
            $1778 = (($1777) + (($1776*6)|0)|0);
            $1779 = (($1778) + ($1770<<1)|0);
            $1780 = HEAP16[$1779>>1]|0;
            $1781 = $1780&65535;
            $1782 = (($1769) + ($1781))|0;
            $1783 = (($1782|0) / 2)&-1;
            $1784 = ($1783|0)<(65535);
            if ($1784) {
             $1785 = $g;
             $1786 = $c;
             $1787 = $d;
             $1788 = $hex;
             $1789 = (($1788) + ($1787<<1)|0);
             $1790 = HEAP16[$1789>>1]|0;
             $1791 = $1790 << 16 >> 16;
             $1792 = $rix;
             $1793 = (($1792) + (($1791*6)|0)|0);
             $1794 = (($1793) + ($1786<<1)|0);
             $1795 = HEAP16[$1794>>1]|0;
             $1796 = $1795&65535;
             $1797 = (($1785) + ($1796))|0;
             $1798 = $c;
             $1799 = $d;
             $1800 = (($1799) + 1)|0;
             $1801 = $hex;
             $1802 = (($1801) + ($1800<<1)|0);
             $1803 = HEAP16[$1802>>1]|0;
             $1804 = $1803 << 16 >> 16;
             $1805 = $rix;
             $1806 = (($1805) + (($1804*6)|0)|0);
             $1807 = (($1806) + ($1798<<1)|0);
             $1808 = HEAP16[$1807>>1]|0;
             $1809 = $1808&65535;
             $1810 = (($1797) + ($1809))|0;
             $1811 = (($1810|0) / 2)&-1;
             $2283 = $1811;
            } else {
             $2283 = 65535;
            }
            $1813 = $2283;
           }
           $1812 = $1813&65535;
           $1814 = $c;
           $1815 = $rix;
           $1816 = (($1815) + ($1814<<1)|0);
           HEAP16[$1816>>1] = $1812;
           $1817 = $c;
           $1818 = (($1817) + 2)|0;
           $c = $1818;
          }
         }
         $1819 = $d;
         $1820 = (($1819) + 2)|0;
         $d = $1820;
         $1821 = $rix;
         $1822 = (($1821) + 1572864|0);
         $rix = $1822;
        }
       }
       $1823 = $col;
       $1824 = (($1823) + 1)|0;
       $col = $1824;
      }
     }
     $1825 = $row;
     $1826 = (($1825) + 1)|0;
     $row = $1826;
    }
    $1827 = $pass;
    $1828 = (($1827) + 1)|0;
    $pass = $1828;
   }
   $1829 = $buffer;
   $rgb = $1829;
   $1830 = $top;
   $1831 = $mrow;
   $1832 = (($1831) - ($1830))|0;
   $mrow = $1832;
   $1833 = $left;
   $1834 = $mcol;
   $1835 = (($1834) - ($1833))|0;
   $mcol = $1835;
   $d = 0;
   while(1) {
    $1836 = $d;
    $1837 = $ndir;
    $1838 = ($1836|0)<($1837|0);
    if (!($1838)) {
     break;
    }
    $row = 2;
    while(1) {
     $1839 = $row;
     $1840 = $mrow;
     $1841 = (($1840) - 2)|0;
     $1842 = ($1839|0)<($1841|0);
     if (!($1842)) {
      break;
     }
     $col = 2;
     while(1) {
      $1843 = $col;
      $1844 = $mcol;
      $1845 = (($1844) - 2)|0;
      $1846 = ($1843|0)<($1845|0);
      if (!($1846)) {
       break;
      }
      $1847 = $col;
      $1848 = $row;
      $1849 = $d;
      $1850 = $rgb;
      $1851 = (($1850) + (Math_imul($1849, 1572864)|0)|0);
      $1852 = (($1851) + (($1848*3072)|0)|0);
      $1853 = (($1852) + (($1847*6)|0)|0);
      $1854 = $col;
      $1855 = $row;
      $1856 = $lab;
      $1857 = (($1856) + (($1855*3072)|0)|0);
      $1858 = (($1857) + (($1854*6)|0)|0);
      _cielab($1853,$1858);
      $1859 = $col;
      $1860 = (($1859) + 1)|0;
      $col = $1860;
     }
     $1861 = $row;
     $1862 = (($1861) + 1)|0;
     $row = $1862;
    }
    $1863 = $d;
    $1864 = $1863 & 3;
    $1865 = (454032 + ($1864<<1)|0);
    $1866 = HEAP16[$1865>>1]|0;
    $1867 = $1866 << 16 >> 16;
    $f = $1867;
    $row = 3;
    while(1) {
     $1868 = $row;
     $1869 = $mrow;
     $1870 = (($1869) - 3)|0;
     $1871 = ($1868|0)<($1870|0);
     if (!($1871)) {
      break;
     }
     $col = 3;
     while(1) {
      $1872 = $col;
      $1873 = $mcol;
      $1874 = (($1873) - 3)|0;
      $1875 = ($1872|0)<($1874|0);
      if (!($1875)) {
       break;
      }
      $1876 = $col;
      $1877 = $row;
      $1878 = $lab;
      $1879 = (($1878) + (($1877*3072)|0)|0);
      $1880 = (($1879) + (($1876*6)|0)|0);
      $lix = $1880;
      $1881 = $lix;
      $1882 = HEAP16[$1881>>1]|0;
      $1883 = $1882 << 16 >> 16;
      $1884 = $1883<<1;
      $1885 = $f;
      $1886 = $lix;
      $1887 = (($1886) + (($1885*6)|0)|0);
      $1888 = HEAP16[$1887>>1]|0;
      $1889 = $1888 << 16 >> 16;
      $1890 = (($1884) - ($1889))|0;
      $1891 = $f;
      $1892 = (0 - ($1891))|0;
      $1893 = $lix;
      $1894 = (($1893) + (($1892*6)|0)|0);
      $1895 = HEAP16[$1894>>1]|0;
      $1896 = $1895 << 16 >> 16;
      $1897 = (($1890) - ($1896))|0;
      $g = $1897;
      $1898 = $g;
      $1899 = $g;
      $1900 = Math_imul($1898, $1899)|0;
      $1901 = $lix;
      $1902 = (($1901) + 2|0);
      $1903 = HEAP16[$1902>>1]|0;
      $1904 = $1903 << 16 >> 16;
      $1905 = $1904<<1;
      $1906 = $f;
      $1907 = $lix;
      $1908 = (($1907) + (($1906*6)|0)|0);
      $1909 = (($1908) + 2|0);
      $1910 = HEAP16[$1909>>1]|0;
      $1911 = $1910 << 16 >> 16;
      $1912 = (($1905) - ($1911))|0;
      $1913 = $f;
      $1914 = (0 - ($1913))|0;
      $1915 = $lix;
      $1916 = (($1915) + (($1914*6)|0)|0);
      $1917 = (($1916) + 2|0);
      $1918 = HEAP16[$1917>>1]|0;
      $1919 = $1918 << 16 >> 16;
      $1920 = (($1912) - ($1919))|0;
      $1921 = $g;
      $1922 = ($1921*500)|0;
      $1923 = (($1922|0) / 232)&-1;
      $1924 = (($1920) + ($1923))|0;
      $1925 = $lix;
      $1926 = (($1925) + 2|0);
      $1927 = HEAP16[$1926>>1]|0;
      $1928 = $1927 << 16 >> 16;
      $1929 = $1928<<1;
      $1930 = $f;
      $1931 = $lix;
      $1932 = (($1931) + (($1930*6)|0)|0);
      $1933 = (($1932) + 2|0);
      $1934 = HEAP16[$1933>>1]|0;
      $1935 = $1934 << 16 >> 16;
      $1936 = (($1929) - ($1935))|0;
      $1937 = $f;
      $1938 = (0 - ($1937))|0;
      $1939 = $lix;
      $1940 = (($1939) + (($1938*6)|0)|0);
      $1941 = (($1940) + 2|0);
      $1942 = HEAP16[$1941>>1]|0;
      $1943 = $1942 << 16 >> 16;
      $1944 = (($1936) - ($1943))|0;
      $1945 = $g;
      $1946 = ($1945*500)|0;
      $1947 = (($1946|0) / 232)&-1;
      $1948 = (($1944) + ($1947))|0;
      $1949 = Math_imul($1924, $1948)|0;
      $1950 = (($1900) + ($1949))|0;
      $1951 = $lix;
      $1952 = (($1951) + 4|0);
      $1953 = HEAP16[$1952>>1]|0;
      $1954 = $1953 << 16 >> 16;
      $1955 = $1954<<1;
      $1956 = $f;
      $1957 = $lix;
      $1958 = (($1957) + (($1956*6)|0)|0);
      $1959 = (($1958) + 4|0);
      $1960 = HEAP16[$1959>>1]|0;
      $1961 = $1960 << 16 >> 16;
      $1962 = (($1955) - ($1961))|0;
      $1963 = $f;
      $1964 = (0 - ($1963))|0;
      $1965 = $lix;
      $1966 = (($1965) + (($1964*6)|0)|0);
      $1967 = (($1966) + 4|0);
      $1968 = HEAP16[$1967>>1]|0;
      $1969 = $1968 << 16 >> 16;
      $1970 = (($1962) - ($1969))|0;
      $1971 = $g;
      $1972 = ($1971*500)|0;
      $1973 = (($1972|0) / 580)&-1;
      $1974 = (($1970) - ($1973))|0;
      $1975 = $lix;
      $1976 = (($1975) + 4|0);
      $1977 = HEAP16[$1976>>1]|0;
      $1978 = $1977 << 16 >> 16;
      $1979 = $1978<<1;
      $1980 = $f;
      $1981 = $lix;
      $1982 = (($1981) + (($1980*6)|0)|0);
      $1983 = (($1982) + 4|0);
      $1984 = HEAP16[$1983>>1]|0;
      $1985 = $1984 << 16 >> 16;
      $1986 = (($1979) - ($1985))|0;
      $1987 = $f;
      $1988 = (0 - ($1987))|0;
      $1989 = $lix;
      $1990 = (($1989) + (($1988*6)|0)|0);
      $1991 = (($1990) + 4|0);
      $1992 = HEAP16[$1991>>1]|0;
      $1993 = $1992 << 16 >> 16;
      $1994 = (($1986) - ($1993))|0;
      $1995 = $g;
      $1996 = ($1995*500)|0;
      $1997 = (($1996|0) / 580)&-1;
      $1998 = (($1994) - ($1997))|0;
      $1999 = Math_imul($1974, $1998)|0;
      $2000 = (($1950) + ($1999))|0;
      $2001 = (+($2000|0));
      $2002 = $col;
      $2003 = $row;
      $2004 = $d;
      $2005 = $drv;
      $2006 = (($2005) + ($2004<<20)|0);
      $2007 = (($2006) + ($2003<<11)|0);
      $2008 = (($2007) + ($2002<<2)|0);
      HEAPF32[$2008>>2] = $2001;
      $2009 = $col;
      $2010 = (($2009) + 1)|0;
      $col = $2010;
     }
     $2011 = $row;
     $2012 = (($2011) + 1)|0;
     $row = $2012;
    }
    $2013 = $d;
    $2014 = (($2013) + 1)|0;
    $d = $2014;
   }
   $2015 = $homo;
   $2016 = $ndir;
   $2017 = $2016<<9;
   $2018 = $2017<<9;
   _memset(($2015|0),0,($2018|0))|0;
   $row = 4;
   while(1) {
    $2019 = $row;
    $2020 = $mrow;
    $2021 = (($2020) - 4)|0;
    $2022 = ($2019|0)<($2021|0);
    if (!($2022)) {
     break;
    }
    $col = 4;
    while(1) {
     $2023 = $col;
     $2024 = $mcol;
     $2025 = (($2024) - 4)|0;
     $2026 = ($2023|0)<($2025|0);
     if (!($2026)) {
      break;
     }
     $tr = 3.4028234663852886E+38;
     $d = 0;
     while(1) {
      $2027 = $d;
      $2028 = $ndir;
      $2029 = ($2027|0)<($2028|0);
      if (!($2029)) {
       break;
      }
      $2030 = $tr;
      $2031 = $col;
      $2032 = $row;
      $2033 = $d;
      $2034 = $drv;
      $2035 = (($2034) + ($2033<<20)|0);
      $2036 = (($2035) + ($2032<<11)|0);
      $2037 = (($2036) + ($2031<<2)|0);
      $2038 = +HEAPF32[$2037>>2];
      $2039 = $2030 > $2038;
      if ($2039) {
       $2040 = $col;
       $2041 = $row;
       $2042 = $d;
       $2043 = $drv;
       $2044 = (($2043) + ($2042<<20)|0);
       $2045 = (($2044) + ($2041<<11)|0);
       $2046 = (($2045) + ($2040<<2)|0);
       $2047 = +HEAPF32[$2046>>2];
       $tr = $2047;
      }
      $2048 = $d;
      $2049 = (($2048) + 1)|0;
      $d = $2049;
     }
     $2050 = $tr;
     $2051 = $2050 * 8.0;
     $tr = $2051;
     $d = 0;
     while(1) {
      $2052 = $d;
      $2053 = $ndir;
      $2054 = ($2052|0)<($2053|0);
      if (!($2054)) {
       break;
      }
      $v = -1;
      while(1) {
       $2055 = $v;
       $2056 = ($2055|0)<=(1);
       if (!($2056)) {
        break;
       }
       $h = -1;
       while(1) {
        $2057 = $h;
        $2058 = ($2057|0)<=(1);
        if (!($2058)) {
         break;
        }
        $2059 = $col;
        $2060 = $h;
        $2061 = (($2059) + ($2060))|0;
        $2062 = $row;
        $2063 = $v;
        $2064 = (($2062) + ($2063))|0;
        $2065 = $d;
        $2066 = $drv;
        $2067 = (($2066) + ($2065<<20)|0);
        $2068 = (($2067) + ($2064<<11)|0);
        $2069 = (($2068) + ($2061<<2)|0);
        $2070 = +HEAPF32[$2069>>2];
        $2071 = $tr;
        $2072 = $2070 <= $2071;
        if ($2072) {
         $2073 = $col;
         $2074 = $row;
         $2075 = $d;
         $2076 = $homo;
         $2077 = (($2076) + ($2075<<18)|0);
         $2078 = (($2077) + ($2074<<9)|0);
         $2079 = (($2078) + ($2073)|0);
         $2080 = HEAP8[$2079>>0]|0;
         $2081 = (($2080) + 1)<<24>>24;
         HEAP8[$2079>>0] = $2081;
        }
        $2082 = $h;
        $2083 = (($2082) + 1)|0;
        $h = $2083;
       }
       $2084 = $v;
       $2085 = (($2084) + 1)|0;
       $v = $2085;
      }
      $2086 = $d;
      $2087 = (($2086) + 1)|0;
      $d = $2087;
     }
     $2088 = $col;
     $2089 = (($2088) + 1)|0;
     $col = $2089;
    }
    $2090 = $row;
    $2091 = (($2090) + 1)|0;
    $row = $2091;
   }
   $2092 = HEAP16[132112>>1]|0;
   $2093 = $2092&65535;
   $2094 = $top;
   $2095 = (($2093) - ($2094))|0;
   $2096 = ($2095|0)<(516);
   if ($2096) {
    $2097 = HEAP16[132112>>1]|0;
    $2098 = $2097&65535;
    $2099 = $top;
    $2100 = (($2098) - ($2099))|0;
    $2101 = (($2100) + 2)|0;
    $mrow = $2101;
   }
   $2102 = HEAP16[132120>>1]|0;
   $2103 = $2102&65535;
   $2104 = $left;
   $2105 = (($2103) - ($2104))|0;
   $2106 = ($2105|0)<(516);
   if ($2106) {
    $2107 = HEAP16[132120>>1]|0;
    $2108 = $2107&65535;
    $2109 = $left;
    $2110 = (($2108) - ($2109))|0;
    $2111 = (($2110) + 2)|0;
    $mcol = $2111;
   }
   $2112 = $top;
   $2113 = ($2112|0)<(8);
   if ($2113) {
    $2114 = $top;
    $2115 = $2114;
   } else {
    $2115 = 8;
   }
   $row = $2115;
   while(1) {
    $2116 = $row;
    $2117 = $mrow;
    $2118 = (($2117) - 8)|0;
    $2119 = ($2116|0)<($2118|0);
    if (!($2119)) {
     break;
    }
    $2120 = $left;
    $2121 = ($2120|0)<(8);
    if ($2121) {
     $2122 = $left;
     $2123 = $2122;
    } else {
     $2123 = 8;
    }
    $col = $2123;
    while(1) {
     $2124 = $col;
     $2125 = $mcol;
     $2126 = (($2125) - 8)|0;
     $2127 = ($2124|0)<($2126|0);
     if (!($2127)) {
      break;
     }
     $d = 0;
     while(1) {
      $2128 = $d;
      $2129 = $ndir;
      $2130 = ($2128|0)<($2129|0);
      if (!($2130)) {
       break;
      }
      $2131 = $d;
      $2132 = (($hm) + ($2131<<2)|0);
      HEAP32[$2132>>2] = 0;
      $v = -2;
      while(1) {
       $2133 = $v;
       $2134 = ($2133|0)<=(2);
       if (!($2134)) {
        break;
       }
       $h = -2;
       while(1) {
        $2135 = $h;
        $2136 = ($2135|0)<=(2);
        if (!($2136)) {
         break;
        }
        $2137 = $col;
        $2138 = $h;
        $2139 = (($2137) + ($2138))|0;
        $2140 = $row;
        $2141 = $v;
        $2142 = (($2140) + ($2141))|0;
        $2143 = $d;
        $2144 = $homo;
        $2145 = (($2144) + ($2143<<18)|0);
        $2146 = (($2145) + ($2142<<9)|0);
        $2147 = (($2146) + ($2139)|0);
        $2148 = HEAP8[$2147>>0]|0;
        $2149 = $2148 << 24 >> 24;
        $2150 = $d;
        $2151 = (($hm) + ($2150<<2)|0);
        $2152 = HEAP32[$2151>>2]|0;
        $2153 = (($2152) + ($2149))|0;
        HEAP32[$2151>>2] = $2153;
        $2154 = $h;
        $2155 = (($2154) + 1)|0;
        $h = $2155;
       }
       $2156 = $v;
       $2157 = (($2156) + 1)|0;
       $v = $2157;
      }
      $2158 = $d;
      $2159 = (($2158) + 1)|0;
      $d = $2159;
     }
     $d = 0;
     while(1) {
      $2160 = $d;
      $2161 = $ndir;
      $2162 = (($2161) - 4)|0;
      $2163 = ($2160|0)<($2162|0);
      if (!($2163)) {
       break;
      }
      $2164 = $d;
      $2165 = (($hm) + ($2164<<2)|0);
      $2166 = HEAP32[$2165>>2]|0;
      $2167 = $d;
      $2168 = (($2167) + 4)|0;
      $2169 = (($hm) + ($2168<<2)|0);
      $2170 = HEAP32[$2169>>2]|0;
      $2171 = ($2166|0)<($2170|0);
      if ($2171) {
       $2172 = $d;
       $2173 = (($hm) + ($2172<<2)|0);
       HEAP32[$2173>>2] = 0;
      } else {
       $2174 = $d;
       $2175 = (($hm) + ($2174<<2)|0);
       $2176 = HEAP32[$2175>>2]|0;
       $2177 = $d;
       $2178 = (($2177) + 4)|0;
       $2179 = (($hm) + ($2178<<2)|0);
       $2180 = HEAP32[$2179>>2]|0;
       $2181 = ($2176|0)>($2180|0);
       if ($2181) {
        $2182 = $d;
        $2183 = (($2182) + 4)|0;
        $2184 = (($hm) + ($2183<<2)|0);
        HEAP32[$2184>>2] = 0;
       }
      }
      $2185 = $d;
      $2186 = (($2185) + 1)|0;
      $d = $2186;
     }
     $2187 = HEAP32[$hm>>2]|0;
     $2188 = $2187&65535;
     $max = $2188;
     $d = 1;
     while(1) {
      $2189 = $d;
      $2190 = $ndir;
      $2191 = ($2189|0)<($2190|0);
      if (!($2191)) {
       break;
      }
      $2192 = $max;
      $2193 = $2192&65535;
      $2194 = $d;
      $2195 = (($hm) + ($2194<<2)|0);
      $2196 = HEAP32[$2195>>2]|0;
      $2197 = ($2193|0)<($2196|0);
      if ($2197) {
       $2198 = $d;
       $2199 = (($hm) + ($2198<<2)|0);
       $2200 = HEAP32[$2199>>2]|0;
       $2201 = $2200&65535;
       $max = $2201;
      }
      $2202 = $d;
      $2203 = (($2202) + 1)|0;
      $d = $2203;
     }
     $2204 = $max;
     $2205 = $2204&65535;
     $2206 = $2205 >> 3;
     $2207 = $max;
     $2208 = $2207&65535;
     $2209 = (($2208) - ($2206))|0;
     $2210 = $2209&65535;
     $max = $2210;
     ;HEAP32[$avg+0>>2]=0|0;HEAP32[$avg+4>>2]=0|0;HEAP32[$avg+8>>2]=0|0;HEAP32[$avg+12>>2]=0|0;
     $d = 0;
     while(1) {
      $2211 = $d;
      $2212 = $ndir;
      $2213 = ($2211|0)<($2212|0);
      if (!($2213)) {
       break;
      }
      $2214 = $d;
      $2215 = (($hm) + ($2214<<2)|0);
      $2216 = HEAP32[$2215>>2]|0;
      $2217 = $max;
      $2218 = $2217&65535;
      $2219 = ($2216|0)>=($2218|0);
      if ($2219) {
       $c = 0;
       while(1) {
        $2220 = $c;
        $2221 = ($2220|0)<(3);
        if (!($2221)) {
         break;
        }
        $2222 = $c;
        $2223 = $col;
        $2224 = $row;
        $2225 = $d;
        $2226 = $rgb;
        $2227 = (($2226) + (Math_imul($2225, 1572864)|0)|0);
        $2228 = (($2227) + (($2224*3072)|0)|0);
        $2229 = (($2228) + (($2223*6)|0)|0);
        $2230 = (($2229) + ($2222<<1)|0);
        $2231 = HEAP16[$2230>>1]|0;
        $2232 = $2231&65535;
        $2233 = $c;
        $2234 = (($avg) + ($2233<<2)|0);
        $2235 = HEAP32[$2234>>2]|0;
        $2236 = (($2235) + ($2232))|0;
        HEAP32[$2234>>2] = $2236;
        $2237 = $c;
        $2238 = (($2237) + 1)|0;
        $c = $2238;
       }
       $2239 = (($avg) + 12|0);
       $2240 = HEAP32[$2239>>2]|0;
       $2241 = (($2240) + 1)|0;
       HEAP32[$2239>>2] = $2241;
      }
      $2242 = $d;
      $2243 = (($2242) + 1)|0;
      $d = $2243;
     }
     $c = 0;
     while(1) {
      $2244 = $c;
      $2245 = ($2244|0)<(3);
      if (!($2245)) {
       break;
      }
      $2246 = $c;
      $2247 = (($avg) + ($2246<<2)|0);
      $2248 = HEAP32[$2247>>2]|0;
      $2249 = (($avg) + 12|0);
      $2250 = HEAP32[$2249>>2]|0;
      $2251 = (($2248|0) / ($2250|0))&-1;
      $2252 = $2251&65535;
      $2253 = $c;
      $2254 = $row;
      $2255 = $top;
      $2256 = (($2254) + ($2255))|0;
      $2257 = HEAP16[132120>>1]|0;
      $2258 = $2257&65535;
      $2259 = Math_imul($2256, $2258)|0;
      $2260 = $col;
      $2261 = (($2259) + ($2260))|0;
      $2262 = $left;
      $2263 = (($2261) + ($2262))|0;
      $2264 = HEAP32[132144>>2]|0;
      $2265 = (($2264) + ($2263<<3)|0);
      $2266 = (($2265) + ($2253<<1)|0);
      HEAP16[$2266>>1] = $2252;
      $2267 = $c;
      $2268 = (($2267) + 1)|0;
      $c = $2268;
     }
     $2269 = $col;
     $2270 = (($2269) + 1)|0;
     $col = $2270;
    }
    $2271 = $row;
    $2272 = (($2271) + 1)|0;
    $row = $2272;
   }
   $2273 = $left;
   $2274 = (($2273) + 496)|0;
   $left = $2274;
  }
  $2275 = $top;
  $2276 = (($2275) + 496)|0;
  $top = $2276;
 }
 $2277 = $buffer;
 _free($2277);
 _border_interpolate(8);
 STACKTOP = sp;return;
}
function _ahd_interpolate() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0;
 var $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $abdiff = 0, $abeps = 0, $buffer = 0, $c = 0, $col = 0, $d = 0, $hm = 0, $homo = 0, $i = 0, $j = 0;
 var $lab = 0, $ldiff = 0, $left = 0, $leps = 0, $lix = 0, $pix = 0, $rgb = 0, $rix = 0, $row = 0, $tc = 0, $top = 0, $tr = 0, $val = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $hm = sp + 152|0;
 $ldiff = sp + 48|0;
 $abdiff = sp + 16|0;
 $0 = HEAP32[168>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  $2 = HEAP32[_stderr>>2]|0;
  (_fprintf(($2|0),(454120|0),($vararg_buffer|0))|0);
 }
 _cielab(0,0);
 _border_interpolate(5);
 $3 = (_malloc(6815744)|0);
 $buffer = $3;
 $4 = $buffer;
 _merror($4,454144);
 $5 = $buffer;
 $rgb = $5;
 $6 = $buffer;
 $7 = (($6) + 3145728|0);
 $lab = $7;
 $8 = $buffer;
 $9 = (($8) + 6291456|0);
 $homo = $9;
 $top = 2;
 while(1) {
  $10 = $top;
  $11 = HEAP16[132112>>1]|0;
  $12 = $11&65535;
  $13 = (($12) - 5)|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $left = 2;
  while(1) {
   $15 = $left;
   $16 = HEAP16[132120>>1]|0;
   $17 = $16&65535;
   $18 = (($17) - 5)|0;
   $19 = ($15|0)<($18|0);
   if (!($19)) {
    break;
   }
   $20 = $top;
   $row = $20;
   while(1) {
    $21 = $row;
    $22 = $top;
    $23 = (($22) + 512)|0;
    $24 = ($21|0)<($23|0);
    if ($24) {
     $25 = $row;
     $26 = HEAP16[132112>>1]|0;
     $27 = $26&65535;
     $28 = (($27) - 2)|0;
     $29 = ($25|0)<($28|0);
     $1068 = $29;
    } else {
     $1068 = 0;
    }
    if (!($1068)) {
     break;
    }
    $30 = $left;
    $31 = HEAP32[600>>2]|0;
    $32 = $row;
    $33 = $32 << 1;
    $34 = $33 & 14;
    $35 = $left;
    $36 = $35 & 1;
    $37 = (($34) + ($36))|0;
    $38 = $37 << 1;
    $39 = $31 >>> $38;
    $40 = $39 & 3;
    $41 = $40 & 1;
    $42 = (($30) + ($41))|0;
    $col = $42;
    $43 = HEAP32[600>>2]|0;
    $44 = $row;
    $45 = $44 << 1;
    $46 = $45 & 14;
    $47 = $col;
    $48 = $47 & 1;
    $49 = (($46) + ($48))|0;
    $50 = $49 << 1;
    $51 = $43 >>> $50;
    $52 = $51 & 3;
    $c = $52;
    while(1) {
     $53 = $col;
     $54 = $left;
     $55 = (($54) + 512)|0;
     $56 = ($53|0)<($55|0);
     if ($56) {
      $57 = $col;
      $58 = HEAP16[132120>>1]|0;
      $59 = $58&65535;
      $60 = (($59) - 2)|0;
      $61 = ($57|0)<($60|0);
      $1069 = $61;
     } else {
      $1069 = 0;
     }
     if (!($1069)) {
      break;
     }
     $62 = HEAP32[132144>>2]|0;
     $63 = $row;
     $64 = HEAP16[132120>>1]|0;
     $65 = $64&65535;
     $66 = Math_imul($63, $65)|0;
     $67 = (($62) + ($66<<3)|0);
     $68 = $col;
     $69 = (($67) + ($68<<3)|0);
     $pix = $69;
     $70 = $pix;
     $71 = (($70) + -8|0);
     $72 = (($71) + 2|0);
     $73 = HEAP16[$72>>1]|0;
     $74 = $73&65535;
     $75 = $c;
     $76 = $pix;
     $77 = (($76) + ($75<<1)|0);
     $78 = HEAP16[$77>>1]|0;
     $79 = $78&65535;
     $80 = (($74) + ($79))|0;
     $81 = $pix;
     $82 = (($81) + 8|0);
     $83 = (($82) + 2|0);
     $84 = HEAP16[$83>>1]|0;
     $85 = $84&65535;
     $86 = (($80) + ($85))|0;
     $87 = $86<<1;
     $88 = $c;
     $89 = $pix;
     $90 = (($89) + -16|0);
     $91 = (($90) + ($88<<1)|0);
     $92 = HEAP16[$91>>1]|0;
     $93 = $92&65535;
     $94 = (($87) - ($93))|0;
     $95 = $c;
     $96 = $pix;
     $97 = (($96) + 16|0);
     $98 = (($97) + ($95<<1)|0);
     $99 = HEAP16[$98>>1]|0;
     $100 = $99&65535;
     $101 = (($94) - ($100))|0;
     $102 = $101 >> 2;
     $val = $102;
     $103 = $pix;
     $104 = (($103) + -8|0);
     $105 = (($104) + 2|0);
     $106 = HEAP16[$105>>1]|0;
     $107 = $106&65535;
     $108 = $pix;
     $109 = (($108) + 8|0);
     $110 = (($109) + 2|0);
     $111 = HEAP16[$110>>1]|0;
     $112 = $111&65535;
     $113 = ($107|0)<($112|0);
     if ($113) {
      $114 = $pix;
      $115 = (($114) + -8|0);
      $116 = (($115) + 2|0);
      $117 = HEAP16[$116>>1]|0;
      $118 = $117&65535;
      $119 = $val;
      $120 = $pix;
      $121 = (($120) + 8|0);
      $122 = (($121) + 2|0);
      $123 = HEAP16[$122>>1]|0;
      $124 = $123&65535;
      $125 = ($119|0)<($124|0);
      if ($125) {
       $126 = $val;
       $133 = $126;
      } else {
       $127 = $pix;
       $128 = (($127) + 8|0);
       $129 = (($128) + 2|0);
       $130 = HEAP16[$129>>1]|0;
       $131 = $130&65535;
       $133 = $131;
      }
      $132 = ($118|0)>($133|0);
      if ($132) {
       $134 = $pix;
       $135 = (($134) + -8|0);
       $136 = (($135) + 2|0);
       $137 = HEAP16[$136>>1]|0;
       $138 = $137&65535;
       $1070 = $138;
      } else {
       $139 = $val;
       $140 = $pix;
       $141 = (($140) + 8|0);
       $142 = (($141) + 2|0);
       $143 = HEAP16[$142>>1]|0;
       $144 = $143&65535;
       $145 = ($139|0)<($144|0);
       if ($145) {
        $146 = $val;
        $1071 = $146;
       } else {
        $147 = $pix;
        $148 = (($147) + 8|0);
        $149 = (($148) + 2|0);
        $150 = HEAP16[$149>>1]|0;
        $151 = $150&65535;
        $1071 = $151;
       }
       $1070 = $1071;
      }
      $191 = $1070;
     } else {
      $152 = $pix;
      $153 = (($152) + 8|0);
      $154 = (($153) + 2|0);
      $155 = HEAP16[$154>>1]|0;
      $156 = $155&65535;
      $157 = $val;
      $158 = $pix;
      $159 = (($158) + -8|0);
      $160 = (($159) + 2|0);
      $161 = HEAP16[$160>>1]|0;
      $162 = $161&65535;
      $163 = ($157|0)<($162|0);
      if ($163) {
       $164 = $val;
       $171 = $164;
      } else {
       $165 = $pix;
       $166 = (($165) + -8|0);
       $167 = (($166) + 2|0);
       $168 = HEAP16[$167>>1]|0;
       $169 = $168&65535;
       $171 = $169;
      }
      $170 = ($156|0)>($171|0);
      if ($170) {
       $172 = $pix;
       $173 = (($172) + 8|0);
       $174 = (($173) + 2|0);
       $175 = HEAP16[$174>>1]|0;
       $176 = $175&65535;
       $1072 = $176;
      } else {
       $177 = $val;
       $178 = $pix;
       $179 = (($178) + -8|0);
       $180 = (($179) + 2|0);
       $181 = HEAP16[$180>>1]|0;
       $182 = $181&65535;
       $183 = ($177|0)<($182|0);
       if ($183) {
        $184 = $val;
        $1073 = $184;
       } else {
        $185 = $pix;
        $186 = (($185) + -8|0);
        $187 = (($186) + 2|0);
        $188 = HEAP16[$187>>1]|0;
        $189 = $188&65535;
        $1073 = $189;
       }
       $1072 = $1073;
      }
      $191 = $1072;
     }
     $190 = $191&65535;
     $192 = $col;
     $193 = $left;
     $194 = (($192) - ($193))|0;
     $195 = $row;
     $196 = $top;
     $197 = (($195) - ($196))|0;
     $198 = $rgb;
     $199 = (($198) + (($197*3072)|0)|0);
     $200 = (($199) + (($194*6)|0)|0);
     $201 = (($200) + 2|0);
     HEAP16[$201>>1] = $190;
     $202 = HEAP16[132120>>1]|0;
     $203 = $202&65535;
     $204 = (0 - ($203))|0;
     $205 = $pix;
     $206 = (($205) + ($204<<3)|0);
     $207 = (($206) + 2|0);
     $208 = HEAP16[$207>>1]|0;
     $209 = $208&65535;
     $210 = $c;
     $211 = $pix;
     $212 = (($211) + ($210<<1)|0);
     $213 = HEAP16[$212>>1]|0;
     $214 = $213&65535;
     $215 = (($209) + ($214))|0;
     $216 = HEAP16[132120>>1]|0;
     $217 = $216&65535;
     $218 = $pix;
     $219 = (($218) + ($217<<3)|0);
     $220 = (($219) + 2|0);
     $221 = HEAP16[$220>>1]|0;
     $222 = $221&65535;
     $223 = (($215) + ($222))|0;
     $224 = $223<<1;
     $225 = $c;
     $226 = HEAP16[132120>>1]|0;
     $227 = $226&65535;
     $228 = Math_imul(-2, $227)|0;
     $229 = $pix;
     $230 = (($229) + ($228<<3)|0);
     $231 = (($230) + ($225<<1)|0);
     $232 = HEAP16[$231>>1]|0;
     $233 = $232&65535;
     $234 = (($224) - ($233))|0;
     $235 = $c;
     $236 = HEAP16[132120>>1]|0;
     $237 = $236&65535;
     $238 = $237<<1;
     $239 = $pix;
     $240 = (($239) + ($238<<3)|0);
     $241 = (($240) + ($235<<1)|0);
     $242 = HEAP16[$241>>1]|0;
     $243 = $242&65535;
     $244 = (($234) - ($243))|0;
     $245 = $244 >> 2;
     $val = $245;
     $246 = HEAP16[132120>>1]|0;
     $247 = $246&65535;
     $248 = (0 - ($247))|0;
     $249 = $pix;
     $250 = (($249) + ($248<<3)|0);
     $251 = (($250) + 2|0);
     $252 = HEAP16[$251>>1]|0;
     $253 = $252&65535;
     $254 = HEAP16[132120>>1]|0;
     $255 = $254&65535;
     $256 = $pix;
     $257 = (($256) + ($255<<3)|0);
     $258 = (($257) + 2|0);
     $259 = HEAP16[$258>>1]|0;
     $260 = $259&65535;
     $261 = ($253|0)<($260|0);
     if ($261) {
      $262 = HEAP16[132120>>1]|0;
      $263 = $262&65535;
      $264 = (0 - ($263))|0;
      $265 = $pix;
      $266 = (($265) + ($264<<3)|0);
      $267 = (($266) + 2|0);
      $268 = HEAP16[$267>>1]|0;
      $269 = $268&65535;
      $270 = $val;
      $271 = HEAP16[132120>>1]|0;
      $272 = $271&65535;
      $273 = $pix;
      $274 = (($273) + ($272<<3)|0);
      $275 = (($274) + 2|0);
      $276 = HEAP16[$275>>1]|0;
      $277 = $276&65535;
      $278 = ($270|0)<($277|0);
      if ($278) {
       $279 = $val;
       $288 = $279;
      } else {
       $280 = HEAP16[132120>>1]|0;
       $281 = $280&65535;
       $282 = $pix;
       $283 = (($282) + ($281<<3)|0);
       $284 = (($283) + 2|0);
       $285 = HEAP16[$284>>1]|0;
       $286 = $285&65535;
       $288 = $286;
      }
      $287 = ($269|0)>($288|0);
      if ($287) {
       $289 = HEAP16[132120>>1]|0;
       $290 = $289&65535;
       $291 = (0 - ($290))|0;
       $292 = $pix;
       $293 = (($292) + ($291<<3)|0);
       $294 = (($293) + 2|0);
       $295 = HEAP16[$294>>1]|0;
       $296 = $295&65535;
       $1074 = $296;
      } else {
       $297 = $val;
       $298 = HEAP16[132120>>1]|0;
       $299 = $298&65535;
       $300 = $pix;
       $301 = (($300) + ($299<<3)|0);
       $302 = (($301) + 2|0);
       $303 = HEAP16[$302>>1]|0;
       $304 = $303&65535;
       $305 = ($297|0)<($304|0);
       if ($305) {
        $306 = $val;
        $1075 = $306;
       } else {
        $307 = HEAP16[132120>>1]|0;
        $308 = $307&65535;
        $309 = $pix;
        $310 = (($309) + ($308<<3)|0);
        $311 = (($310) + 2|0);
        $312 = HEAP16[$311>>1]|0;
        $313 = $312&65535;
        $1075 = $313;
       }
       $1074 = $1075;
      }
      $369 = $1074;
     } else {
      $314 = HEAP16[132120>>1]|0;
      $315 = $314&65535;
      $316 = $pix;
      $317 = (($316) + ($315<<3)|0);
      $318 = (($317) + 2|0);
      $319 = HEAP16[$318>>1]|0;
      $320 = $319&65535;
      $321 = $val;
      $322 = HEAP16[132120>>1]|0;
      $323 = $322&65535;
      $324 = (0 - ($323))|0;
      $325 = $pix;
      $326 = (($325) + ($324<<3)|0);
      $327 = (($326) + 2|0);
      $328 = HEAP16[$327>>1]|0;
      $329 = $328&65535;
      $330 = ($321|0)<($329|0);
      if ($330) {
       $331 = $val;
       $341 = $331;
      } else {
       $332 = HEAP16[132120>>1]|0;
       $333 = $332&65535;
       $334 = (0 - ($333))|0;
       $335 = $pix;
       $336 = (($335) + ($334<<3)|0);
       $337 = (($336) + 2|0);
       $338 = HEAP16[$337>>1]|0;
       $339 = $338&65535;
       $341 = $339;
      }
      $340 = ($320|0)>($341|0);
      if ($340) {
       $342 = HEAP16[132120>>1]|0;
       $343 = $342&65535;
       $344 = $pix;
       $345 = (($344) + ($343<<3)|0);
       $346 = (($345) + 2|0);
       $347 = HEAP16[$346>>1]|0;
       $348 = $347&65535;
       $1076 = $348;
      } else {
       $349 = $val;
       $350 = HEAP16[132120>>1]|0;
       $351 = $350&65535;
       $352 = (0 - ($351))|0;
       $353 = $pix;
       $354 = (($353) + ($352<<3)|0);
       $355 = (($354) + 2|0);
       $356 = HEAP16[$355>>1]|0;
       $357 = $356&65535;
       $358 = ($349|0)<($357|0);
       if ($358) {
        $359 = $val;
        $1077 = $359;
       } else {
        $360 = HEAP16[132120>>1]|0;
        $361 = $360&65535;
        $362 = (0 - ($361))|0;
        $363 = $pix;
        $364 = (($363) + ($362<<3)|0);
        $365 = (($364) + 2|0);
        $366 = HEAP16[$365>>1]|0;
        $367 = $366&65535;
        $1077 = $367;
       }
       $1076 = $1077;
      }
      $369 = $1076;
     }
     $368 = $369&65535;
     $370 = $col;
     $371 = $left;
     $372 = (($370) - ($371))|0;
     $373 = $row;
     $374 = $top;
     $375 = (($373) - ($374))|0;
     $376 = $rgb;
     $377 = (($376) + 1572864|0);
     $378 = (($377) + (($375*3072)|0)|0);
     $379 = (($378) + (($372*6)|0)|0);
     $380 = (($379) + 2|0);
     HEAP16[$380>>1] = $368;
     $381 = $col;
     $382 = (($381) + 2)|0;
     $col = $382;
    }
    $383 = $row;
    $384 = (($383) + 1)|0;
    $row = $384;
   }
   $d = 0;
   while(1) {
    $385 = $d;
    $386 = ($385|0)<(2);
    if (!($386)) {
     break;
    }
    $387 = $top;
    $388 = (($387) + 1)|0;
    $row = $388;
    while(1) {
     $389 = $row;
     $390 = $top;
     $391 = (($390) + 512)|0;
     $392 = (($391) - 1)|0;
     $393 = ($389|0)<($392|0);
     if ($393) {
      $394 = $row;
      $395 = HEAP16[132112>>1]|0;
      $396 = $395&65535;
      $397 = (($396) - 3)|0;
      $398 = ($394|0)<($397|0);
      $1078 = $398;
     } else {
      $1078 = 0;
     }
     if (!($1078)) {
      break;
     }
     $399 = $left;
     $400 = (($399) + 1)|0;
     $col = $400;
     while(1) {
      $401 = $col;
      $402 = $left;
      $403 = (($402) + 512)|0;
      $404 = (($403) - 1)|0;
      $405 = ($401|0)<($404|0);
      if ($405) {
       $406 = $col;
       $407 = HEAP16[132120>>1]|0;
       $408 = $407&65535;
       $409 = (($408) - 3)|0;
       $410 = ($406|0)<($409|0);
       $1079 = $410;
      } else {
       $1079 = 0;
      }
      if (!($1079)) {
       break;
      }
      $411 = HEAP32[132144>>2]|0;
      $412 = $row;
      $413 = HEAP16[132120>>1]|0;
      $414 = $413&65535;
      $415 = Math_imul($412, $414)|0;
      $416 = (($411) + ($415<<3)|0);
      $417 = $col;
      $418 = (($416) + ($417<<3)|0);
      $pix = $418;
      $419 = $col;
      $420 = $left;
      $421 = (($419) - ($420))|0;
      $422 = $row;
      $423 = $top;
      $424 = (($422) - ($423))|0;
      $425 = $d;
      $426 = $rgb;
      $427 = (($426) + (Math_imul($425, 1572864)|0)|0);
      $428 = (($427) + (($424*3072)|0)|0);
      $429 = (($428) + (($421*6)|0)|0);
      $rix = $429;
      $430 = $col;
      $431 = $left;
      $432 = (($430) - ($431))|0;
      $433 = $row;
      $434 = $top;
      $435 = (($433) - ($434))|0;
      $436 = $d;
      $437 = $lab;
      $438 = (($437) + (Math_imul($436, 1572864)|0)|0);
      $439 = (($438) + (($435*3072)|0)|0);
      $440 = (($439) + (($432*6)|0)|0);
      $lix = $440;
      $441 = HEAP32[600>>2]|0;
      $442 = $row;
      $443 = $442 << 1;
      $444 = $443 & 14;
      $445 = $col;
      $446 = $445 & 1;
      $447 = (($444) + ($446))|0;
      $448 = $447 << 1;
      $449 = $441 >>> $448;
      $450 = $449 & 3;
      $451 = (2 - ($450))|0;
      $c = $451;
      $452 = ($451|0)==(1);
      if ($452) {
       $453 = HEAP32[600>>2]|0;
       $454 = $row;
       $455 = (($454) + 1)|0;
       $456 = $455 << 1;
       $457 = $456 & 14;
       $458 = $col;
       $459 = $458 & 1;
       $460 = (($457) + ($459))|0;
       $461 = $460 << 1;
       $462 = $453 >>> $461;
       $463 = $462 & 3;
       $c = $463;
       $464 = $pix;
       $465 = (($464) + 2|0);
       $466 = HEAP16[$465>>1]|0;
       $467 = $466&65535;
       $468 = $c;
       $469 = (2 - ($468))|0;
       $470 = $pix;
       $471 = (($470) + -8|0);
       $472 = (($471) + ($469<<1)|0);
       $473 = HEAP16[$472>>1]|0;
       $474 = $473&65535;
       $475 = $c;
       $476 = (2 - ($475))|0;
       $477 = $pix;
       $478 = (($477) + 8|0);
       $479 = (($478) + ($476<<1)|0);
       $480 = HEAP16[$479>>1]|0;
       $481 = $480&65535;
       $482 = (($474) + ($481))|0;
       $483 = $rix;
       $484 = (($483) + -6|0);
       $485 = (($484) + 2|0);
       $486 = HEAP16[$485>>1]|0;
       $487 = $486&65535;
       $488 = (($482) - ($487))|0;
       $489 = $rix;
       $490 = (($489) + 6|0);
       $491 = (($490) + 2|0);
       $492 = HEAP16[$491>>1]|0;
       $493 = $492&65535;
       $494 = (($488) - ($493))|0;
       $495 = $494 >> 1;
       $496 = (($467) + ($495))|0;
       $val = $496;
       $497 = $val;
       $498 = ($497|0)<(65535);
       if ($498) {
        $499 = $val;
        $501 = $499;
       } else {
        $501 = 65535;
       }
       $500 = (0)>($501|0);
       if ($500) {
        $506 = 0;
       } else {
        $502 = $val;
        $503 = ($502|0)<(65535);
        if ($503) {
         $504 = $val;
         $1080 = $504;
        } else {
         $1080 = 65535;
        }
        $506 = $1080;
       }
       $505 = $506&65535;
       $507 = $c;
       $508 = (2 - ($507))|0;
       $509 = $rix;
       $510 = (($509) + ($508<<1)|0);
       HEAP16[$510>>1] = $505;
       $511 = $pix;
       $512 = (($511) + 2|0);
       $513 = HEAP16[$512>>1]|0;
       $514 = $513&65535;
       $515 = $c;
       $516 = HEAP16[132120>>1]|0;
       $517 = $516&65535;
       $518 = (0 - ($517))|0;
       $519 = $pix;
       $520 = (($519) + ($518<<3)|0);
       $521 = (($520) + ($515<<1)|0);
       $522 = HEAP16[$521>>1]|0;
       $523 = $522&65535;
       $524 = $c;
       $525 = HEAP16[132120>>1]|0;
       $526 = $525&65535;
       $527 = $pix;
       $528 = (($527) + ($526<<3)|0);
       $529 = (($528) + ($524<<1)|0);
       $530 = HEAP16[$529>>1]|0;
       $531 = $530&65535;
       $532 = (($523) + ($531))|0;
       $533 = $rix;
       $534 = (($533) + -3072|0);
       $535 = (($534) + 2|0);
       $536 = HEAP16[$535>>1]|0;
       $537 = $536&65535;
       $538 = (($532) - ($537))|0;
       $539 = $rix;
       $540 = (($539) + 3072|0);
       $541 = (($540) + 2|0);
       $542 = HEAP16[$541>>1]|0;
       $543 = $542&65535;
       $544 = (($538) - ($543))|0;
       $545 = $544 >> 1;
       $546 = (($514) + ($545))|0;
       $val = $546;
      } else {
       $547 = $rix;
       $548 = (($547) + 2|0);
       $549 = HEAP16[$548>>1]|0;
       $550 = $549&65535;
       $551 = $c;
       $552 = HEAP16[132120>>1]|0;
       $553 = $552&65535;
       $554 = (0 - ($553))|0;
       $555 = (($554) - 1)|0;
       $556 = $pix;
       $557 = (($556) + ($555<<3)|0);
       $558 = (($557) + ($551<<1)|0);
       $559 = HEAP16[$558>>1]|0;
       $560 = $559&65535;
       $561 = $c;
       $562 = HEAP16[132120>>1]|0;
       $563 = $562&65535;
       $564 = (0 - ($563))|0;
       $565 = (($564) + 1)|0;
       $566 = $pix;
       $567 = (($566) + ($565<<3)|0);
       $568 = (($567) + ($561<<1)|0);
       $569 = HEAP16[$568>>1]|0;
       $570 = $569&65535;
       $571 = (($560) + ($570))|0;
       $572 = $c;
       $573 = HEAP16[132120>>1]|0;
       $574 = $573&65535;
       $575 = (($574) - 1)|0;
       $576 = $pix;
       $577 = (($576) + ($575<<3)|0);
       $578 = (($577) + ($572<<1)|0);
       $579 = HEAP16[$578>>1]|0;
       $580 = $579&65535;
       $581 = (($571) + ($580))|0;
       $582 = $c;
       $583 = HEAP16[132120>>1]|0;
       $584 = $583&65535;
       $585 = (($584) + 1)|0;
       $586 = $pix;
       $587 = (($586) + ($585<<3)|0);
       $588 = (($587) + ($582<<1)|0);
       $589 = HEAP16[$588>>1]|0;
       $590 = $589&65535;
       $591 = (($581) + ($590))|0;
       $592 = $rix;
       $593 = (($592) + -3078|0);
       $594 = (($593) + 2|0);
       $595 = HEAP16[$594>>1]|0;
       $596 = $595&65535;
       $597 = (($591) - ($596))|0;
       $598 = $rix;
       $599 = (($598) + -3066|0);
       $600 = (($599) + 2|0);
       $601 = HEAP16[$600>>1]|0;
       $602 = $601&65535;
       $603 = (($597) - ($602))|0;
       $604 = $rix;
       $605 = (($604) + 3066|0);
       $606 = (($605) + 2|0);
       $607 = HEAP16[$606>>1]|0;
       $608 = $607&65535;
       $609 = (($603) - ($608))|0;
       $610 = $rix;
       $611 = (($610) + 3078|0);
       $612 = (($611) + 2|0);
       $613 = HEAP16[$612>>1]|0;
       $614 = $613&65535;
       $615 = (($609) - ($614))|0;
       $616 = (($615) + 1)|0;
       $617 = $616 >> 2;
       $618 = (($550) + ($617))|0;
       $val = $618;
      }
      $619 = $val;
      $620 = ($619|0)<(65535);
      if ($620) {
       $621 = $val;
       $623 = $621;
      } else {
       $623 = 65535;
      }
      $622 = (0)>($623|0);
      if ($622) {
       $628 = 0;
      } else {
       $624 = $val;
       $625 = ($624|0)<(65535);
       if ($625) {
        $626 = $val;
        $1081 = $626;
       } else {
        $1081 = 65535;
       }
       $628 = $1081;
      }
      $627 = $628&65535;
      $629 = $c;
      $630 = $rix;
      $631 = (($630) + ($629<<1)|0);
      HEAP16[$631>>1] = $627;
      $632 = HEAP32[600>>2]|0;
      $633 = $row;
      $634 = $633 << 1;
      $635 = $634 & 14;
      $636 = $col;
      $637 = $636 & 1;
      $638 = (($635) + ($637))|0;
      $639 = $638 << 1;
      $640 = $632 >>> $639;
      $641 = $640 & 3;
      $c = $641;
      $642 = $c;
      $643 = $pix;
      $644 = (($643) + ($642<<1)|0);
      $645 = HEAP16[$644>>1]|0;
      $646 = $c;
      $647 = $rix;
      $648 = (($647) + ($646<<1)|0);
      HEAP16[$648>>1] = $645;
      $649 = $rix;
      $650 = $lix;
      _cielab($649,$650);
      $651 = $col;
      $652 = (($651) + 1)|0;
      $col = $652;
     }
     $653 = $row;
     $654 = (($653) + 1)|0;
     $row = $654;
    }
    $655 = $d;
    $656 = (($655) + 1)|0;
    $d = $656;
   }
   $657 = $homo;
   _memset(($657|0),0,524288)|0;
   $658 = $top;
   $659 = (($658) + 2)|0;
   $row = $659;
   while(1) {
    $660 = $row;
    $661 = $top;
    $662 = (($661) + 512)|0;
    $663 = (($662) - 2)|0;
    $664 = ($660|0)<($663|0);
    if ($664) {
     $665 = $row;
     $666 = HEAP16[132112>>1]|0;
     $667 = $666&65535;
     $668 = (($667) - 4)|0;
     $669 = ($665|0)<($668|0);
     $1082 = $669;
    } else {
     $1082 = 0;
    }
    if (!($1082)) {
     break;
    }
    $670 = $row;
    $671 = $top;
    $672 = (($670) - ($671))|0;
    $tr = $672;
    $673 = $left;
    $674 = (($673) + 2)|0;
    $col = $674;
    while(1) {
     $675 = $col;
     $676 = $left;
     $677 = (($676) + 512)|0;
     $678 = (($677) - 2)|0;
     $679 = ($675|0)<($678|0);
     if ($679) {
      $680 = $col;
      $681 = HEAP16[132120>>1]|0;
      $682 = $681&65535;
      $683 = (($682) - 4)|0;
      $684 = ($680|0)<($683|0);
      $1083 = $684;
     } else {
      $1083 = 0;
     }
     if (!($1083)) {
      break;
     }
     $685 = $col;
     $686 = $left;
     $687 = (($685) - ($686))|0;
     $tc = $687;
     $d = 0;
     while(1) {
      $688 = $d;
      $689 = ($688|0)<(2);
      if (!($689)) {
       break;
      }
      $690 = $tc;
      $691 = $tr;
      $692 = $d;
      $693 = $lab;
      $694 = (($693) + (Math_imul($692, 1572864)|0)|0);
      $695 = (($694) + (($691*3072)|0)|0);
      $696 = (($695) + (($690*6)|0)|0);
      $lix = $696;
      $i = 0;
      while(1) {
       $697 = $i;
       $698 = ($697|0)<(4);
       if (!($698)) {
        break;
       }
       $699 = $lix;
       $700 = HEAP16[$699>>1]|0;
       $701 = $700 << 16 >> 16;
       $702 = $i;
       $703 = (454104 + ($702<<2)|0);
       $704 = HEAP32[$703>>2]|0;
       $705 = $lix;
       $706 = (($705) + (($704*6)|0)|0);
       $707 = HEAP16[$706>>1]|0;
       $708 = $707 << 16 >> 16;
       $709 = (($701) - ($708))|0;
       $710 = $lix;
       $711 = HEAP16[$710>>1]|0;
       $712 = $711 << 16 >> 16;
       $713 = $i;
       $714 = (454104 + ($713<<2)|0);
       $715 = HEAP32[$714>>2]|0;
       $716 = $lix;
       $717 = (($716) + (($715*6)|0)|0);
       $718 = HEAP16[$717>>1]|0;
       $719 = $718 << 16 >> 16;
       $720 = (($712) - ($719))|0;
       $721 = $720 >> 31;
       $722 = $709 ^ $721;
       $723 = $lix;
       $724 = HEAP16[$723>>1]|0;
       $725 = $724 << 16 >> 16;
       $726 = $i;
       $727 = (454104 + ($726<<2)|0);
       $728 = HEAP32[$727>>2]|0;
       $729 = $lix;
       $730 = (($729) + (($728*6)|0)|0);
       $731 = HEAP16[$730>>1]|0;
       $732 = $731 << 16 >> 16;
       $733 = (($725) - ($732))|0;
       $734 = $733 >> 31;
       $735 = (($722) - ($734))|0;
       $736 = $i;
       $737 = $d;
       $738 = (($ldiff) + ($737<<4)|0);
       $739 = (($738) + ($736<<2)|0);
       HEAP32[$739>>2] = $735;
       $740 = $lix;
       $741 = (($740) + 2|0);
       $742 = HEAP16[$741>>1]|0;
       $743 = $742 << 16 >> 16;
       $744 = $i;
       $745 = (454104 + ($744<<2)|0);
       $746 = HEAP32[$745>>2]|0;
       $747 = $lix;
       $748 = (($747) + (($746*6)|0)|0);
       $749 = (($748) + 2|0);
       $750 = HEAP16[$749>>1]|0;
       $751 = $750 << 16 >> 16;
       $752 = (($743) - ($751))|0;
       $753 = $lix;
       $754 = (($753) + 2|0);
       $755 = HEAP16[$754>>1]|0;
       $756 = $755 << 16 >> 16;
       $757 = $i;
       $758 = (454104 + ($757<<2)|0);
       $759 = HEAP32[$758>>2]|0;
       $760 = $lix;
       $761 = (($760) + (($759*6)|0)|0);
       $762 = (($761) + 2|0);
       $763 = HEAP16[$762>>1]|0;
       $764 = $763 << 16 >> 16;
       $765 = (($756) - ($764))|0;
       $766 = Math_imul($752, $765)|0;
       $767 = $lix;
       $768 = (($767) + 4|0);
       $769 = HEAP16[$768>>1]|0;
       $770 = $769 << 16 >> 16;
       $771 = $i;
       $772 = (454104 + ($771<<2)|0);
       $773 = HEAP32[$772>>2]|0;
       $774 = $lix;
       $775 = (($774) + (($773*6)|0)|0);
       $776 = (($775) + 4|0);
       $777 = HEAP16[$776>>1]|0;
       $778 = $777 << 16 >> 16;
       $779 = (($770) - ($778))|0;
       $780 = $lix;
       $781 = (($780) + 4|0);
       $782 = HEAP16[$781>>1]|0;
       $783 = $782 << 16 >> 16;
       $784 = $i;
       $785 = (454104 + ($784<<2)|0);
       $786 = HEAP32[$785>>2]|0;
       $787 = $lix;
       $788 = (($787) + (($786*6)|0)|0);
       $789 = (($788) + 4|0);
       $790 = HEAP16[$789>>1]|0;
       $791 = $790 << 16 >> 16;
       $792 = (($783) - ($791))|0;
       $793 = Math_imul($779, $792)|0;
       $794 = (($766) + ($793))|0;
       $795 = $i;
       $796 = $d;
       $797 = (($abdiff) + ($796<<4)|0);
       $798 = (($797) + ($795<<2)|0);
       HEAP32[$798>>2] = $794;
       $799 = $i;
       $800 = (($799) + 1)|0;
       $i = $800;
      }
      $801 = $d;
      $802 = (($801) + 1)|0;
      $d = $802;
     }
     $803 = HEAP32[$ldiff>>2]|0;
     $804 = (($ldiff) + 4|0);
     $805 = HEAP32[$804>>2]|0;
     $806 = ($803>>>0)>($805>>>0);
     if ($806) {
      $807 = HEAP32[$ldiff>>2]|0;
      $823 = $807;
     } else {
      $808 = (($ldiff) + 4|0);
      $809 = HEAP32[$808>>2]|0;
      $823 = $809;
     }
     $810 = (($ldiff) + 16|0);
     $811 = (($810) + 8|0);
     $812 = HEAP32[$811>>2]|0;
     $813 = (($ldiff) + 16|0);
     $814 = (($813) + 12|0);
     $815 = HEAP32[$814>>2]|0;
     $816 = ($812>>>0)>($815>>>0);
     if ($816) {
      $817 = (($ldiff) + 16|0);
      $818 = (($817) + 8|0);
      $819 = HEAP32[$818>>2]|0;
      $825 = $819;
     } else {
      $820 = (($ldiff) + 16|0);
      $821 = (($820) + 12|0);
      $822 = HEAP32[$821>>2]|0;
      $825 = $822;
     }
     $824 = ($823>>>0)<($825>>>0);
     if ($824) {
      $826 = HEAP32[$ldiff>>2]|0;
      $827 = (($ldiff) + 4|0);
      $828 = HEAP32[$827>>2]|0;
      $829 = ($826>>>0)>($828>>>0);
      if ($829) {
       $830 = HEAP32[$ldiff>>2]|0;
       $1084 = $830;
      } else {
       $831 = (($ldiff) + 4|0);
       $832 = HEAP32[$831>>2]|0;
       $1084 = $832;
      }
      $846 = $1084;
     } else {
      $833 = (($ldiff) + 16|0);
      $834 = (($833) + 8|0);
      $835 = HEAP32[$834>>2]|0;
      $836 = (($ldiff) + 16|0);
      $837 = (($836) + 12|0);
      $838 = HEAP32[$837>>2]|0;
      $839 = ($835>>>0)>($838>>>0);
      if ($839) {
       $840 = (($ldiff) + 16|0);
       $841 = (($840) + 8|0);
       $842 = HEAP32[$841>>2]|0;
       $1085 = $842;
      } else {
       $843 = (($ldiff) + 16|0);
       $844 = (($843) + 12|0);
       $845 = HEAP32[$844>>2]|0;
       $1085 = $845;
      }
      $846 = $1085;
     }
     $leps = $846;
     $847 = HEAP32[$abdiff>>2]|0;
     $848 = (($abdiff) + 4|0);
     $849 = HEAP32[$848>>2]|0;
     $850 = ($847>>>0)>($849>>>0);
     if ($850) {
      $851 = HEAP32[$abdiff>>2]|0;
      $867 = $851;
     } else {
      $852 = (($abdiff) + 4|0);
      $853 = HEAP32[$852>>2]|0;
      $867 = $853;
     }
     $854 = (($abdiff) + 16|0);
     $855 = (($854) + 8|0);
     $856 = HEAP32[$855>>2]|0;
     $857 = (($abdiff) + 16|0);
     $858 = (($857) + 12|0);
     $859 = HEAP32[$858>>2]|0;
     $860 = ($856>>>0)>($859>>>0);
     if ($860) {
      $861 = (($abdiff) + 16|0);
      $862 = (($861) + 8|0);
      $863 = HEAP32[$862>>2]|0;
      $869 = $863;
     } else {
      $864 = (($abdiff) + 16|0);
      $865 = (($864) + 12|0);
      $866 = HEAP32[$865>>2]|0;
      $869 = $866;
     }
     $868 = ($867>>>0)<($869>>>0);
     if ($868) {
      $870 = HEAP32[$abdiff>>2]|0;
      $871 = (($abdiff) + 4|0);
      $872 = HEAP32[$871>>2]|0;
      $873 = ($870>>>0)>($872>>>0);
      if ($873) {
       $874 = HEAP32[$abdiff>>2]|0;
       $1086 = $874;
      } else {
       $875 = (($abdiff) + 4|0);
       $876 = HEAP32[$875>>2]|0;
       $1086 = $876;
      }
      $890 = $1086;
     } else {
      $877 = (($abdiff) + 16|0);
      $878 = (($877) + 8|0);
      $879 = HEAP32[$878>>2]|0;
      $880 = (($abdiff) + 16|0);
      $881 = (($880) + 12|0);
      $882 = HEAP32[$881>>2]|0;
      $883 = ($879>>>0)>($882>>>0);
      if ($883) {
       $884 = (($abdiff) + 16|0);
       $885 = (($884) + 8|0);
       $886 = HEAP32[$885>>2]|0;
       $1087 = $886;
      } else {
       $887 = (($abdiff) + 16|0);
       $888 = (($887) + 12|0);
       $889 = HEAP32[$888>>2]|0;
       $1087 = $889;
      }
      $890 = $1087;
     }
     $abeps = $890;
     $d = 0;
     while(1) {
      $891 = $d;
      $892 = ($891|0)<(2);
      if (!($892)) {
       break;
      }
      $i = 0;
      while(1) {
       $893 = $i;
       $894 = ($893|0)<(4);
       if (!($894)) {
        break;
       }
       $895 = $i;
       $896 = $d;
       $897 = (($ldiff) + ($896<<4)|0);
       $898 = (($897) + ($895<<2)|0);
       $899 = HEAP32[$898>>2]|0;
       $900 = $leps;
       $901 = ($899>>>0)<=($900>>>0);
       do {
        if ($901) {
         $902 = $i;
         $903 = $d;
         $904 = (($abdiff) + ($903<<4)|0);
         $905 = (($904) + ($902<<2)|0);
         $906 = HEAP32[$905>>2]|0;
         $907 = $abeps;
         $908 = ($906>>>0)<=($907>>>0);
         if (!($908)) {
          break;
         }
         $909 = $tc;
         $910 = $tr;
         $911 = $d;
         $912 = $homo;
         $913 = (($912) + ($911<<18)|0);
         $914 = (($913) + ($910<<9)|0);
         $915 = (($914) + ($909)|0);
         $916 = HEAP8[$915>>0]|0;
         $917 = (($916) + 1)<<24>>24;
         HEAP8[$915>>0] = $917;
        }
       } while(0);
       $918 = $i;
       $919 = (($918) + 1)|0;
       $i = $919;
      }
      $920 = $d;
      $921 = (($920) + 1)|0;
      $d = $921;
     }
     $922 = $col;
     $923 = (($922) + 1)|0;
     $col = $923;
    }
    $924 = $row;
    $925 = (($924) + 1)|0;
    $row = $925;
   }
   $926 = $top;
   $927 = (($926) + 3)|0;
   $row = $927;
   while(1) {
    $928 = $row;
    $929 = $top;
    $930 = (($929) + 512)|0;
    $931 = (($930) - 3)|0;
    $932 = ($928|0)<($931|0);
    if ($932) {
     $933 = $row;
     $934 = HEAP16[132112>>1]|0;
     $935 = $934&65535;
     $936 = (($935) - 5)|0;
     $937 = ($933|0)<($936|0);
     $1088 = $937;
    } else {
     $1088 = 0;
    }
    if (!($1088)) {
     break;
    }
    $938 = $row;
    $939 = $top;
    $940 = (($938) - ($939))|0;
    $tr = $940;
    $941 = $left;
    $942 = (($941) + 3)|0;
    $col = $942;
    while(1) {
     $943 = $col;
     $944 = $left;
     $945 = (($944) + 512)|0;
     $946 = (($945) - 3)|0;
     $947 = ($943|0)<($946|0);
     if ($947) {
      $948 = $col;
      $949 = HEAP16[132120>>1]|0;
      $950 = $949&65535;
      $951 = (($950) - 5)|0;
      $952 = ($948|0)<($951|0);
      $1089 = $952;
     } else {
      $1089 = 0;
     }
     if (!($1089)) {
      break;
     }
     $953 = $col;
     $954 = $left;
     $955 = (($953) - ($954))|0;
     $tc = $955;
     $d = 0;
     while(1) {
      $956 = $d;
      $957 = ($956|0)<(2);
      if (!($957)) {
       break;
      }
      $958 = $d;
      $959 = (($hm) + ($958<<2)|0);
      HEAP32[$959>>2] = 0;
      $960 = $tr;
      $961 = (($960) - 1)|0;
      $i = $961;
      while(1) {
       $962 = $i;
       $963 = $tr;
       $964 = (($963) + 1)|0;
       $965 = ($962|0)<=($964|0);
       if (!($965)) {
        break;
       }
       $966 = $tc;
       $967 = (($966) - 1)|0;
       $j = $967;
       while(1) {
        $968 = $j;
        $969 = $tc;
        $970 = (($969) + 1)|0;
        $971 = ($968|0)<=($970|0);
        if (!($971)) {
         break;
        }
        $972 = $j;
        $973 = $i;
        $974 = $d;
        $975 = $homo;
        $976 = (($975) + ($974<<18)|0);
        $977 = (($976) + ($973<<9)|0);
        $978 = (($977) + ($972)|0);
        $979 = HEAP8[$978>>0]|0;
        $980 = $979 << 24 >> 24;
        $981 = $d;
        $982 = (($hm) + ($981<<2)|0);
        $983 = HEAP32[$982>>2]|0;
        $984 = (($983) + ($980))|0;
        HEAP32[$982>>2] = $984;
        $985 = $j;
        $986 = (($985) + 1)|0;
        $j = $986;
       }
       $987 = $i;
       $988 = (($987) + 1)|0;
       $i = $988;
      }
      $989 = $d;
      $990 = (($989) + 1)|0;
      $d = $990;
     }
     $991 = HEAP32[$hm>>2]|0;
     $992 = (($hm) + 4|0);
     $993 = HEAP32[$992>>2]|0;
     $994 = ($991|0)!=($993|0);
     if ($994) {
      $c = 0;
      while(1) {
       $995 = $c;
       $996 = ($995|0)<(3);
       if (!($996)) {
        break;
       }
       $997 = $c;
       $998 = $tc;
       $999 = $tr;
       $1000 = (($hm) + 4|0);
       $1001 = HEAP32[$1000>>2]|0;
       $1002 = HEAP32[$hm>>2]|0;
       $1003 = ($1001|0)>($1002|0);
       $1004 = $1003&1;
       $1005 = $rgb;
       $1006 = (($1005) + (Math_imul($1004, 1572864)|0)|0);
       $1007 = (($1006) + (($999*3072)|0)|0);
       $1008 = (($1007) + (($998*6)|0)|0);
       $1009 = (($1008) + ($997<<1)|0);
       $1010 = HEAP16[$1009>>1]|0;
       $1011 = $c;
       $1012 = $row;
       $1013 = HEAP16[132120>>1]|0;
       $1014 = $1013&65535;
       $1015 = Math_imul($1012, $1014)|0;
       $1016 = $col;
       $1017 = (($1015) + ($1016))|0;
       $1018 = HEAP32[132144>>2]|0;
       $1019 = (($1018) + ($1017<<3)|0);
       $1020 = (($1019) + ($1011<<1)|0);
       HEAP16[$1020>>1] = $1010;
       $1021 = $c;
       $1022 = (($1021) + 1)|0;
       $c = $1022;
      }
     } else {
      $c = 0;
      while(1) {
       $1023 = $c;
       $1024 = ($1023|0)<(3);
       if (!($1024)) {
        break;
       }
       $1025 = $c;
       $1026 = $tc;
       $1027 = $tr;
       $1028 = $rgb;
       $1029 = (($1028) + (($1027*3072)|0)|0);
       $1030 = (($1029) + (($1026*6)|0)|0);
       $1031 = (($1030) + ($1025<<1)|0);
       $1032 = HEAP16[$1031>>1]|0;
       $1033 = $1032&65535;
       $1034 = $c;
       $1035 = $tc;
       $1036 = $tr;
       $1037 = $rgb;
       $1038 = (($1037) + 1572864|0);
       $1039 = (($1038) + (($1036*3072)|0)|0);
       $1040 = (($1039) + (($1035*6)|0)|0);
       $1041 = (($1040) + ($1034<<1)|0);
       $1042 = HEAP16[$1041>>1]|0;
       $1043 = $1042&65535;
       $1044 = (($1033) + ($1043))|0;
       $1045 = $1044 >> 1;
       $1046 = $1045&65535;
       $1047 = $c;
       $1048 = $row;
       $1049 = HEAP16[132120>>1]|0;
       $1050 = $1049&65535;
       $1051 = Math_imul($1048, $1050)|0;
       $1052 = $col;
       $1053 = (($1051) + ($1052))|0;
       $1054 = HEAP32[132144>>2]|0;
       $1055 = (($1054) + ($1053<<3)|0);
       $1056 = (($1055) + ($1047<<1)|0);
       HEAP16[$1056>>1] = $1046;
       $1057 = $c;
       $1058 = (($1057) + 1)|0;
       $c = $1058;
      }
     }
     $1059 = $col;
     $1060 = (($1059) + 1)|0;
     $col = $1060;
    }
    $1061 = $row;
    $1062 = (($1061) + 1)|0;
    $row = $1062;
   }
   $1063 = $left;
   $1064 = (($1063) + 506)|0;
   $left = $1064;
  }
  $1065 = $top;
  $1066 = (($1065) + 506)|0;
  $top = $1066;
 }
 $1067 = $buffer;
 _free($1067);
 STACKTOP = sp;return;
}
function _median_filter() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $i = 0, $j = 0, $k = 0, $med = 0, $pass = 0, $pix = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $med = sp + 24|0;
 $pass = 1;
 while(1) {
  $0 = $pass;
  $1 = HEAP32[224>>2]|0;
  $2 = ($0|0)<=($1|0);
  if (!($2)) {
   break;
  }
  $3 = HEAP32[168>>2]|0;
  $4 = ($3|0)!=(0);
  if ($4) {
   $5 = HEAP32[_stderr>>2]|0;
   $6 = $pass;
   HEAP32[$vararg_buffer>>2] = $6;
   (_fprintf(($5|0),(454208|0),($vararg_buffer|0))|0);
  }
  $c = 0;
  while(1) {
   $7 = $c;
   $8 = ($7|0)<(3);
   if (!($8)) {
    break;
   }
   $9 = HEAP32[132144>>2]|0;
   $pix = $9;
   while(1) {
    $10 = $pix;
    $11 = HEAP32[132144>>2]|0;
    $12 = HEAP16[132120>>1]|0;
    $13 = $12&65535;
    $14 = HEAP16[132112>>1]|0;
    $15 = $14&65535;
    $16 = Math_imul($13, $15)|0;
    $17 = (($11) + ($16<<3)|0);
    $18 = ($10>>>0)<($17>>>0);
    if (!($18)) {
     break;
    }
    $19 = $c;
    $20 = $pix;
    $21 = (($20) + ($19<<1)|0);
    $22 = HEAP16[$21>>1]|0;
    $23 = $pix;
    $24 = (($23) + 6|0);
    HEAP16[$24>>1] = $22;
    $25 = $pix;
    $26 = (($25) + 8|0);
    $pix = $26;
   }
   $27 = HEAP32[132144>>2]|0;
   $28 = HEAP16[132120>>1]|0;
   $29 = $28&65535;
   $30 = (($27) + ($29<<3)|0);
   $pix = $30;
   while(1) {
    $31 = $pix;
    $32 = HEAP32[132144>>2]|0;
    $33 = HEAP16[132120>>1]|0;
    $34 = $33&65535;
    $35 = HEAP16[132112>>1]|0;
    $36 = $35&65535;
    $37 = (($36) - 1)|0;
    $38 = Math_imul($34, $37)|0;
    $39 = (($32) + ($38<<3)|0);
    $40 = ($31>>>0)<($39>>>0);
    if (!($40)) {
     break;
    }
    $41 = $pix;
    $42 = HEAP32[132144>>2]|0;
    $43 = $41;
    $44 = $42;
    $45 = (($43) - ($44))|0;
    $46 = (($45|0) / 8)&-1;
    $47 = (($46) + 1)|0;
    $48 = HEAP16[132120>>1]|0;
    $49 = $48&65535;
    $50 = (($47|0) % ($49|0))&-1;
    $51 = ($50|0)<(2);
    if ($51) {
    } else {
     $k = 0;
     $52 = HEAP16[132120>>1]|0;
     $53 = $52&65535;
     $54 = (0 - ($53))|0;
     $i = $54;
     while(1) {
      $55 = $i;
      $56 = HEAP16[132120>>1]|0;
      $57 = $56&65535;
      $58 = ($55|0)<=($57|0);
      if (!($58)) {
       break;
      }
      $59 = $i;
      $60 = (($59) - 1)|0;
      $j = $60;
      while(1) {
       $61 = $j;
       $62 = $i;
       $63 = (($62) + 1)|0;
       $64 = ($61|0)<=($63|0);
       if (!($64)) {
        break;
       }
       $65 = $j;
       $66 = $pix;
       $67 = (($66) + ($65<<3)|0);
       $68 = (($67) + 6|0);
       $69 = HEAP16[$68>>1]|0;
       $70 = $69&65535;
       $71 = $j;
       $72 = $pix;
       $73 = (($72) + ($71<<3)|0);
       $74 = (($73) + 2|0);
       $75 = HEAP16[$74>>1]|0;
       $76 = $75&65535;
       $77 = (($70) - ($76))|0;
       $78 = $k;
       $79 = (($78) + 1)|0;
       $k = $79;
       $80 = (($med) + ($78<<2)|0);
       HEAP32[$80>>2] = $77;
       $81 = $j;
       $82 = (($81) + 1)|0;
       $j = $82;
      }
      $83 = HEAP16[132120>>1]|0;
      $84 = $83&65535;
      $85 = $i;
      $86 = (($85) + ($84))|0;
      $i = $86;
     }
     $i = 0;
     while(1) {
      $87 = $i;
      $88 = ($87>>>0)<(38);
      if (!($88)) {
       break;
      }
      $89 = $i;
      $90 = (454168 + ($89)|0);
      $91 = HEAP8[$90>>0]|0;
      $92 = $91&255;
      $93 = (($med) + ($92<<2)|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = $i;
      $96 = (($95) + 1)|0;
      $97 = (454168 + ($96)|0);
      $98 = HEAP8[$97>>0]|0;
      $99 = $98&255;
      $100 = (($med) + ($99<<2)|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = ($94|0)>($101|0);
      if ($102) {
       $103 = $i;
       $104 = (454168 + ($103)|0);
       $105 = HEAP8[$104>>0]|0;
       $106 = $105&255;
       $107 = (($med) + ($106<<2)|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = $i;
       $110 = (($109) + 1)|0;
       $111 = (454168 + ($110)|0);
       $112 = HEAP8[$111>>0]|0;
       $113 = $112&255;
       $114 = (($med) + ($113<<2)|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = (($108) + ($115))|0;
       $117 = $i;
       $118 = (454168 + ($117)|0);
       $119 = HEAP8[$118>>0]|0;
       $120 = $119&255;
       $121 = (($med) + ($120<<2)|0);
       HEAP32[$121>>2] = $116;
       $122 = $i;
       $123 = (454168 + ($122)|0);
       $124 = HEAP8[$123>>0]|0;
       $125 = $124&255;
       $126 = (($med) + ($125<<2)|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = $i;
       $129 = (($128) + 1)|0;
       $130 = (454168 + ($129)|0);
       $131 = HEAP8[$130>>0]|0;
       $132 = $131&255;
       $133 = (($med) + ($132<<2)|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = (($127) - ($134))|0;
       $136 = $i;
       $137 = (($136) + 1)|0;
       $138 = (454168 + ($137)|0);
       $139 = HEAP8[$138>>0]|0;
       $140 = $139&255;
       $141 = (($med) + ($140<<2)|0);
       HEAP32[$141>>2] = $135;
       $142 = $i;
       $143 = (454168 + ($142)|0);
       $144 = HEAP8[$143>>0]|0;
       $145 = $144&255;
       $146 = (($med) + ($145<<2)|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = $i;
       $149 = (($148) + 1)|0;
       $150 = (454168 + ($149)|0);
       $151 = HEAP8[$150>>0]|0;
       $152 = $151&255;
       $153 = (($med) + ($152<<2)|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = (($147) - ($154))|0;
       $156 = $i;
       $157 = (454168 + ($156)|0);
       $158 = HEAP8[$157>>0]|0;
       $159 = $158&255;
       $160 = (($med) + ($159<<2)|0);
       HEAP32[$160>>2] = $155;
      }
      $161 = $i;
      $162 = (($161) + 2)|0;
      $i = $162;
     }
     $163 = (($med) + 16|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = $pix;
     $166 = (($165) + 2|0);
     $167 = HEAP16[$166>>1]|0;
     $168 = $167&65535;
     $169 = (($164) + ($168))|0;
     $170 = ($169|0)<(65535);
     if ($170) {
      $171 = (($med) + 16|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = $pix;
      $174 = (($173) + 2|0);
      $175 = HEAP16[$174>>1]|0;
      $176 = $175&65535;
      $177 = (($172) + ($176))|0;
      $179 = $177;
     } else {
      $179 = 65535;
     }
     $178 = (0)>($179|0);
     if ($178) {
      $196 = 0;
     } else {
      $180 = (($med) + 16|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = $pix;
      $183 = (($182) + 2|0);
      $184 = HEAP16[$183>>1]|0;
      $185 = $184&65535;
      $186 = (($181) + ($185))|0;
      $187 = ($186|0)<(65535);
      if ($187) {
       $188 = (($med) + 16|0);
       $189 = HEAP32[$188>>2]|0;
       $190 = $pix;
       $191 = (($190) + 2|0);
       $192 = HEAP16[$191>>1]|0;
       $193 = $192&65535;
       $194 = (($189) + ($193))|0;
       $206 = $194;
      } else {
       $206 = 65535;
      }
      $196 = $206;
     }
     $195 = $196&65535;
     $197 = $c;
     $198 = $pix;
     $199 = (($198) + ($197<<1)|0);
     HEAP16[$199>>1] = $195;
    }
    $200 = $pix;
    $201 = (($200) + 8|0);
    $pix = $201;
   }
   $202 = $c;
   $203 = (($202) + 2)|0;
   $c = $203;
  }
  $204 = $pass;
  $205 = (($204) + 1)|0;
  $pass = $205;
 }
 STACKTOP = sp;return;
}
function _blend_highlights() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0;
 var $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $cam = 0, $chratio = 0.0, $clip = 0, $col = 0, $i = 0;
 var $j = 0, $lab = 0, $row = 0, $sum = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $cam = sp + 40|0;
 $lab = sp + 8|0;
 $sum = sp + 80|0;
 $clip = 2147483647;
 $0 = HEAP32[132304>>2]|0;
 $1 = (($0) - 3)|0;
 $2 = ($1>>>0)>(1);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[168>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[_stderr>>2]|0;
  (_fprintf(($5|0),(454496|0),($vararg_buffer|0))|0);
 }
 $c = 0;
 while(1) {
  $6 = $c;
  $7 = HEAP32[132304>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = $clip;
  $10 = $c;
  $11 = (132080 + ($10<<2)|0);
  $12 = +HEAPF32[$11>>2];
  $13 = 65535.0 * $12;
  $14 = (~~(($13)));
  $i = $14;
  $15 = ($9|0)>($14|0);
  if ($15) {
   $16 = $i;
   $clip = $16;
  }
  $17 = $c;
  $18 = (($17) + 1)|0;
  $c = $18;
 }
 $row = 0;
 while(1) {
  $19 = $row;
  $20 = HEAP16[132112>>1]|0;
  $21 = $20&65535;
  $22 = ($19|0)<($21|0);
  if (!($22)) {
   break;
  }
  $col = 0;
  while(1) {
   $23 = $col;
   $24 = HEAP16[132120>>1]|0;
   $25 = $24&65535;
   $26 = ($23|0)<($25|0);
   if (!($26)) {
    break;
   }
   $c = 0;
   while(1) {
    $27 = $c;
    $28 = HEAP32[132304>>2]|0;
    $29 = ($27>>>0)<($28>>>0);
    if (!($29)) {
     break;
    }
    $30 = $c;
    $31 = $row;
    $32 = HEAP16[132120>>1]|0;
    $33 = $32&65535;
    $34 = Math_imul($31, $33)|0;
    $35 = $col;
    $36 = (($34) + ($35))|0;
    $37 = HEAP32[132144>>2]|0;
    $38 = (($37) + ($36<<3)|0);
    $39 = (($38) + ($30<<1)|0);
    $40 = HEAP16[$39>>1]|0;
    $41 = $40&65535;
    $42 = $clip;
    $43 = ($41|0)>($42|0);
    if ($43) {
     label = 18;
     break;
    }
    $44 = $c;
    $45 = (($44) + 1)|0;
    $c = $45;
   }
   if ((label|0) == 18) {
    label = 0;
   }
   $46 = $c;
   $47 = HEAP32[132304>>2]|0;
   $48 = ($46|0)==($47|0);
   if ($48) {
   } else {
    $c = 0;
    while(1) {
     $49 = $c;
     $50 = HEAP32[132304>>2]|0;
     $51 = ($49>>>0)<($50>>>0);
     if (!($51)) {
      break;
     }
     $52 = $c;
     $53 = $row;
     $54 = HEAP16[132120>>1]|0;
     $55 = $54&65535;
     $56 = Math_imul($53, $55)|0;
     $57 = $col;
     $58 = (($56) + ($57))|0;
     $59 = HEAP32[132144>>2]|0;
     $60 = (($59) + ($58<<3)|0);
     $61 = (($60) + ($52<<1)|0);
     $62 = HEAP16[$61>>1]|0;
     $63 = (+($62&65535));
     $64 = $c;
     $65 = (($cam) + ($64<<2)|0);
     HEAPF32[$65>>2] = $63;
     $66 = $c;
     $67 = (($cam) + ($66<<2)|0);
     $68 = +HEAPF32[$67>>2];
     $69 = $clip;
     $70 = (+($69|0));
     $71 = $68 < $70;
     if ($71) {
      $72 = $c;
      $73 = (($cam) + ($72<<2)|0);
      $74 = +HEAPF32[$73>>2];
      $80 = $74;
     } else {
      $75 = $clip;
      $76 = (+($75|0));
      $80 = $76;
     }
     $77 = $c;
     $78 = (($cam) + 16|0);
     $79 = (($78) + ($77<<2)|0);
     HEAPF32[$79>>2] = $80;
     $81 = $c;
     $82 = (($81) + 1)|0;
     $c = $82;
    }
    $i = 0;
    while(1) {
     $83 = $i;
     $84 = ($83|0)<(2);
     if (!($84)) {
      break;
     }
     $c = 0;
     while(1) {
      $85 = $c;
      $86 = HEAP32[132304>>2]|0;
      $87 = ($85>>>0)<($86>>>0);
      if (!($87)) {
       break;
      }
      $j = 0;
      $88 = $c;
      $89 = $i;
      $90 = (($lab) + ($89<<4)|0);
      $91 = (($90) + ($88<<2)|0);
      HEAPF32[$91>>2] = 0.0;
      while(1) {
       $92 = $j;
       $93 = HEAP32[132304>>2]|0;
       $94 = ($92>>>0)<($93>>>0);
       if (!($94)) {
        break;
       }
       $95 = $j;
       $96 = $c;
       $97 = HEAP32[132304>>2]|0;
       $98 = (($97) - 3)|0;
       $99 = (454240 + ($98<<6)|0);
       $100 = (($99) + ($96<<4)|0);
       $101 = (($100) + ($95<<2)|0);
       $102 = +HEAPF32[$101>>2];
       $103 = $j;
       $104 = $i;
       $105 = (($cam) + ($104<<4)|0);
       $106 = (($105) + ($103<<2)|0);
       $107 = +HEAPF32[$106>>2];
       $108 = $102 * $107;
       $109 = $c;
       $110 = $i;
       $111 = (($lab) + ($110<<4)|0);
       $112 = (($111) + ($109<<2)|0);
       $113 = +HEAPF32[$112>>2];
       $114 = $113 + $108;
       HEAPF32[$112>>2] = $114;
       $115 = $j;
       $116 = (($115) + 1)|0;
       $j = $116;
      }
      $117 = $c;
      $118 = (($117) + 1)|0;
      $c = $118;
     }
     $119 = $i;
     $120 = (($sum) + ($119<<2)|0);
     HEAPF32[$120>>2] = 0.0;
     $c = 1;
     while(1) {
      $121 = $c;
      $122 = HEAP32[132304>>2]|0;
      $123 = ($121>>>0)<($122>>>0);
      if (!($123)) {
       break;
      }
      $124 = $c;
      $125 = $i;
      $126 = (($lab) + ($125<<4)|0);
      $127 = (($126) + ($124<<2)|0);
      $128 = +HEAPF32[$127>>2];
      $129 = $c;
      $130 = $i;
      $131 = (($lab) + ($130<<4)|0);
      $132 = (($131) + ($129<<2)|0);
      $133 = +HEAPF32[$132>>2];
      $134 = $128 * $133;
      $135 = $i;
      $136 = (($sum) + ($135<<2)|0);
      $137 = +HEAPF32[$136>>2];
      $138 = $137 + $134;
      HEAPF32[$136>>2] = $138;
      $139 = $c;
      $140 = (($139) + 1)|0;
      $c = $140;
     }
     $141 = $i;
     $142 = (($141) + 1)|0;
     $i = $142;
    }
    $143 = (($sum) + 4|0);
    $144 = +HEAPF32[$143>>2];
    $145 = +HEAPF32[$sum>>2];
    $146 = $144 / $145;
    $147 = $146;
    $148 = (+Math_sqrt((+$147)));
    $149 = $148;
    $chratio = $149;
    $c = 1;
    while(1) {
     $150 = $c;
     $151 = HEAP32[132304>>2]|0;
     $152 = ($150>>>0)<($151>>>0);
     if (!($152)) {
      break;
     }
     $153 = $chratio;
     $154 = $c;
     $155 = (($lab) + ($154<<2)|0);
     $156 = +HEAPF32[$155>>2];
     $157 = $156 * $153;
     HEAPF32[$155>>2] = $157;
     $158 = $c;
     $159 = (($158) + 1)|0;
     $c = $159;
    }
    $c = 0;
    while(1) {
     $160 = $c;
     $161 = HEAP32[132304>>2]|0;
     $162 = ($160>>>0)<($161>>>0);
     if (!($162)) {
      break;
     }
     $j = 0;
     $163 = $c;
     $164 = (($cam) + ($163<<2)|0);
     HEAPF32[$164>>2] = 0.0;
     while(1) {
      $165 = $j;
      $166 = HEAP32[132304>>2]|0;
      $167 = ($165>>>0)<($166>>>0);
      if (!($167)) {
       break;
      }
      $168 = $j;
      $169 = $c;
      $170 = HEAP32[132304>>2]|0;
      $171 = (($170) - 3)|0;
      $172 = (454368 + ($171<<6)|0);
      $173 = (($172) + ($169<<4)|0);
      $174 = (($173) + ($168<<2)|0);
      $175 = +HEAPF32[$174>>2];
      $176 = $j;
      $177 = (($lab) + ($176<<2)|0);
      $178 = +HEAPF32[$177>>2];
      $179 = $175 * $178;
      $180 = $c;
      $181 = (($cam) + ($180<<2)|0);
      $182 = +HEAPF32[$181>>2];
      $183 = $182 + $179;
      HEAPF32[$181>>2] = $183;
      $184 = $j;
      $185 = (($184) + 1)|0;
      $j = $185;
     }
     $186 = $c;
     $187 = (($186) + 1)|0;
     $c = $187;
    }
    $c = 0;
    while(1) {
     $188 = $c;
     $189 = HEAP32[132304>>2]|0;
     $190 = ($188>>>0)<($189>>>0);
     if (!($190)) {
      break;
     }
     $191 = $c;
     $192 = (($cam) + ($191<<2)|0);
     $193 = +HEAPF32[$192>>2];
     $194 = HEAP32[132304>>2]|0;
     $195 = (+($194>>>0));
     $196 = $193 / $195;
     $197 = (~~(($196))&65535);
     $198 = $c;
     $199 = $row;
     $200 = HEAP16[132120>>1]|0;
     $201 = $200&65535;
     $202 = Math_imul($199, $201)|0;
     $203 = $col;
     $204 = (($202) + ($203))|0;
     $205 = HEAP32[132144>>2]|0;
     $206 = (($205) + ($204<<3)|0);
     $207 = (($206) + ($198<<1)|0);
     HEAP16[$207>>1] = $197;
     $208 = $c;
     $209 = (($208) + 1)|0;
     $c = $209;
    }
   }
   $210 = $col;
   $211 = (($210) + 1)|0;
   $col = $211;
  }
  $212 = $row;
  $213 = (($212) + 1)|0;
  $row = $213;
 }
 STACKTOP = sp;return;
}
function _recover_highlights() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0;
 var $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0.0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $change = 0, $col = 0, $count = 0, $d = 0, $grow = 0.0, $high = 0, $hsat = 0;
 var $i = 0, $kc = 0, $map = 0, $mcol = 0, $mrow = 0, $pixel = 0, $row = 0, $spread = 0, $sum = 0.0, $val = 0, $vararg_buffer = 0, $wgt = 0.0, $wide = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $hsat = sp + 72|0;
 $0 = HEAP32[168>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  $2 = HEAP32[_stderr>>2]|0;
  (_fprintf(($2|0),(454536|0),($vararg_buffer|0))|0);
 }
 $3 = HEAP32[160>>2]|0;
 $4 = (4 - ($3))|0;
 $5 = (+($4|0));
 $6 = (+Math_pow(2.0,(+$5)));
 $7 = $6;
 $grow = $7;
 $c = 0;
 while(1) {
  $8 = $c;
  $9 = HEAP32[132304>>2]|0;
  $10 = ($8>>>0)<($9>>>0);
  if (!($10)) {
   break;
  }
  $11 = $c;
  $12 = (132080 + ($11<<2)|0);
  $13 = +HEAPF32[$12>>2];
  $14 = 32000.0 * $13;
  $15 = (~~(($14)));
  $16 = $c;
  $17 = (($hsat) + ($16<<2)|0);
  HEAP32[$17>>2] = $15;
  $18 = $c;
  $19 = (($18) + 1)|0;
  $c = $19;
 }
 $kc = 0;
 $c = 1;
 while(1) {
  $20 = $c;
  $21 = HEAP32[132304>>2]|0;
  $22 = ($20>>>0)<($21>>>0);
  if (!($22)) {
   break;
  }
  $23 = $kc;
  $24 = (132080 + ($23<<2)|0);
  $25 = +HEAPF32[$24>>2];
  $26 = $c;
  $27 = (132080 + ($26<<2)|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $25 < $28;
  if ($29) {
   $30 = $c;
   $kc = $30;
  }
  $31 = $c;
  $32 = (($31) + 1)|0;
  $c = $32;
 }
 $33 = HEAP16[132112>>1]|0;
 $34 = $33&65535;
 $35 = HEAP16[132128>>1]|0;
 $36 = $35&65535;
 $37 = 4 >> $36;
 $38 = (($34|0) / ($37|0))&-1;
 $high = $38;
 $39 = HEAP16[132120>>1]|0;
 $40 = $39&65535;
 $41 = HEAP16[132128>>1]|0;
 $42 = $41&65535;
 $43 = 4 >> $42;
 $44 = (($40|0) / ($43|0))&-1;
 $wide = $44;
 $45 = $high;
 $46 = $wide;
 $47 = $46<<2;
 $48 = (_calloc($45,$47)|0);
 $map = $48;
 $49 = $map;
 _merror($49,454568);
 $c = 0;
 while(1) {
  $50 = $c;
  $51 = HEAP32[132304>>2]|0;
  $52 = ($50>>>0)<($51>>>0);
  if (!($52)) {
   break;
  }
  $53 = $c;
  $54 = $kc;
  $55 = ($53|0)!=($54|0);
  if ($55) {
   $56 = $map;
   $57 = $high;
   $58 = $wide;
   $59 = Math_imul($57, $58)|0;
   $60 = $59<<2;
   _memset(($56|0),0,($60|0))|0;
   $mrow = 0;
   while(1) {
    $61 = $mrow;
    $62 = $high;
    $63 = ($61>>>0)<($62>>>0);
    if (!($63)) {
     break;
    }
    $mcol = 0;
    while(1) {
     $64 = $mcol;
     $65 = $wide;
     $66 = ($64>>>0)<($65>>>0);
     if (!($66)) {
      break;
     }
     $count = 0;
     $wgt = 0.0;
     $sum = 0.0;
     $67 = $mrow;
     $68 = HEAP16[132128>>1]|0;
     $69 = $68&65535;
     $70 = 4 >> $69;
     $71 = Math_imul($67, $70)|0;
     $row = $71;
     while(1) {
      $72 = $row;
      $73 = $mrow;
      $74 = (($73) + 1)|0;
      $75 = HEAP16[132128>>1]|0;
      $76 = $75&65535;
      $77 = 4 >> $76;
      $78 = Math_imul($74, $77)|0;
      $79 = ($72>>>0)<($78>>>0);
      if (!($79)) {
       break;
      }
      $80 = $mcol;
      $81 = HEAP16[132128>>1]|0;
      $82 = $81&65535;
      $83 = 4 >> $82;
      $84 = Math_imul($80, $83)|0;
      $col = $84;
      while(1) {
       $85 = $col;
       $86 = $mcol;
       $87 = (($86) + 1)|0;
       $88 = HEAP16[132128>>1]|0;
       $89 = $88&65535;
       $90 = 4 >> $89;
       $91 = Math_imul($87, $90)|0;
       $92 = ($85>>>0)<($91>>>0);
       if (!($92)) {
        break;
       }
       $93 = $row;
       $94 = HEAP16[132120>>1]|0;
       $95 = $94&65535;
       $96 = Math_imul($93, $95)|0;
       $97 = $col;
       $98 = (($96) + ($97))|0;
       $99 = HEAP32[132144>>2]|0;
       $100 = (($99) + ($98<<3)|0);
       $pixel = $100;
       $101 = $c;
       $102 = $pixel;
       $103 = (($102) + ($101<<1)|0);
       $104 = HEAP16[$103>>1]|0;
       $105 = $104&65535;
       $106 = $c;
       $107 = (($hsat) + ($106<<2)|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (($105|0) / ($108|0))&-1;
       $110 = ($109|0)==(1);
       if ($110) {
        $111 = $kc;
        $112 = $pixel;
        $113 = (($112) + ($111<<1)|0);
        $114 = HEAP16[$113>>1]|0;
        $115 = $114&65535;
        $116 = ($115|0)>(24000);
        if ($116) {
         $117 = $c;
         $118 = $pixel;
         $119 = (($118) + ($117<<1)|0);
         $120 = HEAP16[$119>>1]|0;
         $121 = $120&65535;
         $122 = (+($121|0));
         $123 = $sum;
         $124 = $123 + $122;
         $sum = $124;
         $125 = $kc;
         $126 = $pixel;
         $127 = (($126) + ($125<<1)|0);
         $128 = HEAP16[$127>>1]|0;
         $129 = $128&65535;
         $130 = (+($129|0));
         $131 = $wgt;
         $132 = $131 + $130;
         $wgt = $132;
         $133 = $count;
         $134 = (($133) + 1)|0;
         $count = $134;
        }
       }
       $135 = $col;
       $136 = (($135) + 1)|0;
       $col = $136;
      }
      $137 = $row;
      $138 = (($137) + 1)|0;
      $row = $138;
     }
     $139 = $count;
     $140 = HEAP16[132128>>1]|0;
     $141 = $140&65535;
     $142 = 4 >> $141;
     $143 = HEAP16[132128>>1]|0;
     $144 = $143&65535;
     $145 = 4 >> $144;
     $146 = Math_imul($142, $145)|0;
     $147 = ($139|0)==($146|0);
     if ($147) {
      $148 = $sum;
      $149 = $wgt;
      $150 = $148 / $149;
      $151 = $mrow;
      $152 = $wide;
      $153 = Math_imul($151, $152)|0;
      $154 = $mcol;
      $155 = (($153) + ($154))|0;
      $156 = $map;
      $157 = (($156) + ($155<<2)|0);
      HEAPF32[$157>>2] = $150;
     }
     $158 = $mcol;
     $159 = (($158) + 1)|0;
     $mcol = $159;
    }
    $160 = $mrow;
    $161 = (($160) + 1)|0;
    $mrow = $161;
   }
   $162 = $grow;
   $163 = 32.0 / $162;
   $164 = (~~(($163)));
   $spread = $164;
   while(1) {
    $165 = $spread;
    $166 = (($165) + -1)|0;
    $spread = $166;
    $167 = ($165|0)!=(0);
    if (!($167)) {
     break;
    }
    $mrow = 0;
    while(1) {
     $168 = $mrow;
     $169 = $high;
     $170 = ($168>>>0)<($169>>>0);
     if (!($170)) {
      break;
     }
     $mcol = 0;
     while(1) {
      $171 = $mcol;
      $172 = $wide;
      $173 = ($171>>>0)<($172>>>0);
      if (!($173)) {
       break;
      }
      $174 = $mrow;
      $175 = $wide;
      $176 = Math_imul($174, $175)|0;
      $177 = $mcol;
      $178 = (($176) + ($177))|0;
      $179 = $map;
      $180 = (($179) + ($178<<2)|0);
      $181 = +HEAPF32[$180>>2];
      $182 = $181 != 0.0;
      if ($182) {
      } else {
       $count = 0;
       $sum = 0.0;
       $d = 0;
       while(1) {
        $183 = $d;
        $184 = ($183>>>0)<(8);
        if (!($184)) {
         break;
        }
        $185 = $mrow;
        $186 = $d;
        $187 = (454520 + ($186<<1)|0);
        $188 = HEAP8[$187>>0]|0;
        $189 = $188 << 24 >> 24;
        $190 = (($185) + ($189))|0;
        $y = $190;
        $191 = $mcol;
        $192 = $d;
        $193 = (454520 + ($192<<1)|0);
        $194 = (($193) + 1|0);
        $195 = HEAP8[$194>>0]|0;
        $196 = $195 << 24 >> 24;
        $197 = (($191) + ($196))|0;
        $x = $197;
        $198 = $y;
        $199 = $high;
        $200 = ($198>>>0)<($199>>>0);
        if ($200) {
         $201 = $x;
         $202 = $wide;
         $203 = ($201>>>0)<($202>>>0);
         if ($203) {
          $204 = $y;
          $205 = $wide;
          $206 = Math_imul($204, $205)|0;
          $207 = $x;
          $208 = (($206) + ($207))|0;
          $209 = $map;
          $210 = (($209) + ($208<<2)|0);
          $211 = +HEAPF32[$210>>2];
          $212 = $211 > 0.0;
          if ($212) {
           $213 = $d;
           $214 = $213 & 1;
           $215 = (1 + ($214))|0;
           $216 = (+($215>>>0));
           $217 = $y;
           $218 = $wide;
           $219 = Math_imul($217, $218)|0;
           $220 = $x;
           $221 = (($219) + ($220))|0;
           $222 = $map;
           $223 = (($222) + ($221<<2)|0);
           $224 = +HEAPF32[$223>>2];
           $225 = $216 * $224;
           $226 = $sum;
           $227 = $226 + $225;
           $sum = $227;
           $228 = $d;
           $229 = $228 & 1;
           $230 = (1 + ($229))|0;
           $231 = $count;
           $232 = (($231) + ($230))|0;
           $count = $232;
          }
         }
        }
        $233 = $d;
        $234 = (($233) + 1)|0;
        $d = $234;
       }
       $235 = $count;
       $236 = ($235|0)>(3);
       if ($236) {
        $237 = $sum;
        $238 = $grow;
        $239 = $237 + $238;
        $240 = -$239;
        $241 = $count;
        $242 = (+($241|0));
        $243 = $grow;
        $244 = $242 + $243;
        $245 = $240 / $244;
        $246 = $mrow;
        $247 = $wide;
        $248 = Math_imul($246, $247)|0;
        $249 = $mcol;
        $250 = (($248) + ($249))|0;
        $251 = $map;
        $252 = (($251) + ($250<<2)|0);
        HEAPF32[$252>>2] = $245;
       }
      }
      $253 = $mcol;
      $254 = (($253) + 1)|0;
      $mcol = $254;
     }
     $255 = $mrow;
     $256 = (($255) + 1)|0;
     $mrow = $256;
    }
    $i = 0;
    $change = 0;
    while(1) {
     $257 = $i;
     $258 = $high;
     $259 = $wide;
     $260 = Math_imul($258, $259)|0;
     $261 = ($257>>>0)<($260>>>0);
     if (!($261)) {
      break;
     }
     $262 = $i;
     $263 = $map;
     $264 = (($263) + ($262<<2)|0);
     $265 = +HEAPF32[$264>>2];
     $266 = $265 < 0.0;
     if ($266) {
      $267 = $i;
      $268 = $map;
      $269 = (($268) + ($267<<2)|0);
      $270 = +HEAPF32[$269>>2];
      $271 = -$270;
      $272 = $i;
      $273 = $map;
      $274 = (($273) + ($272<<2)|0);
      HEAPF32[$274>>2] = $271;
      $change = 1;
     }
     $275 = $i;
     $276 = (($275) + 1)|0;
     $i = $276;
    }
    $277 = $change;
    $278 = ($277|0)!=(0);
    if (!($278)) {
     label = 66;
     break;
    }
   }
   if ((label|0) == 66) {
    label = 0;
   }
   $i = 0;
   while(1) {
    $279 = $i;
    $280 = $high;
    $281 = $wide;
    $282 = Math_imul($280, $281)|0;
    $283 = ($279>>>0)<($282>>>0);
    if (!($283)) {
     break;
    }
    $284 = $i;
    $285 = $map;
    $286 = (($285) + ($284<<2)|0);
    $287 = +HEAPF32[$286>>2];
    $288 = $287 == 0.0;
    if ($288) {
     $289 = $i;
     $290 = $map;
     $291 = (($290) + ($289<<2)|0);
     HEAPF32[$291>>2] = 1.0;
    }
    $292 = $i;
    $293 = (($292) + 1)|0;
    $i = $293;
   }
   $mrow = 0;
   while(1) {
    $294 = $mrow;
    $295 = $high;
    $296 = ($294>>>0)<($295>>>0);
    if (!($296)) {
     break;
    }
    $mcol = 0;
    while(1) {
     $297 = $mcol;
     $298 = $wide;
     $299 = ($297>>>0)<($298>>>0);
     if (!($299)) {
      break;
     }
     $300 = $mrow;
     $301 = HEAP16[132128>>1]|0;
     $302 = $301&65535;
     $303 = 4 >> $302;
     $304 = Math_imul($300, $303)|0;
     $row = $304;
     while(1) {
      $305 = $row;
      $306 = $mrow;
      $307 = (($306) + 1)|0;
      $308 = HEAP16[132128>>1]|0;
      $309 = $308&65535;
      $310 = 4 >> $309;
      $311 = Math_imul($307, $310)|0;
      $312 = ($305>>>0)<($311>>>0);
      if (!($312)) {
       break;
      }
      $313 = $mcol;
      $314 = HEAP16[132128>>1]|0;
      $315 = $314&65535;
      $316 = 4 >> $315;
      $317 = Math_imul($313, $316)|0;
      $col = $317;
      while(1) {
       $318 = $col;
       $319 = $mcol;
       $320 = (($319) + 1)|0;
       $321 = HEAP16[132128>>1]|0;
       $322 = $321&65535;
       $323 = 4 >> $322;
       $324 = Math_imul($320, $323)|0;
       $325 = ($318>>>0)<($324>>>0);
       if (!($325)) {
        break;
       }
       $326 = $row;
       $327 = HEAP16[132120>>1]|0;
       $328 = $327&65535;
       $329 = Math_imul($326, $328)|0;
       $330 = $col;
       $331 = (($329) + ($330))|0;
       $332 = HEAP32[132144>>2]|0;
       $333 = (($332) + ($331<<3)|0);
       $pixel = $333;
       $334 = $c;
       $335 = $pixel;
       $336 = (($335) + ($334<<1)|0);
       $337 = HEAP16[$336>>1]|0;
       $338 = $337&65535;
       $339 = $c;
       $340 = (($hsat) + ($339<<2)|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = (($338|0) / ($341|0))&-1;
       $343 = ($342|0)>(1);
       if ($343) {
        $344 = $kc;
        $345 = $pixel;
        $346 = (($345) + ($344<<1)|0);
        $347 = HEAP16[$346>>1]|0;
        $348 = $347&65535;
        $349 = (+($348|0));
        $350 = $mrow;
        $351 = $wide;
        $352 = Math_imul($350, $351)|0;
        $353 = $mcol;
        $354 = (($352) + ($353))|0;
        $355 = $map;
        $356 = (($355) + ($354<<2)|0);
        $357 = +HEAPF32[$356>>2];
        $358 = $349 * $357;
        $359 = (~~(($358)));
        $val = $359;
        $360 = $c;
        $361 = $pixel;
        $362 = (($361) + ($360<<1)|0);
        $363 = HEAP16[$362>>1]|0;
        $364 = $363&65535;
        $365 = $val;
        $366 = ($364|0)<($365|0);
        if ($366) {
         $367 = $val;
         $368 = ($367|0)<(65535);
         if ($368) {
          $369 = $val;
          $371 = $369;
         } else {
          $371 = 65535;
         }
         $370 = (0)>($371|0);
         if ($370) {
          $376 = 0;
         } else {
          $372 = $val;
          $373 = ($372|0)<(65535);
          if ($373) {
           $374 = $val;
           $391 = $374;
          } else {
           $391 = 65535;
          }
          $376 = $391;
         }
         $375 = $376&65535;
         $377 = $c;
         $378 = $pixel;
         $379 = (($378) + ($377<<1)|0);
         HEAP16[$379>>1] = $375;
        }
       }
       $380 = $col;
       $381 = (($380) + 1)|0;
       $col = $381;
      }
      $382 = $row;
      $383 = (($382) + 1)|0;
      $row = $383;
     }
     $384 = $mcol;
     $385 = (($384) + 1)|0;
     $mcol = $385;
    }
    $386 = $mrow;
    $387 = (($386) + 1)|0;
    $mrow = $387;
   }
  }
  $388 = $c;
  $389 = (($388) + 1)|0;
  $c = $389;
 }
 $390 = $map;
 _free($390);
 STACKTOP = sp;return;
}
function _tiff_get($base,$tag,$type,$len,$save) {
 $base = $base|0;
 $tag = $tag|0;
 $type = $type|0;
 $len = $len|0;
 $save = $save|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $base;
 $1 = $tag;
 $2 = $type;
 $3 = $len;
 $4 = $save;
 $5 = (_get2()|0);
 $6 = $5&65535;
 $7 = $1;
 HEAP32[$7>>2] = $6;
 $8 = (_get2()|0);
 $9 = $8&65535;
 $10 = $2;
 HEAP32[$10>>2] = $9;
 $11 = (_get4()|0);
 $12 = $3;
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[880>>2]|0;
 $14 = (_ftell(($13|0))|0);
 $15 = (($14) + 4)|0;
 $16 = $4;
 HEAP32[$16>>2] = $15;
 $17 = $3;
 $18 = HEAP32[$17>>2]|0;
 $19 = $2;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20>>>0)<(14);
 if ($21) {
  $22 = $2;
  $23 = HEAP32[$22>>2]|0;
  $25 = $23;
 } else {
  $25 = 0;
 }
 $24 = (454592 + ($25)|0);
 $26 = HEAP8[$24>>0]|0;
 $27 = $26 << 24 >> 24;
 $28 = (($27) - 48)|0;
 $29 = Math_imul($18, $28)|0;
 $30 = ($29>>>0)>(4);
 if (!($30)) {
  STACKTOP = sp;return;
 }
 $31 = HEAP32[880>>2]|0;
 $32 = (_get4()|0);
 $33 = $0;
 $34 = (($32) + ($33))|0;
 (_fseek(($31|0),($34|0),0)|0);
 STACKTOP = sp;return;
}
function _parse_thumb_note($base,$toff,$tlen) {
 $base = $base|0;
 $toff = $toff|0;
 $tlen = $tlen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $entries = 0, $len = 0, $save = 0, $tag = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tag = sp + 12|0;
 $type = sp + 16|0;
 $len = sp + 20|0;
 $save = sp + 24|0;
 $0 = $base;
 $1 = $toff;
 $2 = $tlen;
 $3 = (_get2()|0);
 $4 = $3&65535;
 $entries = $4;
 while(1) {
  $5 = $entries;
  $6 = (($5) + -1)|0;
  $entries = $6;
  $7 = ($5|0)!=(0);
  if (!($7)) {
   break;
  }
  $8 = $0;
  _tiff_get($8,$tag,$type,$len,$save);
  $9 = HEAP32[$tag>>2]|0;
  $10 = $1;
  $11 = ($9|0)==($10|0);
  if ($11) {
   $12 = (_get4()|0);
   $13 = $0;
   $14 = (($12) + ($13))|0;
   HEAP32[454608>>2] = $14;
  }
  $15 = HEAP32[$tag>>2]|0;
  $16 = $2;
  $17 = ($15|0)==($16|0);
  if ($17) {
   $18 = (_get4()|0);
   HEAP32[134312>>2] = $18;
  }
  $19 = HEAP32[880>>2]|0;
  $20 = HEAP32[$save>>2]|0;
  (_fseek(($19|0),($20|0),0)|0);
 }
 STACKTOP = sp;return;
}
function _parse_makernote($base,$uptag) {
 $base = $base|0;
 $uptag = $uptag|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0.0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0.0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0.0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0.0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0.0, $674 = 0.0;
 var $675 = 0.0, $676 = 0.0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0.0, $681 = 0.0, $682 = 0.0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0.0, $709 = 0.0, $71 = 0;
 var $710 = 0.0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0.0, $742 = 0.0, $743 = 0.0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0.0, $751 = 0.0, $752 = 0.0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0.0, $76 = 0, $760 = 0.0, $761 = 0.0, $762 = 0, $763 = 0, $764 = 0.0;
 var $765 = 0.0, $766 = 0.0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0.0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0.0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0.0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0.0;
 var $873 = 0.0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $buf97 = 0, $c = 0, $ci = 0, $cj = 0, $ck = 0, $entries = 0, $i = 0, $len = 0, $morder = 0, $offset = 0, $save = 0, $serial = 0;
 var $sorder = 0, $tag = 0, $type = 0, $ver97 = 0, $wb = 0, $wbi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tag = sp + 52|0;
 $type = sp + 16|0;
 $len = sp + 8|0;
 $save = sp + 4|0;
 $wb = sp + 32|0;
 $buf97 = sp + 88|0;
 $buf = sp + 76|0;
 $0 = $base;
 $1 = $uptag;
 $offset = 0;
 $ver97 = 0;
 $serial = 0;
 $wbi = 0;
 ;HEAP32[$wb+0>>2]=0|0;HEAP32[$wb+4>>2]=0|0;HEAP32[$wb+8>>2]=0|0;HEAP32[$wb+12>>2]=0|0;
 $2 = HEAP16[944>>1]|0;
 $sorder = $2;
 $3 = (_strcmp(134168,455128)|0);
 $4 = ($3|0)!=(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[880>>2]|0;
 (_fread(($buf|0),1,10,($5|0))|0);
 $6 = (_strncmp($buf,455136,3)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = (_strncmp($buf,455144,3)|0);
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = (_strncmp($buf,455152,4)|0);
   $11 = ($10|0)!=(0);
   if ($11) {
    $12 = (_strncmp($buf,455160,4)|0);
    $13 = ($12|0)!=(0);
    if ($13) {
     $14 = (_strncmp($buf,455168,2)|0);
     $15 = ($14|0)!=(0);
     L10: do {
      if ($15) {
       $16 = (_strncmp($buf,455176,3)|0);
       $17 = ($16|0)!=(0);
       if ($17) {
        $61 = (_strcmp($buf,455184)|0);
        $62 = ($61|0)!=(0);
        do {
         if ($62) {
          $73 = (_strcmp($buf,455192)|0);
          $74 = ($73|0)!=(0);
          if ($74) {
           $75 = (_strcmp($buf,455200)|0);
           $76 = ($75|0)!=(0);
           if ($76) {
            $85 = (_strncmp($buf,455208,4)|0);
            $86 = ($85|0)!=(0);
            do {
             if ($86) {
              $87 = (_strcmp($buf,455216)|0);
              $88 = ($87|0)!=(0);
              if ($88) {
               $89 = (_strncmp($buf,455232,8)|0);
               $90 = ($89|0)!=(0);
               if (!($90)) {
                $91 = HEAP32[880>>2]|0;
                $92 = (_ftell(($91|0))|0);
                $93 = (($92) - 10)|0;
                $0 = $93;
                label = 41;
                break;
               }
               $95 = (_strcmp($buf,455248)|0);
               $96 = ($95|0)!=(0);
               do {
                if ($96) {
                 $97 = (_strcmp($buf,455256)|0);
                 $98 = ($97|0)!=(0);
                 if (!($98)) {
                  label = 46;
                  break;
                 }
                 $99 = (_strcmp($buf,455264)|0);
                 $100 = ($99|0)!=(0);
                 if (!($100)) {
                  label = 46;
                  break;
                 }
                 $101 = (_strcmp($buf,455272)|0);
                 $102 = ($101|0)!=(0);
                 if (!($102)) {
                  label = 46;
                  break;
                 }
                 $104 = (_strcmp($buf,455280)|0);
                 $105 = ($104|0)!=(0);
                 do {
                  if ($105) {
                   $106 = (_strcmp($buf,455288)|0);
                   $107 = ($106|0)!=(0);
                   if (!($107)) {
                    label = 49;
                    break;
                   }
                   $109 = HEAP32[880>>2]|0;
                   (_fseek(($109|0),-10,1)|0);
                   $110 = (_strncmp(134168,455296,7)|0);
                   $111 = ($110|0)!=(0);
                   if (!($111)) {
                    $112 = HEAP32[880>>2]|0;
                    $113 = (_ftell(($112|0))|0);
                    $0 = $113;
                   }
                  } else {
                   label = 49;
                  }
                 } while(0);
                 if ((label|0) == 49) {
                  $108 = HEAP32[880>>2]|0;
                  (_fseek(($108|0),-4,1)|0);
                 }
                } else {
                 label = 46;
                }
               } while(0);
               if ((label|0) == 46) {
                $103 = HEAP32[880>>2]|0;
                (_fseek(($103|0),-2,1)|0);
               }
              } else {
               label = 38;
              }
             } else {
              label = 38;
             }
            } while(0);
            if ((label|0) == 38) {
             label = 41;
            }
            if ((label|0) == 41) {
             HEAP16[944>>1] = 18761;
             $94 = HEAP32[880>>2]|0;
             (_fseek(($94|0),2,1)|0);
            }
           } else {
            label = 33;
           }
          } else {
           label = 33;
          }
          if ((label|0) == 33) {
           $77 = HEAP32[880>>2]|0;
           $78 = (_ftell(($77|0))|0);
           $79 = (($78) - 10)|0;
           $0 = $79;
           $80 = HEAP32[880>>2]|0;
           (_fseek(($80|0),-2,1)|0);
           $81 = (_get2()|0);
           HEAP16[944>>1] = $81;
           $82 = HEAP8[$buf>>0]|0;
           $83 = $82 << 24 >> 24;
           $84 = ($83|0)==(79);
           if ($84) {
            (_get2()|0);
           }
          }
         } else {
          $63 = HEAP32[880>>2]|0;
          $64 = (_ftell(($63|0))|0);
          $0 = $64;
          $65 = (_get2()|0);
          HEAP16[944>>1] = $65;
          $66 = (_get2()|0);
          $67 = $66&65535;
          $68 = ($67|0)!=(42);
          if ($68) {
           break L10;
          } else {
           $69 = (_get4()|0);
           $offset = $69;
           $70 = HEAP32[880>>2]|0;
           $71 = $offset;
           $72 = (($71) - 8)|0;
           (_fseek(($70|0),($72|0),1)|0);
           break;
          }
         }
        } while(0);
        $114 = (_get2()|0);
        $115 = $114&65535;
        $entries = $115;
        $116 = $entries;
        $117 = ($116>>>0)>(1000);
        if ($117) {
         STACKTOP = sp;return;
        }
        $118 = HEAP16[944>>1]|0;
        $morder = $118;
        while(1) {
         $119 = $entries;
         $120 = (($119) + -1)|0;
         $entries = $120;
         $121 = ($119|0)!=(0);
         if (!($121)) {
          break;
         }
         $122 = $morder;
         HEAP16[944>>1] = $122;
         $123 = $0;
         _tiff_get($123,$tag,$type,$len,$save);
         $124 = $1;
         $125 = $124 << 16;
         $126 = HEAP32[$tag>>2]|0;
         $127 = $126 | $125;
         HEAP32[$tag>>2] = $127;
         $128 = HEAP32[$tag>>2]|0;
         $129 = ($128|0)==(2);
         if ($129) {
          $130 = (_strstr(134168,455304)|0);
          $131 = ($130|0)!=(0|0);
          if ($131) {
           $132 = +HEAPF32[455312>>2];
           $133 = $132 != 0.0;
           if (!($133)) {
            (_get2()|0);
            $134 = (_get2()|0);
            $135 = (+($134&65535));
            HEAPF32[455312>>2] = $135;
           }
          }
         }
         $136 = HEAP32[$tag>>2]|0;
         $137 = ($136|0)==(4);
         if ($137) {
          $138 = HEAP32[$len>>2]|0;
          $139 = ($138>>>0)>(26);
          if ($139) {
           $140 = HEAP32[$len>>2]|0;
           $141 = ($140>>>0)<(35);
           if ($141) {
            (_get4()|0);
            $142 = (_get2()|0);
            $143 = $142&65535;
            $i = $143;
            $144 = ($143|0)!=(32767);
            do {
             if ($144) {
              $145 = +HEAPF32[455312>>2];
              $146 = $145 != 0.0;
              if ($146) {
               break;
              }
              $147 = $i;
              $148 = (+($147>>>0));
              $149 = $148 / 32.0;
              $150 = $149 - 4.0;
              $151 = (+Math_pow(2.0,(+$150)));
              $152 = 50.0 * $151;
              $153 = $152;
              HEAPF32[455312>>2] = $153;
             }
            } while(0);
            (_get2()|0);
            $154 = (_get2()|0);
            $155 = $154&65535;
            $i = $155;
            $156 = ($155|0)!=(32767);
            do {
             if ($156) {
              $157 = +HEAPF32[455320>>2];
              $158 = $157 != 0.0;
              if ($158) {
               break;
              }
              $159 = $i;
              $160 = (+($159>>>0));
              $161 = $160 / 64.0;
              $162 = (+Math_pow(2.0,(+$161)));
              $163 = $162;
              HEAPF32[455320>>2] = $163;
             }
            } while(0);
            $164 = (_get2()|0);
            $165 = $164&65535;
            $i = $165;
            $166 = ($165|0)!=(65535);
            do {
             if ($166) {
              $167 = +HEAPF32[455328>>2];
              $168 = $167 != 0.0;
              if ($168) {
               break;
              }
              $169 = $i;
              $170 = $169&65535;
              $171 = $170 << 16 >> 16;
              $172 = (+($171|0));
              $173 = $172 / -32.0;
              $174 = (+Math_pow(2.0,(+$173)));
              $175 = $174;
              HEAPF32[455328>>2] = $175;
             }
            } while(0);
            (_get2()|0);
            $176 = (_get2()|0);
            $177 = $176&65535;
            $wbi = $177;
            (_get2()|0);
            $178 = (_get2()|0);
            $179 = $178&65535;
            HEAP32[455336>>2] = $179;
           }
          }
         }
         $180 = HEAP32[$tag>>2]|0;
         $181 = ($180|0)==(4);
         if ($181) {
          label = 81;
         } else {
          $182 = HEAP32[$tag>>2]|0;
          $183 = ($182|0)==(276);
          if ($183) {
           label = 81;
          }
         }
         if ((label|0) == 81) {
          label = 0;
          $184 = (_strncmp(134168,455344,6)|0);
          $185 = ($184|0)!=(0);
          if (!($185)) {
           $186 = HEAP32[880>>2]|0;
           $187 = HEAP32[$tag>>2]|0;
           $188 = ($187|0)==(4);
           $189 = $188 ? 140 : 160;
           (_fseek(($186|0),($189|0),1)|0);
           $190 = (_get2()|0);
           $191 = $190&65535;
           if ((($191|0) == 76)) {
            HEAP32[455352>>2] = 6;
           } else if ((($191|0) == 82)) {
            HEAP32[455352>>2] = 5;
           } else if ((($191|0) == 72)) {
            HEAP32[455352>>2] = 0;
           }
          }
         }
         $192 = HEAP32[$tag>>2]|0;
         $193 = ($192|0)==(7);
         if ($193) {
          $194 = HEAP32[$type>>2]|0;
          $195 = ($194|0)==(2);
          if ($195) {
           $196 = HEAP32[$len>>2]|0;
           $197 = ($196>>>0)>(20);
           if ($197) {
            $198 = HEAP32[880>>2]|0;
            (_fgets((133144|0),64,($198|0))|0);
           }
          }
         }
         $199 = HEAP32[$tag>>2]|0;
         $200 = ($199|0)==(8);
         if ($200) {
          $201 = HEAP32[$type>>2]|0;
          $202 = ($201|0)==(4);
          if ($202) {
           $203 = (_get4()|0);
           HEAP32[455336>>2] = $203;
          }
         }
         $204 = HEAP32[$tag>>2]|0;
         $205 = ($204|0)==(9);
         do {
          if ($205) {
           $206 = (_strcmp(134168,455360)|0);
           $207 = ($206|0)!=(0);
           if ($207) {
            break;
           }
           $208 = HEAP32[880>>2]|0;
           (_fread((455368|0),64,1,($208|0))|0);
          }
         } while(0);
         $209 = HEAP32[$tag>>2]|0;
         $210 = ($209|0)==(12);
         do {
          if ($210) {
           $211 = HEAP32[$len>>2]|0;
           $212 = ($211|0)==(4);
           if (!($212)) {
            break;
           }
           $c = 0;
           while(1) {
            $213 = $c;
            $214 = ($213>>>0)<(3);
            if (!($214)) {
             break;
            }
            $215 = HEAP32[$type>>2]|0;
            $216 = (+_getreal($215));
            $217 = $216;
            $218 = $c;
            $219 = $218 << 1;
            $220 = $c;
            $221 = $220 >>> 1;
            $222 = $219 | $221;
            $223 = $222 & 3;
            $224 = (134016 + ($223<<2)|0);
            HEAPF32[$224>>2] = $217;
            $225 = $c;
            $226 = (($225) + 1)|0;
            $c = $226;
           }
          }
         } while(0);
         $227 = HEAP32[$tag>>2]|0;
         $228 = ($227|0)==(13);
         do {
          if ($228) {
           $229 = HEAP32[$type>>2]|0;
           $230 = ($229|0)==(7);
           if (!($230)) {
            break;
           }
           $231 = (_get2()|0);
           $232 = $231&65535;
           $233 = ($232|0)==(43690);
           if (!($233)) {
            break;
           }
           $i = 2;
           $c = 2;
           while(1) {
            $234 = $c;
            $235 = $234&65535;
            $236 = $235&65535;
            $237 = ($236|0)!=(48059);
            if ($237) {
             $238 = $i;
             $239 = HEAP32[$len>>2]|0;
             $240 = ($238>>>0)<($239>>>0);
             $884 = $240;
            } else {
             $884 = 0;
            }
            if (!($884)) {
             break;
            }
            $241 = $c;
            $242 = $241 << 8;
            $243 = HEAP32[880>>2]|0;
            $244 = (_getc_unlocked(($243|0))|0);
            $245 = $242 | $244;
            $c = $245;
            $246 = $i;
            $247 = (($246) + 1)|0;
            $i = $247;
           }
           while(1) {
            $248 = $i;
            $249 = (($248) + 4)|0;
            $i = $249;
            $250 = HEAP32[$len>>2]|0;
            $251 = (($250) - 5)|0;
            $252 = ($249>>>0)<($251>>>0);
            if (!($252)) {
             break;
            }
            $253 = (_get4()|0);
            $254 = ($253|0)==(257);
            do {
             if ($254) {
              $255 = HEAP32[$len>>2]|0;
              $i = $255;
              $256 = ($255|0)!=(0);
              if (!($256)) {
               break;
              }
              (_get4()|0);
              $257 = HEAP32[880>>2]|0;
              $258 = (_getc_unlocked(($257|0))|0);
              $c = $258;
              $259 = ($258>>>0)<(3);
              if (!($259)) {
               break;
              }
              $260 = $c;
              $261 = (455432 + ($260)|0);
              $262 = HEAP8[$261>>0]|0;
              $263 = $262 << 24 >> 24;
              $264 = (($263) - 48)|0;
              HEAP32[455352>>2] = $264;
             }
            } while(0);
           }
          }
         } while(0);
         $265 = HEAP32[$tag>>2]|0;
         $266 = ($265|0)==(16);
         do {
          if ($266) {
           $267 = HEAP32[$type>>2]|0;
           $268 = ($267|0)==(4);
           if (!($268)) {
            break;
           }
           $269 = (_get4()|0);
           HEAP32[133224>>2] = $269;
          }
         } while(0);
         $270 = HEAP32[$tag>>2]|0;
         $271 = ($270|0)==(17);
         do {
          if ($271) {
           $272 = HEAP32[133760>>2]|0;
           $273 = ($272|0)!=(0);
           if (!($273)) {
            break;
           }
           $274 = (_strncmp(134168,455304,5)|0);
           $275 = ($274|0)!=(0);
           if ($275) {
            break;
           }
           $276 = HEAP32[880>>2]|0;
           $277 = (_get4()|0);
           $278 = $0;
           $279 = (($277) + ($278))|0;
           (_fseek(($276|0),($279|0),0)|0);
           $280 = $0;
           (_parse_tiff_ifd($280)|0);
          }
         } while(0);
         $281 = HEAP32[$tag>>2]|0;
         $282 = ($281|0)==(20);
         do {
          if ($282) {
           $283 = HEAP32[$type>>2]|0;
           $284 = ($283|0)==(7);
           if (!($284)) {
            label = 135;
            break;
           }
           $285 = HEAP32[$len>>2]|0;
           $286 = ($285|0)==(2560);
           if ($286) {
            $287 = HEAP32[880>>2]|0;
            (_fseek(($287|0),1248,1)|0);
            label = 324;
            break;
           }
           $288 = HEAP32[880>>2]|0;
           (_fread(($buf|0),1,10,($288|0))|0);
           $289 = (_strncmp($buf,455440,4)|0);
           $290 = ($289|0)!=(0);
           if (!($290)) {
            $291 = HEAP32[880>>2]|0;
            $292 = (($buf) + 4|0);
            $293 = (_strcmp($292,455448)|0);
            $294 = ($293|0)!=(0);
            $295 = $294 ? 46 : 1546;
            (_fseek(($291|0),($295|0),1)|0);
            $296 = (_get4()|0);
            $297 = $296 << 2;
            $298 = (+($297>>>0));
            HEAPF32[134016>>2] = $298;
            $299 = (_get4()|0);
            $300 = (_get4()|0);
            $301 = (($299) + ($300))|0;
            $302 = (+($301>>>0));
            HEAPF32[((134016 + 4|0))>>2] = $302;
            $303 = (_get4()|0);
            $304 = $303 << 2;
            $305 = (+($304>>>0));
            HEAPF32[((134016 + 8|0))>>2] = $305;
           }
           label = 135;
          } else {
           label = 135;
          }
         } while(0);
         L160: do {
          if ((label|0) == 135) {
           label = 0;
           $306 = HEAP32[$tag>>2]|0;
           $307 = ($306|0)==(21);
           do {
            if ($307) {
             $308 = HEAP32[$type>>2]|0;
             $309 = ($308|0)==(2);
             if (!($309)) {
              break;
             }
             $310 = HEAP32[133760>>2]|0;
             $311 = ($310|0)!=(0);
             if (!($311)) {
              break;
             }
             $312 = HEAP32[880>>2]|0;
             (_fread((134232|0),64,1,($312|0))|0);
            }
           } while(0);
           $313 = (_strstr(134168,455456)|0);
           $314 = ($313|0)!=(0|0);
           if ($314) {
            $315 = HEAP32[$tag>>2]|0;
            $316 = ($315|0)==(27);
            if ($316) {
             HEAP32[$tag>>2] = 4120;
            }
            $317 = HEAP32[$tag>>2]|0;
            $318 = ($317|0)==(28);
            if ($318) {
             HEAP32[$tag>>2] = 4119;
            }
           }
           $319 = HEAP32[$tag>>2]|0;
           $320 = ($319|0)==(29);
           if ($320) {
            while(1) {
             $321 = HEAP32[880>>2]|0;
             $322 = (_getc_unlocked(($321|0))|0);
             $c = $322;
             $323 = ($322|0)!=(0);
             if ($323) {
              $324 = $c;
              $325 = ($324|0)!=(-1);
              $885 = $325;
             } else {
              $885 = 0;
             }
             if (!($885)) {
              break;
             }
             $326 = $serial;
             $327 = ($326*10)|0;
             $328 = $c;
             $329 = (_isdigit($328)|0);
             $330 = ($329|0)!=(0);
             if ($330) {
              $331 = $c;
              $332 = (($331) - 48)|0;
              $336 = $332;
             } else {
              $333 = $c;
              $334 = (($333>>>0) % 10)&-1;
              $336 = $334;
             }
             $335 = (($327) + ($336))|0;
             $serial = $335;
            }
           }
           $337 = HEAP32[$tag>>2]|0;
           $338 = ($337|0)==(41);
           do {
            if ($338) {
             $339 = HEAP32[$type>>2]|0;
             $340 = ($339|0)==(1);
             if (!($340)) {
              break;
             }
             $341 = $wbi;
             $342 = ($341>>>0)<(18);
             if ($342) {
              $343 = $wbi;
              $344 = (455464 + ($343)|0);
              $345 = HEAP8[$344>>0]|0;
              $346 = $345 << 24 >> 24;
              $347 = (($346) - 48)|0;
              $348 = $347;
             } else {
              $348 = 0;
             }
             $c = $348;
             $349 = HEAP32[880>>2]|0;
             $350 = $c;
             $351 = $350<<5;
             $352 = (8 + ($351))|0;
             (_fseek(($349|0),($352|0),1)|0);
             $c = 0;
             while(1) {
              $353 = $c;
              $354 = ($353>>>0)<(4);
              if (!($354)) {
               break;
              }
              $355 = (_get4()|0);
              $356 = (+($355>>>0));
              $357 = $c;
              $358 = $c;
              $359 = $358 >>> 1;
              $360 = $357 ^ $359;
              $361 = $360 ^ 1;
              $362 = (134016 + ($361<<2)|0);
              HEAPF32[$362>>2] = $356;
              $363 = $c;
              $364 = (($363) + 1)|0;
              $c = $364;
             }
            }
           } while(0);
           $365 = HEAP32[$tag>>2]|0;
           $366 = ($365|0)==(61);
           do {
            if ($366) {
             $367 = HEAP32[$type>>2]|0;
             $368 = ($367|0)==(3);
             if (!($368)) {
              break;
             }
             $369 = HEAP32[$len>>2]|0;
             $370 = ($369|0)==(4);
             if (!($370)) {
              break;
             }
             $c = 0;
             while(1) {
              $371 = $c;
              $372 = ($371>>>0)<(4);
              if (!($372)) {
               break;
              }
              $373 = (_get2()|0);
              $374 = $373&65535;
              $375 = HEAP32[((455488 + 104|0))>>2]|0;
              $376 = (14 - ($375))|0;
              $377 = $374 >> $376;
              $378 = $377&65535;
              $379 = $c;
              $380 = $c;
              $381 = $380 >>> 1;
              $382 = $379 ^ $381;
              $383 = (134720 + ($382<<1)|0);
              HEAP16[$383>>1] = $378;
              $384 = $c;
              $385 = (($384) + 1)|0;
              $c = $385;
             }
            }
           } while(0);
           $386 = HEAP32[$tag>>2]|0;
           $387 = ($386|0)==(129);
           do {
            if ($387) {
             $388 = HEAP32[$type>>2]|0;
             $389 = ($388|0)==(4);
             if (!($389)) {
              break;
             }
             $390 = (_get4()|0);
             HEAP32[133816>>2] = $390;
             $391 = HEAP32[880>>2]|0;
             $392 = HEAP32[133816>>2]|0;
             $393 = (($392) + 41)|0;
             (_fseek(($391|0),($393|0),0)|0);
             $394 = (_get2()|0);
             $395 = $394&65535;
             $396 = $395<<1;
             $397 = $396&65535;
             HEAP16[133096>>1] = $397;
             $398 = (_get2()|0);
             HEAP16[132368>>1] = $398;
             HEAP32[600>>2] = 1633771873;
            }
           } while(0);
           $399 = HEAP32[$tag>>2]|0;
           $400 = ($399|0)==(129);
           if ($400) {
            $401 = HEAP32[$type>>2]|0;
            $402 = ($401|0)==(7);
            if ($402) {
             label = 182;
            } else {
             label = 178;
            }
           } else {
            label = 178;
           }
           do {
            if ((label|0) == 178) {
             label = 0;
             $403 = HEAP32[$tag>>2]|0;
             $404 = ($403|0)==(256);
             if ($404) {
              $405 = HEAP32[$type>>2]|0;
              $406 = ($405|0)==(7);
              if ($406) {
               label = 182;
               break;
              }
             }
             $407 = HEAP32[$tag>>2]|0;
             $408 = ($407|0)==(640);
             if (!($408)) {
              break;
             }
             $409 = HEAP32[$type>>2]|0;
             $410 = ($409|0)==(1);
             if ($410) {
              label = 182;
             }
            }
           } while(0);
           if ((label|0) == 182) {
            label = 0;
            $411 = HEAP32[880>>2]|0;
            $412 = (_ftell(($411|0))|0);
            HEAP32[454608>>2] = $412;
            $413 = HEAP32[$len>>2]|0;
            HEAP32[134312>>2] = $413;
           }
           $414 = HEAP32[$tag>>2]|0;
           $415 = ($414|0)==(136);
           do {
            if ($415) {
             $416 = HEAP32[$type>>2]|0;
             $417 = ($416|0)==(4);
             if (!($417)) {
              break;
             }
             $418 = (_get4()|0);
             HEAP32[454608>>2] = $418;
             $419 = ($418|0)!=(0);
             if (!($419)) {
              break;
             }
             $420 = $0;
             $421 = HEAP32[454608>>2]|0;
             $422 = (($421) + ($420))|0;
             HEAP32[454608>>2] = $422;
            }
           } while(0);
           $423 = HEAP32[$tag>>2]|0;
           $424 = ($423|0)==(137);
           do {
            if ($424) {
             $425 = HEAP32[$type>>2]|0;
             $426 = ($425|0)==(4);
             if (!($426)) {
              break;
             }
             $427 = (_get4()|0);
             HEAP32[134312>>2] = $427;
            }
           } while(0);
           $428 = HEAP32[$tag>>2]|0;
           $429 = ($428|0)==(140);
           if ($429) {
            label = 192;
           } else {
            $430 = HEAP32[$tag>>2]|0;
            $431 = ($430|0)==(150);
            if ($431) {
             label = 192;
            }
           }
           if ((label|0) == 192) {
            label = 0;
            $432 = HEAP32[880>>2]|0;
            $433 = (_ftell(($432|0))|0);
            HEAP32[133808>>2] = $433;
           }
           $434 = HEAP32[$tag>>2]|0;
           $435 = ($434|0)==(151);
           if ($435) {
            $i = 0;
            while(1) {
             $436 = $i;
             $437 = ($436>>>0)<(4);
             if (!($437)) {
              break;
             }
             $438 = $ver97;
             $439 = ($438*10)|0;
             $440 = HEAP32[880>>2]|0;
             $441 = (_getc_unlocked(($440|0))|0);
             $442 = (($439) + ($441))|0;
             $443 = (($442) - 48)|0;
             $ver97 = $443;
             $444 = $i;
             $445 = (($444) + 1)|0;
             $i = $445;
            }
            $446 = $ver97;
            if ((($446|0) == 102)) {
             $461 = HEAP32[880>>2]|0;
             (_fseek(($461|0),6,1)|0);
             $c = 0;
             while(1) {
              $462 = $c;
              $463 = ($462>>>0)<(4);
              if (!($463)) {
               break;
              }
              $464 = (_get2()|0);
              $465 = (+($464&65535));
              $466 = $c;
              $467 = $c;
              $468 = $467 >>> 1;
              $469 = $466 ^ $468;
              $470 = (134016 + ($469<<2)|0);
              HEAPF32[$470>>2] = $465;
              $471 = $c;
              $472 = (($471) + 1)|0;
              $c = $472;
             }
            } else if ((($446|0) == 103)) {
             $473 = HEAP32[880>>2]|0;
             (_fseek(($473|0),16,1)|0);
             $c = 0;
             while(1) {
              $474 = $c;
              $475 = ($474>>>0)<(4);
              if (!($475)) {
               break;
              }
              $476 = (_get2()|0);
              $477 = (+($476&65535));
              $478 = $c;
              $479 = (134016 + ($478<<2)|0);
              HEAPF32[$479>>2] = $477;
              $480 = $c;
              $481 = (($480) + 1)|0;
              $c = $481;
             }
            } else if ((($446|0) == 100)) {
             $447 = HEAP32[880>>2]|0;
             (_fseek(($447|0),68,1)|0);
             $c = 0;
             while(1) {
              $448 = $c;
              $449 = ($448>>>0)<(4);
              if (!($449)) {
               break;
              }
              $450 = (_get2()|0);
              $451 = (+($450&65535));
              $452 = $c;
              $453 = $452 >>> 1;
              $454 = $c;
              $455 = $454 & 1;
              $456 = $455 << 1;
              $457 = $453 | $456;
              $458 = (134016 + ($457<<2)|0);
              HEAPF32[$458>>2] = $451;
              $459 = $c;
              $460 = (($459) + 1)|0;
              $c = $460;
             }
            }
            $482 = $ver97;
            $483 = ($482>>>0)>=(200);
            if ($483) {
             $484 = $ver97;
             $485 = ($484|0)!=(205);
             if ($485) {
              $486 = HEAP32[880>>2]|0;
              (_fseek(($486|0),280,1)|0);
             }
             $487 = HEAP32[880>>2]|0;
             (_fread(($buf97|0),324,1,($487|0))|0);
            }
           }
           $488 = HEAP32[$tag>>2]|0;
           $489 = ($488|0)==(161);
           do {
            if ($489) {
             $490 = HEAP32[$type>>2]|0;
             $491 = ($490|0)==(7);
             if (!($491)) {
              break;
             }
             HEAP16[944>>1] = 18761;
             $492 = HEAP32[880>>2]|0;
             (_fseek(($492|0),140,1)|0);
             $c = 0;
             while(1) {
              $493 = $c;
              $494 = ($493>>>0)<(3);
              if (!($494)) {
               break;
              }
              $495 = (_get4()|0);
              $496 = (+($495>>>0));
              $497 = $c;
              $498 = (134016 + ($497<<2)|0);
              HEAPF32[$498>>2] = $496;
              $499 = $c;
              $500 = (($499) + 1)|0;
              $c = $500;
             }
            }
           } while(0);
           $501 = HEAP32[$tag>>2]|0;
           $502 = ($501|0)==(164);
           do {
            if ($502) {
             $503 = HEAP32[$type>>2]|0;
             $504 = ($503|0)==(3);
             if (!($504)) {
              break;
             }
             $505 = HEAP32[880>>2]|0;
             $506 = $wbi;
             $507 = ($506*48)|0;
             (_fseek(($505|0),($507|0),1)|0);
             $c = 0;
             while(1) {
              $508 = $c;
              $509 = ($508>>>0)<(3);
              if (!($509)) {
               break;
              }
              $510 = (_get2()|0);
              $511 = (+($510&65535));
              $512 = $c;
              $513 = (134016 + ($512<<2)|0);
              HEAPF32[$513>>2] = $511;
              $514 = $c;
              $515 = (($514) + 1)|0;
              $c = $515;
             }
            }
           } while(0);
           $516 = HEAP32[$tag>>2]|0;
           $517 = ($516|0)==(167);
           do {
            if ($517) {
             $518 = $ver97;
             $519 = (($518) - 200)|0;
             $520 = ($519>>>0)<(17);
             if (!($520)) {
              break;
             }
             $521 = $serial;
             $522 = $521 & 255;
             $523 = (454616 + ($522)|0);
             $524 = HEAP8[$523>>0]|0;
             $ci = $524;
             $525 = HEAP32[880>>2]|0;
             $526 = (_getc_unlocked(($525|0))|0);
             $527 = HEAP32[880>>2]|0;
             $528 = (_getc_unlocked(($527|0))|0);
             $529 = $526 ^ $528;
             $530 = HEAP32[880>>2]|0;
             $531 = (_getc_unlocked(($530|0))|0);
             $532 = $529 ^ $531;
             $533 = HEAP32[880>>2]|0;
             $534 = (_getc_unlocked(($533|0))|0);
             $535 = $532 ^ $534;
             $536 = (((454616 + 256|0)) + ($535)|0);
             $537 = HEAP8[$536>>0]|0;
             $cj = $537;
             $ck = 96;
             $i = 0;
             while(1) {
              $538 = $i;
              $539 = ($538>>>0)<(324);
              if (!($539)) {
               break;
              }
              $540 = $ci;
              $541 = $540&255;
              $542 = $ck;
              $543 = (($542) + 1)<<24>>24;
              $ck = $543;
              $544 = $542&255;
              $545 = Math_imul($541, $544)|0;
              $546 = $cj;
              $547 = $546&255;
              $548 = (($547) + ($545))|0;
              $549 = $548&255;
              $cj = $549;
              $550 = $549&255;
              $551 = $i;
              $552 = (($buf97) + ($551)|0);
              $553 = HEAP8[$552>>0]|0;
              $554 = $553&255;
              $555 = $554 ^ $550;
              $556 = $555&255;
              HEAP8[$552>>0] = $556;
              $557 = $i;
              $558 = (($557) + 1)|0;
              $i = $558;
             }
             $559 = $ver97;
             $560 = (($559) - 200)|0;
             $561 = (455968 + ($560)|0);
             $562 = HEAP8[$561>>0]|0;
             $563 = $562 << 24 >> 24;
             $564 = (($563) - 48)|0;
             $i = $564;
             $c = 0;
             while(1) {
              $565 = $c;
              $566 = ($565>>>0)<(4);
              if (!($566)) {
               break;
              }
              $567 = $i;
              $568 = $567 & -2;
              $569 = (($buf97) + ($568)|0);
              $570 = $c;
              $571 = $570<<1;
              $572 = (($569) + ($571)|0);
              $573 = (_sget2($572)|0);
              $574 = (+($573&65535));
              $575 = $c;
              $576 = $c;
              $577 = $576 >>> 1;
              $578 = $575 ^ $577;
              $579 = $i;
              $580 = $579 & 1;
              $581 = $578 ^ $580;
              $582 = (134016 + ($581<<2)|0);
              HEAPF32[$582>>2] = $574;
              $583 = $c;
              $584 = (($583) + 1)|0;
              $c = $584;
             }
            }
           } while(0);
           $585 = HEAP32[$tag>>2]|0;
           $586 = ($585|0)==(512);
           do {
            if ($586) {
             $587 = HEAP32[$len>>2]|0;
             $588 = ($587|0)==(3);
             if (!($588)) {
              break;
             }
             (_get4()|0);
             $589 = (_get4()|0);
             HEAP32[455336>>2] = $589;
            }
           } while(0);
           $590 = HEAP32[$tag>>2]|0;
           $591 = ($590|0)==(512);
           do {
            if ($591) {
             $592 = HEAP32[$len>>2]|0;
             $593 = ($592|0)==(4);
             if (!($593)) {
              break;
             }
             $c = 0;
             while(1) {
              $594 = $c;
              $595 = ($594>>>0)<(4);
              if (!($595)) {
               break;
              }
              $596 = (_get2()|0);
              $597 = $c;
              $598 = $c;
              $599 = $598 >>> 1;
              $600 = $597 ^ $599;
              $601 = (134720 + ($600<<1)|0);
              HEAP16[$601>>1] = $596;
              $602 = $c;
              $603 = (($602) + 1)|0;
              $c = $603;
             }
            }
           } while(0);
           $604 = HEAP32[$tag>>2]|0;
           $605 = ($604|0)==(513);
           do {
            if ($605) {
             $606 = HEAP32[$len>>2]|0;
             $607 = ($606|0)==(4);
             if (!($607)) {
              break;
             }
             $c = 0;
             while(1) {
              $608 = $c;
              $609 = ($608>>>0)<(4);
              if (!($609)) {
               break;
              }
              $610 = (_get2()|0);
              $611 = (+($610&65535));
              $612 = $c;
              $613 = $c;
              $614 = $613 >>> 1;
              $615 = $612 ^ $614;
              $616 = (134016 + ($615<<2)|0);
              HEAPF32[$616>>2] = $611;
              $617 = $c;
              $618 = (($617) + 1)|0;
              $c = $618;
             }
            }
           } while(0);
           $619 = HEAP32[$tag>>2]|0;
           $620 = ($619|0)==(544);
           do {
            if ($620) {
             $621 = HEAP32[$type>>2]|0;
             $622 = ($621|0)==(7);
             if (!($622)) {
              break;
             }
             $623 = HEAP32[880>>2]|0;
             $624 = (_ftell(($623|0))|0);
             HEAP32[133808>>2] = $624;
            }
           } while(0);
           $625 = HEAP32[$tag>>2]|0;
           $626 = ($625|0)==(1025);
           do {
            if ($626) {
             $627 = HEAP32[$type>>2]|0;
             $628 = ($627|0)==(4);
             if (!($628)) {
              break;
             }
             $629 = HEAP32[$len>>2]|0;
             $630 = ($629|0)==(4);
             if (!($630)) {
              break;
             }
             $c = 0;
             while(1) {
              $631 = $c;
              $632 = ($631>>>0)<(4);
              if (!($632)) {
               break;
              }
              $633 = (_get4()|0);
              $634 = $633&65535;
              $635 = $c;
              $636 = $c;
              $637 = $636 >>> 1;
              $638 = $635 ^ $637;
              $639 = (134720 + ($638<<1)|0);
              HEAP16[$639>>1] = $634;
              $640 = $c;
              $641 = (($640) + 1)|0;
              $c = $641;
             }
            }
           } while(0);
           $642 = HEAP32[$tag>>2]|0;
           $643 = ($642|0)==(3585);
           if ($643) {
            HEAP16[944>>1] = 18761;
            $644 = HEAP32[880>>2]|0;
            (_fseek(($644|0),22,1)|0);
            $offset = 22;
            while(1) {
             $645 = $offset;
             $646 = (($645) + 22)|0;
             $647 = HEAP32[$len>>2]|0;
             $648 = ($646>>>0)<($647>>>0);
             if (!($648)) {
              break;
             }
             $649 = (_get4()|0);
             HEAP32[$tag>>2] = $649;
             $650 = HEAP32[880>>2]|0;
             (_fseek(($650|0),14,1)|0);
             $651 = (_get4()|0);
             $652 = (($651) - 4)|0;
             $i = $652;
             $653 = HEAP32[$tag>>2]|0;
             $654 = ($653|0)==(1990472199);
             if ($654) {
              $655 = (_get2()|0);
              $656 = $655&65535;
              HEAP32[455352>>2] = $656;
             } else {
              $657 = HEAP32[880>>2]|0;
              $658 = $i;
              (_fseek(($657|0),($658|0),1)|0);
             }
             $659 = $i;
             $660 = (22 + ($659))|0;
             $661 = $offset;
             $662 = (($661) + ($660))|0;
             $offset = $662;
            }
           }
           $663 = HEAP32[$tag>>2]|0;
           $664 = ($663|0)==(3712);
           do {
            if ($664) {
             $665 = HEAP32[$len>>2]|0;
             $666 = ($665|0)==(256);
             if (!($666)) {
              break;
             }
             $667 = HEAP32[$type>>2]|0;
             $668 = ($667|0)==(7);
             if (!($668)) {
              break;
             }
             $669 = HEAP32[880>>2]|0;
             (_fseek(($669|0),48,1)|0);
             $670 = (_get2()|0);
             $671 = $670&65535;
             $672 = ($671*508)|0;
             $673 = (+($672|0));
             $674 = $673 * 1.0780000000000001;
             $675 = $674 / 65536.0;
             $676 = $675;
             HEAPF32[134016>>2] = $676;
             $677 = (_get2()|0);
             $678 = $677&65535;
             $679 = ($678*382)|0;
             $680 = (+($679|0));
             $681 = $680 * 1.173;
             $682 = $681 / 65536.0;
             $683 = $682;
             HEAPF32[((134016 + 8|0))>>2] = $683;
            }
           } while(0);
           $684 = HEAP32[$tag>>2]|0;
           $685 = ($684|0)==(3840);
           do {
            if ($685) {
             $686 = HEAP32[$type>>2]|0;
             $687 = ($686|0)==(7);
             if (!($687)) {
              break;
             }
             $688 = HEAP32[$len>>2]|0;
             $689 = ($688|0)==(614);
             if ($689) {
              $690 = HEAP32[880>>2]|0;
              (_fseek(($690|0),176,1)|0);
             } else {
              $691 = HEAP32[$len>>2]|0;
              $692 = ($691|0)==(734);
              do {
               if (!($692)) {
                $693 = HEAP32[$len>>2]|0;
                $694 = ($693|0)==(1502);
                if ($694) {
                 break;
                }
                break L160;
               }
              } while(0);
              $695 = HEAP32[880>>2]|0;
              (_fseek(($695|0),148,1)|0);
             }
             label = 324;
             break L160;
            }
           } while(0);
           $696 = HEAP32[$tag>>2]|0;
           $697 = ($696|0)==(4113);
           if ($697) {
            $698 = HEAP32[$len>>2]|0;
            $699 = ($698|0)==(9);
            if ($699) {
             label = 298;
            } else {
             label = 297;
            }
           } else {
            label = 297;
           }
           if ((label|0) == 297) {
            label = 0;
            $700 = HEAP32[$tag>>2]|0;
            $701 = ($700|0)==(541065728);
            if ($701) {
             label = 298;
            }
           }
           if ((label|0) == 298) {
            label = 0;
            $i = 0;
            while(1) {
             $702 = $i;
             $703 = ($702>>>0)<(3);
             if (!($703)) {
              break;
             }
             $c = 0;
             while(1) {
              $704 = $c;
              $705 = ($704>>>0)<(3);
              if (!($705)) {
               break;
              }
              $706 = (_get2()|0);
              $707 = $706 << 16 >> 16;
              $708 = (+($707|0));
              $709 = $708 / 256.0;
              $710 = $709;
              $711 = $c;
              $712 = $i;
              $713 = (455992 + ($712<<4)|0);
              $714 = (($713) + ($711<<2)|0);
              HEAPF32[$714>>2] = $710;
              $715 = $c;
              $716 = (($715) + 1)|0;
              $c = $716;
             }
             $717 = $i;
             $718 = (($717) + 1)|0;
             $i = $718;
            }
           }
           $719 = HEAP32[$tag>>2]|0;
           $720 = ($719|0)==(4114);
           if ($720) {
            label = 309;
           } else {
            $721 = HEAP32[$tag>>2]|0;
            $722 = ($721|0)==(541066752);
            if ($722) {
             label = 309;
            }
           }
           do {
            if ((label|0) == 309) {
             label = 0;
             $723 = HEAP32[$len>>2]|0;
             $724 = ($723|0)==(4);
             if (!($724)) {
              break;
             }
             $c = 0;
             while(1) {
              $725 = $c;
              $726 = ($725>>>0)<(4);
              if (!($726)) {
               break;
              }
              $727 = (_get2()|0);
              $728 = $c;
              $729 = $c;
              $730 = $729 >>> 1;
              $731 = $728 ^ $730;
              $732 = (134720 + ($731<<1)|0);
              HEAP16[$732>>1] = $727;
              $733 = $c;
              $734 = (($733) + 1)|0;
              $c = $734;
             }
            }
           } while(0);
           $735 = HEAP32[$tag>>2]|0;
           $736 = ($735|0)==(4119);
           if ($736) {
            label = 317;
           } else {
            $737 = HEAP32[$tag>>2]|0;
            $738 = ($737|0)==(541065472);
            if ($738) {
             label = 317;
            }
           }
           if ((label|0) == 317) {
            label = 0;
            $739 = (_get2()|0);
            $740 = $739&65535;
            $741 = (+($740|0));
            $742 = $741 / 256.0;
            $743 = $742;
            HEAPF32[134016>>2] = $743;
           }
           $744 = HEAP32[$tag>>2]|0;
           $745 = ($744|0)==(4120);
           if ($745) {
            label = 320;
           } else {
            $746 = HEAP32[$tag>>2]|0;
            $747 = ($746|0)==(541065472);
            if ($747) {
             label = 320;
            }
           }
           if ((label|0) == 320) {
            label = 0;
            $748 = (_get2()|0);
            $749 = $748&65535;
            $750 = (+($749|0));
            $751 = $750 / 256.0;
            $752 = $751;
            HEAPF32[((134016 + 8|0))>>2] = $752;
           }
           $753 = HEAP32[$tag>>2]|0;
           $754 = ($753|0)==(8209);
           if (!($754)) {
            label = 325;
            break;
           }
           $755 = HEAP32[$len>>2]|0;
           $756 = ($755|0)==(2);
           if (!($756)) {
            label = 325;
            break;
           }
           label = 324;
          }
         } while(0);
         if ((label|0) == 324) {
          label = 0;
          HEAP16[944>>1] = 19789;
          $757 = (_get2()|0);
          $758 = $757&65535;
          $759 = (+($758|0));
          $760 = $759 / 256.0;
          $761 = $760;
          HEAPF32[134016>>2] = $761;
          $762 = (_get2()|0);
          $763 = $762&65535;
          $764 = (+($763|0));
          $765 = $764 / 256.0;
          $766 = $765;
          HEAPF32[((134016 + 8|0))>>2] = $766;
          label = 325;
         }
         if ((label|0) == 325) {
          label = 0;
          $767 = HEAP32[$tag>>2]|0;
          $768 = $767 | 112;
          $769 = ($768|0)==(8304);
          do {
           if ($769) {
            $770 = HEAP32[$type>>2]|0;
            $771 = ($770|0)==(4);
            if (!($771)) {
             $772 = HEAP32[$type>>2]|0;
             $773 = ($772|0)==(13);
             if (!($773)) {
              break;
             }
            }
            $774 = HEAP32[880>>2]|0;
            $775 = (_get4()|0);
            $776 = $0;
            $777 = (($775) + ($776))|0;
            (_fseek(($774|0),($777|0),0)|0);
           }
          } while(0);
          $778 = HEAP32[$tag>>2]|0;
          $779 = ($778|0)==(8224);
          if ($779) {
           $780 = $0;
           _parse_thumb_note($780,257,258);
          }
          $781 = HEAP32[$tag>>2]|0;
          $782 = ($781|0)==(8256);
          if ($782) {
           $783 = $0;
           _parse_makernote($783,8256);
          }
          $784 = HEAP32[$tag>>2]|0;
          $785 = ($784|0)==(45096);
          if ($785) {
           $786 = HEAP32[880>>2]|0;
           $787 = (_get4()|0);
           $788 = $0;
           $789 = (($787) + ($788))|0;
           (_fseek(($786|0),($789|0),0)|0);
           $790 = $0;
           _parse_thumb_note($790,136,137);
          }
          $791 = HEAP32[$tag>>2]|0;
          $792 = ($791|0)==(16385);
          do {
           if ($792) {
            $793 = HEAP32[$len>>2]|0;
            $794 = ($793>>>0)>(500);
            if (!($794)) {
             break;
            }
            $795 = HEAP32[$len>>2]|0;
            $796 = ($795|0)==(582);
            if ($796) {
             $802 = 50;
            } else {
             $797 = HEAP32[$len>>2]|0;
             $798 = ($797|0)==(653);
             if ($798) {
              $886 = 68;
             } else {
              $799 = HEAP32[$len>>2]|0;
              $800 = ($799|0)==(5120);
              $801 = $800 ? 142 : 126;
              $886 = $801;
             }
             $802 = $886;
            }
            $i = $802;
            $803 = HEAP32[880>>2]|0;
            $804 = $i;
            (_fseek(($803|0),($804|0),1)|0);
            $c = 0;
            while(1) {
             $805 = $c;
             $806 = ($805>>>0)<(4);
             if (!($806)) {
              break;
             }
             $807 = (_get2()|0);
             $808 = (+($807&65535));
             $809 = $c;
             $810 = $c;
             $811 = $810 >>> 1;
             $812 = $809 ^ $811;
             $813 = (134016 + ($812<<2)|0);
             HEAPF32[$813>>2] = $808;
             $814 = $c;
             $815 = (($814) + 1)|0;
             $c = $815;
            }
            $816 = $i;
            $817 = (($816) + 18)|0;
            $i = $817;
            while(1) {
             $818 = $i;
             $819 = HEAP32[$len>>2]|0;
             $820 = ($818>>>0)<=($819>>>0);
             if (!($820)) {
              break;
             }
             (_get2()|0);
             $c = 0;
             while(1) {
              $821 = $c;
              $822 = ($821>>>0)<(4);
              if (!($822)) {
               break;
              }
              $823 = (_get2()|0);
              $824 = $c;
              $825 = $c;
              $826 = $825 >>> 1;
              $827 = $824 ^ $826;
              $828 = (133232 + ($827<<1)|0);
              HEAP16[$828>>1] = $823;
              $829 = $c;
              $830 = (($829) + 1)|0;
              $c = $830;
             }
             $831 = HEAP16[((133232 + 2|0))>>1]|0;
             $832 = $831&65535;
             $833 = ($832|0)==(1170);
             if ($833) {
              label = 354;
              break;
             }
             $834 = $i;
             $835 = (($834) + 10)|0;
             $i = $835;
            }
            if ((label|0) == 354) {
             label = 0;
            }
           }
          } while(0);
          $836 = HEAP32[$tag>>2]|0;
          $837 = ($836|0)==(16417);
          do {
           if ($837) {
            $838 = (_get4()|0);
            $839 = ($838|0)!=(0);
            if (!($839)) {
             break;
            }
            $840 = (_get4()|0);
            $841 = ($840|0)!=(0);
            if (!($841)) {
             break;
            }
            $c = 0;
            while(1) {
             $842 = $c;
             $843 = ($842>>>0)<(4);
             if (!($843)) {
              break;
             }
             $844 = $c;
             $845 = (134016 + ($844<<2)|0);
             HEAPF32[$845>>2] = 1024.0;
             $846 = $c;
             $847 = (($846) + 1)|0;
             $c = $847;
            }
           }
          } while(0);
          $848 = HEAP32[$tag>>2]|0;
          $849 = ($848|0)==(40993);
          if ($849) {
           $c = 0;
           while(1) {
            $850 = $c;
            $851 = ($850>>>0)<(4);
            if (!($851)) {
             break;
            }
            $852 = (_get4()|0);
            $853 = (+($852>>>0));
            $854 = $c;
            $855 = $c;
            $856 = $855 >>> 1;
            $857 = $854 ^ $856;
            $858 = (134016 + ($857<<2)|0);
            HEAPF32[$858>>2] = $853;
            $859 = $c;
            $860 = (($859) + 1)|0;
            $c = $860;
           }
          }
          $861 = HEAP32[$tag>>2]|0;
          $862 = ($861|0)==(41000);
          if ($862) {
           $c = 0;
           while(1) {
            $863 = $c;
            $864 = ($863>>>0)<(4);
            if (!($864)) {
             break;
            }
            $865 = (_get4()|0);
            $866 = (+($865>>>0));
            $867 = $c;
            $868 = $c;
            $869 = $868 >>> 1;
            $870 = $867 ^ $869;
            $871 = (134016 + ($870<<2)|0);
            $872 = +HEAPF32[$871>>2];
            $873 = $872 - $866;
            HEAPF32[$871>>2] = $873;
            $874 = $c;
            $875 = (($874) + 1)|0;
            $c = $875;
           }
          }
          $876 = HEAP32[$tag>>2]|0;
          $877 = ($876|0)==(45057);
          if ($877) {
           $878 = (_get2()|0);
           $879 = $878&65535;
           HEAP32[133224>>2] = $879;
          }
         }
         $880 = HEAP32[880>>2]|0;
         $881 = HEAP32[$save>>2]|0;
         (_fseek(($880|0),($881|0),0)|0);
        }
       } else {
        label = 10;
       }
      } else {
       label = 10;
      }
     } while(0);
     if ((label|0) == 10) {
      HEAP16[944>>1] = 19789;
      while(1) {
       $18 = HEAP32[880>>2]|0;
       $19 = (_ftell(($18|0))|0);
       $i = $19;
       $20 = HEAP32[133816>>2]|0;
       $21 = ($19>>>0)<($20>>>0);
       if ($21) {
        $22 = $i;
        $23 = ($22>>>0)<(16384);
        $883 = $23;
       } else {
        $883 = 0;
       }
       if (!($883)) {
        break;
       }
       $24 = (($wb) + 8|0);
       $25 = HEAP32[$24>>2]|0;
       HEAP32[$wb>>2] = $25;
       $26 = (($wb) + 4|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = (($wb) + 8|0);
       HEAP32[$28>>2] = $27;
       $29 = (($wb) + 12|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = (($wb) + 4|0);
       HEAP32[$31>>2] = $30;
       $32 = (_get2()|0);
       $33 = $32&65535;
       $34 = (($wb) + 12|0);
       HEAP32[$34>>2] = $33;
       $35 = (($wb) + 4|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = ($36|0)==(256);
       if ($37) {
        $38 = (($wb) + 12|0);
        $39 = HEAP32[$38>>2]|0;
        $40 = ($39|0)==(256);
        if ($40) {
         $41 = HEAP32[$wb>>2]|0;
         $42 = ($41>>>0)>(256);
         if ($42) {
          $43 = HEAP32[$wb>>2]|0;
          $44 = ($43>>>0)<(640);
          if ($44) {
           $45 = (($wb) + 8|0);
           $46 = HEAP32[$45>>2]|0;
           $47 = ($46>>>0)>(256);
           if ($47) {
            $48 = (($wb) + 8|0);
            $49 = HEAP32[$48>>2]|0;
            $50 = ($49>>>0)<(640);
            if ($50) {
             $c = 0;
             while(1) {
              $51 = $c;
              $52 = ($51>>>0)<(4);
              if (!($52)) {
               break;
              }
              $53 = $c;
              $54 = (($wb) + ($53<<2)|0);
              $55 = HEAP32[$54>>2]|0;
              $56 = (+($55>>>0));
              $57 = $c;
              $58 = (134016 + ($57<<2)|0);
              HEAPF32[$58>>2] = $56;
              $59 = $c;
              $60 = (($59) + 1)|0;
              $c = $60;
             }
            }
           }
          }
         }
        }
       }
      }
     }
     $882 = $sorder;
     HEAP16[944>>1] = $882;
     STACKTOP = sp;return;
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _parse_tiff_ifd($base) {
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0.0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0.0, $1028 = 0.0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0.0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0.0, $1057 = 0.0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0.0, $1061 = 0.0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0.0, $1067 = 0.0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0.0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0.0, $1082 = 0.0, $1083 = 0.0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0.0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0.0, $1101 = 0.0, $1102 = 0.0, $1103 = 0.0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0.0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0.0, $398 = 0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0.0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0.0, $432 = 0.0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0.0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0.0, $507 = 0.0, $508 = 0.0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0.0, $538 = 0.0, $539 = 0.0;
 var $54 = 0, $540 = 0.0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0.0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0.0, $551 = 0.0, $552 = 0.0, $553 = 0.0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0.0;
 var $576 = 0.0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0.0, $586 = 0.0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0.0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0.0, $642 = 0.0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0.0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0.0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0.0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0.0;
 var $81 = 0, $810 = 0.0, $811 = 0, $812 = 0, $813 = 0.0, $814 = 0.0, $815 = 0, $816 = 0.0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0.0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0.0, $843 = 0.0, $844 = 0.0, $845 = 0;
 var $846 = 0, $847 = 0.0, $848 = 0, $849 = 0.0, $85 = 0, $850 = 0.0, $851 = 0.0, $852 = 0, $853 = 0.0, $854 = 0.0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0.0, $86 = 0, $860 = 0, $861 = 0.0, $862 = 0.0, $863 = 0.0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0.0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0.0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0.0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0.0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0.0, $915 = 0, $916 = 0.0, $917 = 0;
 var $918 = 0.0, $919 = 0.0, $92 = 0, $920 = 0, $921 = 0.0, $922 = 0.0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0.0, $929 = 0.0, $93 = 0, $930 = 0, $931 = 0, $932 = 0.0, $933 = 0.0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0;
 var $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $ab = 0, $asn = 0, $buf = 0, $c = 0, $cam_xyz = 0, $cbuf = 0, $cc = 0, $cfa = 0, $cfa_pat = 0, $cfa_pc = 0;
 var $cm = 0, $cp = 0, $entries = 0, $i = 0, $ifd = 0, $ima_len = 0, $j = 0, $jh = 0, $len = 0, $num = 0.0, $plen = 0, $save = 0, $sfp = 0, $software = 0, $sony_curve = 0, $sony_key = 0, $sony_length = 0, $sony_offset = 0, $tab = 0, $tag = 0;
 var $type = 0, $use_cm = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $xyz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1392|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 432|0;
 $vararg_buffer1 = sp + 424|0;
 $vararg_buffer = sp + 416|0;
 $tag = sp + 988|0;
 $type = sp + 980|0;
 $len = sp + 976|0;
 $save = sp + 984|0;
 $software = sp + 1064|0;
 $cfa_pat = sp + 1040|0;
 $cfa_pc = sp + 1056|0;
 $tab = sp + 1128|0;
 $cc = sp + 288|0;
 $cm = sp + 192|0;
 $cam_xyz = sp + 96|0;
 $ab = sp + 24|0;
 $asn = sp + 64|0;
 $xyz = sp;
 $sony_curve = sp + 944|0;
 $jh = sp + 464|0;
 $1 = $base;
 $plen = 16;
 $use_cm = 0;
 $ima_len = 0;
 ;HEAP8[$cfa_pc+0>>0]=HEAP8[457184+0>>0]|0;HEAP8[$cfa_pc+1>>0]=HEAP8[457184+1>>0]|0;HEAP8[$cfa_pc+2>>0]=HEAP8[457184+2>>0]|0;HEAP8[$cfa_pc+3>>0]=HEAP8[457184+3>>0]|0;
 ;HEAP32[$ab+0>>2]=HEAP32[457192+0>>2]|0;HEAP32[$ab+4>>2]=HEAP32[457192+4>>2]|0;HEAP32[$ab+8>>2]=HEAP32[457192+8>>2]|0;HEAP32[$ab+12>>2]=HEAP32[457192+12>>2]|0;HEAP32[$ab+16>>2]=HEAP32[457192+16>>2]|0;HEAP32[$ab+20>>2]=HEAP32[457192+20>>2]|0;HEAP32[$ab+24>>2]=HEAP32[457192+24>>2]|0;HEAP32[$ab+28>>2]=HEAP32[457192+28>>2]|0;
 ;HEAP32[$asn+0>>2]=0|0;HEAP32[$asn+4>>2]=0|0;HEAP32[$asn+8>>2]=0|0;HEAP32[$asn+12>>2]=0|0;HEAP32[$asn+16>>2]=0|0;HEAP32[$asn+20>>2]=0|0;HEAP32[$asn+24>>2]=0|0;HEAP32[$asn+28>>2]=0|0;
 ;HEAP32[$xyz+0>>2]=HEAP32[457224+0>>2]|0;HEAP32[$xyz+4>>2]=HEAP32[457224+4>>2]|0;HEAP32[$xyz+8>>2]=HEAP32[457224+8>>2]|0;HEAP32[$xyz+12>>2]=HEAP32[457224+12>>2]|0;HEAP32[$xyz+16>>2]=HEAP32[457224+16>>2]|0;HEAP32[$xyz+20>>2]=HEAP32[457224+20>>2]|0;
 ;HEAP32[$sony_curve+0>>2]=HEAP32[457248+0>>2]|0;HEAP32[$sony_curve+4>>2]=HEAP32[457248+4>>2]|0;HEAP32[$sony_curve+8>>2]=HEAP32[457248+8>>2]|0;HEAP32[$sony_curve+12>>2]=HEAP32[457248+12>>2]|0;HEAP32[$sony_curve+16>>2]=HEAP32[457248+16>>2]|0;HEAP32[$sony_curve+20>>2]=HEAP32[457248+20>>2]|0;
 $sony_offset = 0;
 $sony_length = 0;
 $sony_key = 0;
 $2 = HEAP32[456072>>2]|0;
 $3 = ($2>>>0)>=(10);
 if ($3) {
  $0 = 1;
  $1106 = $0;
  STACKTOP = sp;return ($1106|0);
 }
 $4 = HEAP32[456072>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[456072>>2] = $5;
 $ifd = $4;
 $j = 0;
 while(1) {
  $6 = $j;
  $7 = ($6|0)<(4);
  if (!($7)) {
   break;
  }
  $i = 0;
  while(1) {
   $8 = $i;
   $9 = ($8|0)<(4);
   if (!($9)) {
    break;
   }
   $10 = $i;
   $11 = $j;
   $12 = ($10|0)==($11|0);
   $13 = $12&1;
   $14 = (+($13|0));
   $15 = $i;
   $16 = $j;
   $17 = (($cc) + ($16<<5)|0);
   $18 = (($17) + ($15<<3)|0);
   HEAPF64[$18>>3] = $14;
   $19 = $i;
   $20 = (($19) + 1)|0;
   $i = $20;
  }
  $21 = $j;
  $22 = (($21) + 1)|0;
  $j = $22;
 }
 $23 = (_get2()|0);
 $24 = $23&65535;
 $entries = $24;
 $25 = $entries;
 $26 = ($25>>>0)>(512);
 if ($26) {
  $0 = 1;
  $1106 = $0;
  STACKTOP = sp;return ($1106|0);
 }
 while(1) {
  $27 = $entries;
  $28 = (($27) + -1)|0;
  $entries = $28;
  $29 = ($27|0)!=(0);
  if (!($29)) {
   break;
  }
  $30 = $1;
  _tiff_get($30,$tag,$type,$len,$save);
  $31 = HEAP32[$tag>>2]|0;
  L22: do {
   if ((($31|0) == 46279)) {
    $603 = $ima_len;
    $604 = ($603|0)!=(0);
    if ($604) {
     $605 = HEAP32[880>>2]|0;
     (_fseek(($605|0),38,1)|0);
     label = 217;
     break L22;
    } else {
     break L22;
    }
   } else if ((($31|0) == 46274)) {
    label = 217;
   } else if ((($31|0) == 50455) | (($31|0) == 50454)) {
    $695 = HEAP32[$len>>2]|0;
    $696 = (_malloc($695)|0);
    $cbuf = $696;
    $697 = ($696|0)!=(0|0);
    if (!($697)) {
     break L22;
    }
    $698 = $cbuf;
    $699 = HEAP32[$len>>2]|0;
    $700 = HEAP32[880>>2]|0;
    (_fread(($698|0),1,($699|0),($700|0))|0);
    $701 = $cbuf;
    $702 = (($701) + -1|0);
    $cp = $702;
    while(1) {
     $703 = $cp;
     $704 = ($703|0)!=(0|0);
     if ($704) {
      $705 = $cp;
      $706 = $cbuf;
      $707 = HEAP32[$len>>2]|0;
      $708 = (($706) + ($707)|0);
      $709 = ($705>>>0)<($708>>>0);
      $1108 = $709;
     } else {
      $1108 = 0;
     }
     if (!($1108)) {
      break;
     }
     $710 = $cp;
     $711 = (($710) + 1|0);
     $cp = $711;
     $712 = (_strncmp($711,457960,8)|0);
     $713 = ($712|0)!=(0);
     if (!($713)) {
      $714 = $cp;
      $715 = (($714) + 8|0);
      HEAP32[$vararg_buffer4>>2] = 134016;
      $vararg_ptr7 = (($vararg_buffer4) + 4|0);
      HEAP32[$vararg_ptr7>>2] = ((134016 + 4|0));
      $vararg_ptr8 = (($vararg_buffer4) + 8|0);
      HEAP32[$vararg_ptr8>>2] = ((134016 + 8|0));
      (_sscanf($715,457976,$vararg_buffer4)|0);
     }
     $716 = $cp;
     $717 = (_strchr($716,10)|0);
     $cp = $717;
    }
    $718 = $cbuf;
    _free($718);
   } else if ((($31|0) == 50458)) {
    $719 = HEAP8[134168>>0]|0;
    $720 = ($719<<24>>24)!=(0);
    if (!($720)) {
     (_strcpy((134168|0),(457992|0))|0);
    }
   } else if ((($31|0) == 50459)) {
    $721 = HEAP16[944>>1]|0;
    $722 = $721 << 16 >> 16;
    $i = $722;
    $723 = HEAP32[880>>2]|0;
    $724 = (_ftell(($723|0))|0);
    $j = $724;
    $725 = HEAP32[456072>>2]|0;
    $c = $725;
    $726 = (_get2()|0);
    HEAP16[944>>1] = $726;
    $727 = HEAP32[880>>2]|0;
    $728 = $j;
    (_get2()|0);
    $729 = (_get4()|0);
    $730 = (($728) + ($729))|0;
    (_fseek(($727|0),($730|0),0)|0);
    $731 = $j;
    (_parse_tiff_ifd($731)|0);
    HEAP32[132400>>2] = 65535;
    $732 = $c;
    HEAP32[456072>>2] = $732;
    $733 = $i;
    $734 = $733&65535;
    HEAP16[944>>1] = $734;
   } else if ((($31|0) == 50706)) {
    $c = 0;
    while(1) {
     $735 = $c;
     $736 = ($735|0)<(4);
     if (!($736)) {
      break;
     }
     $737 = HEAP32[133104>>2]|0;
     $738 = $737 << 8;
     $739 = HEAP32[880>>2]|0;
     $740 = (_getc_unlocked(($739|0))|0);
     $741 = (($738) + ($740))|0;
     HEAP32[133104>>2] = $741;
     $742 = $c;
     $743 = (($742) + 1)|0;
     $c = $743;
    }
    $744 = HEAP8[134168>>0]|0;
    $745 = ($744<<24>>24)!=(0);
    if (!($745)) {
     (_strcpy((134168|0),(458008|0))|0);
    }
    HEAP32[133760>>2] = 1;
   } else if ((($31|0) == 50708)) {
    $746 = HEAP8[134232>>0]|0;
    $747 = ($746<<24>>24)!=(0);
    if ($747) {
     break L22;
    }
    $748 = HEAP32[880>>2]|0;
    (_fgets((134168|0),64,($748|0))|0);
    $749 = (_strchr(134168,32)|0);
    $cp = $749;
    $750 = ($749|0)!=(0|0);
    if ($750) {
     $751 = $cp;
     $752 = (($751) + 1|0);
     (_strcpy((134232|0),($752|0))|0);
     $753 = $cp;
     HEAP8[$753>>0] = 0;
    }
   } else if ((($31|0) == 50710)) {
    $754 = HEAP32[600>>2]|0;
    $755 = ($754|0)==(9);
    if ($755) {
     break L22;
    }
    $756 = HEAP32[$len>>2]|0;
    $757 = ($756>>>0)>(4);
    if ($757) {
     HEAP32[$len>>2] = 4;
    }
    $758 = HEAP32[$len>>2]|0;
    HEAP32[132304>>2] = $758;
    $759 = HEAP32[132304>>2]|0;
    $760 = HEAP32[880>>2]|0;
    (_fread(($cfa_pc|0),1,($759|0),($760|0))|0);
    label = 264;
   } else if ((($31|0) == 50711)) {
    $796 = (_get2()|0);
    $797 = $796&65535;
    $798 = ($797|0)==(2);
    if ($798) {
     HEAP16[190512>>1] = 1;
    }
   } else if ((($31|0) == 50712) | (($31|0) == 291)) {
    $799 = HEAP32[$len>>2]|0;
    _linear_table($799);
   } else if ((($31|0) == 50713)) {
    $800 = (_get2()|0);
    HEAP16[((134720 + 8|0))>>1] = $800;
    $801 = (_get2()|0);
    HEAP16[((134720 + 10|0))>>1] = $801;
    $802 = HEAP16[((134720 + 8|0))>>1]|0;
    $803 = $802&65535;
    $804 = HEAP16[((134720 + 10|0))>>1]|0;
    $805 = $804&65535;
    $806 = Math_imul($803, $805)|0;
    $807 = ($806>>>0)>(4096);
    if ($807) {
     HEAP16[((134720 + 10|0))>>1] = 1;
     HEAP16[((134720 + 8|0))>>1] = 1;
    }
   } else if ((($31|0) == 61450)) {
    $808 = HEAP32[$len>>2]|0;
    $809 = (+($808>>>0));
    $810 = (+Math_sqrt((+$809)));
    $811 = $810 < 64.0;
    if ($811) {
     $812 = HEAP32[$len>>2]|0;
     $813 = (+($812>>>0));
     $814 = (+Math_sqrt((+$813)));
     $816 = $814;
    } else {
     $816 = 64.0;
    }
    $815 = (~~(($816))&65535);
    HEAP16[((134720 + 10|0))>>1] = $815;
    HEAP16[((134720 + 8|0))>>1] = $815;
    label = 283;
   } else if ((($31|0) == 50714)) {
    label = 283;
   } else if ((($31|0) == 50716) | (($31|0) == 50715)) {
    $i = 0;
    $num = 0.0;
    while(1) {
     $838 = $i;
     $839 = HEAP32[$len>>2]|0;
     $840 = ($838>>>0)<($839>>>0);
     if (!($840)) {
      break;
     }
     $841 = HEAP32[$type>>2]|0;
     $842 = (+_getreal($841));
     $843 = $num;
     $844 = $843 + $842;
     $num = $844;
     $845 = $i;
     $846 = (($845) + 1)|0;
     $i = $846;
    }
    $847 = $num;
    $848 = HEAP32[$len>>2]|0;
    $849 = (+($848>>>0));
    $850 = $847 / $849;
    $851 = $850 + 0.5;
    $852 = HEAP32[132392>>2]|0;
    $853 = (+($852>>>0));
    $854 = $853 + $851;
    $855 = (~~(($854))>>>0);
    HEAP32[132392>>2] = $855;
   } else if ((($31|0) == 50717)) {
    $856 = HEAP32[$type>>2]|0;
    $857 = (_getint($856)|0);
    HEAP32[132400>>2] = $857;
   } else if ((($31|0) == 50718)) {
    $858 = HEAP32[$type>>2]|0;
    $859 = (+_getreal($858));
    HEAPF64[458024>>3] = $859;
    $860 = HEAP32[$type>>2]|0;
    $861 = (+_getreal($860));
    $862 = +HEAPF64[458024>>3];
    $863 = $862 / $861;
    HEAPF64[458024>>3] = $863;
   } else if ((($31|0) == 50722) | (($31|0) == 50721)) {
    $c = 0;
    while(1) {
     $864 = $c;
     $865 = HEAP32[132304>>2]|0;
     $866 = ($864>>>0)<($865>>>0);
     if (!($866)) {
      break;
     }
     $j = 0;
     while(1) {
      $867 = $j;
      $868 = ($867|0)<(3);
      if (!($868)) {
       break;
      }
      $869 = HEAP32[$type>>2]|0;
      $870 = (+_getreal($869));
      $871 = $j;
      $872 = $c;
      $873 = (($cm) + (($872*24)|0)|0);
      $874 = (($873) + ($871<<3)|0);
      HEAPF64[$874>>3] = $870;
      $875 = $j;
      $876 = (($875) + 1)|0;
      $j = $876;
     }
     $877 = $c;
     $878 = (($877) + 1)|0;
     $c = $878;
    }
    $use_cm = 1;
   } else if ((($31|0) == 50724) | (($31|0) == 50723)) {
    $i = 0;
    while(1) {
     $879 = $i;
     $880 = HEAP32[132304>>2]|0;
     $881 = ($879>>>0)<($880>>>0);
     if (!($881)) {
      break;
     }
     $c = 0;
     while(1) {
      $882 = $c;
      $883 = HEAP32[132304>>2]|0;
      $884 = ($882>>>0)<($883>>>0);
      if (!($884)) {
       break;
      }
      $885 = HEAP32[$type>>2]|0;
      $886 = (+_getreal($885));
      $887 = $c;
      $888 = $i;
      $889 = (($cc) + ($888<<5)|0);
      $890 = (($889) + ($887<<3)|0);
      HEAPF64[$890>>3] = $886;
      $891 = $c;
      $892 = (($891) + 1)|0;
      $c = $892;
     }
     $893 = $i;
     $894 = (($893) + 1)|0;
     $i = $894;
    }
   } else if ((($31|0) == 50727)) {
    $c = 0;
    while(1) {
     $895 = $c;
     $896 = HEAP32[132304>>2]|0;
     $897 = ($895>>>0)<($896>>>0);
     if (!($897)) {
      break;
     }
     $898 = HEAP32[$type>>2]|0;
     $899 = (+_getreal($898));
     $900 = $c;
     $901 = (($ab) + ($900<<3)|0);
     HEAPF64[$901>>3] = $899;
     $902 = $c;
     $903 = (($902) + 1)|0;
     $c = $903;
    }
   } else if ((($31|0) == 50728)) {
    $c = 0;
    while(1) {
     $904 = $c;
     $905 = HEAP32[132304>>2]|0;
     $906 = ($904>>>0)<($905>>>0);
     if (!($906)) {
      break;
     }
     $907 = HEAP32[$type>>2]|0;
     $908 = (+_getreal($907));
     $909 = $c;
     $910 = (($asn) + ($909<<3)|0);
     HEAPF64[$910>>3] = $908;
     $911 = $c;
     $912 = (($911) + 1)|0;
     $c = $912;
    }
   } else if ((($31|0) == 50729)) {
    $913 = HEAP32[$type>>2]|0;
    $914 = (+_getreal($913));
    HEAPF64[$xyz>>3] = $914;
    $915 = HEAP32[$type>>2]|0;
    $916 = (+_getreal($915));
    $917 = (($xyz) + 8|0);
    HEAPF64[$917>>3] = $916;
    $918 = +HEAPF64[$xyz>>3];
    $919 = 1.0 - $918;
    $920 = (($xyz) + 8|0);
    $921 = +HEAPF64[$920>>3];
    $922 = $919 - $921;
    $923 = (($xyz) + 16|0);
    HEAPF64[$923>>3] = $922;
    $c = 0;
    while(1) {
     $924 = $c;
     $925 = ($924|0)<(3);
     if (!($925)) {
      break;
     }
     $926 = $c;
     $927 = (328 + ($926<<2)|0);
     $928 = +HEAPF32[$927>>2];
     $929 = $928;
     $930 = $c;
     $931 = (($xyz) + ($930<<3)|0);
     $932 = +HEAPF64[$931>>3];
     $933 = $932 / $929;
     HEAPF64[$931>>3] = $933;
     $934 = $c;
     $935 = (($934) + 1)|0;
     $c = $935;
    }
   } else if ((($31|0) == 50740)) {
    $936 = HEAP32[133104>>2]|0;
    $937 = ($936|0)!=(0);
    if ($937) {
     break L22;
    } else {
     $938 = (_get4()|0);
     $939 = $1;
     $940 = (($938) + ($939))|0;
     $j = $940;
     _parse_minolta($940);
     $941 = HEAP32[880>>2]|0;
     $942 = $j;
     (_fseek(($941|0),($942|0),0)|0);
     $943 = $1;
     (_parse_tiff_ifd($943)|0);
     break L22;
    }
   } else if ((($31|0) == 50752)) {
    _read_shorts(133136,3);
   } else if ((($31|0) == 50829)) {
    $944 = HEAP32[$type>>2]|0;
    $945 = (_getint($944)|0);
    $946 = $945&65535;
    HEAP16[616>>1] = $946;
    $947 = HEAP32[$type>>2]|0;
    $948 = (_getint($947)|0);
    $949 = $948&65535;
    HEAP16[608>>1] = $949;
    $950 = HEAP32[$type>>2]|0;
    $951 = (_getint($950)|0);
    $952 = HEAP16[616>>1]|0;
    $953 = $952&65535;
    $954 = (($951) - ($953))|0;
    $955 = $954&65535;
    HEAP16[132112>>1] = $955;
    $956 = HEAP32[$type>>2]|0;
    $957 = (_getint($956)|0);
    $958 = HEAP16[608>>1]|0;
    $959 = $958&65535;
    $960 = (($957) - ($959))|0;
    $961 = $960&65535;
    HEAP16[132120>>1] = $961;
   } else if ((($31|0) == 50830)) {
    $i = 0;
    while(1) {
     $962 = $i;
     $963 = HEAP32[$len>>2]|0;
     $964 = ($962>>>0)<($963>>>0);
     if ($964) {
      $965 = $i;
      $966 = ($965|0)<(32);
      $1109 = $966;
     } else {
      $1109 = 0;
     }
     if (!($1109)) {
      break;
     }
     $967 = HEAP32[$type>>2]|0;
     $968 = (_getint($967)|0);
     $969 = $i;
     $970 = (190528 + ($969<<2)|0);
     HEAP32[$970>>2] = $968;
     $971 = $i;
     $972 = (($971) + 1)|0;
     $i = $972;
    }
    HEAP32[132392>>2] = 0;
   } else if ((($31|0) == 64772)) {
    $975 = HEAP32[$len>>2]|0;
    $976 = ($975>>>0)<(13);
    if ($976) {
     break L22;
    } else {
     $977 = HEAP32[880>>2]|0;
     (_fseek(($977|0),16,1)|0);
     $978 = (_get4()|0);
     HEAP32[133816>>2] = $978;
     $979 = HEAP32[880>>2]|0;
     (_fseek(($979|0),28,1)|0);
     $980 = (_get4()|0);
     $981 = HEAP32[133816>>2]|0;
     $982 = (($981) + ($980))|0;
     HEAP32[133816>>2] = $982;
     HEAP32[190504>>2] = 10;
     break L22;
    }
   } else if ((($31|0) == 51009)) {
    $973 = HEAP32[880>>2]|0;
    $974 = (_ftell(($973|0))|0);
    HEAP32[133808>>2] = $974;
   } else if ((($31|0) == 65026)) {
    $983 = HEAP32[$type>>2]|0;
    $984 = ($983|0)==(2);
    if ($984) {
     $985 = HEAP32[880>>2]|0;
     (_fgets((133144|0),64,($985|0))|0);
    }
   } else if ((($31|0) == 7)) {
    $34 = (_get2()|0);
    $35 = $34&65535;
    $36 = HEAP16[132120>>1]|0;
    $37 = $36&65535;
    $38 = (($37) + ($35))|0;
    $39 = $38&65535;
    HEAP16[132120>>1] = $39;
   } else if ((($31|0) == 6)) {
    $33 = (_get2()|0);
    HEAP16[132112>>1] = $33;
   } else if ((($31|0) == 30) | (($31|0) == 29) | (($31|0) == 28)) {
    $61 = (_get2()|0);
    $62 = HEAP32[$tag>>2]|0;
    $63 = (($62) - 28)|0;
    $64 = (134720 + ($63<<1)|0);
    HEAP16[$64>>1] = $61;
    $65 = HEAP16[((134720 + 2|0))>>1]|0;
    HEAP16[((134720 + 6|0))>>1] = $65;
   } else if ((($31|0) == 23)) {
    $57 = HEAP32[$type>>2]|0;
    $58 = ($57|0)==(3);
    if ($58) {
     $59 = (_get2()|0);
     $60 = (+($59&65535));
     HEAPF32[455312>>2] = $60;
    }
   } else if ((($31|0) == 38) | (($31|0) == 37) | (($31|0) == 36)) {
    $66 = (_get2()|0);
    $67 = (+($66&65535));
    $68 = HEAP32[$tag>>2]|0;
    $69 = (($68) - 36)|0;
    $70 = (134016 + ($69<<2)|0);
    HEAPF32[$70>>2] = $67;
   } else if ((($31|0) == 9)) {
    $40 = (_get2()|0);
    $41 = $40&65535;
    $i = $41;
    $42 = ($41|0)!=(0);
    if ($42) {
     $43 = $i;
     HEAP32[600>>2] = $43;
    }
   } else if ((($31|0) == 5)) {
    $32 = (_get2()|0);
    HEAP16[132120>>1] = $32;
   } else if ((($31|0) == 18) | (($31|0) == 17)) {
    $44 = HEAP32[$type>>2]|0;
    $45 = ($44|0)==(3);
    if ($45) {
     $46 = HEAP32[$len>>2]|0;
     $47 = ($46|0)==(1);
     if ($47) {
      $48 = (_get2()|0);
      $49 = $48&65535;
      $50 = (+($49|0));
      $51 = $50 / 256.0;
      $52 = $51;
      $53 = HEAP32[$tag>>2]|0;
      $54 = (($53) - 17)|0;
      $55 = $54<<1;
      $56 = (134016 + ($55<<2)|0);
      HEAPF32[$56>>2] = $52;
     }
    }
   } else if ((($31|0) == 34306)) {
    $c = 0;
    while(1) {
     $502 = $c;
     $503 = ($502|0)<(4);
     if (!($503)) {
      break;
     }
     $504 = (_get2()|0);
     $505 = $504&65535;
     $506 = (+($505|0));
     $507 = 4096.0 / $506;
     $508 = $507;
     $509 = $c;
     $510 = $509 ^ 1;
     $511 = (134016 + ($510<<2)|0);
     HEAPF32[$511>>2] = $508;
     $512 = $c;
     $513 = (($512) + 1)|0;
     $c = $513;
    }
   } else if ((($31|0) == 33434)) {
    $493 = HEAP32[$type>>2]|0;
    $494 = (+_getreal($493));
    $495 = $494;
    HEAPF32[455328>>2] = $495;
    $496 = $ifd;
    $497 = (455488 + (($496*48)|0)|0);
    $498 = (($497) + 44|0);
    HEAPF32[$498>>2] = $495;
   } else if ((($31|0) == 33437)) {
    $499 = HEAP32[$type>>2]|0;
    $500 = (+_getreal($499));
    $501 = $500;
    HEAPF32[455320>>2] = $501;
   } else if ((($31|0) == 34307)) {
    $514 = HEAP32[880>>2]|0;
    (_fread(($software|0),1,7,($514|0))|0);
    $515 = (_strncmp($software,457920,6)|0);
    $516 = ($515|0)!=(0);
    if ($516) {
     break L22;
    }
    HEAP32[132304>>2] = 4;
    $i = 0;
    HEAP32[132296>>2] = 0;
    while(1) {
     $517 = $i;
     $518 = ($517|0)<(3);
     if (!($518)) {
      break;
     }
     $c = 0;
     while(1) {
      $519 = $c;
      $520 = ($519|0)<(4);
      if (!($520)) {
       break;
      }
      $521 = HEAP32[880>>2]|0;
      $522 = $c;
      $523 = $522 ^ 1;
      $524 = $i;
      $525 = (132312 + ($524<<4)|0);
      $526 = (($525) + ($523<<2)|0);
      HEAP32[$vararg_buffer>>2] = $526;
      (_fscanf(($521|0),(456968|0),($vararg_buffer|0))|0);
      $527 = $c;
      $528 = (($527) + 1)|0;
      $c = $528;
     }
     $529 = HEAP32[184>>2]|0;
     $530 = ($529|0)!=(0);
     if ($530) {
      $num = 0.0;
      $c = 0;
      while(1) {
       $531 = $c;
       $532 = ($531|0)<(4);
       if (!($532)) {
        break;
       }
       $533 = $c;
       $534 = $i;
       $535 = (132312 + ($534<<4)|0);
       $536 = (($535) + ($533<<2)|0);
       $537 = +HEAPF32[$536>>2];
       $538 = $537;
       $539 = $num;
       $540 = $539 + $538;
       $num = $540;
       $541 = $c;
       $542 = (($541) + 1)|0;
       $c = $542;
      }
      $c = 0;
      while(1) {
       $543 = $c;
       $544 = ($543|0)<(4);
       if (!($544)) {
        break;
       }
       $545 = $num;
       $546 = $c;
       $547 = $i;
       $548 = (132312 + ($547<<4)|0);
       $549 = (($548) + ($546<<2)|0);
       $550 = +HEAPF32[$549>>2];
       $551 = $550;
       $552 = $551 / $545;
       $553 = $552;
       HEAPF32[$549>>2] = $553;
       $554 = $c;
       $555 = (($554) + 1)|0;
       $c = $555;
      }
     } else {
     }
     $556 = $i;
     $557 = (($556) + 1)|0;
     $i = $557;
    }
   } else if ((($31|0) == 65024) | (($31|0) == 33424)) {
    $488 = HEAP32[880>>2]|0;
    $489 = (_get4()|0);
    $490 = $1;
    $491 = (($489) + ($490))|0;
    (_fseek(($488|0),($491|0),0)|0);
    $492 = $1;
    _parse_kodak_ifd($492);
   } else if ((($31|0) == 37400)) {
    $i = 0;
    HEAP32[132296>>2] = 0;
    while(1) {
     $579 = $i;
     $580 = ($579|0)<(3);
     if (!($580)) {
      break;
     }
     $581 = HEAP32[$type>>2]|0;
     (+_getreal($581));
     $c = 0;
     while(1) {
      $582 = $c;
      $583 = ($582|0)<(3);
      if (!($583)) {
       break;
      }
      $584 = HEAP32[$type>>2]|0;
      $585 = (+_getreal($584));
      $586 = $585;
      $587 = $c;
      $588 = $i;
      $589 = (132312 + ($588<<4)|0);
      $590 = (($589) + ($587<<2)|0);
      HEAPF32[$590>>2] = $586;
      $591 = $c;
      $592 = (($591) + 1)|0;
      $c = $592;
     }
     $593 = $i;
     $594 = (($593) + 1)|0;
     $i = $594;
    }
   } else if ((($31|0) == 37386)) {
    $574 = HEAP32[$type>>2]|0;
    $575 = (+_getreal($574));
    $576 = $575;
    HEAPF32[456080>>2] = $576;
   } else if ((($31|0) == 34310)) {
    $558 = HEAP32[880>>2]|0;
    $559 = (_ftell(($558|0))|0);
    _parse_mos($559);
    label = 192;
   } else if ((($31|0) == 277)) {
    $244 = HEAP32[$type>>2]|0;
    $245 = (_getint($244)|0);
    $246 = $245 & 7;
    $247 = $ifd;
    $248 = (455488 + (($247*48)|0)|0);
    $249 = (($248) + 28|0);
    HEAP32[$249>>2] = $246;
   } else if ((($31|0) == 61454)) {
    $c = 0;
    while(1) {
     $254 = $c;
     $255 = ($254|0)<(3);
     if (!($255)) {
      break;
     }
     $256 = HEAP32[$type>>2]|0;
     $257 = (_getint($256)|0);
     $258 = (+($257>>>0));
     $259 = $c;
     $260 = (4 - ($259))|0;
     $261 = (($260|0) % 3)&-1;
     $262 = (134016 + ($261<<2)|0);
     HEAPF32[$262>>2] = $258;
     $263 = $c;
     $264 = (($263) + 1)|0;
     $c = $264;
    }
   } else if ((($31|0) == 274)) {
    $234 = (_get2()|0);
    $235 = $234&65535;
    $236 = $235 & 7;
    $237 = (457784 + ($236)|0);
    $238 = HEAP8[$237>>0]|0;
    $239 = $238 << 24 >> 24;
    $240 = (($239) - 48)|0;
    $241 = $ifd;
    $242 = (455488 + (($241*48)|0)|0);
    $243 = (($242) + 24|0);
    HEAP32[$243>>2] = $240;
   } else if ((($31|0) == 315)) {
    $278 = HEAP32[880>>2]|0;
    (_fread((455368|0),64,1,($278|0))|0);
   } else if ((($31|0) == 11) | (($31|0) == 305)) {
    $265 = HEAP32[880>>2]|0;
    (_fgets(($software|0),64,($265|0))|0);
    $266 = (_strncmp($software,457800,5)|0);
    $267 = ($266|0)!=(0);
    if ($267) {
     $268 = (_strncmp($software,457808,5)|0);
     $269 = ($268|0)!=(0);
     if ($269) {
      $270 = (_strncmp($software,457816,5)|0);
      $271 = ($270|0)!=(0);
      if ($271) {
       $272 = (_strncmp($software,457824,6)|0);
       $273 = ($272|0)!=(0);
       if ($273) {
        $274 = (_strncmp($software,457832,10)|0);
        $275 = ($274|0)!=(0);
        if ($275) {
         $276 = (_strcmp($software,457848)|0);
         $277 = ($276|0)!=(0);
         if (!($277)) {
          label = 84;
         }
        } else {
         label = 84;
        }
       } else {
        label = 84;
       }
      } else {
       label = 84;
      }
     } else {
      label = 84;
     }
    } else {
     label = 84;
    }
    if ((label|0) == 84) {
     label = 0;
     HEAP32[133760>>2] = 0;
    }
   } else if ((($31|0) == 306)) {
    _get_timestamp(0);
   } else if ((($31|0) == 61448) | (($31|0) == 514) | (($31|0) == 279)) {
    $250 = (_get4()|0);
    $251 = $ifd;
    $252 = (455488 + (($251*48)|0)|0);
    $253 = (($252) + 32|0);
    HEAP32[$253>>2] = $250;
   } else if ((($31|0) == 322)) {
    $279 = HEAP32[$type>>2]|0;
    $280 = (_getint($279)|0);
    $281 = $ifd;
    $282 = (455488 + (($281*48)|0)|0);
    $283 = (($282) + 36|0);
    HEAP32[$283>>2] = $280;
   } else if ((($31|0) == 323)) {
    $284 = HEAP32[$type>>2]|0;
    $285 = (_getint($284)|0);
    $286 = $ifd;
    $287 = (455488 + (($286*48)|0)|0);
    $288 = (($287) + 40|0);
    HEAP32[$288>>2] = $285;
   } else if ((($31|0) == 33405)) {
    $435 = HEAP32[880>>2]|0;
    (_fgets((133144|0),64,($435|0))|0);
   } else if ((($31|0) == 33421)) {
    $436 = (_get2()|0);
    $437 = $436&65535;
    $438 = ($437|0)==(6);
    if ($438) {
     $439 = (_get2()|0);
     $440 = $439&65535;
     $441 = ($440|0)==(6);
     if ($441) {
      HEAP32[600>>2] = 9;
     }
    }
   } else if ((($31|0) == 33422)) {
    $442 = HEAP32[600>>2]|0;
    $443 = ($442|0)==(9);
    if (!($443)) {
     label = 149;
     break L22;
    }
    $c = 0;
    while(1) {
     $444 = $c;
     $445 = ($444|0)<(36);
     if (!($445)) {
      break;
     }
     $446 = HEAP32[880>>2]|0;
     $447 = (_getc_unlocked(($446|0))|0);
     $448 = $447 & 3;
     $449 = $448&255;
     $450 = $c;
     $451 = (624 + ($450)|0);
     HEAP8[$451>>0] = $449;
     $452 = $c;
     $453 = (($452) + 1)|0;
     $c = $453;
    }
   } else if ((($31|0) == 64777)) {
    label = 149;
   } else if ((($31|0) == 29184)) {
    $372 = (_get4()|0);
    $sony_offset = $372;
   } else if ((($31|0) == 29185)) {
    $373 = (_get4()|0);
    $sony_length = $373;
   } else if ((($31|0) == 29217)) {
    $374 = (_get4()|0);
    $sony_key = $374;
   } else if ((($31|0) == 29264)) {
    $375 = HEAP32[880>>2]|0;
    $376 = (_ftell(($375|0))|0);
    _parse_minolta($376);
    HEAP16[132368>>1] = 0;
   } else if ((($31|0) == 29443)) {
    $c = 0;
    while(1) {
     $377 = $c;
     $378 = ($377|0)<(4);
     if (!($378)) {
      break;
     }
     $379 = (_get2()|0);
     $380 = (+($379&65535));
     $381 = $c;
     $382 = $c;
     $383 = ($382|0)<(2);
     $384 = $383&1;
     $385 = $381 ^ $384;
     $386 = (134016 + ($385<<2)|0);
     HEAPF32[$386>>2] = $380;
     $387 = $c;
     $388 = (($387) + 1)|0;
     $c = $388;
    }
   } else if ((($31|0) == 29459)) {
    $c = 0;
    while(1) {
     $389 = $c;
     $390 = ($389|0)<(4);
     if (!($390)) {
      break;
     }
     $391 = (_get2()|0);
     $392 = (+($391&65535));
     $393 = $c;
     $394 = (134016 + ($393<<2)|0);
     HEAPF32[$394>>2] = $392;
     $395 = $c;
     $396 = (($395) + 1)|0;
     $c = $396;
    }
    $397 = +HEAPF32[((134016 + 4|0))>>2];
    $398 = $397 == 1024.0;
    if ($398) {
     $399 = +HEAPF32[((134016 + 8|0))>>2];
     $400 = $399 == 1024.0;
     $402 = $400;
    } else {
     $402 = 0;
    }
    $401 = $402&1;
    $403 = $401 << 1;
    $i = $403;
    $404 = $i;
    $405 = (134016 + ($404<<2)|0);
    $406 = +HEAPF32[$405>>2];
    $407 = $i;
    $408 = (($407) + 1)|0;
    $409 = (134016 + ($408<<2)|0);
    $410 = +HEAPF32[$409>>2];
    $411 = $406 + $410;
    $412 = $i;
    $413 = (134016 + ($412<<2)|0);
    HEAPF32[$413>>2] = $411;
    $414 = $i;
    $415 = (134016 + ($414<<2)|0);
    $416 = +HEAPF32[$415>>2];
    $417 = $i;
    $418 = (($417) + 1)|0;
    $419 = (134016 + ($418<<2)|0);
    $420 = +HEAPF32[$419>>2];
    $421 = $416 - $420;
    $422 = $i;
    $423 = (($422) + 1)|0;
    $424 = (134016 + ($423<<2)|0);
    HEAPF32[$424>>2] = $421;
    $425 = $i;
    $426 = (134016 + ($425<<2)|0);
    $427 = +HEAPF32[$426>>2];
    $428 = $i;
    $429 = (($428) + 1)|0;
    $430 = (134016 + ($429<<2)|0);
    $431 = +HEAPF32[$430>>2];
    $432 = $427 - $431;
    $433 = $i;
    $434 = (134016 + ($433<<2)|0);
    HEAPF32[$434>>2] = $432;
   } else if ((($31|0) == 330)) {
    $308 = (_strcmp(134232,457880)|0);
    $309 = ($308|0)!=(0);
    if (!($309)) {
     $310 = $ifd;
     $311 = (455488 + (($310*48)|0)|0);
     $312 = HEAP32[$311>>2]|0;
     $313 = ($312|0)==(3872);
     if ($313) {
      HEAP32[190504>>2] = 14;
      $314 = (_get4()|0);
      $315 = $1;
      $316 = (($314) + ($315))|0;
      HEAP32[133816>>2] = $316;
      $317 = $ifd;
      $318 = (($317) + 1)|0;
      $ifd = $318;
      break L22;
     }
    }
    while(1) {
     $319 = HEAP32[$len>>2]|0;
     $320 = (($319) + -1)|0;
     HEAP32[$len>>2] = $320;
     $321 = ($319|0)!=(0);
     if (!($321)) {
      break;
     }
     $322 = HEAP32[880>>2]|0;
     $323 = (_ftell(($322|0))|0);
     $i = $323;
     $324 = HEAP32[880>>2]|0;
     $325 = (_get4()|0);
     $326 = $1;
     $327 = (($325) + ($326))|0;
     (_fseek(($324|0),($327|0),0)|0);
     $328 = $1;
     $329 = (_parse_tiff_ifd($328)|0);
     $330 = ($329|0)!=(0);
     if ($330) {
      label = 104;
      break;
     }
     $331 = HEAP32[880>>2]|0;
     $332 = $i;
     $333 = (($332) + 4)|0;
     (_fseek(($331|0),($333|0),0)|0);
    }
    if ((label|0) == 104) {
     label = 0;
    }
   } else if ((($31|0) == 400)) {
    (_strcpy((134168|0),(457896|0))|0);
    HEAP32[132400>>2] = 4095;
   } else if ((($31|0) == 28688)) {
    $c = 0;
    while(1) {
     $334 = $c;
     $335 = ($334|0)<(4);
     if (!($335)) {
      break;
     }
     $336 = (_get2()|0);
     $337 = $336&65535;
     $338 = $337 >> 2;
     $339 = $338 & 4095;
     $340 = $c;
     $341 = (($340) + 1)|0;
     $342 = (($sony_curve) + ($341<<2)|0);
     HEAP32[$342>>2] = $339;
     $343 = $c;
     $344 = (($343) + 1)|0;
     $c = $344;
    }
    $i = 0;
    while(1) {
     $345 = $i;
     $346 = ($345|0)<(5);
     if (!($346)) {
      break;
     }
     $347 = $i;
     $348 = (($sony_curve) + ($347<<2)|0);
     $349 = HEAP32[$348>>2]|0;
     $350 = (($349) + 1)|0;
     $j = $350;
     while(1) {
      $351 = $j;
      $352 = $i;
      $353 = (($352) + 1)|0;
      $354 = (($sony_curve) + ($353<<2)|0);
      $355 = HEAP32[$354>>2]|0;
      $356 = ($351>>>0)<=($355>>>0);
      if (!($356)) {
       break;
      }
      $357 = $j;
      $358 = (($357) - 1)|0;
      $359 = (968 + ($358<<1)|0);
      $360 = HEAP16[$359>>1]|0;
      $361 = $360&65535;
      $362 = $i;
      $363 = 1 << $362;
      $364 = (($361) + ($363))|0;
      $365 = $364&65535;
      $366 = $j;
      $367 = (968 + ($366<<1)|0);
      HEAP16[$367>>1] = $365;
      $368 = $j;
      $369 = (($368) + 1)|0;
      $j = $369;
     }
     $370 = $i;
     $371 = (($370) + 1)|0;
     $i = $371;
    }
   } else if ((($31|0) == 324)) {
    $289 = HEAP32[$len>>2]|0;
    $290 = ($289>>>0)>(1);
    if ($290) {
     $291 = HEAP32[880>>2]|0;
     $292 = (_ftell(($291|0))|0);
     $297 = $292;
    } else {
     $293 = (_get4()|0);
     $297 = $293;
    }
    $294 = $ifd;
    $295 = (455488 + (($294*48)|0)|0);
    $296 = (($295) + 20|0);
    HEAP32[$296>>2] = $297;
    $298 = HEAP32[$len>>2]|0;
    $299 = ($298|0)==(1);
    if ($299) {
     $300 = $ifd;
     $301 = (455488 + (($300*48)|0)|0);
     $302 = (($301) + 40|0);
     HEAP32[$302>>2] = 0;
     $303 = $ifd;
     $304 = (455488 + (($303*48)|0)|0);
     $305 = (($304) + 36|0);
     HEAP32[$305>>2] = 0;
    }
    $306 = HEAP32[$len>>2]|0;
    $307 = ($306|0)==(4);
    if ($307) {
     HEAP32[190504>>2] = 13;
     HEAP32[133760>>2] = 5;
    }
   } else if ((($31|0) == 61447) | (($31|0) == 513) | (($31|0) == 273)) {
    label = 59;
   } else if ((($31|0) == 262)) {
    $133 = (_get2()|0);
    $134 = $133&65535;
    $135 = $ifd;
    $136 = (455488 + (($135*48)|0)|0);
    $137 = (($136) + 16|0);
    HEAP32[$137>>2] = $134;
   } else if ((($31|0) == 272)) {
    $140 = HEAP32[880>>2]|0;
    (_fgets((134232|0),64,($140|0))|0);
   } else if ((($31|0) == 61443) | (($31|0) == 258)) {
    $110 = HEAP32[$len>>2]|0;
    $111 = $110 & 7;
    $112 = $ifd;
    $113 = (455488 + (($112*48)|0)|0);
    $114 = (($113) + 28|0);
    HEAP32[$114>>2] = $111;
    $115 = HEAP32[$type>>2]|0;
    $116 = (_getint($115)|0);
    $117 = $ifd;
    $118 = (455488 + (($117*48)|0)|0);
    $119 = (($118) + 8|0);
    HEAP32[$119>>2] = $116;
   } else if ((($31|0) == 280)) {
    $141 = HEAP32[$type>>2]|0;
    $142 = ($141|0)!=(4);
    if ($142) {
     break L22;
    } else {
     HEAP32[190504>>2] = 12;
     HEAP32[133128>>2] = 8200;
     label = 59;
     break L22;
    }
   } else if ((($31|0) == 61441) | (($31|0) == 256) | (($31|0) == 2)) {
    $101 = HEAP32[$type>>2]|0;
    $102 = (_getint($101)|0);
    $103 = $ifd;
    $104 = (455488 + (($103*48)|0)|0);
    HEAP32[$104>>2] = $102;
   } else if ((($31|0) == 61446)) {
    HEAP16[133096>>1] = 0;
    $120 = $ifd;
    $121 = (455488 + (($120*48)|0)|0);
    $122 = (($121) + 8|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = ($123|0)>(12);
    if ($124) {
     break L22;
    } else {
     HEAP32[190504>>2] = 10;
     $125 = (_get4()|0);
     $126 = ($125|0)!=(0);
     $127 = $126 ? 24 : 80;
     HEAP32[133128>>2] = $127;
     break L22;
    }
   } else if ((($31|0) == 46)) {
    $84 = HEAP32[$type>>2]|0;
    $85 = ($84|0)!=(7);
    if (!($85)) {
     $86 = HEAP32[880>>2]|0;
     $87 = (_getc_unlocked(($86|0))|0);
     $88 = ($87|0)!=(255);
     if (!($88)) {
      $89 = HEAP32[880>>2]|0;
      $90 = (_getc_unlocked(($89|0))|0);
      $91 = ($90|0)!=(216);
      if (!($91)) {
       $92 = HEAP32[880>>2]|0;
       $93 = (_ftell(($92|0))|0);
       $94 = (($93) - 2)|0;
       HEAP32[454608>>2] = $94;
       $95 = HEAP32[$len>>2]|0;
       HEAP32[134312>>2] = $95;
       break L22;
      }
     }
    }
   } else if ((($31|0) == 61442) | (($31|0) == 257) | (($31|0) == 3)) {
    $105 = HEAP32[$type>>2]|0;
    $106 = (_getint($105)|0);
    $107 = $ifd;
    $108 = (455488 + (($107*48)|0)|0);
    $109 = (($108) + 4|0);
    HEAP32[$109>>2] = $106;
   } else if ((($31|0) == 270)) {
    $138 = HEAP32[880>>2]|0;
    (_fread((457272|0),512,1,($138|0))|0);
   } else if ((($31|0) == 39)) {
    $71 = HEAP32[$len>>2]|0;
    $72 = ($71>>>0)<(50);
    if (!($72)) {
     $73 = +HEAPF32[134016>>2];
     $74 = $73 != 0.0;
     if (!($74)) {
      $75 = HEAP32[880>>2]|0;
      (_fseek(($75|0),12,1)|0);
      $c = 0;
      while(1) {
       $76 = $c;
       $77 = ($76|0)<(3);
       if (!($77)) {
        break;
       }
       $78 = (_get2()|0);
       $79 = (+($78&65535));
       $80 = $c;
       $81 = (134016 + ($80<<2)|0);
       HEAPF32[$81>>2] = $79;
       $82 = $c;
       $83 = (($82) + 1)|0;
       $c = $83;
      }
      break L22;
     }
    }
   } else if ((($31|0) == 271)) {
    $139 = HEAP32[880>>2]|0;
    (_fgets((134168|0),64,($139|0))|0);
   } else if ((($31|0) == 259)) {
    $128 = HEAP32[$type>>2]|0;
    $129 = (_getint($128)|0);
    $130 = $ifd;
    $131 = (455488 + (($130*48)|0)|0);
    $132 = (($131) + 12|0);
    HEAP32[$132>>2] = $129;
   } else if ((($31|0) == 61440)) {
    $96 = HEAP32[880>>2]|0;
    $97 = (_get4()|0);
    $98 = $1;
    $99 = (($97) + ($98))|0;
    (_fseek(($96|0),($99|0),0)|0);
    $100 = $1;
    (_parse_tiff_ifd($100)|0);
   } else if ((($31|0) == 46275)) {
    (_strcpy((134168|0),(457936|0))|0);
    $600 = HEAP32[880>>2]|0;
    $601 = (_ftell(($600|0))|0);
    HEAP32[133816>>2] = $601;
    $602 = HEAP32[$len>>2]|0;
    $ima_len = $602;
   } else if ((($31|0) == 40976)) {
    $595 = (_get4()|0);
    HEAP32[134688>>2] = $595;
    $596 = $ifd;
    $597 = (455488 + (($596*48)|0)|0);
    $598 = (($597) + 12|0);
    $599 = HEAP32[$598>>2]|0;
    if ((($599|0) == 32773)) {
     HEAP32[190504>>2] = 17;
    } else if ((($599|0) == 32770)) {
     HEAP32[190504>>2] = 15;
    } else if ((($599|0) == 32772)) {
     HEAP32[190504>>2] = 16;
    }
   } else if ((($31|0) == 34303)) {
    label = 192;
   } else if ((($31|0) == 34665)) {
    $560 = HEAP32[880>>2]|0;
    $561 = (_get4()|0);
    $562 = $1;
    $563 = (($561) + ($562))|0;
    (_fseek(($560|0),($563|0),0)|0);
    $564 = $1;
    _parse_exif($564);
   } else if ((($31|0) == 34853)) {
    $565 = HEAP32[880>>2]|0;
    $566 = (_get4()|0);
    $567 = $1;
    $568 = (($566) + ($567))|0;
    (_fseek(($565|0),($568|0),0)|0);
    $569 = $1;
    _parse_gps($569);
   } else if ((($31|0) == 50831) | (($31|0) == 34675)) {
    $570 = HEAP32[880>>2]|0;
    $571 = (_ftell(($570|0))|0);
    HEAP32[456864>>2] = $571;
    $572 = HEAP32[$len>>2]|0;
    HEAP32[456872>>2] = $572;
   } else if ((($31|0) == 37122)) {
    $573 = (_get4()|0);
    HEAP32[160304>>2] = $573;
   } else if ((($31|0) == 37393)) {
    $577 = HEAP32[$type>>2]|0;
    $578 = (_getint($577)|0);
    HEAP32[455336>>2] = $578;
   }
  } while(0);
  if ((label|0) == 59) {
   label = 0;
   $143 = (_get4()|0);
   $144 = $1;
   $145 = (($143) + ($144))|0;
   $146 = $ifd;
   $147 = (455488 + (($146*48)|0)|0);
   $148 = (($147) + 20|0);
   HEAP32[$148>>2] = $145;
   $149 = $ifd;
   $150 = (455488 + (($149*48)|0)|0);
   $151 = (($150) + 8|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = ($152|0)!=(0);
   if (!($153)) {
    $154 = $ifd;
    $155 = (455488 + (($154*48)|0)|0);
    $156 = (($155) + 20|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)>(0);
    if ($158) {
     $159 = HEAP32[880>>2]|0;
     $160 = $ifd;
     $161 = (455488 + (($160*48)|0)|0);
     $162 = (($161) + 20|0);
     $163 = HEAP32[$162>>2]|0;
     (_fseek(($159|0),($163|0),0)|0);
     $164 = (_ljpeg_start($jh,1)|0);
     $165 = ($164|0)!=(0);
     if ($165) {
      $166 = $ifd;
      $167 = (455488 + (($166*48)|0)|0);
      $168 = (($167) + 12|0);
      HEAP32[$168>>2] = 6;
      $169 = (($jh) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = $ifd;
      $172 = (455488 + (($171*48)|0)|0);
      HEAP32[$172>>2] = $170;
      $173 = (($jh) + 8|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = $ifd;
      $176 = (455488 + (($175*48)|0)|0);
      $177 = (($176) + 4|0);
      HEAP32[$177>>2] = $174;
      $178 = (($jh) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = $ifd;
      $181 = (455488 + (($180*48)|0)|0);
      $182 = (($181) + 8|0);
      HEAP32[$182>>2] = $179;
      $183 = (($jh) + 16|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = $ifd;
      $186 = (455488 + (($185*48)|0)|0);
      $187 = (($186) + 28|0);
      HEAP32[$187>>2] = $184;
      $188 = (($jh) + 20|0);
      $189 = HEAP32[$188>>2]|0;
      $190 = ($189|0)!=(0);
      if (!($190)) {
       $191 = (($jh) + 16|0);
       $192 = HEAP32[$191>>2]|0;
       $193 = $192 & 1;
       $194 = ($193|0)!=(0);
       if (!($194)) {
        $195 = (($jh) + 16|0);
        $196 = HEAP32[$195>>2]|0;
        $197 = $ifd;
        $198 = (455488 + (($197*48)|0)|0);
        $199 = HEAP32[$198>>2]|0;
        $200 = Math_imul($199, $196)|0;
        HEAP32[$198>>2] = $200;
       }
      }
      $201 = $ifd;
      $202 = (455488 + (($201*48)|0)|0);
      $203 = HEAP32[$202>>2]|0;
      $204 = $ifd;
      $205 = (455488 + (($204*48)|0)|0);
      $206 = (($205) + 4|0);
      $207 = HEAP32[$206>>2]|0;
      $208 = $207<<2;
      $209 = ($203|0)>($208|0);
      $210 = $209&1;
      $211 = (($jh) + 16|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = $212 ^ -1;
      $214 = $210 & $213;
      $215 = ($214|0)!=(0);
      if ($215) {
       $216 = $ifd;
       $217 = (455488 + (($216*48)|0)|0);
       $218 = HEAP32[$217>>2]|0;
       $219 = (($218|0) / 2)&-1;
       HEAP32[$217>>2] = $219;
       $220 = $ifd;
       $221 = (455488 + (($220*48)|0)|0);
       $222 = (($221) + 4|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = $223<<1;
       HEAP32[$222>>2] = $224;
      }
      $225 = HEAP16[944>>1]|0;
      $226 = $225 << 16 >> 16;
      $i = $226;
      $227 = $ifd;
      $228 = (455488 + (($227*48)|0)|0);
      $229 = (($228) + 20|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = (($230) + 12)|0;
      (_parse_tiff($231)|0);
      $232 = $i;
      $233 = $232&65535;
      HEAP16[944>>1] = $233;
     }
    }
   }
  }
  else if ((label|0) == 149) {
   label = 0;
   $454 = HEAP32[$len>>2]|0;
   $plen = $454;
   $455 = ($454>>>0)>(16);
   if ($455) {
    $plen = 16;
   }
   $456 = $plen;
   $457 = HEAP32[880>>2]|0;
   (_fread(($cfa_pat|0),1,($456|0),($457|0))|0);
   $i = 0;
   $cfa = 0;
   HEAP32[132304>>2] = 0;
   while(1) {
    $458 = $i;
    $459 = $plen;
    $460 = ($458>>>0)<($459>>>0);
    if ($460) {
     $461 = HEAP32[132304>>2]|0;
     $462 = ($461>>>0)<(4);
     $1107 = $462;
    } else {
     $1107 = 0;
    }
    if (!($1107)) {
     break;
    }
    $463 = $cfa;
    $464 = $i;
    $465 = (($cfa_pat) + ($464)|0);
    $466 = HEAP8[$465>>0]|0;
    $467 = $466&255;
    $468 = 1 << $467;
    $469 = $463 & $468;
    $470 = ($469|0)!=(0);
    $471 = $470 ^ 1;
    $472 = $471&1;
    $473 = HEAP32[132304>>2]|0;
    $474 = (($473) + ($472))|0;
    HEAP32[132304>>2] = $474;
    $475 = $i;
    $476 = (($cfa_pat) + ($475)|0);
    $477 = HEAP8[$476>>0]|0;
    $478 = $477&255;
    $479 = 1 << $478;
    $480 = $cfa;
    $481 = $480 | $479;
    $cfa = $481;
    $482 = $i;
    $483 = (($482) + 1)|0;
    $i = $483;
   }
   $484 = $cfa;
   $485 = ($484|0)==(56);
   if ($485) {
    ;HEAP8[$cfa_pc+0>>0]=HEAP8[457904+0>>0]|0;HEAP8[$cfa_pc+1>>0]=HEAP8[457904+1>>0]|0;HEAP8[$cfa_pc+2>>0]=HEAP8[457904+2>>0]|0;
   }
   $486 = $cfa;
   $487 = ($486|0)==(58);
   if ($487) {
    ;HEAP8[$cfa_pc+0>>0]=HEAP8[457912+0>>0]|0;HEAP8[$cfa_pc+1>>0]=HEAP8[457912+1>>0]|0;HEAP8[$cfa_pc+2>>0]=HEAP8[457912+2>>0]|0;HEAP8[$cfa_pc+3>>0]=HEAP8[457912+3>>0]|0;
   }
   label = 264;
  }
  else if ((label|0) == 192) {
   label = 0;
   (_strcpy((134168|0),(457928|0))|0);
  }
  else if ((label|0) == 217) {
   label = 0;
   $606 = HEAP32[880>>2]|0;
   (_fseek(($606|0),40,1)|0);
   $607 = (_get4()|0);
   $608 = $607&65535;
   HEAP16[132368>>1] = $608;
   $609 = (_get4()|0);
   $610 = $609&65535;
   HEAP16[133096>>1] = $610;
   $611 = (_get4()|0);
   $612 = $611 & 7;
   $613 = $612&65535;
   HEAP16[608>>1] = $613;
   $614 = HEAP16[132368>>1]|0;
   $615 = $614&65535;
   $616 = HEAP16[608>>1]|0;
   $617 = $616&65535;
   $618 = (($615) - ($617))|0;
   $619 = (_get4()|0);
   $620 = $619 & 7;
   $621 = (($618) - ($620))|0;
   $622 = $621&65535;
   HEAP16[132120>>1] = $622;
   $623 = (_get4()|0);
   $624 = $623 & 7;
   $625 = $624&65535;
   HEAP16[616>>1] = $625;
   $626 = HEAP16[133096>>1]|0;
   $627 = $626&65535;
   $628 = HEAP16[616>>1]|0;
   $629 = $628&65535;
   $630 = (($627) - ($629))|0;
   $631 = (_get4()|0);
   $632 = $631 & 7;
   $633 = (($630) - ($632))|0;
   $634 = $633&65535;
   HEAP16[132112>>1] = $634;
   $635 = HEAP16[132368>>1]|0;
   $636 = $635&65535;
   $637 = ($636|0)==(7262);
   if ($637) {
    HEAP16[132112>>1] = 5444;
    HEAP16[132120>>1] = 7244;
    HEAP16[608>>1] = 7;
   }
   $638 = HEAP32[880>>2]|0;
   (_fseek(($638|0),52,1)|0);
   $c = 0;
   while(1) {
    $639 = $c;
    $640 = ($639|0)<(3);
    if (!($640)) {
     break;
    }
    $641 = (+_getreal(11));
    $642 = $641;
    $643 = $c;
    $644 = (134016 + ($643<<2)|0);
    HEAPF32[$644>>2] = $642;
    $645 = $c;
    $646 = (($645) + 1)|0;
    $c = $646;
   }
   $647 = HEAP32[880>>2]|0;
   (_fseek(($647|0),114,1)|0);
   $648 = (_get2()|0);
   $649 = $648&65535;
   $650 = $649 >> 7;
   $651 = ($650*90)|0;
   HEAP32[455352>>2] = $651;
   $652 = HEAP16[132120>>1]|0;
   $653 = $652&65535;
   $654 = HEAP16[132112>>1]|0;
   $655 = $654&65535;
   $656 = Math_imul($653, $655)|0;
   $657 = ($656*6)|0;
   $658 = $ima_len;
   $659 = ($657|0)==($658|0);
   if ($659) {
    $660 = HEAP32[455352>>2]|0;
    $661 = (($660>>>0) % 180)&-1;
    $662 = ($661|0)==(90);
    if ($662) {
     $663 = HEAP16[132120>>1]|0;
     $664 = $663&65535;
     $665 = HEAP16[132112>>1]|0;
     $666 = $665&65535;
     $667 = (($664) + ($666))|0;
     $668 = $667&65535;
     HEAP16[132120>>1] = $668;
     $669 = HEAP16[132120>>1]|0;
     $670 = $669&65535;
     $671 = HEAP16[132112>>1]|0;
     $672 = $671&65535;
     $673 = (($670) - ($672))|0;
     $674 = $673&65535;
     HEAP16[132112>>1] = $674;
     $675 = HEAP16[132120>>1]|0;
     $676 = $675&65535;
     $677 = HEAP16[132112>>1]|0;
     $678 = $677&65535;
     $679 = (($676) - ($678))|0;
     $680 = $679&65535;
     HEAP16[132120>>1] = $680;
    }
    $681 = HEAP16[132120>>1]|0;
    HEAP16[132368>>1] = $681;
    $682 = HEAP16[132112>>1]|0;
    HEAP16[133096>>1] = $682;
    HEAP32[455352>>2] = 0;
    HEAP32[600>>2] = 0;
    HEAP16[616>>1] = 0;
    HEAP16[608>>1] = 0;
   }
   $683 = HEAP16[132112>>1]|0;
   $684 = $683&65535;
   $685 = HEAP16[132120>>1]|0;
   $686 = $685&65535;
   $687 = Math_imul($684, $686)|0;
   $688 = (($687|0) / 1000000)&-1;
   HEAP32[$vararg_buffer1>>2] = $688;
   (_sprintf(134232,457944,$vararg_buffer1)|0);
   HEAP32[190504>>2] = 18;
   $689 = HEAP32[600>>2]|0;
   $690 = ($689|0)!=(0);
   if ($690) {
    $691 = HEAP16[608>>1]|0;
    $692 = $691&65535;
    $693 = $692 & 1;
    $694 = ($693|0)!=(0);
    if ($694) {
     HEAP32[600>>2] = 1633771873;
    }
    HEAP32[190504>>2] = 19;
   }
   HEAP32[132400>>2] = 65535;
  }
  else if ((label|0) == 283) {
   label = 0;
   $817 = HEAP16[((134720 + 8|0))>>1]|0;
   $818 = $817&65535;
   $819 = HEAP16[((134720 + 10|0))>>1]|0;
   $820 = $819&65535;
   $821 = Math_imul($818, $820)|0;
   $822 = ($821|0)!=(0);
   if (!($822)) {
    HEAP16[((134720 + 10|0))>>1] = 1;
    HEAP16[((134720 + 8|0))>>1] = 1;
   }
   $c = 0;
   while(1) {
    $823 = $c;
    $824 = HEAP16[((134720 + 8|0))>>1]|0;
    $825 = $824&65535;
    $826 = HEAP16[((134720 + 10|0))>>1]|0;
    $827 = $826&65535;
    $828 = Math_imul($825, $827)|0;
    $829 = ($823|0)<($828|0);
    if (!($829)) {
     break;
    }
    $830 = HEAP32[$type>>2]|0;
    $831 = (+_getreal($830));
    $832 = (~~(($831))&65535);
    $833 = $c;
    $834 = (6 + ($833))|0;
    $835 = (134720 + ($834<<1)|0);
    HEAP16[$835>>1] = $832;
    $836 = $c;
    $837 = (($836) + 1)|0;
    $c = $837;
   }
   HEAP32[132392>>2] = 0;
  }
  if ((label|0) == 264) {
   label = 0;
   $c = 0;
   while(1) {
    $761 = $c;
    $762 = HEAP32[132304>>2]|0;
    $763 = ($761>>>0)<($762>>>0);
    if (!($763)) {
     break;
    }
    $764 = $c;
    $765 = $764&255;
    $766 = $c;
    $767 = (($cfa_pc) + ($766)|0);
    $768 = HEAP8[$767>>0]|0;
    $769 = $768&255;
    $770 = (($tab) + ($769)|0);
    HEAP8[$770>>0] = $765;
    $771 = $c;
    $772 = (($771) + 1)|0;
    $c = $772;
   }
   $773 = $c;
   $774 = (458016 + ($773)|0);
   HEAP8[$774>>0] = 0;
   $i = 16;
   while(1) {
    $775 = $i;
    $776 = (($775) + -1)|0;
    $i = $776;
    $777 = ($775|0)!=(0);
    if (!($777)) {
     break;
    }
    $778 = HEAP32[600>>2]|0;
    $779 = $778 << 2;
    $780 = $i;
    $781 = $plen;
    $782 = (($780>>>0) % ($781>>>0))&-1;
    $783 = (($cfa_pat) + ($782)|0);
    $784 = HEAP8[$783>>0]|0;
    $785 = $784&255;
    $786 = (($tab) + ($785)|0);
    $787 = HEAP8[$786>>0]|0;
    $788 = $787&255;
    $789 = $779 | $788;
    HEAP32[600>>2] = $789;
   }
   $790 = HEAP32[600>>2]|0;
   $791 = ($790|0)!=(0);
   $792 = $791 ^ 1;
   $793 = $792&1;
   $794 = HEAP32[600>>2]|0;
   $795 = (($794) - ($793))|0;
   HEAP32[600>>2] = $795;
  }
  $986 = HEAP32[880>>2]|0;
  $987 = HEAP32[$save>>2]|0;
  (_fseek(($986|0),($987|0),0)|0);
 }
 $988 = $sony_length;
 $989 = ($988|0)!=(0);
 if ($989) {
  $990 = $sony_length;
  $991 = (_malloc($990)|0);
  $buf = $991;
  $992 = ($991|0)!=(0|0);
  if ($992) {
   $993 = HEAP32[880>>2]|0;
   $994 = $sony_offset;
   (_fseek(($993|0),($994|0),0)|0);
   $995 = $buf;
   $996 = $sony_length;
   $997 = HEAP32[880>>2]|0;
   (_fread(($995|0),($996|0),1,($997|0))|0);
   $998 = $buf;
   $999 = $sony_length;
   $1000 = (($999>>>0) / 4)&-1;
   $1001 = $sony_key;
   _sony_decrypt($998,$1000,1,$1001);
   $1002 = HEAP32[880>>2]|0;
   $sfp = $1002;
   $1003 = (_tmpfile()|0);
   HEAP32[880>>2] = $1003;
   $1004 = ($1003|0)!=(0|0);
   if ($1004) {
    $1005 = $buf;
    $1006 = $sony_length;
    $1007 = HEAP32[880>>2]|0;
    (_fwrite(($1005|0),($1006|0),1,($1007|0))|0);
    $1008 = HEAP32[880>>2]|0;
    (_fseek(($1008|0),0,0)|0);
    $1009 = $sony_offset;
    $1010 = (0 - ($1009))|0;
    (_parse_tiff_ifd($1010)|0);
    $1011 = HEAP32[880>>2]|0;
    (_fclose(($1011|0))|0);
   }
   $1012 = $sfp;
   HEAP32[880>>2] = $1012;
   $1013 = $buf;
   _free($1013);
  }
 }
 $i = 0;
 while(1) {
  $1014 = $i;
  $1015 = HEAP32[132304>>2]|0;
  $1016 = ($1014>>>0)<($1015>>>0);
  if (!($1016)) {
   break;
  }
  $c = 0;
  while(1) {
   $1017 = $c;
   $1018 = HEAP32[132304>>2]|0;
   $1019 = ($1017>>>0)<($1018>>>0);
   if (!($1019)) {
    break;
   }
   $1020 = $i;
   $1021 = (($ab) + ($1020<<3)|0);
   $1022 = +HEAPF64[$1021>>3];
   $1023 = $c;
   $1024 = $i;
   $1025 = (($cc) + ($1024<<5)|0);
   $1026 = (($1025) + ($1023<<3)|0);
   $1027 = +HEAPF64[$1026>>3];
   $1028 = $1027 * $1022;
   HEAPF64[$1026>>3] = $1028;
   $1029 = $c;
   $1030 = (($1029) + 1)|0;
   $c = $1030;
  }
  $1031 = $i;
  $1032 = (($1031) + 1)|0;
  $i = $1032;
 }
 $1033 = $use_cm;
 $1034 = ($1033|0)!=(0);
 if ($1034) {
  $c = 0;
  while(1) {
   $1035 = $c;
   $1036 = HEAP32[132304>>2]|0;
   $1037 = ($1035>>>0)<($1036>>>0);
   if (!($1037)) {
    break;
   }
   $i = 0;
   while(1) {
    $1038 = $i;
    $1039 = ($1038|0)<(3);
    if (!($1039)) {
     break;
    }
    $j = 0;
    $1040 = $i;
    $1041 = $c;
    $1042 = (($cam_xyz) + (($1041*24)|0)|0);
    $1043 = (($1042) + ($1040<<3)|0);
    HEAPF64[$1043>>3] = 0.0;
    while(1) {
     $1044 = $j;
     $1045 = HEAP32[132304>>2]|0;
     $1046 = ($1044>>>0)<($1045>>>0);
     if (!($1046)) {
      break;
     }
     $1047 = $j;
     $1048 = $c;
     $1049 = (($cc) + ($1048<<5)|0);
     $1050 = (($1049) + ($1047<<3)|0);
     $1051 = +HEAPF64[$1050>>3];
     $1052 = $i;
     $1053 = $j;
     $1054 = (($cm) + (($1053*24)|0)|0);
     $1055 = (($1054) + ($1052<<3)|0);
     $1056 = +HEAPF64[$1055>>3];
     $1057 = $1051 * $1056;
     $1058 = $i;
     $1059 = (($xyz) + ($1058<<3)|0);
     $1060 = +HEAPF64[$1059>>3];
     $1061 = $1057 * $1060;
     $1062 = $i;
     $1063 = $c;
     $1064 = (($cam_xyz) + (($1063*24)|0)|0);
     $1065 = (($1064) + ($1062<<3)|0);
     $1066 = +HEAPF64[$1065>>3];
     $1067 = $1066 + $1061;
     HEAPF64[$1065>>3] = $1067;
     $1068 = $j;
     $1069 = (($1068) + 1)|0;
     $j = $1069;
    }
    $1070 = $i;
    $1071 = (($1070) + 1)|0;
    $i = $1071;
   }
   $1072 = $c;
   $1073 = (($1072) + 1)|0;
   $c = $1073;
  }
  _cam_xyz_coeff(455992,$cam_xyz);
 }
 $1074 = +HEAPF64[$asn>>3];
 $1075 = $1074 != 0.0;
 if ($1075) {
  HEAPF32[((134016 + 12|0))>>2] = 0.0;
  $c = 0;
  while(1) {
   $1076 = $c;
   $1077 = HEAP32[132304>>2]|0;
   $1078 = ($1076>>>0)<($1077>>>0);
   if (!($1078)) {
    break;
   }
   $1079 = $c;
   $1080 = (($asn) + ($1079<<3)|0);
   $1081 = +HEAPF64[$1080>>3];
   $1082 = 1.0 / $1081;
   $1083 = $1082;
   $1084 = $c;
   $1085 = (134016 + ($1084<<2)|0);
   HEAPF32[$1085>>2] = $1083;
   $1086 = $c;
   $1087 = (($1086) + 1)|0;
   $c = $1087;
  }
 }
 $1088 = $use_cm;
 $1089 = ($1088|0)!=(0);
 if (!($1089)) {
  $c = 0;
  while(1) {
   $1090 = $c;
   $1091 = HEAP32[132304>>2]|0;
   $1092 = ($1090>>>0)<($1091>>>0);
   if (!($1092)) {
    break;
   }
   $1093 = $c;
   $1094 = $c;
   $1095 = (($cc) + ($1094<<5)|0);
   $1096 = (($1095) + ($1093<<3)|0);
   $1097 = +HEAPF64[$1096>>3];
   $1098 = $c;
   $1099 = (132080 + ($1098<<2)|0);
   $1100 = +HEAPF32[$1099>>2];
   $1101 = $1100;
   $1102 = $1101 / $1097;
   $1103 = $1102;
   HEAPF32[$1099>>2] = $1103;
   $1104 = $c;
   $1105 = (($1104) + 1)|0;
   $c = $1105;
  }
 }
 $0 = 0;
 $1106 = $0;
 STACKTOP = sp;return ($1106|0);
}
function _get_timestamp($reversed) {
 $reversed = $reversed|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $str = 0, $t = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $t = sp + 24|0;
 $str = sp + 76|0;
 $0 = $reversed;
 $1 = (($str) + 19|0);
 HEAP8[$1>>0] = 0;
 $2 = $0;
 $3 = ($2|0)!=(0);
 if ($3) {
  $i = 19;
  while(1) {
   $4 = $i;
   $5 = (($4) + -1)|0;
   $i = $5;
   $6 = ($4|0)!=(0);
   if (!($6)) {
    break;
   }
   $7 = HEAP32[880>>2]|0;
   $8 = (_getc_unlocked(($7|0))|0);
   $9 = $8&255;
   $10 = $i;
   $11 = (($str) + ($10)|0);
   HEAP8[$11>>0] = $9;
  }
 } else {
  $12 = HEAP32[880>>2]|0;
  (_fread(($str|0),19,1,($12|0))|0);
 }
 dest=$t+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $13 = (($t) + 20|0);
 $14 = (($t) + 16|0);
 $15 = (($t) + 12|0);
 $16 = (($t) + 8|0);
 $17 = (($t) + 4|0);
 HEAP32[$vararg_buffer>>2] = $13;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $14;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $15;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $16;
 $vararg_ptr4 = (($vararg_buffer) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $17;
 $vararg_ptr5 = (($vararg_buffer) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $t;
 $18 = (_sscanf($str,456040,$vararg_buffer)|0);
 $19 = ($18|0)!=(6);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = (($t) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) - 1900)|0;
 HEAP32[$20>>2] = $22;
 $23 = (($t) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) - 1)|0;
 HEAP32[$23>>2] = $25;
 $26 = (($t) + 32|0);
 HEAP32[$26>>2] = -1;
 $27 = (_mktime(($t|0))|0);
 $28 = ($27|0)>(0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = (_mktime(($t|0))|0);
 HEAP32[190704>>2] = $29;
 STACKTOP = sp;return;
}
function _parse_exif($base) {
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $entries = 0, $expo = 0.0, $kodak = 0, $len = 0, $save = 0, $tag = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tag = sp + 24|0;
 $type = sp + 20|0;
 $len = sp + 12|0;
 $save = sp + 8|0;
 $0 = $base;
 $1 = (_strncmp(134168,456064,7)|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  $6 = 0;
 } else {
  $3 = HEAP32[456072>>2]|0;
  $4 = ($3>>>0)<(3);
  $6 = $4;
 }
 $5 = $6&1;
 $kodak = $5;
 $7 = (_get2()|0);
 $8 = $7&65535;
 $entries = $8;
 while(1) {
  $9 = $entries;
  $10 = (($9) + -1)|0;
  $entries = $10;
  $11 = ($9|0)!=(0);
  if (!($11)) {
   break;
  }
  $12 = $0;
  _tiff_get($12,$tag,$type,$len,$save);
  $13 = HEAP32[$tag>>2]|0;
  do {
   switch ($13|0) {
   case 41730:  {
    $54 = (_get4()|0);
    $55 = ($54|0)==(131074);
    if ($55) {
     $c = 0;
     HEAP32[456088>>2] = 0;
     while(1) {
      $56 = $c;
      $57 = ($56>>>0)<(8);
      if (!($57)) {
       break;
      }
      $58 = HEAP32[880>>2]|0;
      $59 = (_getc_unlocked(($58|0))|0);
      $60 = Math_imul($59, 16843009)|0;
      $61 = $c;
      $62 = $60 << $61;
      $63 = HEAP32[456088>>2]|0;
      $64 = $63 | $62;
      HEAP32[456088>>2] = $64;
      $65 = $c;
      $66 = (($65) + 2)|0;
      $c = $66;
     }
    }
    break;
   }
   case 37378:  {
    $37 = HEAP32[$type>>2]|0;
    $38 = (+_getreal($37));
    $39 = $38 / 2.0;
    $40 = (+Math_pow(2.0,(+$39)));
    $41 = $40;
    HEAPF32[455320>>2] = $41;
    break;
   }
   case 37377:  {
    $26 = HEAP32[$type>>2]|0;
    $27 = (+_getreal($26));
    $28 = -$27;
    $expo = $28;
    $29 = $28 < 128.0;
    if ($29) {
     $30 = $expo;
     $31 = (+Math_pow(2.0,(+$30)));
     $32 = $31;
     HEAPF32[455328>>2] = $32;
     $33 = HEAP32[456072>>2]|0;
     $34 = (($33) - 1)|0;
     $35 = (455488 + (($34*48)|0)|0);
     $36 = (($35) + 44|0);
     HEAPF32[$36>>2] = $32;
    }
    break;
   }
   case 33437:  {
    $21 = HEAP32[$type>>2]|0;
    $22 = (+_getreal($21));
    $23 = $22;
    HEAPF32[455320>>2] = $23;
    break;
   }
   case 36868: case 36867:  {
    _get_timestamp(0);
    break;
   }
   case 37500:  {
    $45 = $0;
    _parse_makernote($45,0);
    break;
   }
   case 33434:  {
    $14 = HEAP32[$type>>2]|0;
    $15 = (+_getreal($14));
    $16 = $15;
    HEAPF32[455328>>2] = $16;
    $17 = HEAP32[456072>>2]|0;
    $18 = (($17) - 1)|0;
    $19 = (455488 + (($18*48)|0)|0);
    $20 = (($19) + 44|0);
    HEAPF32[$20>>2] = $16;
    break;
   }
   case 37386:  {
    $42 = HEAP32[$type>>2]|0;
    $43 = (+_getreal($42));
    $44 = $43;
    HEAPF32[456080>>2] = $44;
    break;
   }
   case 40962:  {
    $46 = $kodak;
    $47 = ($46|0)!=(0);
    if ($47) {
     $48 = (_get4()|0);
     $49 = $48&65535;
     HEAP16[132368>>1] = $49;
    }
    break;
   }
   case 40963:  {
    $50 = $kodak;
    $51 = ($50|0)!=(0);
    if ($51) {
     $52 = (_get4()|0);
     $53 = $52&65535;
     HEAP16[133096>>1] = $53;
    }
    break;
   }
   case 34855:  {
    $24 = (_get2()|0);
    $25 = (+($24&65535));
    HEAPF32[455312>>2] = $25;
    break;
   }
   default: {
   }
   }
  } while(0);
  $67 = HEAP32[880>>2]|0;
  $68 = HEAP32[$save>>2]|0;
  (_fseek(($67|0),($68|0),0)|0);
 }
 STACKTOP = sp;return;
}
function _parse_gps($base) {
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $c = 0, $entries = 0, $len = 0, $save = 0, $tag = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tag = sp + 4|0;
 $type = sp + 8|0;
 $len = sp + 12|0;
 $save = sp + 16|0;
 $0 = $base;
 $1 = (_get2()|0);
 $2 = $1&65535;
 $entries = $2;
 while(1) {
  $3 = $entries;
  $4 = (($3) + -1)|0;
  $entries = $4;
  $5 = ($3|0)!=(0);
  if (!($5)) {
   break;
  }
  $6 = $0;
  _tiff_get($6,$tag,$type,$len,$save);
  $7 = HEAP32[$tag>>2]|0;
  switch ($7|0) {
  case 29: case 18:  {
   $33 = HEAP32[$tag>>2]|0;
   $34 = (($33>>>0) / 3)&-1;
   $35 = (((456096 + 56|0)) + ($34<<2)|0);
   $36 = HEAP32[$len>>2]|0;
   $37 = ($36>>>0)<(12);
   if ($37) {
    $38 = HEAP32[$len>>2]|0;
    $40 = $38;
   } else {
    $40 = 12;
   }
   $39 = HEAP32[880>>2]|0;
   (_fgets(($35|0),($40|0),($39|0))|0);
   break;
  }
  case 5: case 3: case 1:  {
   $8 = HEAP32[880>>2]|0;
   $9 = (_getc(($8|0))|0);
   $10 = HEAP32[$tag>>2]|0;
   $11 = (($10>>>0) / 2)&-1;
   $12 = (29 + ($11))|0;
   $13 = (456096 + ($12<<2)|0);
   HEAP32[$13>>2] = $9;
   break;
  }
  case 7: case 4: case 2:  {
   $c = 0;
   while(1) {
    $14 = $c;
    $15 = ($14>>>0)<(6);
    if (!($15)) {
     break;
    }
    $16 = (_get4()|0);
    $17 = HEAP32[$tag>>2]|0;
    $18 = (($17>>>0) / 3)&-1;
    $19 = ($18*6)|0;
    $20 = $c;
    $21 = (($19) + ($20))|0;
    $22 = (456096 + ($21<<2)|0);
    HEAP32[$22>>2] = $16;
    $23 = $c;
    $24 = (($23) + 1)|0;
    $c = $24;
   }
   break;
  }
  case 6:  {
   $c = 0;
   while(1) {
    $25 = $c;
    $26 = ($25>>>0)<(2);
    if (!($26)) {
     break;
    }
    $27 = (_get4()|0);
    $28 = $c;
    $29 = (18 + ($28))|0;
    $30 = (456096 + ($29<<2)|0);
    HEAP32[$30>>2] = $27;
    $31 = $c;
    $32 = (($31) + 1)|0;
    $c = $32;
   }
   break;
  }
  default: {
  }
  }
  $41 = HEAP32[880>>2]|0;
  $42 = HEAP32[$save>>2]|0;
  (_fseek(($41|0),($42|0),0)|0);
 }
 STACKTOP = sp;return;
}
function _romm_coeff($romm_cam) {
 $romm_cam = $romm_cam|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $romm_cam;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1|0)<(3);
  if (!($2)) {
   break;
  }
  $j = 0;
  while(1) {
   $3 = $j;
   $4 = ($3|0)<(3);
   if (!($4)) {
    break;
   }
   $k = 0;
   $5 = $j;
   $6 = $i;
   $7 = (455992 + ($6<<4)|0);
   $8 = (($7) + ($5<<2)|0);
   HEAPF32[$8>>2] = 0.0;
   while(1) {
    $9 = $k;
    $10 = ($9|0)<(3);
    if (!($10)) {
     break;
    }
    $11 = $k;
    $12 = $i;
    $13 = (456224 + (($12*12)|0)|0);
    $14 = (($13) + ($11<<2)|0);
    $15 = +HEAPF32[$14>>2];
    $16 = $j;
    $17 = $k;
    $18 = $0;
    $19 = (($18) + (($17*12)|0)|0);
    $20 = (($19) + ($16<<2)|0);
    $21 = +HEAPF32[$20>>2];
    $22 = $15 * $21;
    $23 = $j;
    $24 = $i;
    $25 = (455992 + ($24<<4)|0);
    $26 = (($25) + ($23<<2)|0);
    $27 = +HEAPF32[$26>>2];
    $28 = $27 + $22;
    HEAPF32[$26>>2] = $28;
    $29 = $k;
    $30 = (($29) + 1)|0;
    $k = $30;
   }
   $31 = $j;
   $32 = (($31) + 1)|0;
   $j = $32;
  }
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 STACKTOP = sp;return;
}
function _parse_mos($offset) {
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $data = 0, $from = 0;
 var $frot = 0, $i = 0, $neut = 0, $planes = 0, $romm_cam = 0, $skip = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer16 = sp;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer10 = sp + 8|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer1 = sp + 32|0;
 $vararg_buffer = sp + 40|0;
 $data = sp + 136|0;
 $i = sp + 96|0;
 $neut = sp + 104|0;
 $planes = sp + 120|0;
 $romm_cam = sp + 52|0;
 $0 = $offset;
 HEAP32[$planes>>2] = 0;
 $frot = 0;
 $1 = HEAP32[880>>2]|0;
 $2 = $0;
 (_fseek(($1|0),($2|0),0)|0);
 while(1) {
  $3 = (_get4()|0);
  $4 = ($3|0)!=(1347114067);
  if ($4) {
   break;
  }
  (_get4()|0);
  $5 = HEAP32[880>>2]|0;
  (_fread(($data|0),1,40,($5|0))|0);
  $6 = (_get4()|0);
  $skip = $6;
  $7 = HEAP32[880>>2]|0;
  $8 = (_ftell(($7|0))|0);
  $from = $8;
  $9 = (_strcmp($data,456816)|0);
  $10 = ($9|0)!=(0);
  if (!($10)) {
   $11 = $from;
   HEAP32[454608>>2] = $11;
   $12 = $skip;
   HEAP32[134312>>2] = $12;
  }
  $13 = (_strcmp($data,456840)|0);
  $14 = ($13|0)!=(0);
  if (!($14)) {
   $15 = $from;
   HEAP32[456864>>2] = $15;
   $16 = $skip;
   HEAP32[456872>>2] = $16;
  }
  $17 = (_strcmp($data,456880)|0);
  $18 = ($17|0)!=(0);
  if (!($18)) {
   $19 = HEAP32[880>>2]|0;
   HEAP32[$vararg_buffer>>2] = $i;
   (_fscanf(($19|0),(456904|0),($vararg_buffer|0))|0);
   $20 = HEAP32[$i>>2]|0;
   $21 = ($20>>>0)<(39);
   if ($21) {
    $22 = HEAP32[$i>>2]|0;
    $23 = (456264 + ($22<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    (_strcpy((134232|0),($24|0))|0);
   }
  }
  $25 = (_strcmp($data,456912)|0);
  $26 = ($25|0)!=(0);
  if (!($26)) {
   HEAP32[$i>>2] = 0;
   while(1) {
    $27 = HEAP32[$i>>2]|0;
    $28 = ($27|0)<(9);
    if (!($28)) {
     break;
    }
    $29 = (_get4()|0);
    $30 = (+_int_to_float($29));
    $31 = HEAP32[$i>>2]|0;
    $32 = (($romm_cam) + ($31<<2)|0);
    HEAPF32[$32>>2] = $30;
    $33 = HEAP32[$i>>2]|0;
    $34 = (($33) + 1)|0;
    HEAP32[$i>>2] = $34;
   }
   _romm_coeff($romm_cam);
  }
  $35 = (_strcmp($data,456944)|0);
  $36 = ($35|0)!=(0);
  if (!($36)) {
   HEAP32[$i>>2] = 0;
   while(1) {
    $37 = HEAP32[$i>>2]|0;
    $38 = ($37|0)<(9);
    if (!($38)) {
     break;
    }
    $39 = HEAP32[880>>2]|0;
    $40 = HEAP32[$i>>2]|0;
    $41 = (($romm_cam) + ($40<<2)|0);
    HEAP32[$vararg_buffer1>>2] = $41;
    (_fscanf(($39|0),(456968|0),($vararg_buffer1|0))|0);
    $42 = HEAP32[$i>>2]|0;
    $43 = (($42) + 1)|0;
    HEAP32[$i>>2] = $43;
   }
   _romm_coeff($romm_cam);
  }
  $44 = (_strcmp($data,456976)|0);
  $45 = ($44|0)!=(0);
  if (!($45)) {
   $46 = HEAP32[880>>2]|0;
   HEAP32[$vararg_buffer4>>2] = $planes;
   (_fscanf(($46|0),(456904|0),($vararg_buffer4|0))|0);
  }
  $47 = (_strcmp($data,457008)|0);
  $48 = ($47|0)!=(0);
  if (!($48)) {
   $49 = HEAP32[880>>2]|0;
   HEAP32[$vararg_buffer7>>2] = 455352;
   (_fscanf(($49|0),(456904|0),($vararg_buffer7|0))|0);
  }
  $50 = (_strcmp($data,457040)|0);
  $51 = ($50|0)!=(0);
  if (!($51)) {
   $c = 0;
   while(1) {
    $52 = $c;
    $53 = ($52|0)<(4);
    if (!($53)) {
     break;
    }
    $54 = HEAP32[880>>2]|0;
    HEAP32[$vararg_buffer10>>2] = $i;
    (_fscanf(($54|0),(456904|0),($vararg_buffer10|0))|0);
    $55 = HEAP32[$i>>2]|0;
    $56 = ($55|0)==(1);
    if ($56) {
     $57 = $c;
     $58 = $c;
     $59 = $58 >> 1;
     $60 = $57 ^ $59;
     $frot = $60;
    }
    $61 = $c;
    $62 = (($61) + 1)|0;
    $c = $62;
   }
  }
  $63 = (_strcmp($data,457064)|0);
  $64 = ($63|0)!=(0);
  if (!($64)) {
   $65 = HEAP32[880>>2]|0;
   HEAP32[$vararg_buffer13>>2] = $i;
   (_fscanf(($65|0),(456904|0),($vararg_buffer13|0))|0);
   $66 = HEAP32[$i>>2]|0;
   $67 = HEAP32[455352>>2]|0;
   $68 = (($66) - ($67))|0;
   HEAP32[455352>>2] = $68;
  }
  $69 = (_strcmp($data,457088)|0);
  $70 = ($69|0)!=(0);
  if (!($70)) {
   $71 = +HEAPF32[134016>>2];
   $72 = $71 != 0.0;
   if (!($72)) {
    $c = 0;
    while(1) {
     $73 = $c;
     $74 = ($73|0)<(4);
     if (!($74)) {
      break;
     }
     $75 = HEAP32[880>>2]|0;
     $76 = $c;
     $77 = (($neut) + ($76<<2)|0);
     HEAP32[$vararg_buffer16>>2] = $77;
     (_fscanf(($75|0),(456904|0),($vararg_buffer16|0))|0);
     $78 = $c;
     $79 = (($78) + 1)|0;
     $c = $79;
    }
    $c = 0;
    while(1) {
     $80 = $c;
     $81 = ($80|0)<(3);
     if (!($81)) {
      break;
     }
     $82 = HEAP32[$neut>>2]|0;
     $83 = (+($82|0));
     $84 = $c;
     $85 = (($84) + 1)|0;
     $86 = (($neut) + ($85<<2)|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (+($87|0));
     $89 = $83 / $88;
     $90 = $c;
     $91 = (134016 + ($90<<2)|0);
     HEAPF32[$91>>2] = $89;
     $92 = $c;
     $93 = (($92) + 1)|0;
     $c = $93;
    }
   }
  }
  $94 = (_strcmp($data,457112)|0);
  $95 = ($94|0)!=(0);
  if (!($95)) {
   $96 = (_get4()|0);
   HEAP32[133128>>2] = $96;
  }
  $97 = $from;
  _parse_mos($97);
  $98 = HEAP32[880>>2]|0;
  $99 = $skip;
  $100 = $from;
  $101 = (($99) + ($100))|0;
  (_fseek(($98|0),($101|0),0)|0);
 }
 $102 = HEAP32[$planes>>2]|0;
 $103 = ($102|0)!=(0);
 if (!($103)) {
  STACKTOP = sp;return;
 }
 $104 = HEAP32[$planes>>2]|0;
 $105 = ($104|0)==(1);
 $106 = $105&1;
 $107 = Math_imul($106, 16843009)|0;
 $108 = HEAP32[455352>>2]|0;
 $109 = (($108>>>0) / 90)&-1;
 $110 = $frot;
 $111 = (($109) + ($110))|0;
 $112 = $111 & 3;
 $113 = (457128 + ($112)|0);
 $114 = HEAP8[$113>>0]|0;
 $115 = $114&255;
 $116 = Math_imul($107, $115)|0;
 HEAP32[600>>2] = $116;
 STACKTOP = sp;return;
}
function _linear_table($len) {
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $len;
 $1 = $0;
 $2 = ($1>>>0)>(4096);
 if ($2) {
  $0 = 4096;
 }
 $3 = $0;
 _read_shorts(968,$3);
 $4 = $0;
 $i = $4;
 while(1) {
  $5 = $i;
  $6 = ($5|0)<(4096);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = (($7) - 1)|0;
  $9 = (968 + ($8<<1)|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $i;
  $12 = (968 + ($11<<1)|0);
  HEAP16[$12>>1] = $10;
  $13 = $i;
  $14 = (($13) + 1)|0;
  $i = $14;
 }
 $15 = HEAP16[((968 + 8190|0))>>1]|0;
 $16 = $15&65535;
 HEAP32[132400>>2] = $16;
 STACKTOP = sp;return;
}
function _parse_kodak_ifd($base) {
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0;
 var $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $entries = 0;
 var $i = 0, $len = 0, $mul = 0, $num = 0.0, $save = 0, $tag = 0, $type = 0, $wbi = 0, $wbtemp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tag = sp + 44|0;
 $type = sp + 40|0;
 $len = sp + 36|0;
 $save = sp + 32|0;
 $mul = sp;
 $0 = $base;
 $wbi = -2;
 $wbtemp = 6500;
 ;HEAP32[$mul+0>>2]=HEAP32[457136+0>>2]|0;HEAP32[$mul+4>>2]=HEAP32[457136+4>>2]|0;HEAP32[$mul+8>>2]=HEAP32[457136+8>>2]|0;
 $1 = (_get2()|0);
 $2 = $1&65535;
 $entries = $2;
 $3 = $entries;
 $4 = ($3>>>0)>(1024);
 if ($4) {
  STACKTOP = sp;return;
 }
 while(1) {
  $5 = $entries;
  $6 = (($5) + -1)|0;
  $entries = $6;
  $7 = ($5|0)!=(0);
  if (!($7)) {
   break;
  }
  $8 = $0;
  _tiff_get($8,$tag,$type,$len,$save);
  $9 = HEAP32[$tag>>2]|0;
  $10 = ($9|0)==(1020);
  if ($10) {
   $11 = HEAP32[$type>>2]|0;
   $12 = (_getint($11)|0);
   $wbi = $12;
  }
  $13 = HEAP32[$tag>>2]|0;
  $14 = ($13|0)==(1021);
  if ($14) {
   $15 = HEAP32[$len>>2]|0;
   $16 = ($15|0)==(72);
   if ($16) {
    $17 = HEAP32[880>>2]|0;
    (_fseek(($17|0),40,1)|0);
    $c = 0;
    while(1) {
     $18 = $c;
     $19 = ($18|0)<(3);
     if (!($19)) {
      break;
     }
     $20 = (_get2()|0);
     $21 = $20&65535;
     $22 = (+($21|0));
     $23 = 2048.0 / $22;
     $24 = $23;
     $25 = $c;
     $26 = (134016 + ($25<<2)|0);
     HEAPF32[$26>>2] = $24;
     $27 = $c;
     $28 = (($27) + 1)|0;
     $c = $28;
    }
    $wbi = -2;
   }
  }
  $29 = HEAP32[$tag>>2]|0;
  $30 = ($29|0)==(2118);
  if ($30) {
   $31 = HEAP32[$type>>2]|0;
   $32 = (_getint($31)|0);
   $wbtemp = $32;
  }
  $33 = HEAP32[$tag>>2]|0;
  $34 = $wbi;
  $35 = (2120 + ($34))|0;
  $36 = ($33|0)==($35|0);
  if ($36) {
   $37 = $wbi;
   $38 = ($37|0)>=(0);
   if ($38) {
    $c = 0;
    while(1) {
     $39 = $c;
     $40 = ($39|0)<(3);
     if (!($40)) {
      break;
     }
     $41 = HEAP32[$type>>2]|0;
     $42 = (+_getreal($41));
     $43 = 2048.0 / $42;
     $44 = $43;
     $45 = $c;
     $46 = (134016 + ($45<<2)|0);
     HEAPF32[$46>>2] = $44;
     $47 = $c;
     $48 = (($47) + 1)|0;
     $c = $48;
    }
   }
  }
  $49 = HEAP32[$tag>>2]|0;
  $50 = $wbi;
  $51 = (2130 + ($50))|0;
  $52 = ($49|0)==($51|0);
  if ($52) {
   $c = 0;
   while(1) {
    $53 = $c;
    $54 = ($53|0)<(3);
    if (!($54)) {
     break;
    }
    $55 = HEAP32[$type>>2]|0;
    $56 = (+_getreal($55));
    $57 = $56;
    $58 = $c;
    $59 = (($mul) + ($58<<2)|0);
    HEAPF32[$59>>2] = $57;
    $60 = $c;
    $61 = (($60) + 1)|0;
    $c = $61;
   }
  }
  $62 = HEAP32[$tag>>2]|0;
  $63 = $wbi;
  $64 = (2140 + ($63))|0;
  $65 = ($62|0)==($64|0);
  if ($65) {
   $66 = $wbi;
   $67 = ($66|0)>=(0);
   if ($67) {
    $c = 0;
    while(1) {
     $68 = $c;
     $69 = ($68|0)<(3);
     if (!($69)) {
      break;
     }
     $i = 0;
     $num = 0.0;
     while(1) {
      $70 = $i;
      $71 = ($70|0)<(4);
      if (!($71)) {
       break;
      }
      $72 = HEAP32[$type>>2]|0;
      $73 = (+_getreal($72));
      $74 = $wbtemp;
      $75 = (+($74|0));
      $76 = $75 / 100.0;
      $77 = $i;
      $78 = (+($77|0));
      $79 = (+Math_pow((+$76),(+$78)));
      $80 = $73 * $79;
      $81 = $num;
      $82 = $81;
      $83 = $82 + $80;
      $84 = $83;
      $num = $84;
      $85 = $i;
      $86 = (($85) + 1)|0;
      $i = $86;
     }
     $87 = $num;
     $88 = $c;
     $89 = (($mul) + ($88<<2)|0);
     $90 = +HEAPF32[$89>>2];
     $91 = $87 * $90;
     $92 = 2048.0 / $91;
     $93 = $c;
     $94 = (134016 + ($93<<2)|0);
     HEAPF32[$94>>2] = $92;
     $95 = $c;
     $96 = (($95) + 1)|0;
     $c = $96;
    }
   }
  }
  $97 = HEAP32[$tag>>2]|0;
  $98 = ($97|0)==(2317);
  if ($98) {
   $99 = HEAP32[$len>>2]|0;
   _linear_table($99);
  }
  $100 = HEAP32[$tag>>2]|0;
  $101 = ($100|0)==(6020);
  if ($101) {
   $102 = HEAP32[$type>>2]|0;
   $103 = (_getint($102)|0);
   $104 = (+($103>>>0));
   HEAPF32[455312>>2] = $104;
  }
  $105 = HEAP32[$tag>>2]|0;
  $106 = ($105|0)==(64013);
  if ($106) {
   $107 = HEAP32[880>>2]|0;
   $108 = (_getc_unlocked(($107|0))|0);
   $wbi = $108;
  }
  $109 = $wbi;
  $110 = ($109>>>0)<(7);
  if ($110) {
   $111 = HEAP32[$tag>>2]|0;
   $112 = $wbi;
   $113 = (457152 + ($112<<2)|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = ($111|0)==($114|0);
   if ($115) {
    $c = 0;
    while(1) {
     $116 = $c;
     $117 = ($116|0)<(3);
     if (!($117)) {
      break;
     }
     $118 = (_get4()|0);
     $119 = (+($118>>>0));
     $120 = $c;
     $121 = (134016 + ($120<<2)|0);
     HEAPF32[$121>>2] = $119;
     $122 = $c;
     $123 = (($122) + 1)|0;
     $c = $123;
    }
   }
  }
  $124 = HEAP32[$tag>>2]|0;
  $125 = ($124|0)==(64019);
  if ($125) {
   $126 = HEAP32[$type>>2]|0;
   $127 = (_getint($126)|0);
   $128 = $127&65535;
   HEAP16[132120>>1] = $128;
  }
  $129 = HEAP32[$tag>>2]|0;
  $130 = ($129|0)==(64020);
  if ($130) {
   $131 = HEAP32[$type>>2]|0;
   $132 = (_getint($131)|0);
   $133 = (($132) + 1)|0;
   $134 = $133 & -2;
   $135 = $134&65535;
   HEAP16[132112>>1] = $135;
  }
  $136 = HEAP32[880>>2]|0;
  $137 = HEAP32[$save>>2]|0;
  (_fseek(($136|0),($137|0),0)|0);
 }
 STACKTOP = sp;return;
}
function _parse_tiff($base) {
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $doff = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $base;
 $2 = HEAP32[880>>2]|0;
 $3 = $1;
 (_fseek(($2|0),($3|0),0)|0);
 $4 = (_get2()|0);
 HEAP16[944>>1] = $4;
 $5 = HEAP16[944>>1]|0;
 $6 = $5 << 16 >> 16;
 $7 = ($6|0)!=(18761);
 if ($7) {
  $8 = HEAP16[944>>1]|0;
  $9 = $8 << 16 >> 16;
  $10 = ($9|0)!=(19789);
  if ($10) {
   $0 = 0;
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
 }
 (_get2()|0);
 while(1) {
  $11 = (_get4()|0);
  $doff = $11;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   break;
  }
  $13 = HEAP32[880>>2]|0;
  $14 = $doff;
  $15 = $1;
  $16 = (($14) + ($15))|0;
  (_fseek(($13|0),($16|0),0)|0);
  $17 = $1;
  $18 = (_parse_tiff_ifd($17)|0);
  $19 = ($18|0)!=(0);
  if ($19) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
 }
 $0 = 1;
 $20 = $0;
 STACKTOP = sp;return ($20|0);
}
function _parse_minolta($base) {
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $c = 0, $high = 0, $i = 0, $len = 0, $offset = 0, $save = 0, $sorder = 0, $tag = 0;
 var $wide = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $base;
 $high = 0;
 $wide = 0;
 $1 = HEAP16[944>>1]|0;
 $sorder = $1;
 $2 = HEAP32[880>>2]|0;
 $3 = $0;
 (_fseek(($2|0),($3|0),0)|0);
 $4 = HEAP32[880>>2]|0;
 $5 = (_getc_unlocked(($4|0))|0);
 $6 = ($5|0)!=(0);
 if (!($6)) {
  $7 = HEAP32[880>>2]|0;
  $8 = (_getc_unlocked(($7|0))|0);
  $9 = (($8) - 77)|0;
  $10 = ($9|0)!=(0);
  if (!($10)) {
   $11 = HEAP32[880>>2]|0;
   $12 = (_getc_unlocked(($11|0))|0);
   $13 = (($12) - 82)|0;
   $14 = ($13|0)!=(0);
   if (!($14)) {
    $15 = HEAP32[880>>2]|0;
    $16 = (_getc_unlocked(($15|0))|0);
    $17 = ($16*257)|0;
    $18 = $17&65535;
    HEAP16[944>>1] = $18;
    $19 = $0;
    $20 = (_get4()|0);
    $21 = (($19) + ($20))|0;
    $22 = (($21) + 8)|0;
    $offset = $22;
    while(1) {
     $23 = HEAP32[880>>2]|0;
     $24 = (_ftell(($23|0))|0);
     $save = $24;
     $25 = $offset;
     $26 = ($24|0)<($25|0);
     if (!($26)) {
      break;
     }
     $i = 0;
     $tag = 0;
     while(1) {
      $27 = $i;
      $28 = ($27|0)<(4);
      if (!($28)) {
       break;
      }
      $29 = $tag;
      $30 = $29 << 8;
      $31 = HEAP32[880>>2]|0;
      $32 = (_getc_unlocked(($31|0))|0);
      $33 = $30 | $32;
      $tag = $33;
      $34 = $i;
      $35 = (($34) + 1)|0;
      $i = $35;
     }
     $36 = (_get4()|0);
     $len = $36;
     $37 = $tag;
     if ((($37|0) == 5526615)) {
      $59 = HEAP32[880>>2]|0;
      $60 = (_ftell(($59|0))|0);
      (_parse_tiff($60)|0);
      $61 = $offset;
      HEAP32[133816>>2] = $61;
     } else if ((($37|0) == 5263940)) {
      $38 = HEAP32[880>>2]|0;
      (_fseek(($38|0),8,1)|0);
      $39 = (_get2()|0);
      $40 = $39&65535;
      $high = $40;
      $41 = (_get2()|0);
      $42 = $41&65535;
      $wide = $42;
     } else if ((($37|0) == 5718599)) {
      (_get4()|0);
      $43 = (_strcmp(134232,458080)|0);
      $44 = ($43|0)!=(0);
      $45 = $44 ? 0 : 3;
      $i = $45;
      $c = 0;
      while(1) {
       $46 = $c;
       $47 = ($46|0)<(4);
       if (!($47)) {
        break;
       }
       $48 = (_get2()|0);
       $49 = (+($48&65535));
       $50 = $c;
       $51 = $c;
       $52 = $51 >> 1;
       $53 = $50 ^ $52;
       $54 = $i;
       $55 = $53 ^ $54;
       $56 = (134016 + ($55<<2)|0);
       HEAPF32[$56>>2] = $49;
       $57 = $c;
       $58 = (($57) + 1)|0;
       $c = $58;
      }
     }
     $62 = HEAP32[880>>2]|0;
     $63 = $save;
     $64 = $len;
     $65 = (($63) + ($64))|0;
     $66 = (($65) + 8)|0;
     (_fseek(($62|0),($66|0),0)|0);
    }
    $67 = $high;
    $68 = $67&65535;
    HEAP16[133096>>1] = $68;
    $69 = $wide;
    $70 = $69&65535;
    HEAP16[132368>>1] = $70;
    $71 = $sorder;
    HEAP16[944>>1] = $71;
    STACKTOP = sp;return;
   }
  }
 }
 STACKTOP = sp;return;
}
function _apply_tiff() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $jh = 0, $max_samp = 0, $ns = 0, $os = 0, $raw = 0, $thm = 0, $ties = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $jh = sp + 24|0;
 $max_samp = 0;
 $ties = 0;
 $raw = -1;
 $thm = -1;
 HEAP32[134384>>2] = 16;
 $0 = HEAP32[454608>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  $2 = HEAP32[880>>2]|0;
  $3 = HEAP32[454608>>2]|0;
  (_fseek(($2|0),($3|0),0)|0);
  $4 = (_ljpeg_start($jh,1)|0);
  $5 = ($4|0)!=(0);
  if ($5) {
   $6 = (($jh) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   HEAP32[134384>>2] = $7;
   $8 = (($jh) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9&65535;
   HEAP16[134296>>1] = $10;
   $11 = (($jh) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12&65535;
   HEAP16[134304>>1] = $13;
  }
 }
 $14 = HEAP32[456072>>2]|0;
 $i = $14;
 while(1) {
  $15 = $i;
  $16 = (($15) + -1)|0;
  $i = $16;
  $17 = ($15|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $i;
  $19 = (455488 + (($18*48)|0)|0);
  $20 = (($19) + 44|0);
  $21 = +HEAPF32[$20>>2];
  $22 = $21 != 0.0;
  if ($22) {
   $23 = $i;
   $24 = (455488 + (($23*48)|0)|0);
   $25 = (($24) + 44|0);
   $26 = +HEAPF32[$25>>2];
   HEAPF32[455328>>2] = $26;
  }
  $27 = +HEAPF32[455328>>2];
  $28 = $i;
  $29 = (455488 + (($28*48)|0)|0);
  $30 = (($29) + 44|0);
  HEAPF32[$30>>2] = $27;
 }
 $i = 0;
 while(1) {
  $31 = $i;
  $32 = HEAP32[456072>>2]|0;
  $33 = ($31>>>0)<($32>>>0);
  if (!($33)) {
   break;
  }
  $34 = $max_samp;
  $35 = $i;
  $36 = (455488 + (($35*48)|0)|0);
  $37 = (($36) + 28|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($34|0)<($38|0);
  if ($39) {
   $40 = $i;
   $41 = (455488 + (($40*48)|0)|0);
   $42 = (($41) + 28|0);
   $43 = HEAP32[$42>>2]|0;
   $max_samp = $43;
  }
  $44 = $max_samp;
  $45 = ($44|0)>(3);
  if ($45) {
   $max_samp = 3;
  }
  $46 = HEAP16[132368>>1]|0;
  $47 = $46&65535;
  $48 = HEAP16[133096>>1]|0;
  $49 = $48&65535;
  $50 = Math_imul($47, $49)|0;
  $os = $50;
  $51 = $i;
  $52 = (455488 + (($51*48)|0)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $i;
  $55 = (455488 + (($54*48)|0)|0);
  $56 = (($55) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = Math_imul($53, $57)|0;
  $ns = $58;
  $59 = $i;
  $60 = (455488 + (($59*48)|0)|0);
  $61 = (($60) + 12|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($62|0)!=(6);
  if ($63) {
   label = 18;
  } else {
   $64 = $i;
   $65 = (455488 + (($64*48)|0)|0);
   $66 = (($65) + 28|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($67|0)!=(3);
   if ($68) {
    label = 18;
   }
  }
  do {
   if ((label|0) == 18) {
    label = 0;
    $69 = $i;
    $70 = (455488 + (($69*48)|0)|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $i;
    $73 = (455488 + (($72*48)|0)|0);
    $74 = (($73) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $71 | $75;
    $77 = ($76|0)<(65536);
    if ($77) {
     $78 = $ns;
     $79 = ($78|0)!=(0);
     if ($79) {
      $80 = $ns;
      $81 = $os;
      $82 = ($80|0)>($81|0);
      if ($82) {
       $ties = 1;
      } else {
       $83 = $ns;
       $84 = $os;
       $85 = ($83|0)==($84|0);
       if (!($85)) {
        break;
       }
       $86 = HEAP32[8>>2]|0;
       $87 = $ties;
       $88 = (($87) + 1)|0;
       $ties = $88;
       $89 = ($86|0)==($87|0);
       if (!($89)) {
        break;
       }
      }
      $90 = $i;
      $91 = (455488 + (($90*48)|0)|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = $92&65535;
      HEAP16[132368>>1] = $93;
      $94 = $i;
      $95 = (455488 + (($94*48)|0)|0);
      $96 = (($95) + 4|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = $97&65535;
      HEAP16[133096>>1] = $98;
      $99 = $i;
      $100 = (455488 + (($99*48)|0)|0);
      $101 = (($100) + 8|0);
      $102 = HEAP32[$101>>2]|0;
      HEAP32[133800>>2] = $102;
      $103 = $i;
      $104 = (455488 + (($103*48)|0)|0);
      $105 = (($104) + 12|0);
      $106 = HEAP32[$105>>2]|0;
      HEAP32[133088>>2] = $106;
      $107 = $i;
      $108 = (455488 + (($107*48)|0)|0);
      $109 = (($108) + 20|0);
      $110 = HEAP32[$109>>2]|0;
      HEAP32[133816>>2] = $110;
      $111 = $i;
      $112 = (455488 + (($111*48)|0)|0);
      $113 = (($112) + 24|0);
      $114 = HEAP32[$113>>2]|0;
      HEAP32[458032>>2] = $114;
      $115 = $i;
      $116 = (455488 + (($115*48)|0)|0);
      $117 = (($116) + 28|0);
      $118 = HEAP32[$117>>2]|0;
      HEAP32[133240>>2] = $118;
      $119 = $i;
      $120 = (455488 + (($119*48)|0)|0);
      $121 = (($120) + 36|0);
      $122 = HEAP32[$121>>2]|0;
      HEAP32[133768>>2] = $122;
      $123 = $i;
      $124 = (455488 + (($123*48)|0)|0);
      $125 = (($124) + 40|0);
      $126 = HEAP32[$125>>2]|0;
      HEAP32[133752>>2] = $126;
      $127 = $i;
      $128 = (455488 + (($127*48)|0)|0);
      $129 = (($128) + 44|0);
      $130 = +HEAPF32[$129>>2];
      HEAPF32[455328>>2] = $130;
      $131 = $i;
      $raw = $131;
     }
    }
   }
  } while(0);
  $132 = $i;
  $133 = (($132) + 1)|0;
  $i = $133;
 }
 $134 = HEAP32[133760>>2]|0;
 $135 = ($134|0)==(1);
 if ($135) {
  $136 = $ties;
  $137 = ($136|0)!=(0);
  if ($137) {
   $138 = $ties;
   HEAP32[133760>>2] = $138;
  }
 }
 $139 = HEAP32[133768>>2]|0;
 $140 = ($139|0)!=(0);
 if (!($140)) {
  HEAP32[133768>>2] = 2147483647;
 }
 $141 = HEAP32[133752>>2]|0;
 $142 = ($141|0)!=(0);
 if (!($142)) {
  HEAP32[133752>>2] = 2147483647;
 }
 $143 = HEAP32[456072>>2]|0;
 $i = $143;
 while(1) {
  $144 = $i;
  $145 = (($144) + -1)|0;
  $i = $145;
  $146 = ($144|0)!=(0);
  if (!($146)) {
   break;
  }
  $147 = $i;
  $148 = (455488 + (($147*48)|0)|0);
  $149 = (($148) + 24|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = ($150|0)!=(0);
  if ($151) {
   $152 = $i;
   $153 = (455488 + (($152*48)|0)|0);
   $154 = (($153) + 24|0);
   $155 = HEAP32[$154>>2]|0;
   HEAP32[458032>>2] = $155;
  }
 }
 $156 = $raw;
 $157 = ($156|0)>=(0);
 if ($157) {
  $158 = HEAP32[190504>>2]|0;
  $159 = ($158|0)!=(0|0);
  if (!($159)) {
   $160 = HEAP32[133088>>2]|0;
   do {
    if ((($160|0) == 65000)) {
     $285 = $raw;
     $286 = (455488 + (($285*48)|0)|0);
     $287 = (($286) + 16|0);
     $288 = HEAP32[$287>>2]|0;
     if ((($288|0) == 32803)) {
      HEAP32[190504>>2] = 27;
     } else if ((($288|0) == 2)) {
      HEAP32[190504>>2] = 25;
      HEAP32[600>>2] = 0;
     } else if ((($288|0) == 6)) {
      HEAP32[190504>>2] = 26;
      HEAP32[600>>2] = 0;
     }
     label = 89;
    } else if ((($160|0) == 65535)) {
     HEAP32[190504>>2] = 24;
    } else if ((($160|0) == 34892) | (($160|0) == 32867)) {
     label = 89;
    } else if ((($160|0) == 34713)) {
     $235 = HEAP16[132368>>1]|0;
     $236 = $235&65535;
     $237 = (($236) + 9)|0;
     $238 = (($237|0) / 10)&-1;
     $239 = $238<<4;
     $240 = HEAP16[133096>>1]|0;
     $241 = $240&65535;
     $242 = Math_imul($239, $241)|0;
     $243 = $raw;
     $244 = (455488 + (($243*48)|0)|0);
     $245 = (($244) + 32|0);
     $246 = HEAP32[$245>>2]|0;
     $247 = ($242|0)==($246|0);
     if ($247) {
      HEAP32[190504>>2] = 10;
      HEAP32[133128>>2] = 1;
     } else {
      $248 = HEAP16[132368>>1]|0;
      $249 = $248&65535;
      $250 = HEAP16[133096>>1]|0;
      $251 = $250&65535;
      $252 = Math_imul($249, $251)|0;
      $253 = ($252*3)|0;
      $254 = $raw;
      $255 = (455488 + (($254*48)|0)|0);
      $256 = (($255) + 32|0);
      $257 = HEAP32[$256>>2]|0;
      $258 = $257<<1;
      $259 = ($253|0)==($258|0);
      if ($259) {
       HEAP32[190504>>2] = 10;
       $260 = HEAP8[134232>>0]|0;
       $261 = $260 << 24 >> 24;
       $262 = ($261|0)==(78);
       if ($262) {
        HEAP32[133128>>2] = 80;
       }
      } else {
       $263 = HEAP16[132368>>1]|0;
       $264 = $263&65535;
       $265 = HEAP16[133096>>1]|0;
       $266 = $265&65535;
       $267 = Math_imul($264, $266)|0;
       $268 = ($267*3)|0;
       $269 = $raw;
       $270 = (455488 + (($269*48)|0)|0);
       $271 = (($270) + 32|0);
       $272 = HEAP32[$271>>2]|0;
       $273 = ($268|0)==($272|0);
       if ($273) {
        HEAP32[190504>>2] = 22;
        _gamma_curve(0.41666666666666669,12.92,1,4095);
        _memset((134720|0),0,8204)|0;
        HEAP32[600>>2] = 0;
       } else {
        $274 = HEAP16[132368>>1]|0;
        $275 = $274&65535;
        $276 = HEAP16[133096>>1]|0;
        $277 = $276&65535;
        $278 = Math_imul($275, $277)|0;
        $279 = $278<<1;
        $280 = $raw;
        $281 = (455488 + (($280*48)|0)|0);
        $282 = (($281) + 32|0);
        $283 = HEAP32[$282>>2]|0;
        $284 = ($279|0)==($283|0);
        if ($284) {
         HEAP32[190504>>2] = 19;
         HEAP32[133128>>2] = 4;
         HEAP16[944>>1] = 19789;
        } else {
         HEAP32[190504>>2] = 23;
        }
       }
      }
     }
    } else if ((($160|0) == 262)) {
     HEAP32[190504>>2] = 9;
    } else if ((($160|0) == 99) | (($160|0) == 7) | (($160|0) == 6)) {
     HEAP32[190504>>2] = 5;
    } else if ((($160|0) == 32769)) {
     label = 47;
    } else if ((($160|0) == 32773) | (($160|0) == 32770)) {
     label = 48;
    } else if ((($160|0) == 32767)) {
     $161 = $raw;
     $162 = (455488 + (($161*48)|0)|0);
     $163 = (($162) + 32|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = HEAP16[132368>>1]|0;
     $166 = $165&65535;
     $167 = HEAP16[133096>>1]|0;
     $168 = $167&65535;
     $169 = Math_imul($166, $168)|0;
     $170 = ($164|0)==($169|0);
     if ($170) {
      HEAP32[133800>>2] = 12;
      HEAP32[190504>>2] = 20;
      break;
     }
     $171 = $raw;
     $172 = (455488 + (($171*48)|0)|0);
     $173 = (($172) + 32|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = $174<<3;
     $176 = HEAP16[132368>>1]|0;
     $177 = $176&65535;
     $178 = HEAP16[133096>>1]|0;
     $179 = $178&65535;
     $180 = Math_imul($177, $179)|0;
     $181 = HEAP32[133800>>2]|0;
     $182 = Math_imul($180, $181)|0;
     $183 = ($175|0)!=($182|0);
     if ($183) {
      $184 = HEAP16[133096>>1]|0;
      $185 = $184&65535;
      $186 = (($185) + 8)|0;
      $187 = $186&65535;
      HEAP16[133096>>1] = $187;
      HEAP32[190504>>2] = 14;
      break;
     } else {
      HEAP32[133128>>2] = 79;
      label = 47;
      break;
     }
    } else if ((($160|0) == 1) | (($160|0) == 0)) {
     $190 = (_strncmp(134168,455192,7)|0);
     $191 = ($190|0)!=(0);
     if (!($191)) {
      $192 = $raw;
      $193 = (455488 + (($192*48)|0)|0);
      $194 = (($193) + 32|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = $195<<1;
      $197 = HEAP16[132368>>1]|0;
      $198 = $197&65535;
      $199 = HEAP16[133096>>1]|0;
      $200 = $199&65535;
      $201 = Math_imul($198, $200)|0;
      $202 = ($201*3)|0;
      $203 = ($196|0)==($202|0);
      if ($203) {
       HEAP32[133128>>2] = 24;
      }
     }
     $204 = $raw;
     $205 = (455488 + (($204*48)|0)|0);
     $206 = (($205) + 32|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207*5)|0;
     $209 = HEAP16[132368>>1]|0;
     $210 = $209&65535;
     $211 = HEAP16[133096>>1]|0;
     $212 = $211&65535;
     $213 = Math_imul($210, $212)|0;
     $214 = $213<<3;
     $215 = ($208|0)==($214|0);
     if ($215) {
      HEAP32[133128>>2] = 81;
      HEAP32[133800>>2] = 12;
     }
     label = 55;
    } else {
     HEAP32[133760>>2] = 0;
    }
   } while(0);
   if ((label|0) == 47) {
    $188 = HEAP32[133128>>2]|0;
    $189 = (($188) + 1)|0;
    HEAP32[133128>>2] = $189;
    label = 48;
   }
   else if ((label|0) == 89) {
   }
   if ((label|0) == 48) {
    label = 55;
   }
   if ((label|0) == 55) {
    $216 = HEAP32[133800>>2]|0;
    if ((($216|0) == 16)) {
     label = 61;
    } else if ((($216|0) == 8)) {
     HEAP32[190504>>2] = 8;
    } else if ((($216|0) == 14)) {
     HEAP32[133128>>2] = 0;
     label = 61;
    } else if ((($216|0) == 12)) {
     $217 = $raw;
     $218 = (455488 + (($217*48)|0)|0);
     $219 = (($218) + 16|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = ($220|0)==(2);
     if ($221) {
      HEAP32[133128>>2] = 6;
     }
     HEAP32[190504>>2] = 10;
    }
    if ((label|0) == 61) {
     HEAP32[190504>>2] = 19;
     $222 = (_strncmp(134168,455192,7)|0);
     $223 = ($222|0)!=(0);
     if (!($223)) {
      $224 = $raw;
      $225 = (455488 + (($224*48)|0)|0);
      $226 = (($225) + 32|0);
      $227 = HEAP32[$226>>2]|0;
      $228 = ($227*7)|0;
      $229 = HEAP16[132368>>1]|0;
      $230 = $229&65535;
      $231 = HEAP16[133096>>1]|0;
      $232 = $231&65535;
      $233 = Math_imul($230, $232)|0;
      $234 = ($228|0)>($233|0);
      if ($234) {
       HEAP32[190504>>2] = 21;
      }
     }
    }
   }
  }
 }
 $289 = HEAP32[133104>>2]|0;
 $290 = ($289|0)!=(0);
 if (!($290)) {
  $291 = HEAP32[133240>>2]|0;
  $292 = ($291|0)==(3);
  if ($292) {
   $293 = $raw;
   $294 = (455488 + (($293*48)|0)|0);
   $295 = (($294) + 32|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = ($296|0)!=(0);
   if ($297) {
    $298 = HEAP32[133800>>2]|0;
    $299 = ($298|0)!=(14);
    if ($299) {
     $300 = HEAP32[133088>>2]|0;
     $301 = $300 & -16;
     $302 = ($301|0)!=(32768);
     if ($302) {
      label = 100;
     } else {
      label = 97;
     }
    } else {
     label = 97;
    }
   } else {
    label = 97;
   }
  } else {
   label = 97;
  }
  if ((label|0) == 97) {
   $303 = HEAP32[133800>>2]|0;
   $304 = ($303|0)==(8);
   if ($304) {
    $305 = (_my_strcasestr(134168,458040)|0);
    $306 = ($305|0)!=(0|0);
    if (!($306)) {
     $307 = (_strstr(133144,458048)|0);
     $308 = ($307|0)!=(0|0);
     if (!($308)) {
      label = 100;
     }
    }
   }
  }
  if ((label|0) == 100) {
   HEAP32[133760>>2] = 0;
  }
 }
 $i = 0;
 while(1) {
  $309 = $i;
  $310 = HEAP32[456072>>2]|0;
  $311 = ($309>>>0)<($310>>>0);
  if (!($311)) {
   break;
  }
  $312 = $i;
  $313 = $raw;
  $314 = ($312|0)!=($313|0);
  if ($314) {
   $315 = $i;
   $316 = (455488 + (($315*48)|0)|0);
   $317 = (($316) + 28|0);
   $318 = HEAP32[$317>>2]|0;
   $319 = $max_samp;
   $320 = ($318|0)==($319|0);
   if ($320) {
    $321 = $i;
    $322 = (455488 + (($321*48)|0)|0);
    $323 = HEAP32[$322>>2]|0;
    $324 = $i;
    $325 = (455488 + (($324*48)|0)|0);
    $326 = (($325) + 4|0);
    $327 = HEAP32[$326>>2]|0;
    $328 = Math_imul($323, $327)|0;
    $329 = $i;
    $330 = (455488 + (($329*48)|0)|0);
    $331 = (($330) + 8|0);
    $332 = HEAP32[$331>>2]|0;
    $333 = $i;
    $334 = (455488 + (($333*48)|0)|0);
    $335 = (($334) + 8|0);
    $336 = HEAP32[$335>>2]|0;
    $337 = Math_imul($332, $336)|0;
    $338 = (($337) + 1)|0;
    $339 = (($328|0) / ($338|0))&-1;
    $340 = HEAP16[134296>>1]|0;
    $341 = $340&65535;
    $342 = HEAP16[134304>>1]|0;
    $343 = $342&65535;
    $344 = Math_imul($341, $343)|0;
    $345 = HEAP32[134384>>2]|0;
    $346 = HEAP32[134384>>2]|0;
    $347 = Math_imul($345, $346)|0;
    $348 = (($347) + 1)|0;
    $349 = (($344>>>0) / ($348>>>0))&-1;
    $350 = ($339>>>0)>($349>>>0);
    if ($350) {
     $351 = $i;
     $352 = (455488 + (($351*48)|0)|0);
     $353 = (($352) + 12|0);
     $354 = HEAP32[$353>>2]|0;
     $355 = ($354|0)!=(34892);
     if ($355) {
      $356 = $i;
      $357 = (455488 + (($356*48)|0)|0);
      $358 = HEAP32[$357>>2]|0;
      $359 = $358&65535;
      HEAP16[134296>>1] = $359;
      $360 = $i;
      $361 = (455488 + (($360*48)|0)|0);
      $362 = (($361) + 4|0);
      $363 = HEAP32[$362>>2]|0;
      $364 = $363&65535;
      HEAP16[134304>>1] = $364;
      $365 = $i;
      $366 = (455488 + (($365*48)|0)|0);
      $367 = (($366) + 20|0);
      $368 = HEAP32[$367>>2]|0;
      HEAP32[454608>>2] = $368;
      $369 = $i;
      $370 = (455488 + (($369*48)|0)|0);
      $371 = (($370) + 32|0);
      $372 = HEAP32[$371>>2]|0;
      HEAP32[134312>>2] = $372;
      $373 = $i;
      $374 = (455488 + (($373*48)|0)|0);
      $375 = (($374) + 8|0);
      $376 = HEAP32[$375>>2]|0;
      HEAP32[134384>>2] = $376;
      $377 = $i;
      $thm = $377;
     }
    }
   }
  }
  $378 = $i;
  $379 = (($378) + 1)|0;
  $i = $379;
 }
 $380 = $thm;
 $381 = ($380|0)>=(0);
 if (!($381)) {
  STACKTOP = sp;return;
 }
 $382 = $thm;
 $383 = (455488 + (($382*48)|0)|0);
 $384 = (($383) + 28|0);
 $385 = HEAP32[$384>>2]|0;
 $386 = $385 << 5;
 $387 = HEAP32[134384>>2]|0;
 $388 = $387 | $386;
 HEAP32[134384>>2] = $388;
 $389 = $thm;
 $390 = (455488 + (($389*48)|0)|0);
 $391 = (($390) + 12|0);
 $392 = HEAP32[$391>>2]|0;
 if ((($392|0) == 65000)) {
  $400 = $thm;
  $401 = (455488 + (($400*48)|0)|0);
  $402 = (($401) + 16|0);
  $403 = HEAP32[$402>>2]|0;
  $404 = ($403|0)==(6);
  $405 = $404 ? 26 : 25;
  HEAP32[458072>>2] = $405;
 } else if ((($392|0) == 0)) {
  HEAP32[458064>>2] = 28;
 } else if ((($392|0) == 1)) {
  $393 = $thm;
  $394 = (455488 + (($393*48)|0)|0);
  $395 = (($394) + 8|0);
  $396 = HEAP32[$395>>2]|0;
  $397 = ($396|0)<=(8);
  if ($397) {
   HEAP32[458064>>2] = 29;
  } else {
   $398 = (_strcmp(134168,457936)|0);
   $399 = ($398|0)!=(0);
   if ($399) {
    HEAP32[458072>>2] = 31;
   } else {
    HEAP32[458064>>2] = 30;
   }
  }
 }
 STACKTOP = sp;return;
}
function _parse_external_jpeg() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $ext = 0, $file = 0, $jext = 0, $jfile = 0, $jname = 0, $save = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[880>>2]|0;
 $save = $0;
 $1 = HEAP32[696>>2]|0;
 $2 = (_strrchr($1,46)|0);
 $ext = $2;
 $3 = HEAP32[696>>2]|0;
 $4 = (_strrchr($3,47)|0);
 $file = $4;
 $5 = $file;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $7 = HEAP32[696>>2]|0;
  $8 = (_strrchr($7,92)|0);
  $file = $8;
 }
 $9 = $file;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $11 = HEAP32[696>>2]|0;
  $12 = (($11) + -1|0);
  $file = $12;
 }
 $13 = $file;
 $14 = (($13) + 1|0);
 $file = $14;
 $15 = $ext;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $ext;
  $18 = (_strlen(($17|0))|0);
  $19 = ($18|0)!=(4);
  if (!($19)) {
   $20 = $ext;
   $21 = $file;
   $22 = $20;
   $23 = $21;
   $24 = (($22) - ($23))|0;
   $25 = ($24|0)!=(8);
   if (!($25)) {
    $26 = HEAP32[696>>2]|0;
    $27 = (_strlen(($26|0))|0);
    $28 = (($27) + 1)|0;
    $29 = (_malloc($28)|0);
    $jname = $29;
    $30 = $jname;
    _merror($30,458096);
    $31 = $jname;
    $32 = HEAP32[696>>2]|0;
    (_strcpy(($31|0),($32|0))|0);
    $33 = $file;
    $34 = HEAP32[696>>2]|0;
    $35 = $33;
    $36 = $34;
    $37 = (($35) - ($36))|0;
    $38 = $jname;
    $39 = (($38) + ($37)|0);
    $jfile = $39;
    $40 = $ext;
    $41 = HEAP32[696>>2]|0;
    $42 = $40;
    $43 = $41;
    $44 = (($42) - ($43))|0;
    $45 = $jname;
    $46 = (($45) + ($44)|0);
    $jext = $46;
    $47 = $ext;
    $48 = (_strcasecmp($47,458120)|0);
    $49 = ($48|0)!=(0);
    if ($49) {
     $50 = $jext;
     $51 = $ext;
     $52 = (($51) + 1|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = $53 << 24 >> 24;
     $55 = (_isupper($54)|0);
     $56 = ($55|0)!=(0);
     $57 = $56 ? 458128 : 458120;
     (_strcpy(($50|0),($57|0))|0);
     $58 = $file;
     $59 = HEAP8[$58>>0]|0;
     $60 = $59 << 24 >> 24;
     $61 = (_isdigit($60)|0);
     $62 = ($61|0)!=(0);
     if ($62) {
      $63 = $jfile;
      $64 = $file;
      $65 = (($64) + 4|0);
      ;HEAP8[$63+0>>0]=HEAP8[$65+0>>0]|0;HEAP8[$63+1>>0]=HEAP8[$65+1>>0]|0;HEAP8[$63+2>>0]=HEAP8[$65+2>>0]|0;HEAP8[$63+3>>0]=HEAP8[$65+3>>0]|0;
      $66 = $jfile;
      $67 = (($66) + 4|0);
      $68 = $file;
      ;HEAP8[$67+0>>0]=HEAP8[$68+0>>0]|0;HEAP8[$67+1>>0]=HEAP8[$68+1>>0]|0;HEAP8[$67+2>>0]=HEAP8[$68+2>>0]|0;HEAP8[$67+3>>0]=HEAP8[$68+3>>0]|0;
     }
    } else {
     while(1) {
      $69 = $jext;
      $70 = (($69) + -1|0);
      $jext = $70;
      $71 = HEAP8[$70>>0]|0;
      $72 = $71 << 24 >> 24;
      $73 = (_isdigit($72)|0);
      $74 = ($73|0)!=(0);
      if (!($74)) {
       break;
      }
      $75 = $jext;
      $76 = HEAP8[$75>>0]|0;
      $77 = $76 << 24 >> 24;
      $78 = ($77|0)!=(57);
      if ($78) {
       label = 16;
       break;
      }
      $82 = $jext;
      HEAP8[$82>>0] = 48;
     }
     if ((label|0) == 16) {
      $79 = $jext;
      $80 = HEAP8[$79>>0]|0;
      $81 = (($80) + 1)<<24>>24;
      HEAP8[$79>>0] = $81;
     }
    }
    $83 = $jname;
    $84 = HEAP32[696>>2]|0;
    $85 = (_strcmp($83,$84)|0);
    $86 = ($85|0)!=(0);
    if ($86) {
     $87 = $jname;
     $88 = (_fopen(($87|0),(190744|0))|0);
     HEAP32[880>>2] = $88;
     $89 = ($88|0)!=(0|0);
     if ($89) {
      $90 = HEAP32[168>>2]|0;
      $91 = ($90|0)!=(0);
      if ($91) {
       $92 = HEAP32[_stderr>>2]|0;
       $93 = $jname;
       HEAP32[$vararg_buffer>>2] = $93;
       (_fprintf(($92|0),(458136|0),($vararg_buffer|0))|0);
      }
      (_parse_tiff(12)|0);
      HEAP32[454608>>2] = 0;
      HEAP32[133760>>2] = 1;
      $94 = HEAP32[880>>2]|0;
      (_fclose(($94|0))|0);
     }
    }
    $95 = HEAP32[190704>>2]|0;
    $96 = ($95|0)!=(0);
    if (!($96)) {
     $97 = HEAP32[_stderr>>2]|0;
     $98 = $jname;
     HEAP32[$vararg_buffer1>>2] = $98;
     (_fprintf(($97|0),(458168|0),($vararg_buffer1|0))|0);
    }
    $99 = $jname;
    _free($99);
    $100 = $save;
    HEAP32[880>>2] = $100;
    STACKTOP = sp;return;
   }
  }
 }
 STACKTOP = sp;return;
}
function _ciff_block_1030() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bitbuf = 0, $bpp = 0, $col = 0, $i = 0, $row = 0, $vbits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vbits = 0;
 $bitbuf = 0;
 (_get2()|0);
 $0 = (_get4()|0);
 $1 = ($0|0)!=(524296);
 if (!($1)) {
  $2 = (_get4()|0);
  $3 = ($2|0)!=(0);
  if ($3) {
   $4 = (_get2()|0);
   $5 = $4&65535;
   $bpp = $5;
   $6 = $bpp;
   $7 = ($6|0)!=(10);
   if ($7) {
    $8 = $bpp;
    $9 = ($8|0)!=(12);
    if ($9) {
     STACKTOP = sp;return;
    }
   }
   $row = 0;
   $i = 0;
   while(1) {
    $10 = $row;
    $11 = ($10|0)<(8);
    if (!($11)) {
     break;
    }
    $col = 0;
    while(1) {
     $12 = $col;
     $13 = ($12|0)<(8);
     if (!($13)) {
      break;
     }
     $14 = $vbits;
     $15 = $bpp;
     $16 = ($14|0)<($15|0);
     if ($16) {
      $17 = $bitbuf;
      $18 = $17 << 16;
      $19 = (_get2()|0);
      $20 = $19&65535;
      $21 = $i;
      $22 = (($21) + 1)|0;
      $i = $22;
      $23 = $21 & 1;
      $24 = (458208 + ($23<<1)|0);
      $25 = HEAP16[$24>>1]|0;
      $26 = $25&65535;
      $27 = $20 ^ $26;
      $28 = $18 | $27;
      $bitbuf = $28;
      $29 = $vbits;
      $30 = (($29) + 16)|0;
      $vbits = $30;
     }
     $31 = $bitbuf;
     $32 = $bpp;
     $33 = $vbits;
     $34 = (($33) - ($32))|0;
     $vbits = $34;
     $35 = $31 >>> $34;
     $36 = $bpp;
     $37 = -1 << $36;
     $38 = $37 ^ -1;
     $39 = $35 & $38;
     $40 = $39&65535;
     $41 = $col;
     $42 = $row;
     $43 = (190920 + ($42<<4)|0);
     $44 = (($43) + ($41<<1)|0);
     HEAP16[$44>>1] = $40;
     $45 = $col;
     $46 = (($45) + 1)|0;
     $col = $46;
    }
    $47 = $row;
    $48 = (($47) + 1)|0;
    $row = $48;
   }
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function _parse_ciff($offset,$length,$depth) {
 $offset = $offset|0;
 $length = $length|0;
 $depth = $depth|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0;
 var $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0;
 var $98 = 0.0, $99 = 0.0, $c = 0, $key = 0, $len = 0, $nrecs = 0, $save = 0, $tboff = 0, $type = 0, $wbi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $key = sp + 40|0;
 $0 = $offset;
 $1 = $length;
 $2 = $depth;
 $wbi = -1;
 ;HEAP16[$key+0>>1]=HEAP16[458208+0>>1]|0;HEAP16[$key+2>>1]=HEAP16[458208+2>>1]|0;
 $3 = HEAP32[880>>2]|0;
 $4 = $0;
 $5 = $1;
 $6 = (($4) + ($5))|0;
 $7 = (($6) - 4)|0;
 (_fseek(($3|0),($7|0),0)|0);
 $8 = (_get4()|0);
 $9 = $0;
 $10 = (($8) + ($9))|0;
 $tboff = $10;
 $11 = HEAP32[880>>2]|0;
 $12 = $tboff;
 (_fseek(($11|0),($12|0),0)|0);
 $13 = (_get2()|0);
 $14 = $13&65535;
 $nrecs = $14;
 $15 = $nrecs;
 $16 = $2;
 $17 = $15 | $16;
 $18 = ($17|0)>(127);
 if ($18) {
  STACKTOP = sp;return;
 }
 while(1) {
  $19 = $nrecs;
  $20 = (($19) + -1)|0;
  $nrecs = $20;
  $21 = ($19|0)!=(0);
  if (!($21)) {
   break;
  }
  $22 = (_get2()|0);
  $23 = $22&65535;
  $type = $23;
  $24 = (_get4()|0);
  $len = $24;
  $25 = HEAP32[880>>2]|0;
  $26 = (_ftell(($25|0))|0);
  $27 = (($26) + 4)|0;
  $save = $27;
  $28 = HEAP32[880>>2]|0;
  $29 = $0;
  $30 = (_get4()|0);
  $31 = (($29) + ($30))|0;
  (_fseek(($28|0),($31|0),0)|0);
  $32 = $type;
  $33 = $32 >> 8;
  $34 = (($33) + 8)|0;
  $35 = $34 | 8;
  $36 = ($35|0)==(56);
  if ($36) {
   $37 = HEAP32[880>>2]|0;
   $38 = (_ftell(($37|0))|0);
   $39 = $len;
   $40 = $2;
   $41 = (($40) + 1)|0;
   _parse_ciff($38,$39,$41);
  }
  $42 = $type;
  $43 = ($42|0)==(2064);
  if ($43) {
   $44 = HEAP32[880>>2]|0;
   (_fread((455368|0),64,1,($44|0))|0);
  }
  $45 = $type;
  $46 = ($45|0)==(2058);
  if ($46) {
   $47 = HEAP32[880>>2]|0;
   (_fread((134168|0),64,1,($47|0))|0);
   $48 = HEAP32[880>>2]|0;
   $49 = (_strlen((134168|0))|0);
   $50 = (($49) - 63)|0;
   (_fseek(($48|0),($50|0),1)|0);
   $51 = HEAP32[880>>2]|0;
   (_fread((134232|0),64,1,($51|0))|0);
  }
  $52 = $type;
  $53 = ($52|0)==(6160);
  if ($53) {
   $54 = (_get4()|0);
   $55 = $54&65535;
   HEAP16[132120>>1] = $55;
   $56 = (_get4()|0);
   $57 = $56&65535;
   HEAP16[132112>>1] = $57;
   $58 = (_get4()|0);
   $59 = (+_int_to_float($58));
   $60 = $59;
   HEAPF64[458024>>3] = $60;
   $61 = (_get4()|0);
   HEAP32[455352>>2] = $61;
  }
  $62 = $type;
  $63 = ($62|0)==(6197);
  if ($63) {
   $64 = (_get4()|0);
   HEAP32[133088>>2] = $64;
  }
  $65 = $type;
  $66 = ($65|0)==(8199);
  if ($66) {
   $67 = HEAP32[880>>2]|0;
   $68 = (_ftell(($67|0))|0);
   HEAP32[454608>>2] = $68;
   $69 = $len;
   HEAP32[134312>>2] = $69;
  }
  $70 = $type;
  $71 = ($70|0)==(6168);
  if ($71) {
   (_get4()|0);
   $72 = (_get4()|0);
   $73 = (+_int_to_float($72));
   $74 = -$73;
   $75 = $74;
   $76 = (+Math_pow(2.0,(+$75)));
   $77 = $76;
   HEAPF32[455328>>2] = $77;
   $78 = (_get4()|0);
   $79 = (+_int_to_float($78));
   $80 = $79 / 2.0;
   $81 = $80;
   $82 = (+Math_pow(2.0,(+$81)));
   $83 = $82;
   HEAPF32[455320>>2] = $83;
  }
  $84 = $type;
  $85 = ($84|0)==(4138);
  if ($85) {
   (_get4()|0);
   $86 = (_get2()|0);
   $87 = $86&65535;
   $88 = (+($87|0));
   $89 = $88 / 32.0;
   $90 = $89 - 4.0;
   $91 = (+Math_pow(2.0,(+$90)));
   $92 = $91 * 50.0;
   $93 = $92;
   HEAPF32[455312>>2] = $93;
   (_get2()|0);
   $94 = (_get2()|0);
   $95 = $94 << 16 >> 16;
   $96 = (+($95|0));
   $97 = $96 / 64.0;
   $98 = (+Math_pow(2.0,(+$97)));
   $99 = $98;
   HEAPF32[455320>>2] = $99;
   $100 = (_get2()|0);
   $101 = $100 << 16 >> 16;
   $102 = (0 - ($101))|0;
   $103 = (+($102|0));
   $104 = $103 / 32.0;
   $105 = (+Math_pow(2.0,(+$104)));
   $106 = $105;
   HEAPF32[455328>>2] = $106;
   (_get2()|0);
   $107 = (_get2()|0);
   $108 = $107&65535;
   $wbi = $108;
   $109 = $wbi;
   $110 = ($109|0)>(17);
   if ($110) {
    $wbi = 0;
   }
   $111 = HEAP32[880>>2]|0;
   (_fseek(($111|0),32,1)|0);
   $112 = +HEAPF32[455328>>2];
   $113 = $112;
   $114 = $113 > 1.0E+6;
   if ($114) {
    $115 = (_get2()|0);
    $116 = $115&65535;
    $117 = (+($116|0));
    $118 = $117 / 10.0;
    $119 = $118;
    HEAPF32[455328>>2] = $119;
   }
  }
  $120 = $type;
  $121 = ($120|0)==(4140);
  if ($121) {
   $122 = (_get2()|0);
   $123 = $122&65535;
   $124 = ($123|0)>(512);
   if ($124) {
    $125 = HEAP32[880>>2]|0;
    (_fseek(($125|0),118,1)|0);
    $c = 0;
    while(1) {
     $126 = $c;
     $127 = ($126|0)<(4);
     if (!($127)) {
      break;
     }
     $128 = (_get2()|0);
     $129 = (+($128&65535));
     $130 = $c;
     $131 = $130 ^ 2;
     $132 = (134016 + ($131<<2)|0);
     HEAPF32[$132>>2] = $129;
     $133 = $c;
     $134 = (($133) + 1)|0;
     $c = $134;
    }
   } else {
    $135 = HEAP32[880>>2]|0;
    (_fseek(($135|0),98,1)|0);
    $c = 0;
    while(1) {
     $136 = $c;
     $137 = ($136|0)<(4);
     if (!($137)) {
      break;
     }
     $138 = (_get2()|0);
     $139 = (+($138&65535));
     $140 = $c;
     $141 = $c;
     $142 = $141 >> 1;
     $143 = $140 ^ $142;
     $144 = $143 ^ 1;
     $145 = (134016 + ($144<<2)|0);
     HEAPF32[$145>>2] = $139;
     $146 = $c;
     $147 = (($146) + 1)|0;
     $c = $147;
    }
   }
  }
  $148 = $type;
  $149 = ($148|0)==(50);
  if ($149) {
   $150 = $len;
   $151 = ($150|0)==(768);
   if ($151) {
    $152 = HEAP32[880>>2]|0;
    (_fseek(($152|0),72,1)|0);
    $c = 0;
    while(1) {
     $153 = $c;
     $154 = ($153|0)<(4);
     if (!($154)) {
      break;
     }
     $155 = (_get2()|0);
     $156 = $155&65535;
     $157 = (+($156|0));
     $158 = 1024.0 / $157;
     $159 = $158;
     $160 = $c;
     $161 = $c;
     $162 = $161 >> 1;
     $163 = $160 ^ $162;
     $164 = (134016 + ($163<<2)|0);
     HEAPF32[$164>>2] = $159;
     $165 = $c;
     $166 = (($165) + 1)|0;
     $c = $166;
    }
    $167 = $wbi;
    $168 = ($167|0)!=(0);
    if (!($168)) {
     HEAPF32[134016>>2] = -1.0;
    }
   } else {
    $169 = +HEAPF32[134016>>2];
    $170 = $169 != 0.0;
    if (!($170)) {
     $171 = (_get2()|0);
     $172 = $171&65535;
     $173 = HEAP16[$key>>1]|0;
     $174 = $173&65535;
     $175 = ($172|0)==($174|0);
     if ($175) {
      $176 = $wbi;
      $177 = (_strstr(134232,458216)|0);
      $178 = ($177|0)!=(0|0);
      $179 = $178 ? 458224 : 458248;
      $180 = (($179) + ($176)|0);
      $181 = HEAP8[$180>>0]|0;
      $182 = $181 << 24 >> 24;
      $183 = (($182) - 48)|0;
      $184 = (($183) + 2)|0;
      $c = $184;
     } else {
      $185 = $wbi;
      $186 = (458272 + ($185)|0);
      $187 = HEAP8[$186>>0]|0;
      $188 = $187 << 24 >> 24;
      $189 = (($188) - 48)|0;
      $c = $189;
      $190 = (($key) + 2|0);
      HEAP16[$190>>1] = 0;
      HEAP16[$key>>1] = 0;
     }
     $191 = HEAP32[880>>2]|0;
     $192 = $c;
     $193 = $192<<3;
     $194 = (78 + ($193))|0;
     (_fseek(($191|0),($194|0),1)|0);
     $c = 0;
     while(1) {
      $195 = $c;
      $196 = ($195|0)<(4);
      if (!($196)) {
       break;
      }
      $197 = (_get2()|0);
      $198 = $197&65535;
      $199 = $c;
      $200 = $199 & 1;
      $201 = (($key) + ($200<<1)|0);
      $202 = HEAP16[$201>>1]|0;
      $203 = $202&65535;
      $204 = $198 ^ $203;
      $205 = (+($204|0));
      $206 = $c;
      $207 = $c;
      $208 = $207 >> 1;
      $209 = $206 ^ $208;
      $210 = $209 ^ 1;
      $211 = (134016 + ($210<<2)|0);
      HEAPF32[$211>>2] = $205;
      $212 = $c;
      $213 = (($212) + 1)|0;
      $c = $213;
     }
     $214 = $wbi;
     $215 = ($214|0)!=(0);
     if (!($215)) {
      HEAPF32[134016>>2] = -1.0;
     }
    }
   }
  }
  $216 = $type;
  $217 = ($216|0)==(4265);
  if ($217) {
   $218 = $len;
   $219 = ($218|0)>(66);
   if ($219) {
    $220 = $wbi;
    $221 = (458296 + ($220)|0);
    $222 = HEAP8[$221>>0]|0;
    $223 = $222 << 24 >> 24;
    $224 = (($223) - 48)|0;
    $wbi = $224;
   }
   $225 = HEAP32[880>>2]|0;
   $226 = $wbi;
   $227 = $226<<3;
   $228 = (2 + ($227))|0;
   (_fseek(($225|0),($228|0),1)|0);
   $c = 0;
   while(1) {
    $229 = $c;
    $230 = ($229|0)<(4);
    if (!($230)) {
     break;
    }
    $231 = (_get2()|0);
    $232 = (+($231&65535));
    $233 = $c;
    $234 = $c;
    $235 = $234 >> 1;
    $236 = $233 ^ $235;
    $237 = (134016 + ($236<<2)|0);
    HEAPF32[$237>>2] = $232;
    $238 = $c;
    $239 = (($238) + 1)|0;
    $c = $239;
   }
  }
  $240 = $type;
  $241 = ($240|0)==(4144);
  if ($241) {
   $242 = $wbi;
   $243 = 98368 >> $242;
   $244 = $243 & 1;
   $245 = ($244|0)!=(0);
   if ($245) {
    _ciff_block_1030();
   }
  }
  $246 = $type;
  $247 = ($246|0)==(4145);
  if ($247) {
   (_get2()|0);
   $248 = (_get2()|0);
   HEAP16[132368>>1] = $248;
   $249 = (_get2()|0);
   HEAP16[133096>>1] = $249;
  }
  $250 = $type;
  $251 = ($250|0)==(20521);
  if ($251) {
   $252 = $len;
   $253 = $252 >> 16;
   $254 = (+($253|0));
   HEAPF32[456080>>2] = $254;
   $255 = $len;
   $256 = $255 & 65535;
   $257 = ($256|0)==(2);
   if ($257) {
    $258 = +HEAPF32[456080>>2];
    $259 = $258 / 32.0;
    HEAPF32[456080>>2] = $259;
   }
  }
  $260 = $type;
  $261 = ($260|0)==(22547);
  if ($261) {
   $262 = $len;
   $263 = (+_int_to_float($262));
   HEAPF32[132096>>2] = $263;
  }
  $264 = $type;
  $265 = ($264|0)==(22548);
  if ($265) {
   $266 = $len;
   $267 = (+_int_to_float($266));
   HEAPF32[132104>>2] = $267;
  }
  $268 = $type;
  $269 = ($268|0)==(22551);
  if ($269) {
   $270 = $len;
   HEAP32[455336>>2] = $270;
  }
  $271 = $type;
  $272 = ($271|0)==(22580);
  if ($272) {
   $273 = $len;
   HEAP32[133224>>2] = $273;
  }
  $274 = $type;
  $275 = ($274|0)==(22542);
  if ($275) {
   $276 = $len;
   HEAP32[190704>>2] = $276;
  }
  $277 = $type;
  $278 = ($277|0)==(6158);
  if ($278) {
   $279 = (_get4()|0);
   HEAP32[190704>>2] = $279;
  }
  $280 = HEAP32[880>>2]|0;
  $281 = $save;
  (_fseek(($280|0),($281|0),0)|0);
 }
 STACKTOP = sp;return;
}
function _parse_rollei() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $line = 0, $t = 0, $val = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $line = sp + 80|0;
 $t = sp + 32|0;
 $0 = HEAP32[880>>2]|0;
 (_fseek(($0|0),0,0)|0);
 dest=$t+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 while(1) {
  $1 = HEAP32[880>>2]|0;
  (_fgets(($line|0),128,($1|0))|0);
  $2 = (_strchr($line,61)|0);
  $val = $2;
  $3 = ($2|0)!=(0|0);
  if ($3) {
   $4 = $val;
   $5 = (($4) + 1|0);
   $val = $5;
   HEAP8[$4>>0] = 0;
  } else {
   $6 = (_strlen(($line|0))|0);
   $7 = (($line) + ($6)|0);
   $val = $7;
  }
  $8 = (_strcmp($line,458312)|0);
  $9 = ($8|0)!=(0);
  if (!($9)) {
   $10 = $val;
   $11 = (($t) + 12|0);
   $12 = (($t) + 16|0);
   $13 = (($t) + 20|0);
   HEAP32[$vararg_buffer>>2] = $11;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $12;
   $vararg_ptr2 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $13;
   (_sscanf($10,133208,$vararg_buffer)|0);
  }
  $14 = (_strcmp($line,458320)|0);
  $15 = ($14|0)!=(0);
  if (!($15)) {
   $16 = $val;
   $17 = (($t) + 8|0);
   $18 = (($t) + 4|0);
   HEAP32[$vararg_buffer3>>2] = $17;
   $vararg_ptr6 = (($vararg_buffer3) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $18;
   $vararg_ptr7 = (($vararg_buffer3) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $t;
   (_sscanf($16,458328,$vararg_buffer3)|0);
  }
  $19 = (_strcmp($line,458344)|0);
  $20 = ($19|0)!=(0);
  if (!($20)) {
   $21 = $val;
   $22 = (_atoi($21)|0);
   HEAP32[454608>>2] = $22;
  }
  $23 = (_strcmp($line,458352)|0);
  $24 = ($23|0)!=(0);
  if (!($24)) {
   $25 = $val;
   $26 = (_atoi($25)|0);
   $27 = $26&65535;
   HEAP16[132368>>1] = $27;
  }
  $28 = (_strcmp($line,458360)|0);
  $29 = ($28|0)!=(0);
  if (!($29)) {
   $30 = $val;
   $31 = (_atoi($30)|0);
   $32 = $31&65535;
   HEAP16[133096>>1] = $32;
  }
  $33 = (_strcmp($line,458368)|0);
  $34 = ($33|0)!=(0);
  if (!($34)) {
   $35 = $val;
   $36 = (_atoi($35)|0);
   $37 = $36&65535;
   HEAP16[134296>>1] = $37;
  }
  $38 = (_strcmp($line,458376)|0);
  $39 = ($38|0)!=(0);
  if (!($39)) {
   $40 = $val;
   $41 = (_atoi($40)|0);
   $42 = $41&65535;
   HEAP16[134304>>1] = $42;
  }
  $43 = (_strncmp($line,458384,4)|0);
  $44 = ($43|0)!=(0);
  if (!($44)) {
   break;
  }
 }
 $45 = HEAP32[454608>>2]|0;
 $46 = HEAP16[134296>>1]|0;
 $47 = $46&65535;
 $48 = HEAP16[134304>>1]|0;
 $49 = $48&65535;
 $50 = Math_imul($47, $49)|0;
 $51 = $50<<1;
 $52 = (($45) + ($51))|0;
 HEAP32[133816>>2] = $52;
 $53 = (($t) + 20|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) - 1900)|0;
 HEAP32[$53>>2] = $55;
 $56 = (($t) + 16|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) - 1)|0;
 HEAP32[$56>>2] = $58;
 $59 = (_mktime(($t|0))|0);
 $60 = ($59|0)>(0);
 if (!($60)) {
  (_strcpy((134168|0),(458392|0))|0);
  (_strcpy((134232|0),(458400|0))|0);
  HEAP32[458064>>2] = 32;
  STACKTOP = sp;return;
 }
 $61 = (_mktime(($t|0))|0);
 HEAP32[190704>>2] = $61;
 (_strcpy((134168|0),(458392|0))|0);
 (_strcpy((134232|0),(458400|0))|0);
 HEAP32[458064>>2] = 32;
 STACKTOP = sp;return;
}
function _parse_sinar_ia() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp = 0, $entries = 0, $off = 0, $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str = sp + 16|0;
 HEAP16[944>>1] = 18761;
 $0 = HEAP32[880>>2]|0;
 (_fseek(($0|0),4,0)|0);
 $1 = (_get4()|0);
 $entries = $1;
 $2 = HEAP32[880>>2]|0;
 $3 = (_get4()|0);
 (_fseek(($2|0),($3|0),0)|0);
 while(1) {
  $4 = $entries;
  $5 = (($4) + -1)|0;
  $entries = $5;
  $6 = ($4|0)!=(0);
  if (!($6)) {
   break;
  }
  $7 = (_get4()|0);
  $off = $7;
  (_get4()|0);
  $8 = HEAP32[880>>2]|0;
  (_fread(($str|0),8,1,($8|0))|0);
  $9 = (_strcmp($str,458416)|0);
  $10 = ($9|0)!=(0);
  if (!($10)) {
   $11 = $off;
   HEAP32[133808>>2] = $11;
  }
  $12 = (_strcmp($str,458424)|0);
  $13 = ($12|0)!=(0);
  if (!($13)) {
   $14 = $off;
   HEAP32[454608>>2] = $14;
  }
  $15 = (_strcmp($str,458432)|0);
  $16 = ($15|0)!=(0);
  if (!($16)) {
   $17 = $off;
   HEAP32[133816>>2] = $17;
  }
 }
 $18 = HEAP32[880>>2]|0;
 $19 = HEAP32[133808>>2]|0;
 $20 = (($19) + 20)|0;
 (_fseek(($18|0),($20|0),0)|0);
 $21 = HEAP32[880>>2]|0;
 (_fread((134168|0),64,1,($21|0))|0);
 HEAP8[((134168 + 63|0))>>0] = 0;
 $22 = (_strchr(134168,32)|0);
 $cp = $22;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $cp;
  $25 = (($24) + 1|0);
  (_strcpy((134232|0),($25|0))|0);
  $26 = $cp;
  HEAP8[$26>>0] = 0;
 }
 $27 = (_get2()|0);
 HEAP16[132368>>1] = $27;
 $28 = (_get2()|0);
 HEAP16[133096>>1] = $28;
 HEAP32[190504>>2] = 19;
 (_get4()|0);
 $29 = (_get2()|0);
 HEAP16[134296>>1] = $29;
 $30 = (_get2()|0);
 HEAP16[134304>>1] = $30;
 HEAP32[458064>>2] = 29;
 HEAP32[132400>>2] = 16383;
 STACKTOP = sp;return;
}
function _parse_phase_one($base) {
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $c = 0, $cp = 0, $data = 0, $entries = 0, $i = 0, $len = 0, $romm_cam = 0, $save = 0, $tag = 0, $type = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $romm_cam = sp;
 $0 = $base;
 dest=134528+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $1 = HEAP32[880>>2]|0;
 $2 = $0;
 (_fseek(($1|0),($2|0),0)|0);
 $3 = (_get4()|0);
 $4 = $3 & 65535;
 $5 = $4&65535;
 HEAP16[944>>1] = $5;
 $6 = (_get4()|0);
 $7 = $6 >>> 8;
 $8 = ($7|0)!=(5398903);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[880>>2]|0;
 $10 = (_get4()|0);
 $11 = $0;
 $12 = (($10) + ($11))|0;
 (_fseek(($9|0),($12|0),0)|0);
 $13 = (_get4()|0);
 $entries = $13;
 (_get4()|0);
 while(1) {
  $14 = $entries;
  $15 = (($14) + -1)|0;
  $entries = $15;
  $16 = ($14|0)!=(0);
  if (!($16)) {
   break;
  }
  $17 = (_get4()|0);
  $tag = $17;
  $18 = (_get4()|0);
  $type = $18;
  $19 = (_get4()|0);
  $len = $19;
  $20 = (_get4()|0);
  $data = $20;
  $21 = HEAP32[880>>2]|0;
  $22 = (_ftell(($21|0))|0);
  $save = $22;
  $23 = HEAP32[880>>2]|0;
  $24 = $0;
  $25 = $data;
  $26 = (($24) + ($25))|0;
  (_fseek(($23|0),($26|0),0)|0);
  $27 = $tag;
  do {
   switch ($27|0) {
   case 267:  {
    $56 = $data;
    $57 = $56&65535;
    HEAP16[616>>1] = $57;
    break;
   }
   case 270:  {
    $62 = $data;
    HEAP32[134528>>2] = $62;
    break;
   }
   case 274:  {
    $70 = $save;
    $71 = (($70) - 4)|0;
    HEAP32[((134528 + 4|0))>>2] = $71;
    break;
   }
   case 262:  {
    $i = 0;
    while(1) {
     $34 = $i;
     $35 = ($34>>>0)<(9);
     if (!($35)) {
      break;
     }
     $36 = (+_getreal(11));
     $37 = $36;
     $38 = $i;
     $39 = (($romm_cam) + ($38<<2)|0);
     HEAPF32[$39>>2] = $37;
     $40 = $i;
     $41 = (($40) + 1)|0;
     $i = $41;
    }
    _romm_coeff($romm_cam);
    break;
   }
   case 263:  {
    $c = 0;
    while(1) {
     $42 = $c;
     $43 = ($42>>>0)<(3);
     if (!($43)) {
      break;
     }
     $44 = (+_getreal(11));
     $45 = $44;
     $46 = $c;
     $47 = (134016 + ($46<<2)|0);
     HEAPF32[$47>>2] = $45;
     $48 = $c;
     $49 = (($48) + 1)|0;
     $c = $49;
    }
    break;
   }
   case 256:  {
    $28 = $data;
    $29 = $28 & 3;
    $30 = (458440 + ($29)|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31 << 24 >> 24;
    $33 = (($32) - 48)|0;
    HEAP32[455352>>2] = $33;
    break;
   }
   case 271:  {
    $63 = $data;
    $64 = $0;
    $65 = (($63) + ($64))|0;
    HEAP32[133816>>2] = $65;
    break;
   }
   case 272:  {
    $66 = $data;
    $67 = $0;
    $68 = (($66) + ($67))|0;
    HEAP32[133808>>2] = $68;
    $69 = $len;
    HEAP32[134488>>2] = $69;
    break;
   }
   case 528:  {
    $72 = $data;
    $73 = (+_int_to_float($72));
    HEAPF32[((134528 + 32|0))>>2] = $73;
    break;
   }
   case 269:  {
    $60 = $data;
    $61 = $60&65535;
    HEAP16[132112>>1] = $61;
    break;
   }
   case 538:  {
    $74 = $data;
    HEAP32[((134528 + 8|0))>>2] = $74;
    break;
   }
   case 268:  {
    $58 = $data;
    $59 = $58&65535;
    HEAP16[132120>>1] = $59;
    break;
   }
   case 264:  {
    $50 = $data;
    $51 = $50&65535;
    HEAP16[132368>>1] = $51;
    break;
   }
   case 265:  {
    $52 = $data;
    $53 = $52&65535;
    HEAP16[133096>>1] = $53;
    break;
   }
   case 266:  {
    $54 = $data;
    $55 = $54&65535;
    HEAP16[608>>1] = $55;
    break;
   }
   case 549:  {
    $84 = $data;
    $85 = $0;
    $86 = (($84) + ($85))|0;
    HEAP32[((134528 + 28|0))>>2] = $86;
    break;
   }
   case 540:  {
    $75 = $data;
    $76 = $0;
    $77 = (($75) + ($76))|0;
    HEAP32[134688>>2] = $77;
    break;
   }
   case 546:  {
    $79 = $data;
    HEAP32[((134528 + 16|0))>>2] = $79;
    break;
   }
   case 547:  {
    $80 = $data;
    $81 = $0;
    $82 = (($80) + ($81))|0;
    HEAP32[((134528 + 20|0))>>2] = $82;
    break;
   }
   case 769:  {
    HEAP8[((134232 + 63|0))>>0] = 0;
    $87 = HEAP32[880>>2]|0;
    (_fread((134232|0),1,63,($87|0))|0);
    $88 = (_strstr(134232,458448)|0);
    $cp = $88;
    $89 = ($88|0)!=(0|0);
    if ($89) {
     $90 = $cp;
     HEAP8[$90>>0] = 0;
    }
    break;
   }
   case 541:  {
    $78 = $data;
    HEAP32[((134528 + 12|0))>>2] = $78;
    break;
   }
   case 548:  {
    $83 = $data;
    HEAP32[((134528 + 24|0))>>2] = $83;
    break;
   }
   default: {
   }
   }
  } while(0);
  $91 = HEAP32[880>>2]|0;
  $92 = $save;
  (_fseek(($91|0),($92|0),0)|0);
 }
 $93 = HEAP32[134528>>2]|0;
 $94 = ($93|0)<(3);
 $95 = $94 ? 2 : 3;
 HEAP32[190504>>2] = $95;
 HEAP32[132400>>2] = 65535;
 (_strcpy((134168|0),(458456|0))|0);
 $96 = HEAP8[134232>>0]|0;
 $97 = ($96<<24>>24)!=(0);
 if ($97) {
  STACKTOP = sp;return;
 }
 $98 = HEAP16[133096>>1]|0;
 $99 = $98&65535;
 if ((($99|0) == 5488)) {
  (_strcpy((134232|0),(458504|0))|0);
  STACKTOP = sp;return;
 } else if ((($99|0) == 2682)) {
  (_strcpy((134232|0),(458488|0))|0);
  STACKTOP = sp;return;
 } else if ((($99|0) == 4128)) {
  (_strcpy((134232|0),(458496|0))|0);
  STACKTOP = sp;return;
 } else if ((($99|0) == 2060)) {
  (_strcpy((134232|0),(458472|0))|0);
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _parse_fuji($offset) {
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $c = 0, $entries = 0, $len = 0, $save = 0, $tag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $offset;
 $1 = HEAP32[880>>2]|0;
 $2 = $0;
 (_fseek(($1|0),($2|0),0)|0);
 $3 = (_get4()|0);
 $entries = $3;
 $4 = $entries;
 $5 = ($4>>>0)>(255);
 if ($5) {
  STACKTOP = sp;return;
 }
 while(1) {
  $6 = $entries;
  $7 = (($6) + -1)|0;
  $entries = $7;
  $8 = ($6|0)!=(0);
  if (!($8)) {
   break;
  }
  $9 = (_get2()|0);
  $10 = $9&65535;
  $tag = $10;
  $11 = (_get2()|0);
  $12 = $11&65535;
  $len = $12;
  $13 = HEAP32[880>>2]|0;
  $14 = (_ftell(($13|0))|0);
  $save = $14;
  $15 = $tag;
  $16 = ($15|0)==(256);
  if ($16) {
   $17 = (_get2()|0);
   HEAP16[133096>>1] = $17;
   $18 = (_get2()|0);
   HEAP16[132368>>1] = $18;
  } else {
   $19 = $tag;
   $20 = ($19|0)==(289);
   if ($20) {
    $21 = (_get2()|0);
    HEAP16[132112>>1] = $21;
    $22 = (_get2()|0);
    HEAP16[132120>>1] = $22;
    $23 = $22&65535;
    $24 = ($23|0)==(4284);
    if ($24) {
     $25 = HEAP16[132120>>1]|0;
     $26 = $25&65535;
     $27 = (($26) + 3)|0;
     $28 = $27&65535;
     HEAP16[132120>>1] = $28;
    }
   } else {
    $29 = $tag;
    $30 = ($29|0)==(304);
    if ($30) {
     $31 = HEAP32[880>>2]|0;
     $32 = (_getc_unlocked(($31|0))|0);
     $33 = $32 >> 7;
     HEAP32[190520>>2] = $33;
     $34 = HEAP32[880>>2]|0;
     $35 = (_getc_unlocked(($34|0))|0);
     $36 = $35 & 8;
     $37 = ($36|0)!=(0);
     $38 = $37 ^ 1;
     $39 = $38&1;
     $40 = $39&65535;
     HEAP16[190512>>1] = $40;
    } else {
     $41 = $tag;
     $42 = ($41|0)==(305);
     if ($42) {
      HEAP32[600>>2] = 9;
      $c = 0;
      while(1) {
       $43 = $c;
       $44 = ($43>>>0)<(36);
       if (!($44)) {
        break;
       }
       $45 = HEAP32[880>>2]|0;
       $46 = (_getc_unlocked(($45|0))|0);
       $47 = $46 & 3;
       $48 = $47&255;
       $49 = $c;
       $50 = (35 - ($49))|0;
       $51 = (458512 + ($50)|0);
       HEAP8[$51>>0] = $48;
       $52 = $c;
       $53 = (($52) + 1)|0;
       $c = $53;
      }
     } else {
      $54 = $tag;
      $55 = ($54|0)==(12272);
      if ($55) {
       $c = 0;
       while(1) {
        $56 = $c;
        $57 = ($56>>>0)<(4);
        if (!($57)) {
         break;
        }
        $58 = (_get2()|0);
        $59 = (+($58&65535));
        $60 = $c;
        $61 = $60 ^ 1;
        $62 = (134016 + ($61<<2)|0);
        HEAPF32[$62>>2] = $59;
        $63 = $c;
        $64 = (($63) + 1)|0;
        $c = $64;
       }
      } else {
       $65 = $tag;
       $66 = ($65|0)==(49152);
       if ($66) {
        $67 = HEAP16[944>>1]|0;
        $68 = $67 << 16 >> 16;
        $c = $68;
        HEAP16[944>>1] = 18761;
        $69 = (_get4()|0);
        $tag = $69;
        $70 = ($69>>>0)>(10000);
        if ($70) {
         $71 = (_get4()|0);
         $tag = $71;
        }
        $72 = $tag;
        $73 = $72&65535;
        HEAP16[132120>>1] = $73;
        $74 = (_get4()|0);
        $75 = $74&65535;
        HEAP16[132112>>1] = $75;
        $76 = $c;
        $77 = $76&65535;
        HEAP16[944>>1] = $77;
       }
      }
     }
    }
   }
  }
  $78 = HEAP32[880>>2]|0;
  $79 = $save;
  $80 = $len;
  $81 = (($79) + ($80))|0;
  (_fseek(($78|0),($81|0),0)|0);
 }
 $82 = HEAP32[190520>>2]|0;
 $83 = HEAP16[132112>>1]|0;
 $84 = $83&65535;
 $85 = $84 << $82;
 $86 = $85&65535;
 HEAP16[132112>>1] = $86;
 $87 = HEAP32[190520>>2]|0;
 $88 = HEAP16[132120>>1]|0;
 $89 = $88&65535;
 $90 = $89 >> $87;
 $91 = $90&65535;
 HEAP16[132120>>1] = $91;
 STACKTOP = sp;return;
}
function _parse_jpeg($offset) {
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hlen = 0, $len = 0, $mark = 0, $save = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $offset;
 $2 = HEAP32[880>>2]|0;
 $3 = $1;
 (_fseek(($2|0),($3|0),0)|0);
 $4 = HEAP32[880>>2]|0;
 $5 = (_getc_unlocked(($4|0))|0);
 $6 = ($5|0)!=(255);
 if (!($6)) {
  $7 = HEAP32[880>>2]|0;
  $8 = (_getc_unlocked(($7|0))|0);
  $9 = ($8|0)!=(216);
  if (!($9)) {
   while(1) {
    $10 = HEAP32[880>>2]|0;
    $11 = (_getc_unlocked(($10|0))|0);
    $12 = ($11|0)==(255);
    if ($12) {
     $13 = HEAP32[880>>2]|0;
     $14 = (_getc_unlocked(($13|0))|0);
     $mark = $14;
     $15 = ($14|0)!=(218);
     $47 = $15;
    } else {
     $47 = 0;
    }
    if (!($47)) {
     break;
    }
    HEAP16[944>>1] = 19789;
    $16 = (_get2()|0);
    $17 = $16&65535;
    $18 = (($17) - 2)|0;
    $len = $18;
    $19 = HEAP32[880>>2]|0;
    $20 = (_ftell(($19|0))|0);
    $save = $20;
    $21 = $mark;
    $22 = ($21|0)==(192);
    if ($22) {
     label = 10;
    } else {
     $23 = $mark;
     $24 = ($23|0)==(195);
     if ($24) {
      label = 10;
     }
    }
    if ((label|0) == 10) {
     label = 0;
     $25 = HEAP32[880>>2]|0;
     (_getc_unlocked(($25|0))|0);
     $26 = (_get2()|0);
     HEAP16[133096>>1] = $26;
     $27 = (_get2()|0);
     HEAP16[132368>>1] = $27;
    }
    $28 = (_get2()|0);
    HEAP16[944>>1] = $28;
    $29 = (_get4()|0);
    $hlen = $29;
    $30 = (_get4()|0);
    $31 = ($30|0)==(1212498256);
    if ($31) {
     $32 = $save;
     $33 = $hlen;
     $34 = (($32) + ($33))|0;
     $35 = $len;
     $36 = $hlen;
     $37 = (($35) - ($36))|0;
     _parse_ciff($34,$37,0);
    }
    $38 = $save;
    $39 = (($38) + 6)|0;
    $40 = (_parse_tiff($39)|0);
    $41 = ($40|0)!=(0);
    if ($41) {
     _apply_tiff();
    }
    $42 = HEAP32[880>>2]|0;
    $43 = $save;
    $44 = $len;
    $45 = (($43) + ($44))|0;
    (_fseek(($42|0),($45|0),0)|0);
   }
   $0 = 1;
   $46 = $0;
   STACKTOP = sp;return ($46|0);
  }
 }
 $0 = 0;
 $46 = $0;
 STACKTOP = sp;return ($46|0);
}
function _parse_riff() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $date = 0, $end = 0, $i = 0, $month = 0, $size = 0, $t = 0, $tag = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tag = sp + 208|0;
 $date = sp + 144|0;
 $month = sp + 80|0;
 $t = sp + 32|0;
 HEAP16[944>>1] = 18761;
 $0 = HEAP32[880>>2]|0;
 (_fread(($tag|0),4,1,($0|0))|0);
 $1 = (_get4()|0);
 $size = $1;
 $2 = HEAP32[880>>2]|0;
 $3 = (_ftell(($2|0))|0);
 $4 = $size;
 $5 = (($3) + ($4))|0;
 $end = $5;
 $6 = (_memcmp($tag,458600,4)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = (_memcmp($tag,458608,4)|0);
  $9 = ($8|0)!=(0);
  if ($9) {
   $19 = (_memcmp($tag,458616,4)|0);
   $20 = ($19|0)!=(0);
   if ($20) {
    $38 = (_memcmp($tag,458624,4)|0);
    $39 = ($38|0)!=(0);
    if ($39) {
     label = 31;
    } else {
     $40 = $size;
     $41 = ($40>>>0)<(64);
     if ($41) {
      $42 = HEAP32[880>>2]|0;
      (_fread(($date|0),64,1,($42|0))|0);
      $43 = $size;
      $44 = (($date) + ($43)|0);
      HEAP8[$44>>0] = 0;
      dest=$t+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
      $45 = (($t) + 12|0);
      $46 = (($t) + 8|0);
      $47 = (($t) + 4|0);
      $48 = (($t) + 20|0);
      HEAP32[$vararg_buffer>>2] = $month;
      $vararg_ptr1 = (($vararg_buffer) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $45;
      $vararg_ptr2 = (($vararg_buffer) + 8|0);
      HEAP32[$vararg_ptr2>>2] = $46;
      $vararg_ptr3 = (($vararg_buffer) + 12|0);
      HEAP32[$vararg_ptr3>>2] = $47;
      $vararg_ptr4 = (($vararg_buffer) + 16|0);
      HEAP32[$vararg_ptr4>>2] = $t;
      $vararg_ptr5 = (($vararg_buffer) + 20|0);
      HEAP32[$vararg_ptr5>>2] = $48;
      $49 = (_sscanf($date,458632,$vararg_buffer)|0);
      $50 = ($49|0)==(6);
      if ($50) {
       $i = 0;
       while(1) {
        $51 = $i;
        $52 = ($51>>>0)<(12);
        if ($52) {
         $53 = $i;
         $54 = (458552 + ($53<<2)|0);
         $55 = (_strcasecmp($54,$month)|0);
         $56 = ($55|0)!=(0);
         $70 = $56;
        } else {
         $70 = 0;
        }
        if (!($70)) {
         break;
        }
        $57 = $i;
        $58 = (($57) + 1)|0;
        $i = $58;
       }
       $59 = $i;
       $60 = (($t) + 16|0);
       HEAP32[$60>>2] = $59;
       $61 = (($t) + 20|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = (($62) - 1900)|0;
       HEAP32[$61>>2] = $63;
       $64 = (_mktime(($t|0))|0);
       $65 = ($64|0)>(0);
       if ($65) {
        $66 = (_mktime(($t|0))|0);
        HEAP32[190704>>2] = $66;
       }
      }
     } else {
      label = 31;
     }
    }
    if ((label|0) == 31) {
     $67 = HEAP32[880>>2]|0;
     $68 = $size;
     (_fseek(($67|0),($68|0),1)|0);
    }
   } else {
    while(1) {
     $21 = HEAP32[880>>2]|0;
     $22 = (_ftell(($21|0))|0);
     $23 = (($22) + 7)|0;
     $24 = $end;
     $25 = ($23>>>0)<($24>>>0);
     if (!($25)) {
      break;
     }
     $26 = (_get2()|0);
     $27 = $26&65535;
     $i = $27;
     $28 = (_get2()|0);
     $29 = $28&65535;
     $size = $29;
     $30 = $i;
     $31 = (($30) + 1)|0;
     $32 = $31 >>> 1;
     $33 = ($32|0)==(10);
     if ($33) {
      $34 = $size;
      $35 = ($34|0)==(20);
      if ($35) {
       _get_timestamp(0);
      } else {
       label = 15;
      }
     } else {
      label = 15;
     }
     if ((label|0) == 15) {
      label = 0;
      $36 = HEAP32[880>>2]|0;
      $37 = $size;
      (_fseek(($36|0),($37|0),1)|0);
     }
    }
   }
   STACKTOP = sp;return;
  }
 }
 (_get4()|0);
 while(1) {
  $10 = HEAP32[880>>2]|0;
  $11 = (_ftell(($10|0))|0);
  $12 = (($11) + 7)|0;
  $13 = $end;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = HEAP32[880>>2]|0;
   $16 = (_feof(($15|0))|0);
   $17 = ($16|0)!=(0);
   $18 = $17 ^ 1;
   $69 = $18;
  } else {
   $69 = 0;
  }
  if (!($69)) {
   break;
  }
  _parse_riff();
 }
 STACKTOP = sp;return;
}
function _parse_qt($end) {
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $save = 0, $size = 0, $tag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tag = sp + 12|0;
 $0 = $end;
 HEAP16[944>>1] = 19789;
 while(1) {
  $1 = HEAP32[880>>2]|0;
  $2 = (_ftell(($1|0))|0);
  $3 = (($2) + 7)|0;
  $4 = $0;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   label = 12;
   break;
  }
  $6 = HEAP32[880>>2]|0;
  $7 = (_ftell(($6|0))|0);
  $save = $7;
  $8 = (_get4()|0);
  $size = $8;
  $9 = ($8>>>0)<(8);
  if ($9) {
   break;
  }
  $10 = HEAP32[880>>2]|0;
  (_fread(($tag|0),4,1,($10|0))|0);
  $11 = (_memcmp($tag,458656,4)|0);
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = (_memcmp($tag,458664,4)|0);
   $14 = ($13|0)!=(0);
   if ($14) {
    $15 = (_memcmp($tag,458672,4)|0);
    $16 = ($15|0)!=(0);
    if (!($16)) {
     label = 8;
    }
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
  if ((label|0) == 8) {
   label = 0;
   $17 = $save;
   $18 = $size;
   $19 = (($17) + ($18))|0;
   _parse_qt($19);
  }
  $20 = (_memcmp($tag,458680,4)|0);
  $21 = ($20|0)!=(0);
  if (!($21)) {
   $22 = HEAP32[880>>2]|0;
   $23 = (_ftell(($22|0))|0);
   (_parse_jpeg($23)|0);
  }
  $24 = HEAP32[880>>2]|0;
  $25 = $save;
  $26 = $size;
  $27 = (($25) + ($26))|0;
  (_fseek(($24|0),($27|0),0)|0);
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
 STACKTOP = sp;return;
}
function _parse_smal($offset,$fsize) {
 $offset = $offset|0;
 $fsize = $fsize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $ver = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $offset;
 $1 = $fsize;
 $2 = HEAP32[880>>2]|0;
 $3 = $0;
 $4 = (($3) + 2)|0;
 (_fseek(($2|0),($4|0),0)|0);
 HEAP16[944>>1] = 18761;
 $5 = HEAP32[880>>2]|0;
 $6 = (_getc_unlocked(($5|0))|0);
 $ver = $6;
 $7 = $ver;
 $8 = ($7|0)==(6);
 if ($8) {
  $9 = HEAP32[880>>2]|0;
  (_fseek(($9|0),5,1)|0);
 }
 $10 = (_get4()|0);
 $11 = $1;
 $12 = ($10|0)!=($11|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = $ver;
 $14 = ($13|0)>(6);
 if ($14) {
  $15 = (_get4()|0);
  HEAP32[133816>>2] = $15;
 }
 $16 = (_get2()|0);
 HEAP16[132112>>1] = $16;
 HEAP16[133096>>1] = $16;
 $17 = (_get2()|0);
 HEAP16[132120>>1] = $17;
 HEAP16[132368>>1] = $17;
 (_strcpy((134168|0),(458688|0))|0);
 $18 = $ver;
 $19 = HEAP16[132120>>1]|0;
 $20 = $19&65535;
 $21 = HEAP16[132112>>1]|0;
 $22 = $21&65535;
 HEAP32[$vararg_buffer>>2] = $18;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $20;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $22;
 (_sprintf(134232,458696,$vararg_buffer)|0);
 $23 = $ver;
 $24 = ($23|0)==(6);
 if ($24) {
  HEAP32[190504>>2] = 33;
 }
 $25 = $ver;
 $26 = ($25|0)==(9);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 HEAP32[190504>>2] = 34;
 STACKTOP = sp;return;
}
function _parse_cine() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $off_head = 0, $off_image = 0, $off_setup = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP16[944>>1] = 18761;
 $0 = HEAP32[880>>2]|0;
 (_fseek(($0|0),4,0)|0);
 $1 = (_get2()|0);
 $2 = $1&65535;
 $3 = ($2|0)==(2);
 $4 = $3&1;
 HEAP32[133760>>2] = $4;
 $5 = HEAP32[880>>2]|0;
 (_fseek(($5|0),14,1)|0);
 $6 = (_get4()|0);
 $7 = HEAP32[133760>>2]|0;
 $8 = Math_imul($7, $6)|0;
 HEAP32[133760>>2] = $8;
 $9 = (_get4()|0);
 $off_head = $9;
 $10 = (_get4()|0);
 $off_setup = $10;
 $11 = (_get4()|0);
 $off_image = $11;
 $12 = (_get4()|0);
 HEAP32[190704>>2] = $12;
 $13 = (_get4()|0);
 $i = $13;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $i;
  HEAP32[190704>>2] = $15;
 }
 $16 = HEAP32[880>>2]|0;
 $17 = $off_head;
 $18 = (($17) + 4)|0;
 (_fseek(($16|0),($18|0),0)|0);
 $19 = (_get4()|0);
 $20 = $19&65535;
 HEAP16[132368>>1] = $20;
 $21 = (_get4()|0);
 $22 = $21&65535;
 HEAP16[133096>>1] = $22;
 (_get2()|0);
 $23 = (_get2()|0);
 $24 = $23&65535;
 if ((($24|0) == 8)) {
  HEAP32[190504>>2] = 8;
 } else if ((($24|0) == 16)) {
  HEAP32[190504>>2] = 19;
 }
 $25 = HEAP32[880>>2]|0;
 $26 = $off_setup;
 $27 = (($26) + 792)|0;
 (_fseek(($25|0),($27|0),0)|0);
 (_strcpy((134168|0),(458712|0))|0);
 $28 = (_get4()|0);
 HEAP32[$vararg_buffer>>2] = $28;
 (_sprintf(134232,456904,$vararg_buffer)|0);
 $29 = HEAP32[880>>2]|0;
 (_fseek(($29|0),12,1)|0);
 $30 = (_get4()|0);
 $i = $30;
 $31 = $30 & 16777215;
 if ((($31|0) == 3)) {
  HEAP32[600>>2] = -1802201964;
 } else if ((($31|0) == 4)) {
  HEAP32[600>>2] = 1229539657;
 } else {
  HEAP32[133760>>2] = 0;
 }
 $32 = HEAP32[880>>2]|0;
 (_fseek(($32|0),72,1)|0);
 $33 = (_get4()|0);
 $34 = (($33) + 3600)|0;
 $35 = (($34>>>0) % 360)&-1;
 if ((($35|0) == 0)) {
  HEAP32[455352>>2] = 2;
 } else if ((($35|0) == 90)) {
  HEAP32[455352>>2] = 7;
 } else if ((($35|0) == 180)) {
  HEAP32[455352>>2] = 1;
 } else if ((($35|0) == 270)) {
  HEAP32[455352>>2] = 4;
 }
 $36 = (+_getreal(11));
 $37 = $36;
 HEAPF32[134016>>2] = $37;
 $38 = (+_getreal(11));
 $39 = $38;
 HEAPF32[((134016 + 8|0))>>2] = $39;
 $40 = (_get4()|0);
 $41 = -1 << $40;
 $42 = $41 ^ -1;
 HEAP32[132400>>2] = $42;
 $43 = HEAP32[880>>2]|0;
 (_fseek(($43|0),668,1)|0);
 $44 = (_get4()|0);
 $45 = (+($44>>>0));
 $46 = $45 / 1.0E+9;
 $47 = $46;
 HEAPF32[455328>>2] = $47;
 $48 = HEAP32[880>>2]|0;
 $49 = $off_image;
 (_fseek(($48|0),($49|0),0)|0);
 $50 = HEAP32[8>>2]|0;
 $51 = HEAP32[133760>>2]|0;
 $52 = ($50>>>0)<($51>>>0);
 if (!($52)) {
  $56 = (_get4()|0);
  $57 = (_i64Add(($56|0),0,8,0)|0);
  $58 = tempRet0;
  HEAP32[133816>>2] = $57;
  $59 = (_get4()|0);
  $60 = HEAP32[133816>>2]|0;
  $61 = ($60|0)<(0);
  $62 = $61 << 31 >> 31;
  $63 = (_i64Add(($60|0),($62|0),0,($59|0))|0);
  $64 = tempRet0;
  HEAP32[133816>>2] = $63;
  STACKTOP = sp;return;
 }
 $53 = HEAP32[880>>2]|0;
 $54 = HEAP32[8>>2]|0;
 $55 = $54<<3;
 (_fseek(($53|0),($55|0),1)|0);
 $56 = (_get4()|0);
 $57 = (_i64Add(($56|0),0,8,0)|0);
 $58 = tempRet0;
 HEAP32[133816>>2] = $57;
 $59 = (_get4()|0);
 $60 = HEAP32[133816>>2]|0;
 $61 = ($60|0)<(0);
 $62 = $61 << 31 >> 31;
 $63 = (_i64Add(($60|0),($62|0),0,($59|0))|0);
 $64 = tempRet0;
 HEAP32[133816>>2] = $63;
 STACKTOP = sp;return;
}
function _parse_redcine() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $len = 0, $rdvo = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP16[944>>1] = 19789;
 HEAP32[133760>>2] = 0;
 $0 = HEAP32[880>>2]|0;
 (_fseek(($0|0),52,0)|0);
 $1 = (_get4()|0);
 $2 = $1&65535;
 HEAP16[132120>>1] = $2;
 $3 = (_get4()|0);
 $4 = $3&65535;
 HEAP16[132112>>1] = $4;
 $5 = HEAP32[880>>2]|0;
 (_fseek(($5|0),0,2)|0);
 $6 = HEAP32[880>>2]|0;
 $7 = HEAP32[880>>2]|0;
 $8 = (_ftello(($7|0))|0);
 $9 = $8 & 511;
 $i = $9;
 $10 = (0 - ($9))|0;
 (_fseek(($6|0),($10|0),1)|0);
 $11 = (_get4()|0);
 $12 = $i;
 $13 = ($11|0)!=($12|0);
 if (!($13)) {
  $14 = (_get4()|0);
  $15 = ($14|0)!=(1380273986);
  if (!($15)) {
   $33 = (_get4()|0);
   $rdvo = $33;
   $34 = HEAP32[880>>2]|0;
   (_fseek(($34|0),12,1)|0);
   $35 = (_get4()|0);
   HEAP32[133760>>2] = $35;
   $36 = HEAP32[880>>2]|0;
   $37 = $rdvo;
   $38 = (($37) + 8)|0;
   $39 = HEAP32[8>>2]|0;
   $40 = $39<<2;
   $41 = (($38) + ($40))|0;
   (_fseeko(($36|0),($41|0),0)|0);
   $42 = (_get4()|0);
   HEAP32[133816>>2] = $42;
   STACKTOP = sp;return;
  }
 }
 $16 = HEAP32[_stderr>>2]|0;
 $17 = HEAP32[696>>2]|0;
 HEAP32[$vararg_buffer>>2] = $17;
 (_fprintf(($16|0),(458720|0),($vararg_buffer|0))|0);
 $18 = HEAP32[880>>2]|0;
 (_fseek(($18|0),0,0)|0);
 while(1) {
  $19 = (_get4()|0);
  $len = $19;
  $20 = ($19|0)!=(-1);
  if (!($20)) {
   break;
  }
  $21 = (_get4()|0);
  $22 = ($21|0)==(1380271190);
  if ($22) {
   $23 = HEAP32[133760>>2]|0;
   $24 = (($23) + 1)|0;
   HEAP32[133760>>2] = $24;
   $25 = HEAP32[8>>2]|0;
   $26 = ($23|0)==($25|0);
   if ($26) {
    $27 = HEAP32[880>>2]|0;
    $28 = (_ftello(($27|0))|0);
    $29 = (($28) - 8)|0;
    HEAP32[133816>>2] = $29;
   }
  }
  $30 = HEAP32[880>>2]|0;
  $31 = $len;
  $32 = (($31) - 8)|0;
  (_fseek(($30|0),($32|0),1)|0);
 }
 STACKTOP = sp;return;
}
function _foveon_gets($offset,$str,$len) {
 $offset = $offset|0;
 $str = $str|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $offset;
 $1 = $str;
 $2 = $len;
 $3 = HEAP32[880>>2]|0;
 $4 = $0;
 (_fseek(($3|0),($4|0),0)|0);
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $2;
  $7 = (($6) - 1)|0;
  $8 = ($5|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = (_get2()|0);
  $10 = $9&255;
  $11 = $i;
  $12 = $1;
  $13 = (($12) + ($11)|0);
  HEAP8[$13>>0] = $10;
  $14 = $10 << 24 >> 24;
  $15 = ($14|0)==(0);
  if ($15) {
   label = 4;
   break;
  }
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 if ((label|0) == 4) {
 }
 $18 = $i;
 $19 = $1;
 $20 = (($19) + ($18)|0);
 HEAP8[$20>>0] = 0;
 $21 = $1;
 STACKTOP = sp;return ($21|0);
}
function _parse_foveon() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $entries = 0, $high = 0, $i = 0;
 var $img = 0, $len = 0, $name = 0, $off = 0, $pent = 0, $poff = 0, $save = 0, $tag = 0, $value = 0, $wide = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $poff = sp;
 $name = sp + 2152|0;
 $value = sp + 2088|0;
 $img = 0;
 HEAP16[944>>1] = 18761;
 $0 = HEAP32[880>>2]|0;
 (_fseek(($0|0),36,0)|0);
 $1 = (_get4()|0);
 HEAP32[455352>>2] = $1;
 $2 = HEAP32[880>>2]|0;
 (_fseek(($2|0),-4,2)|0);
 $3 = HEAP32[880>>2]|0;
 $4 = (_get4()|0);
 (_fseek(($3|0),($4|0),0)|0);
 $5 = (_get4()|0);
 $6 = ($5|0)!=(1682130259);
 if ($6) {
  STACKTOP = sp;return;
 }
 (_get4()|0);
 $7 = (_get4()|0);
 $entries = $7;
 while(1) {
  $8 = $entries;
  $9 = (($8) + -1)|0;
  $entries = $9;
  $10 = ($8|0)!=(0);
  if (!($10)) {
   label = 53;
   break;
  }
  $11 = (_get4()|0);
  $off = $11;
  $12 = (_get4()|0);
  $len = $12;
  $13 = (_get4()|0);
  $tag = $13;
  $14 = HEAP32[880>>2]|0;
  $15 = (_ftell(($14|0))|0);
  $save = $15;
  $16 = HEAP32[880>>2]|0;
  $17 = $off;
  (_fseek(($16|0),($17|0),0)|0);
  $18 = (_get4()|0);
  $19 = $tag;
  $20 = $19 << 24;
  $21 = 541279571 | $20;
  $22 = ($18|0)!=($21|0);
  if ($22) {
   break;
  }
  $23 = $tag;
  if ((($23|0) == 1347375696)) {
   (_get4()|0);
   $75 = (_get4()|0);
   $pent = $75;
   $76 = HEAP32[880>>2]|0;
   (_fseek(($76|0),12,1)|0);
   $77 = $pent;
   $78 = $77<<3;
   $79 = (($78) + 24)|0;
   $80 = $off;
   $81 = (($80) + ($79))|0;
   $off = $81;
   $82 = $pent;
   $83 = ($82>>>0)>(256);
   if ($83) {
    $pent = 256;
   }
   $i = 0;
   while(1) {
    $84 = $i;
    $85 = $pent;
    $86 = $85<<1;
    $87 = ($84|0)<($86|0);
    if (!($87)) {
     break;
    }
    $88 = $off;
    $89 = (_get4()|0);
    $90 = $89<<1;
    $91 = (($88) + ($90))|0;
    $92 = $i;
    $93 = (($poff) + ($92<<2)|0);
    HEAP32[$93>>2] = $91;
    $94 = $i;
    $95 = (($94) + 1)|0;
    $i = $95;
   }
   $i = 0;
   while(1) {
    $96 = $i;
    $97 = $pent;
    $98 = ($96|0)<($97|0);
    if (!($98)) {
     break;
    }
    $99 = $i;
    $100 = (($poff) + ($99<<3)|0);
    $101 = HEAP32[$100>>2]|0;
    (_foveon_gets($101,$name,64)|0);
    $102 = $i;
    $103 = (($poff) + ($102<<3)|0);
    $104 = (($103) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    (_foveon_gets($105,$value,64)|0);
    $106 = (_strcmp($name,458776)|0);
    $107 = ($106|0)!=(0);
    if (!($107)) {
     $108 = (_atoi($value)|0);
     $109 = (+($108|0));
     HEAPF32[455312>>2] = $109;
    }
    $110 = (_strcmp($name,458784)|0);
    $111 = ($110|0)!=(0);
    if (!($111)) {
     (_strcpy((134168|0),($value|0))|0);
    }
    $112 = (_strcmp($name,458800)|0);
    $113 = ($112|0)!=(0);
    if (!($113)) {
     (_strcpy((134232|0),($value|0))|0);
    }
    $114 = (_strcmp($name,458816)|0);
    $115 = ($114|0)!=(0);
    if (!($115)) {
     (_strcpy((133144|0),($value|0))|0);
    }
    $116 = (_strcmp($name,458824)|0);
    $117 = ($116|0)!=(0);
    if (!($117)) {
     $118 = (_atoi($value)|0);
     HEAP32[190704>>2] = $118;
    }
    $119 = (_strcmp($name,458832)|0);
    $120 = ($119|0)!=(0);
    if (!($120)) {
     $121 = (_atoi($value)|0);
     $122 = (+($121|0));
     $123 = $122 / 1.0E+6;
     $124 = $123;
     HEAPF32[455328>>2] = $124;
    }
    $125 = (_strcmp($name,458840)|0);
    $126 = ($125|0)!=(0);
    if (!($126)) {
     $127 = (+_atof($value));
     $128 = $127;
     HEAPF32[455320>>2] = $128;
    }
    $129 = (_strcmp($name,458856)|0);
    $130 = ($129|0)!=(0);
    if (!($130)) {
     $131 = (+_atof($value));
     $132 = $131;
     HEAPF32[456080>>2] = $132;
    }
    $133 = $i;
    $134 = (($133) + 1)|0;
    $i = $134;
   }
  } else if ((($23|0) == 843140425) | (($23|0) == 1195461961)) {
   $24 = HEAP32[880>>2]|0;
   (_fseek(($24|0),8,1)|0);
   $25 = (_get4()|0);
   $pent = $25;
   $26 = (_get4()|0);
   $wide = $26;
   $27 = (_get4()|0);
   $high = $27;
   $28 = $wide;
   $29 = HEAP16[132368>>1]|0;
   $30 = $29&65535;
   $31 = ($28|0)>($30|0);
   if ($31) {
    $32 = $high;
    $33 = HEAP16[133096>>1]|0;
    $34 = $33&65535;
    $35 = ($32|0)>($34|0);
    if ($35) {
     $36 = $pent;
     if ((($36|0) == 30)) {
      HEAP32[190504>>2] = 36;
     } else if ((($36|0) == 5)) {
      HEAP32[133128>>2] = 1;
      label = 12;
     } else if ((($36|0) == 6)) {
      label = 12;
     } else {
      HEAP32[190504>>2] = 0;
     }
     if ((label|0) == 12) {
      label = 0;
      HEAP32[190504>>2] = 35;
     }
     $37 = $wide;
     $38 = $37&65535;
     HEAP16[132368>>1] = $38;
     $39 = $high;
     $40 = $39&65535;
     HEAP16[133096>>1] = $40;
     $41 = $off;
     $42 = (($41) + 28)|0;
     HEAP32[133816>>2] = $42;
     HEAP32[458768>>2] = 1;
    }
   }
   $43 = HEAP32[880>>2]|0;
   $44 = $off;
   $45 = (($44) + 28)|0;
   (_fseek(($43|0),($45|0),0)|0);
   $46 = HEAP32[880>>2]|0;
   $47 = (_getc_unlocked(($46|0))|0);
   $48 = ($47|0)==(255);
   if ($48) {
    $49 = HEAP32[880>>2]|0;
    $50 = (_getc_unlocked(($49|0))|0);
    $51 = ($50|0)==(216);
    if ($51) {
     $52 = HEAP32[134312>>2]|0;
     $53 = $len;
     $54 = (($53) - 28)|0;
     $55 = ($52>>>0)<($54>>>0);
     if ($55) {
      $56 = $off;
      $57 = (($56) + 28)|0;
      HEAP32[454608>>2] = $57;
      $58 = $len;
      $59 = (($58) - 28)|0;
      HEAP32[134312>>2] = $59;
      HEAP32[458064>>2] = 37;
     }
    }
   }
   $60 = $img;
   $61 = (($60) + 1)|0;
   $img = $61;
   $62 = ($61|0)==(2);
   if ($62) {
    $63 = HEAP32[134312>>2]|0;
    $64 = ($63|0)!=(0);
    if (!($64)) {
     $65 = $off;
     $66 = (($65) + 24)|0;
     HEAP32[454608>>2] = $66;
     $67 = $wide;
     $68 = $67&65535;
     HEAP16[134296>>1] = $68;
     $69 = $high;
     $70 = $69&65535;
     HEAP16[134304>>1] = $70;
     HEAP32[458064>>2] = 38;
    }
   }
  } else if ((($23|0) == 1179468099)) {
   $71 = $off;
   $72 = (($71) + 8)|0;
   HEAP32[133808>>2] = $72;
   $73 = $len;
   $74 = (($73) - 28)|0;
   HEAP32[134488>>2] = $74;
  }
  $135 = HEAP32[880>>2]|0;
  $136 = $save;
  (_fseek(($135|0),($136|0),0)|0);
 }
 if ((label|0) == 53) {
  STACKTOP = sp;return;
 }
 STACKTOP = sp;return;
}
function _adobe_coeff($make,$model) {
 $make = $make|0;
 $model = $model|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cam_xyz = 0, $i = 0, $j = 0;
 var $name = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 96|0;
 $cam_xyz = sp;
 $name = sp + 120|0;
 $0 = $make;
 $1 = $model;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 (_sprintf($name,482784,$vararg_buffer)|0);
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4>>>0)<(478);
  if (!($5)) {
   label = 17;
   break;
  }
  $6 = $i;
  $7 = (458864 + ($6<<5)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $i;
  $10 = (458864 + ($9<<5)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_strlen(($11|0))|0);
  $13 = (_strncmp($name,$8,$12)|0);
  $14 = ($13|0)!=(0);
  if (!($14)) {
   break;
  }
  $55 = $i;
  $56 = (($55) + 1)|0;
  $i = $56;
 }
 if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
 $15 = $i;
 $16 = (458864 + ($15<<5)|0);
 $17 = (($16) + 4|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = ($18<<16>>16)!=(0);
 if ($19) {
  $20 = $i;
  $21 = (458864 + ($20<<5)|0);
  $22 = (($21) + 4|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  HEAP32[132392>>2] = $24;
 }
 $25 = $i;
 $26 = (458864 + ($25<<5)|0);
 $27 = (($26) + 6|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = ($28<<16>>16)!=(0);
 if ($29) {
  $30 = $i;
  $31 = (458864 + ($30<<5)|0);
  $32 = (($31) + 6|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33&65535;
  HEAP32[132400>>2] = $34;
 }
 $35 = $i;
 $36 = (458864 + ($35<<5)|0);
 $37 = (($36) + 8|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = ($38<<16>>16)!=(0);
 if ($39) {
  $j = 0;
  HEAP32[132296>>2] = 0;
  while(1) {
   $40 = $j;
   $41 = ($40|0)<(12);
   if (!($41)) {
    break;
   }
   $42 = $j;
   $43 = $i;
   $44 = (458864 + ($43<<5)|0);
   $45 = (($44) + 8|0);
   $46 = (($45) + ($42<<1)|0);
   $47 = HEAP16[$46>>1]|0;
   $48 = $47 << 16 >> 16;
   $49 = (+($48|0));
   $50 = $49 / 1.0E+4;
   $51 = $j;
   $52 = (($cam_xyz) + ($51<<3)|0);
   HEAPF64[$52>>3] = $50;
   $53 = $j;
   $54 = (($53) + 1)|0;
   $j = $54;
  }
  _cam_xyz_coeff(132312,$cam_xyz);
 }
 STACKTOP = sp;return;
}
function _simple_coeff($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $c = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $i = 0;
 HEAP32[132296>>2] = 0;
 while(1) {
  $1 = $i;
  $2 = ($1|0)<(3);
  if (!($2)) {
   break;
  }
  $c = 0;
  while(1) {
   $3 = $c;
   $4 = HEAP32[132304>>2]|0;
   $5 = ($3>>>0)<($4>>>0);
   if (!($5)) {
    break;
   }
   $6 = $i;
   $7 = HEAP32[132304>>2]|0;
   $8 = Math_imul($6, $7)|0;
   $9 = $c;
   $10 = (($8) + ($9))|0;
   $11 = $0;
   $12 = (482792 + (($11*48)|0)|0);
   $13 = (($12) + ($10<<2)|0);
   $14 = +HEAPF32[$13>>2];
   $15 = $c;
   $16 = $i;
   $17 = (132312 + ($16<<4)|0);
   $18 = (($17) + ($15<<2)|0);
   HEAPF32[$18>>2] = $14;
   $19 = $c;
   $20 = (($19) + 1)|0;
   $c = $20;
  }
  $21 = $i;
  $22 = (($21) + 1)|0;
  $i = $22;
 }
 STACKTOP = sp;return;
}
function _guess_byte_order($words) {
 $words = $words|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $diff = 0.0, $msb = 0, $sum = 0, $t = 0, $test = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $test = sp + 40|0;
 $sum = sp;
 $0 = $words;
 $t = 2;
 ;HEAP32[$sum+0>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;
 $1 = HEAP32[880>>2]|0;
 (_fread(($test|0),2,2,($1|0))|0);
 $2 = $0;
 $3 = (($2) - 2)|0;
 $0 = $3;
 while(1) {
  $4 = $0;
  $5 = (($4) + -1)|0;
  $0 = $5;
  $6 = ($4|0)!=(0);
  if (!($6)) {
   break;
  }
  $7 = $t;
  $8 = (($test) + ($7<<1)|0);
  $9 = HEAP32[880>>2]|0;
  (_fread(($8|0),2,1,($9|0))|0);
  $msb = 0;
  while(1) {
   $10 = $msb;
   $11 = ($10|0)<(2);
   if (!($11)) {
    break;
   }
   $12 = $msb;
   $13 = $t;
   $14 = $13 ^ 2;
   $15 = (($test) + ($14<<1)|0);
   $16 = (($15) + ($12)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = $18 << 8;
   $20 = $msb;
   $21 = ($20|0)!=(0);
   $22 = $21 ^ 1;
   $23 = $22&1;
   $24 = $t;
   $25 = $24 ^ 2;
   $26 = (($test) + ($25<<1)|0);
   $27 = (($26) + ($23)|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = $19 | $29;
   $31 = $msb;
   $32 = $t;
   $33 = (($test) + ($32<<1)|0);
   $34 = (($33) + ($31)|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = $36 << 8;
   $38 = $msb;
   $39 = ($38|0)!=(0);
   $40 = $39 ^ 1;
   $41 = $40&1;
   $42 = $t;
   $43 = (($test) + ($42<<1)|0);
   $44 = (($43) + ($41)|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $47 = $37 | $46;
   $48 = (($30) - ($47))|0;
   $49 = (+($48|0));
   $diff = $49;
   $50 = $diff;
   $51 = $diff;
   $52 = $50 * $51;
   $53 = $msb;
   $54 = (($sum) + ($53<<3)|0);
   $55 = +HEAPF64[$54>>3];
   $56 = $55 + $52;
   HEAPF64[$54>>3] = $56;
   $57 = $msb;
   $58 = (($57) + 1)|0;
   $msb = $58;
  }
  $59 = $t;
  $60 = (($59) + 1)|0;
  $61 = $60 & 3;
  $t = $61;
 }
 $62 = +HEAPF64[$sum>>3];
 $63 = (($sum) + 8|0);
 $64 = +HEAPF64[$63>>3];
 $65 = $62 < $64;
 $66 = $65 ? 19789 : 18761;
 $67 = $66&65535;
 STACKTOP = sp;return ($67|0);
}
function _find_green($bps,$bite,$off0,$off1) {
 $bps = $bps|0;
 $bite = $bite|0;
 $off0 = $off0|0;
 $off1 = $off1|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bitbuf = 0, $c = 0, $col = 0, $i = 0, $img = 0, $sum = 0, $vbits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bitbuf = sp;
 $img = sp + 56|0;
 $sum = sp + 8|0;
 $0 = $bps;
 $1 = $bite;
 $2 = $off0;
 $3 = $off1;
 $4 = $bitbuf;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 ;HEAP32[$sum+0>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;
 $c = 0;
 while(1) {
  $8 = $c;
  $9 = ($8|0)<(2);
  if (!($9)) {
   break;
  }
  $10 = HEAP32[880>>2]|0;
  $11 = $c;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = $3;
   $15 = $13;
  } else {
   $14 = $2;
   $15 = $14;
  }
  (_fseek(($10|0),($15|0),0)|0);
  $col = 0;
  $vbits = 0;
  while(1) {
   $16 = $col;
   $17 = HEAP16[132120>>1]|0;
   $18 = $17&65535;
   $19 = ($16|0)<($18|0);
   if (!($19)) {
    break;
   }
   $20 = $0;
   $21 = $vbits;
   $22 = (($21) - ($20))|0;
   $vbits = $22;
   while(1) {
    $23 = $vbits;
    $24 = ($23|0)<(0);
    if (!($24)) {
     break;
    }
    $25 = $1;
    $26 = $bitbuf;
    $27 = $26;
    $28 = HEAP32[$27>>2]|0;
    $29 = (($26) + 4)|0;
    $30 = $29;
    $31 = HEAP32[$30>>2]|0;
    $32 = (_bitshift64Shl(($28|0),($31|0),($25|0))|0);
    $33 = tempRet0;
    $34 = $bitbuf;
    $35 = $34;
    HEAP32[$35>>2] = $32;
    $36 = (($34) + 4)|0;
    $37 = $36;
    HEAP32[$37>>2] = $33;
    $i = 0;
    while(1) {
     $38 = $i;
     $39 = $1;
     $40 = ($38|0)<($39|0);
     if (!($40)) {
      break;
     }
     $41 = HEAP32[880>>2]|0;
     $42 = (_getc_unlocked(($41|0))|0);
     $43 = $i;
     $44 = $42 << $43;
     $45 = $bitbuf;
     $46 = $45;
     $47 = HEAP32[$46>>2]|0;
     $48 = (($45) + 4)|0;
     $49 = $48;
     $50 = HEAP32[$49>>2]|0;
     $51 = $47 | $44;
     $52 = $bitbuf;
     $53 = $52;
     HEAP32[$53>>2] = $51;
     $54 = (($52) + 4)|0;
     $55 = $54;
     HEAP32[$55>>2] = $50;
     $56 = $i;
     $57 = (($56) + 8)|0;
     $i = $57;
    }
    $58 = $1;
    $59 = $vbits;
    $60 = (($59) + ($58))|0;
    $vbits = $60;
   }
   $61 = $bitbuf;
   $62 = $61;
   $63 = HEAP32[$62>>2]|0;
   $64 = (($61) + 4)|0;
   $65 = $64;
   $66 = HEAP32[$65>>2]|0;
   $67 = $0;
   $68 = (64 - ($67))|0;
   $69 = $vbits;
   $70 = (($68) - ($69))|0;
   $71 = (_bitshift64Shl(($63|0),($66|0),($70|0))|0);
   $72 = tempRet0;
   $73 = $0;
   $74 = (64 - ($73))|0;
   $75 = (_bitshift64Lshr(($71|0),($72|0),($74|0))|0);
   $76 = tempRet0;
   $77 = $75&65535;
   $78 = $col;
   $79 = $c;
   $80 = (($img) + (($79*4128)|0)|0);
   $81 = (($80) + ($78<<1)|0);
   HEAP16[$81>>1] = $77;
   $82 = $col;
   $83 = (($82) + 1)|0;
   $col = $83;
  }
  $84 = $c;
  $85 = (($84) + 1)|0;
  $c = $85;
 }
 $c = 0;
 while(1) {
  $86 = $c;
  $87 = HEAP16[132120>>1]|0;
  $88 = $87&65535;
  $89 = (($88) - 1)|0;
  $90 = ($86|0)<($89|0);
  if (!($90)) {
   break;
  }
  $91 = $c;
  $92 = (($img) + ($91<<1)|0);
  $93 = HEAP16[$92>>1]|0;
  $94 = $93&65535;
  $95 = $c;
  $96 = (($95) + 1)|0;
  $97 = (($img) + 4128|0);
  $98 = (($97) + ($96<<1)|0);
  $99 = HEAP16[$98>>1]|0;
  $100 = $99&65535;
  $101 = (($94) - ($100))|0;
  $102 = $c;
  $103 = (($img) + ($102<<1)|0);
  $104 = HEAP16[$103>>1]|0;
  $105 = $104&65535;
  $106 = $c;
  $107 = (($106) + 1)|0;
  $108 = (($img) + 4128|0);
  $109 = (($108) + ($107<<1)|0);
  $110 = HEAP16[$109>>1]|0;
  $111 = $110&65535;
  $112 = (($105) - ($111))|0;
  $113 = $112 >> 31;
  $114 = $101 ^ $113;
  $115 = $c;
  $116 = (($img) + ($115<<1)|0);
  $117 = HEAP16[$116>>1]|0;
  $118 = $117&65535;
  $119 = $c;
  $120 = (($119) + 1)|0;
  $121 = (($img) + 4128|0);
  $122 = (($121) + ($120<<1)|0);
  $123 = HEAP16[$122>>1]|0;
  $124 = $123&65535;
  $125 = (($118) - ($124))|0;
  $126 = $125 >> 31;
  $127 = (($114) - ($126))|0;
  $128 = (+($127|0));
  $129 = $c;
  $130 = $129 & 1;
  $131 = (($sum) + ($130<<3)|0);
  $132 = +HEAPF64[$131>>3];
  $133 = $132 + $128;
  HEAPF64[$131>>3] = $133;
  $134 = $c;
  $135 = (($img) + 4128|0);
  $136 = (($135) + ($134<<1)|0);
  $137 = HEAP16[$136>>1]|0;
  $138 = $137&65535;
  $139 = $c;
  $140 = (($139) + 1)|0;
  $141 = (($img) + ($140<<1)|0);
  $142 = HEAP16[$141>>1]|0;
  $143 = $142&65535;
  $144 = (($138) - ($143))|0;
  $145 = $c;
  $146 = (($img) + 4128|0);
  $147 = (($146) + ($145<<1)|0);
  $148 = HEAP16[$147>>1]|0;
  $149 = $148&65535;
  $150 = $c;
  $151 = (($150) + 1)|0;
  $152 = (($img) + ($151<<1)|0);
  $153 = HEAP16[$152>>1]|0;
  $154 = $153&65535;
  $155 = (($149) - ($154))|0;
  $156 = $155 >> 31;
  $157 = $144 ^ $156;
  $158 = $c;
  $159 = (($img) + 4128|0);
  $160 = (($159) + ($158<<1)|0);
  $161 = HEAP16[$160>>1]|0;
  $162 = $161&65535;
  $163 = $c;
  $164 = (($163) + 1)|0;
  $165 = (($img) + ($164<<1)|0);
  $166 = HEAP16[$165>>1]|0;
  $167 = $166&65535;
  $168 = (($162) - ($167))|0;
  $169 = $168 >> 31;
  $170 = (($157) - ($169))|0;
  $171 = (+($170|0));
  $172 = $c;
  $173 = $172 ^ -1;
  $174 = $173 & 1;
  $175 = (($sum) + ($174<<3)|0);
  $176 = +HEAPF64[$175>>3];
  $177 = $176 + $171;
  HEAPF64[$175>>3] = $177;
  $178 = $c;
  $179 = (($178) + 1)|0;
  $c = $179;
 }
 $180 = +HEAPF64[$sum>>3];
 $181 = (($sum) + 8|0);
 $182 = +HEAPF64[$181>>3];
 $183 = $180 / $182;
 $184 = (+Math_log((+$183)));
 $185 = 100.0 * $184;
 $186 = $185;
 STACKTOP = sp;return (+$186);
}
function _identify() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0.0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0.0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0.0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0.0, $1687 = 0.0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0.0, $1691 = 0.0, $1692 = 0.0, $1693 = 0, $1694 = 0, $1695 = 0.0, $1696 = 0.0, $1697 = 0, $1698 = 0, $1699 = 0.0, $17 = 0;
 var $170 = 0, $1700 = 0.0, $1701 = 0.0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0.0, $1711 = 0.0, $1712 = 0, $1713 = 0, $1714 = 0.0, $1715 = 0.0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0.0, $1805 = 0.0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0.0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0.0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0.0, $768 = 0.0, $769 = 0.0;
 var $77 = 0, $770 = 0.0, $771 = 0.0, $772 = 0.0, $773 = 0.0, $774 = 0.0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0.0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0.0, $92 = 0, $920 = 0.0, $921 = 0.0, $922 = 0.0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0.0, $958 = 0, $959 = 0.0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $c = 0, $cp = 0, $flen = 0, $fsize = 0, $head = 0;
 var $hlen = 0, $i = 0, $jh = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $zero_fsize = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $head = sp + 536|0;
 $jh = sp + 36|0;
 $zero_fsize = 1;
 HEAP32[600>>2] = -1;
 HEAP32[455352>>2] = -1;
 HEAP32[458032>>2] = -1;
 HEAP16[133136>>1] = 0;
 HEAP32[190520>>2] = 0;
 HEAP16[190512>>1] = 0;
 HEAP16[132368>>1] = 0;
 HEAP16[133096>>1] = 0;
 HEAP16[608>>1] = 0;
 HEAP16[616>>1] = 0;
 HEAP16[132120>>1] = 0;
 HEAP16[132112>>1] = 0;
 HEAP32[132400>>2] = 0;
 HEAP8[133144>>0] = 0;
 HEAP8[134232>>0] = 0;
 HEAP8[134168>>0] = 0;
 HEAP8[455368>>0] = 0;
 HEAP8[457272>>0] = 0;
 HEAP8[458016>>0] = 0;
 HEAP32[133224>>2] = 0;
 HEAPF32[456080>>2] = 0.0;
 HEAPF32[455320>>2] = 0.0;
 HEAPF32[455328>>2] = 0.0;
 HEAPF32[455312>>2] = 0.0;
 HEAP32[456072>>2] = 0;
 _memset((455488|0),0,480)|0;
 dest=456096+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 _memset((134720|0),0,8204)|0;
 dest=190920+0|0; stop=dest+128|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 dest=190528+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP16[134304>>1] = 0;
 HEAP16[134296>>1] = 0;
 HEAP32[134312>>2] = 0;
 HEAP32[454608>>2] = 0;
 HEAP32[458072>>2] = 0;
 HEAP32[190504>>2] = 0;
 HEAP32[458064>>2] = 37;
 HEAP32[133088>>2] = 0;
 HEAP32[133800>>2] = 0;
 HEAP32[134488>>2] = 0;
 HEAP32[133808>>2] = 0;
 HEAP32[133816>>2] = 0;
 HEAP32[133128>>2] = 0;
 HEAP32[133104>>2] = 0;
 HEAP32[132432>>2] = 0;
 HEAP32[160304>>2] = 0;
 HEAP32[458768>>2] = 0;
 HEAP32[132392>>2] = 0;
 HEAP32[133240>>2] = 0;
 HEAP32[455336>>2] = 0;
 HEAP32[190704>>2] = 0;
 HEAP32[491184>>2] = 0;
 HEAP32[864>>2] = 0;
 HEAP32[456872>>2] = 0;
 HEAP32[142928>>2] = 0;
 HEAP32[132296>>2] = 1;
 HEAP32[133760>>2] = 1;
 HEAPF64[458024>>3] = 1.0;
 HEAP32[133752>>2] = 0;
 HEAP32[133768>>2] = 0;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<(4);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = ($2|0)==(1);
  $4 = $3&1;
  $5 = (+($4|0));
  $6 = $i;
  $7 = (134016 + ($6<<2)|0);
  HEAPF32[$7>>2] = $5;
  $8 = $i;
  $9 = ($8|0)<(3);
  $10 = $9&1;
  $11 = (+($10|0));
  $12 = $i;
  $13 = (132080 + ($12<<2)|0);
  HEAPF32[$13>>2] = $11;
  $c = 0;
  while(1) {
   $14 = $c;
   $15 = ($14|0)<(3);
   if (!($15)) {
    break;
   }
   $16 = $i;
   $17 = $c;
   $18 = (455992 + ($17<<4)|0);
   $19 = (($18) + ($16<<2)|0);
   HEAPF32[$19>>2] = 0.0;
   $20 = $c;
   $21 = (($20) + 1)|0;
   $c = $21;
  }
  $c = 0;
  while(1) {
   $22 = $c;
   $23 = ($22|0)<(3);
   if (!($23)) {
    break;
   }
   $24 = $c;
   $25 = $i;
   $26 = ($24|0)==($25|0);
   $27 = $26&1;
   $28 = (+($27|0));
   $29 = $i;
   $30 = $c;
   $31 = (132312 + ($30<<4)|0);
   $32 = (($31) + ($29<<2)|0);
   HEAPF32[$32>>2] = $28;
   $33 = $c;
   $34 = (($33) + 1)|0;
   $c = $34;
  }
  $35 = $i;
  $36 = (($35) + 1)|0;
  $i = $36;
 }
 HEAP32[132304>>2] = 3;
 $i = 0;
 while(1) {
  $37 = $i;
  $38 = ($37|0)<(65536);
  if (!($38)) {
   break;
  }
  $39 = $i;
  $40 = $39&65535;
  $41 = $i;
  $42 = (968 + ($41<<1)|0);
  HEAP16[$42>>1] = $40;
  $43 = $i;
  $44 = (($43) + 1)|0;
  $i = $44;
 }
 $45 = (_get2()|0);
 HEAP16[944>>1] = $45;
 $46 = (_get4()|0);
 $hlen = $46;
 $47 = HEAP32[880>>2]|0;
 (_fseek(($47|0),0,0)|0);
 $48 = HEAP32[880>>2]|0;
 (_fread(($head|0),1,32,($48|0))|0);
 $49 = HEAP32[880>>2]|0;
 (_fseek(($49|0),0,2)|0);
 $50 = HEAP32[880>>2]|0;
 $51 = (_ftell(($50|0))|0);
 $fsize = $51;
 $flen = $51;
 $52 = (_my_memmem($head,32,455160,4)|0);
 $cp = $52;
 $53 = ($52|0)!=(0|0);
 if ($53) {
  label = 19;
 } else {
  $54 = (_my_memmem($head,32,455152,4)|0);
  $cp = $54;
  $55 = ($54|0)!=(0|0);
  if ($55) {
   label = 19;
  } else {
   $67 = HEAP16[944>>1]|0;
   $68 = $67 << 16 >> 16;
   $69 = ($68|0)==(18761);
   if ($69) {
    label = 25;
   } else {
    $70 = HEAP16[944>>1]|0;
    $71 = $70 << 16 >> 16;
    $72 = ($71|0)==(19789);
    if ($72) {
     label = 25;
    } else {
     $83 = (_memcmp($head,491208,4)|0);
     $84 = ($83|0)!=(0);
     if ($84) {
      label = 36;
     } else {
      $85 = (($head) + 6|0);
      $86 = (_memcmp($85,491216,4)|0);
      $87 = ($86|0)!=(0);
      if ($87) {
       label = 36;
      } else {
       $88 = HEAP32[880>>2]|0;
       (_fseek(($88|0),4,0)|0);
       $89 = (_get2()|0);
       $90 = $89&65535;
       $91 = (4 + ($90))|0;
       HEAP32[133816>>2] = $91;
       $92 = HEAP32[880>>2]|0;
       $93 = HEAP32[133816>>2]|0;
       (_fseek(($92|0),($93|0),0)|0);
       $94 = HEAP32[880>>2]|0;
       $95 = (_getc_unlocked(($94|0))|0);
       $96 = ($95|0)!=(255);
       if ($96) {
        (_parse_tiff(12)|0);
       }
       HEAP32[454608>>2] = 0;
      }
     }
     if ((label|0) == 36) {
      $97 = (($head) + 25|0);
      $98 = (_memcmp($97,491224,7)|0);
      $99 = ($98|0)!=(0);
      if ($99) {
       $113 = (_strcmp($head,491256)|0);
       $114 = ($113|0)!=(0);
       if ($114) {
        $115 = (_strcmp($head,491296)|0);
        $116 = ($115|0)!=(0);
        if ($116) {
         $117 = (_strcmp($head,491328)|0);
         $118 = ($117|0)!=(0);
         if ($118) {
          $119 = (_memcmp($head,455232,8)|0);
          $120 = ($119|0)!=(0);
          if ($120) {
           $149 = (_memcmp($head,458600,4)|0);
           $150 = ($149|0)!=(0);
           if ($150) {
            $152 = (($head) + 4|0);
            $153 = (_memcmp($152,491352,9)|0);
            $154 = ($153|0)!=(0);
            if ($154) {
             $157 = (_memcmp($head,491368,6)|0);
             $158 = ($157|0)!=(0);
             if ($158) {
              $167 = (_memcmp($head,491376,8)|0);
              $168 = ($167|0)!=(0);
              if ($168) {
               $198 = (_memcmp($head,491400,4)|0);
               $199 = ($198|0)!=(0);
               if ($199) {
                $207 = (_memcmp($head,491408,4)|0);
                $208 = ($207|0)!=(0);
                if ($208) {
                 $215 = (($head) + 4|0);
                 $216 = (_memcmp($215,491416,4)|0);
                 $217 = ($216|0)!=(0);
                 if ($217) {
                  $218 = (_memcmp($head,491440,9)|0);
                  $219 = ($218|0)!=(0);
                  if ($219) {
                   $220 = (_memcmp($head,491456,4)|0);
                   $221 = ($220|0)!=(0);
                   if ($221) {
                    $222 = (_memcmp($head,491464,4)|0);
                    $223 = ($222|0)!=(0);
                    if ($223) {
                     $224 = (_memcmp($head,491472,4)|0);
                     $225 = ($224|0)!=(0);
                     if ($225) {
                      $226 = (_memcmp($head,491480,2)|0);
                      $227 = ($226|0)!=(0);
                      if (!($227)) {
                       _parse_cine();
                      }
                     } else {
                      _parse_foveon();
                     }
                    } else {
                     _parse_minolta(0);
                    }
                   } else {
                    _parse_sinar_ia();
                   }
                  } else {
                   _parse_rollei();
                  }
                 } else {
                  (_strcpy((134168|0),(491424|0))|0);
                  (_strcpy((134232|0),(491432|0))|0);
                  _parse_redcine();
                  HEAP32[190504>>2] = 42;
                  _gamma_curve(0.41666666666666669,12.92,1,4095);
                  HEAP32[600>>2] = 1229539657;
                 }
                } else {
                 HEAP16[944>>1] = 18761;
                 $209 = HEAP32[880>>2]|0;
                 (_fseek(($209|0),2048,0)|0);
                 $210 = HEAP32[880>>2]|0;
                 (_fread((134168|0),1,41,($210|0))|0);
                 $211 = (_get2()|0);
                 HEAP16[133096>>1] = $211;
                 $212 = (_get2()|0);
                 HEAP16[132368>>1] = $212;
                 $213 = HEAP32[880>>2]|0;
                 (_fseek(($213|0),56,1)|0);
                 $214 = HEAP32[880>>2]|0;
                 (_fread((134232|0),1,30,($214|0))|0);
                 HEAP32[133816>>2] = 65536;
                 HEAP32[190504>>2] = 41;
                 _gamma_curve(0.0,12.25,1,1023);
                }
               } else {
                HEAP16[944>>1] = 18761;
                $200 = HEAP32[880>>2]|0;
                (_fseek(($200|0),20,0)|0);
                $201 = (_get4()|0);
                $202 = $201&65535;
                HEAP16[132120>>1] = $202;
                $203 = (_get4()|0);
                $204 = $203&65535;
                HEAP16[132112>>1] = $204;
                (_strcpy((134168|0),(491400|0))|0);
                $205 = HEAP32[880>>2]|0;
                (_fseek(($205|0),668,0)|0);
                $206 = HEAP32[880>>2]|0;
                (_fread((134232|0),1,64,($206|0))|0);
                HEAP32[133816>>2] = 4096;
                HEAP32[190504>>2] = 10;
                HEAP32[133128>>2] = 88;
                HEAP32[600>>2] = 1633771873;
               }
              } else {
               (_strcpy((134168|0),(491392|0))|0);
               HEAP16[944>>1] = 18761;
               $169 = HEAP32[880>>2]|0;
               (_fseek(($169|0),300,0)|0);
               $170 = (_get4()|0);
               HEAP32[133816>>2] = $170;
               $171 = (_get4()|0);
               $i = $171;
               $172 = (_get2()|0);
               HEAP16[132120>>1] = $172;
               $173 = (_get2()|0);
               HEAP16[132112>>1] = $173;
               $174 = $i;
               $175 = $174<<3;
               $176 = HEAP16[132120>>1]|0;
               $177 = $176&65535;
               $178 = HEAP16[132112>>1]|0;
               $179 = $178&65535;
               $180 = Math_imul($177, $179)|0;
               $181 = (($175|0) / ($180|0))&-1;
               HEAP32[133800>>2] = $181;
               if ((($181|0) == 10)) {
                HEAP32[190504>>2] = 11;
               } else if ((($181|0) == 8)) {
                HEAP32[190504>>2] = 8;
               }
               $182 = HEAP16[132112>>1]|0;
               $183 = $182&65535;
               $184 = $i;
               $185 = HEAP16[132120>>1]|0;
               $186 = $185&65535;
               $187 = HEAP32[133800>>2]|0;
               $188 = Math_imul($186, $187)|0;
               $189 = (($188>>>0) / 8)&-1;
               $190 = (($184>>>0) / ($189>>>0))&-1;
               $191 = HEAP16[132112>>1]|0;
               $192 = $191&65535;
               $193 = (($190) - ($192))|0;
               $194 = $193&65535;
               HEAP16[616>>1] = $194;
               $195 = $194&65535;
               $196 = (($183) + ($195))|0;
               $197 = $196&65535;
               HEAP16[133096>>1] = $197;
               HEAP32[((190528 + 12|0))>>2] = 1;
               HEAP32[600>>2] = 1633771873;
              }
             } else {
              $159 = HEAP32[880>>2]|0;
              (_fseek(($159|0),6,0)|0);
              $160 = HEAP32[880>>2]|0;
              (_fread((134168|0),1,8,($160|0))|0);
              $161 = HEAP32[880>>2]|0;
              (_fread((134232|0),1,8,($161|0))|0);
              $162 = HEAP32[880>>2]|0;
              (_fread((133144|0),1,16,($162|0))|0);
              $163 = (_get2()|0);
              $164 = $163&65535;
              HEAP32[133816>>2] = $164;
              (_get2()|0);
              $165 = (_get2()|0);
              HEAP16[132368>>1] = $165;
              $166 = (_get2()|0);
              HEAP16[133096>>1] = $166;
              HEAP32[190504>>2] = 11;
              HEAP32[600>>2] = 1633771873;
             }
            } else {
             $155 = HEAP32[880>>2]|0;
             (_fseek(($155|0),0,0)|0);
             $156 = $fsize;
             _parse_qt($156);
             HEAP32[133760>>2] = 0;
            }
           } else {
            $151 = HEAP32[880>>2]|0;
            (_fseek(($151|0),0,0)|0);
            _parse_riff();
           }
          } else {
           $121 = HEAP32[880>>2]|0;
           (_fseek(($121|0),84,0)|0);
           $122 = (_get4()|0);
           HEAP32[454608>>2] = $122;
           $123 = (_get4()|0);
           HEAP32[134312>>2] = $123;
           $124 = HEAP32[880>>2]|0;
           (_fseek(($124|0),92,0)|0);
           $125 = (_get4()|0);
           _parse_fuji($125);
           $126 = HEAP32[454608>>2]|0;
           $127 = ($126|0)>(120);
           if ($127) {
            $128 = HEAP32[880>>2]|0;
            (_fseek(($128|0),120,0)|0);
            $129 = (_get4()|0);
            $i = $129;
            $130 = ($129|0)!=(0);
            if ($130) {
             $132 = 1;
            } else {
             $132 = 0;
            }
            $131 = $132&1;
            $133 = HEAP32[133760>>2]|0;
            $134 = (($133) + ($131))|0;
            HEAP32[133760>>2] = $134;
            $135 = HEAP32[133760>>2]|0;
            $136 = ($135|0)==(2);
            do {
             if ($136) {
              $137 = HEAP32[8>>2]|0;
              $138 = ($137|0)!=(0);
              if (!($138)) {
               break;
              }
              $139 = $i;
              _parse_fuji($139);
             }
            } while(0);
           }
           HEAP32[190504>>2] = 19;
           $140 = HEAP32[880>>2]|0;
           $141 = HEAP32[8>>2]|0;
           $142 = ($141>>>0)>(0);
           $143 = $142&1;
           $144 = ($143*28)|0;
           $145 = (100 + ($144))|0;
           (_fseek(($140|0),($145|0),0)|0);
           $146 = (_get4()|0);
           HEAP32[133816>>2] = $146;
           (_parse_tiff($146)|0);
           $147 = HEAP32[454608>>2]|0;
           $148 = (($147) + 12)|0;
           (_parse_tiff($148)|0);
           _apply_tiff();
          }
         } else {
          (_strcpy((134168|0),(491304|0))|0);
          (_strcpy((134232|0),(491336|0))|0);
          HEAP32[190504>>2] = 40;
         }
        } else {
         (_strcpy((134168|0),(491304|0))|0);
         (_strcpy((134232|0),(491312|0))|0);
         HEAP32[190504>>2] = 39;
        }
       } else {
        (_strcpy((134168|0),(491264|0))|0);
        (_strcpy((134232|0),(491280|0))|0);
       }
      } else {
       (_strcpy((134168|0),(491232|0))|0);
       (_strcpy((134232|0),(491240|0))|0);
       $100 = HEAP32[880>>2]|0;
       (_fseek(($100|0),33,0)|0);
       _get_timestamp(1);
       $101 = HEAP32[880>>2]|0;
       (_fseek(($101|0),60,0)|0);
       $c = 0;
       while(1) {
        $102 = $c;
        $103 = ($102|0)<(4);
        if (!($103)) {
         break;
        }
        $104 = (_get4()|0);
        $105 = (+($104>>>0));
        $106 = $c;
        $107 = $c;
        $108 = $107 >> 1;
        $109 = $106 ^ $108;
        $110 = (134016 + ($109<<2)|0);
        HEAPF32[$110>>2] = $105;
        $111 = $c;
        $112 = (($111) + 1)|0;
        $c = $112;
       }
      }
     }
    }
   }
   if ((label|0) == 25) {
    $73 = (($head) + 6|0);
    $74 = (_memcmp($73,491192,8)|0);
    $75 = ($74|0)!=(0);
    if ($75) {
     $81 = (_parse_tiff(0)|0);
     $82 = ($81|0)!=(0);
     if ($82) {
      _apply_tiff();
     }
    } else {
     $76 = $hlen;
     HEAP32[133816>>2] = $76;
     $77 = $hlen;
     $78 = $flen;
     $79 = $hlen;
     $80 = (($78) - ($79))|0;
     _parse_ciff($77,$80,0);
     HEAP32[190504>>2] = 4;
    }
   }
  }
 }
 if ((label|0) == 19) {
  $56 = $cp;
  $57 = $56;
  $58 = $head;
  $59 = (($57) - ($58))|0;
  _parse_phase_one($59);
  $60 = $cp;
  $61 = $60;
  $62 = $head;
  $63 = (($61) - ($62))|0;
  $64 = ($63|0)!=(0);
  if ($64) {
   $65 = (_parse_tiff(0)|0);
   $66 = ($65|0)!=(0);
   if ($66) {
    _apply_tiff();
   }
  }
 }
 $228 = HEAP8[134168>>0]|0;
 $229 = $228 << 24 >> 24;
 $230 = ($229|0)==(0);
 if ($230) {
  $i = 0;
  $zero_fsize = 0;
  while(1) {
   $231 = $i;
   $232 = ($231>>>0)<(100);
   if (!($232)) {
    break;
   }
   $233 = $fsize;
   $234 = $i;
   $235 = (486160 + (($234*48)|0)|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = ($233|0)==($236|0);
   if ($237) {
    $238 = $i;
    $239 = (486160 + (($238*48)|0)|0);
    $240 = (($239) + 16|0);
    (_strcpy((134168|0),($240|0))|0);
    $241 = $i;
    $242 = (486160 + (($241*48)|0)|0);
    $243 = (($242) + 26|0);
    (_strcpy((134232|0),($243|0))|0);
    $244 = $i;
    $245 = (486160 + (($244*48)|0)|0);
    $246 = (($245) + 15|0);
    $247 = HEAP8[$246>>0]|0;
    $248 = $247&255;
    $249 = $248 >> 2;
    HEAP32[455352>>2] = $249;
    $250 = $i;
    $251 = (486160 + (($250*48)|0)|0);
    $252 = (($251) + 15|0);
    $253 = HEAP8[$252>>0]|0;
    $254 = $253&255;
    $255 = $254 & 2;
    HEAP32[491184>>2] = $255;
    $256 = $i;
    $257 = (486160 + (($256*48)|0)|0);
    $258 = (($257) + 15|0);
    $259 = HEAP8[$258>>0]|0;
    $260 = $259&255;
    $261 = $260 & 1;
    $262 = ($261|0)!=(0);
    if ($262) {
     _parse_external_jpeg();
    }
    $263 = $i;
    $264 = (486160 + (($263*48)|0)|0);
    $265 = (($264) + 46|0);
    $266 = HEAP16[$265>>1]|0;
    $267 = $266&65535;
    HEAP32[133816>>2] = $267;
    $268 = $i;
    $269 = (486160 + (($268*48)|0)|0);
    $270 = (($269) + 4|0);
    $271 = HEAP16[$270>>1]|0;
    HEAP16[132368>>1] = $271;
    $272 = $i;
    $273 = (486160 + (($272*48)|0)|0);
    $274 = (($273) + 6|0);
    $275 = HEAP16[$274>>1]|0;
    HEAP16[133096>>1] = $275;
    $276 = $i;
    $277 = (486160 + (($276*48)|0)|0);
    $278 = (($277) + 8|0);
    $279 = HEAP8[$278>>0]|0;
    $280 = $279&255;
    HEAP16[608>>1] = $280;
    $281 = $i;
    $282 = (486160 + (($281*48)|0)|0);
    $283 = (($282) + 9|0);
    $284 = HEAP8[$283>>0]|0;
    $285 = $284&255;
    HEAP16[616>>1] = $285;
    $286 = HEAP16[132368>>1]|0;
    $287 = $286&65535;
    $288 = HEAP16[608>>1]|0;
    $289 = $288&65535;
    $290 = (($287) - ($289))|0;
    $291 = $i;
    $292 = (486160 + (($291*48)|0)|0);
    $293 = (($292) + 10|0);
    $294 = HEAP8[$293>>0]|0;
    $295 = $294&255;
    $296 = (($290) - ($295))|0;
    $297 = $296&65535;
    HEAP16[132120>>1] = $297;
    $298 = HEAP16[133096>>1]|0;
    $299 = $298&65535;
    $300 = HEAP16[616>>1]|0;
    $301 = $300&65535;
    $302 = (($299) - ($301))|0;
    $303 = $i;
    $304 = (486160 + (($303*48)|0)|0);
    $305 = (($304) + 11|0);
    $306 = HEAP8[$305>>0]|0;
    $307 = $306&255;
    $308 = (($302) - ($307))|0;
    $309 = $308&65535;
    HEAP16[132112>>1] = $309;
    $310 = $i;
    $311 = (486160 + (($310*48)|0)|0);
    $312 = (($311) + 13|0);
    $313 = HEAP8[$312>>0]|0;
    $314 = $313&255;
    $315 = Math_imul(16843009, $314)|0;
    HEAP32[600>>2] = $315;
    $316 = HEAP32[600>>2]|0;
    $317 = HEAP32[600>>2]|0;
    $318 = $317 >>> 1;
    $319 = $316 & $318;
    $320 = $319 & 21845;
    $321 = ($320|0)!=(0);
    $322 = $321 ^ 1;
    $323 = $322&1;
    $324 = (4 - ($323))|0;
    HEAP32[132304>>2] = $324;
    $325 = $i;
    $326 = (486160 + (($325*48)|0)|0);
    $327 = (($326) + 12|0);
    $328 = HEAP8[$327>>0]|0;
    $329 = $328&255;
    HEAP32[133128>>2] = $329;
    $330 = $fsize;
    $331 = HEAP32[133816>>2]|0;
    $332 = (($330) - ($331))|0;
    $333 = $332<<3;
    $334 = HEAP16[132368>>1]|0;
    $335 = $334&65535;
    $336 = HEAP16[133096>>1]|0;
    $337 = $336&65535;
    $338 = Math_imul($335, $337)|0;
    $339 = (($333|0) / ($338|0))&-1;
    HEAP32[133800>>2] = $339;
    switch ($339|0) {
    case 8:  {
     HEAP32[190504>>2] = 8;
     break;
    }
    case 16:  {
     $342 = HEAP32[133128>>2]|0;
     $343 = $342 & 1;
     $344 = ($343*1028)|0;
     $345 = 18761 | $344;
     $346 = $345&65535;
     HEAP16[944>>1] = $346;
     $347 = HEAP32[133128>>2]|0;
     $348 = $347 >>> 4;
     $349 = HEAP32[133800>>2]|0;
     $350 = (($349) - ($348))|0;
     HEAP32[133800>>2] = $350;
     $351 = HEAP32[133128>>2]|0;
     $352 = $351 >>> 1;
     $353 = $352 & 7;
     HEAP32[133128>>2] = $353;
     $354 = HEAP32[133800>>2]|0;
     $355 = (($354) - ($353))|0;
     HEAP32[133800>>2] = $355;
     HEAP32[190504>>2] = 19;
     break;
    }
    case 6:  {
     HEAP32[190504>>2] = 43;
     break;
    }
    case 12: case 10:  {
     $340 = HEAP32[133128>>2]|0;
     $341 = $340 | 128;
     HEAP32[133128>>2] = $341;
     HEAP32[190504>>2] = 10;
     break;
    }
    default: {
    }
    }
    $356 = HEAP32[133800>>2]|0;
    $357 = 1 << $356;
    $358 = $i;
    $359 = (486160 + (($358*48)|0)|0);
    $360 = (($359) + 14|0);
    $361 = HEAP8[$360>>0]|0;
    $362 = $361&255;
    $363 = 1 << $362;
    $364 = (($357) - ($363))|0;
    HEAP32[132400>>2] = $364;
   }
   $365 = $i;
   $366 = (($365) + 1)|0;
   $i = $366;
  }
 }
 $367 = $zero_fsize;
 $368 = ($367|0)!=(0);
 if ($368) {
  $fsize = 0;
 }
 $369 = HEAP8[134168>>0]|0;
 $370 = $369 << 24 >> 24;
 $371 = ($370|0)==(0);
 if ($371) {
  $372 = $flen;
  _parse_smal(0,$372);
 }
 $373 = HEAP8[134168>>0]|0;
 $374 = $373 << 24 >> 24;
 $375 = ($374|0)==(0);
 if ($375) {
  (_parse_jpeg(0)|0);
  $376 = (_strncmp(134232,491488,2)|0);
  $377 = ($376|0)!=(0);
  if ($377) {
   $378 = (_strncmp(134232,491496,5)|0);
   $379 = ($378|0)!=(0);
   if ($379) {
    label = 129;
   } else {
    label = 125;
   }
  } else {
   label = 125;
  }
  if ((label|0) == 125) {
   $380 = HEAP32[880>>2]|0;
   $381 = (_fseek(($380|0),-6404096,2)|0);
   $382 = ($381|0)!=(0);
   if ($382) {
    label = 129;
   } else {
    $383 = HEAP32[880>>2]|0;
    $384 = (_fread(($head|0),1,32,($383|0))|0);
    $385 = ($384|0)!=(0);
    if ($385) {
     $386 = (_strcmp($head,491504)|0);
     $387 = ($386|0)!=(0);
     if ($387) {
      label = 129;
     } else {
      (_strcpy((134168|0),(143008|0))|0);
      $388 = HEAP32[880>>2]|0;
      $389 = (_ftell(($388|0))|0);
      $390 = (($389) + 32768)|0;
      $391 = (($390) - 32)|0;
      HEAP32[133816>>2] = $391;
      $392 = HEAP16[132368>>1]|0;
      HEAP16[132120>>1] = $392;
      HEAP16[132368>>1] = 2611;
      HEAP32[190504>>2] = 11;
      HEAP32[600>>2] = 370546198;
     }
    } else {
     label = 129;
    }
   }
  }
  if ((label|0) == 129) {
   HEAP32[133760>>2] = 0;
  }
 }
 $i = 0;
 while(1) {
  $393 = $i;
  $394 = ($393>>>0)<(21);
  if (!($394)) {
   break;
  }
  $395 = $i;
  $396 = (490960 + ($395<<2)|0);
  $397 = HEAP32[$396>>2]|0;
  $398 = (_my_strcasestr(134168,$397)|0);
  $399 = ($398|0)!=(0|0);
  if ($399) {
   $400 = $i;
   $401 = (490960 + ($400<<2)|0);
   $402 = HEAP32[$401>>2]|0;
   (_strcpy((134168|0),($402|0))|0);
  }
  $403 = $i;
  $404 = (($403) + 1)|0;
  $i = $404;
 }
 $405 = (_strcmp(134168,458040)|0);
 $406 = ($405|0)!=(0);
 if ($406) {
  $407 = (_strcmp(134168,491136)|0);
  $408 = ($407|0)!=(0);
  if (!($408)) {
   label = 139;
  }
 } else {
  label = 139;
 }
 do {
  if ((label|0) == 139) {
   $409 = (_my_strcasestr(134232,491512)|0);
   $cp = $409;
   $410 = ($409|0)!=(0|0);
   if (!($410)) {
    $411 = (_strstr(134232,491528)|0);
    $cp = $411;
    $412 = ($411|0)!=(0|0);
    if (!($412)) {
     break;
    }
   }
   $413 = $cp;
   HEAP8[$413>>0] = 0;
  }
 } while(0);
 $414 = (_strncasecmp(134232,455456,6)|0);
 $415 = ($414|0)!=(0);
 if (!($415)) {
  (_strcpy((134168|0),(491152|0))|0);
 }
 $416 = (_strlen((134168|0))|0);
 $417 = (134168 + ($416)|0);
 $cp = $417;
 while(1) {
  $418 = $cp;
  $419 = (($418) + -1|0);
  $cp = $419;
  $420 = HEAP8[$419>>0]|0;
  $421 = $420 << 24 >> 24;
  $422 = ($421|0)==(32);
  if (!($422)) {
   break;
  }
  $423 = $cp;
  HEAP8[$423>>0] = 0;
 }
 $424 = (_strlen((134232|0))|0);
 $425 = (134232 + ($424)|0);
 $cp = $425;
 while(1) {
  $426 = $cp;
  $427 = (($426) + -1|0);
  $cp = $427;
  $428 = HEAP8[$427>>0]|0;
  $429 = $428 << 24 >> 24;
  $430 = ($429|0)==(32);
  if (!($430)) {
   break;
  }
  $431 = $cp;
  HEAP8[$431>>0] = 0;
 }
 $432 = (_strlen((134168|0))|0);
 $i = $432;
 $433 = $i;
 $434 = (_strncasecmp(134232,134168,$433)|0);
 $435 = ($434|0)!=(0);
 if (!($435)) {
  $436 = $i;
  $437 = (($436) + 1)|0;
  $i = $437;
  $438 = (134232 + ($436)|0);
  $439 = HEAP8[$438>>0]|0;
  $440 = $439 << 24 >> 24;
  $441 = ($440|0)==(32);
  if ($441) {
   $442 = $i;
   $443 = (134232 + ($442)|0);
   $444 = $i;
   $445 = (64 - ($444))|0;
   _memmove((134232|0),($443|0),($445|0))|0;
  }
 }
 $446 = (_strncmp(134232,491544,8)|0);
 $447 = ($446|0)!=(0);
 if (!($447)) {
  (_strcpy((134232|0),(((134232 + 8|0))|0))|0);
 }
 $448 = (_strncmp(134232,491560,15)|0);
 $449 = ($448|0)!=(0);
 if (!($449)) {
  (_strcpy((134232|0),(((134232 + 15|0))|0))|0);
 }
 HEAP8[((133144 + 63|0))>>0] = 0;
 HEAP8[((134232 + 63|0))>>0] = 0;
 HEAP8[((134168 + 63|0))>>0] = 0;
 HEAP8[((455368 + 63|0))>>0] = 0;
 HEAP8[((457272 + 511|0))>>0] = 0;
 $450 = HEAP32[133760>>2]|0;
 $451 = ($450|0)!=(0);
 if ($451) {
  $452 = HEAP16[132112>>1]|0;
  $453 = ($452<<16>>16)!=(0);
  if (!($453)) {
   $454 = HEAP16[133096>>1]|0;
   HEAP16[132112>>1] = $454;
  }
  $455 = HEAP16[132120>>1]|0;
  $456 = ($455<<16>>16)!=(0);
  if (!($456)) {
   $457 = HEAP16[132368>>1]|0;
   HEAP16[132120>>1] = $457;
  }
  $458 = HEAP16[132112>>1]|0;
  $459 = $458&65535;
  $460 = ($459|0)==(2624);
  if ($460) {
   $461 = HEAP16[132120>>1]|0;
   $462 = $461&65535;
   $463 = ($462|0)==(3936);
   if ($463) {
    HEAP16[132112>>1] = 2616;
    HEAP16[132120>>1] = 3896;
   }
  }
  $464 = HEAP16[132112>>1]|0;
  $465 = $464&65535;
  $466 = ($465|0)==(3136);
  if ($466) {
   $467 = HEAP16[132120>>1]|0;
   $468 = $467&65535;
   $469 = ($468|0)==(4864);
   if ($469) {
    HEAP16[132112>>1] = 3124;
    HEAP16[132120>>1] = 4688;
    HEAP32[600>>2] = 370546198;
   }
  }
  $470 = HEAP16[132120>>1]|0;
  $471 = $470&65535;
  $472 = ($471|0)==(4352);
  do {
   if ($472) {
    $473 = (_strcmp(134232,491576)|0);
    $474 = ($473|0)!=(0);
    if ($474) {
     $475 = (_strcmp(134232,491584)|0);
     $476 = ($475|0)!=(0);
     if ($476) {
      break;
     }
    }
    HEAP16[132120>>1] = 4309;
    HEAP32[600>>2] = 370546198;
   }
  } while(0);
  $477 = HEAP16[132120>>1]|0;
  $478 = $477&65535;
  $479 = ($478|0)>=(4960);
  if ($479) {
   $480 = (_strncmp(134232,491592,3)|0);
   $481 = ($480|0)!=(0);
   if (!($481)) {
    HEAP16[608>>1] = 10;
    HEAP16[132120>>1] = 4950;
    HEAP32[600>>2] = 370546198;
   }
  }
  $482 = HEAP16[132120>>1]|0;
  $483 = $482&65535;
  $484 = ($483|0)==(4736);
  do {
   if ($484) {
    $485 = (_strcmp(134232,491600)|0);
    $486 = ($485|0)!=(0);
    if ($486) {
     break;
    }
    HEAP16[132112>>1] = 3122;
    HEAP16[132120>>1] = 4684;
    HEAP32[600>>2] = 370546198;
    HEAP16[616>>1] = 2;
   }
  } while(0);
  $487 = HEAP16[132120>>1]|0;
  $488 = $487&65535;
  $489 = ($488|0)==(6080);
  do {
   if ($489) {
    $490 = (_strcmp(134232,491608)|0);
    $491 = ($490|0)!=(0);
    if ($491) {
     break;
    }
    HEAP16[608>>1] = 4;
    HEAP16[132120>>1] = 6040;
   }
  } while(0);
  $492 = HEAP16[132120>>1]|0;
  $493 = $492&65535;
  $494 = ($493|0)==(7424);
  do {
   if ($494) {
    $495 = (_strcmp(134232,491616)|0);
    $496 = ($495|0)!=(0);
    if ($496) {
     break;
    }
    HEAP16[132112>>1] = 5502;
    HEAP16[132120>>1] = 7328;
    HEAP32[600>>2] = 1633771873;
    HEAP16[616>>1] = 29;
    HEAP16[608>>1] = 48;
   }
  } while(0);
  $497 = HEAP16[132112>>1]|0;
  $498 = $497&65535;
  $499 = ($498|0)==(3014);
  do {
   if ($499) {
    $500 = HEAP16[132120>>1]|0;
    $501 = $500&65535;
    $502 = ($501|0)==(4096);
    if (!($502)) {
     break;
    }
    HEAP16[132120>>1] = 4014;
   }
  } while(0);
  $503 = HEAP32[133104>>2]|0;
  $504 = ($503|0)!=(0);
  if ($504) {
   $505 = HEAP32[600>>2]|0;
   $506 = ($505|0)==(-1);
   if ($506) {
    HEAP32[600>>2] = 0;
   }
   $507 = HEAP32[600>>2]|0;
   $508 = ($507|0)!=(0);
   if ($508) {
    $509 = HEAP32[133240>>2]|0;
    $510 = HEAP32[133760>>2]|0;
    $511 = Math_imul($510, $509)|0;
    HEAP32[133760>>2] = $511;
   } else {
    $512 = HEAP32[133240>>2]|0;
    HEAP32[132304>>2] = $512;
   }
   $513 = HEAP32[133088>>2]|0;
   if ((($513|0) == 34892)) {
    HEAP32[190504>>2] = 46;
   } else if ((($513|0) == 7)) {
    HEAP32[190504>>2] = 45;
   } else if ((($513|0) == 1) | (($513|0) == 0)) {
    HEAP32[190504>>2] = 44;
   } else {
    HEAP32[190504>>2] = 0;
   }
  } else {
   $514 = (_strcmp(134168,455360)|0);
   $515 = ($514|0)!=(0);
   do {
    if (!($515)) {
     $516 = $fsize;
     $517 = ($516|0)!=(0);
     if ($517) {
      break;
     }
     $518 = HEAP32[133800>>2]|0;
     $519 = ($518|0)!=(15);
     if (!($519)) {
      break;
     }
     $520 = HEAP32[190504>>2]|0;
     $521 = ($520|0)!=(0|0);
     if (!($521)) {
      HEAP32[190504>>2] = 5;
     }
     $i = 0;
     while(1) {
      $522 = $i;
      $523 = ($522>>>0)<(42);
      if (!($523)) {
       break;
      }
      $524 = HEAP16[132368>>1]|0;
      $525 = $524&65535;
      $526 = $i;
      $527 = (483264 + (($526*22)|0)|0);
      $528 = HEAP16[$527>>1]|0;
      $529 = $528&65535;
      $530 = ($525|0)==($529|0);
      do {
       if ($530) {
        $531 = HEAP16[133096>>1]|0;
        $532 = $531&65535;
        $533 = $i;
        $534 = (483264 + (($533*22)|0)|0);
        $535 = (($534) + 2|0);
        $536 = HEAP16[$535>>1]|0;
        $537 = $536&65535;
        $538 = ($532|0)==($537|0);
        if (!($538)) {
         break;
        }
        $539 = HEAP16[132368>>1]|0;
        $540 = $539&65535;
        $541 = $i;
        $542 = (483264 + (($541*22)|0)|0);
        $543 = (($542) + 4|0);
        $544 = HEAP16[$543>>1]|0;
        HEAP16[608>>1] = $544;
        $545 = $544&65535;
        $546 = (($540) - ($545))|0;
        $547 = $546&65535;
        HEAP16[132120>>1] = $547;
        $548 = HEAP16[133096>>1]|0;
        $549 = $548&65535;
        $550 = $i;
        $551 = (483264 + (($550*22)|0)|0);
        $552 = (($551) + 6|0);
        $553 = HEAP16[$552>>1]|0;
        HEAP16[616>>1] = $553;
        $554 = $553&65535;
        $555 = (($549) - ($554))|0;
        $556 = $555&65535;
        HEAP16[132112>>1] = $556;
        $557 = $i;
        $558 = (483264 + (($557*22)|0)|0);
        $559 = (($558) + 8|0);
        $560 = HEAP16[$559>>1]|0;
        $561 = $560&65535;
        $562 = HEAP16[132120>>1]|0;
        $563 = $562&65535;
        $564 = (($563) - ($561))|0;
        $565 = $564&65535;
        HEAP16[132120>>1] = $565;
        $566 = $i;
        $567 = (483264 + (($566*22)|0)|0);
        $568 = (($567) + 10|0);
        $569 = HEAP16[$568>>1]|0;
        $570 = $569&65535;
        $571 = HEAP16[132112>>1]|0;
        $572 = $571&65535;
        $573 = (($572) - ($570))|0;
        $574 = $573&65535;
        HEAP16[132112>>1] = $574;
        $575 = $i;
        $576 = (483264 + (($575*22)|0)|0);
        $577 = (($576) + 12|0);
        $578 = HEAP16[$577>>1]|0;
        $579 = $578&65535;
        HEAP32[((190528 + 4|0))>>2] = $579;
        $580 = $i;
        $581 = (483264 + (($580*22)|0)|0);
        $582 = (($581) + 14|0);
        $583 = HEAP16[$582>>1]|0;
        $584 = $583&65535;
        $585 = (0 - ($584))|0;
        HEAP32[((190528 + 12|0))>>2] = $585;
        $586 = $i;
        $587 = (483264 + (($586*22)|0)|0);
        $588 = (($587) + 16|0);
        $589 = HEAP16[$588>>1]|0;
        $590 = $589&65535;
        HEAP32[((190528 + 20|0))>>2] = $590;
        $591 = $i;
        $592 = (483264 + (($591*22)|0)|0);
        $593 = (($592) + 18|0);
        $594 = HEAP16[$593>>1]|0;
        $595 = $594&65535;
        $596 = (0 - ($595))|0;
        HEAP32[((190528 + 28|0))>>2] = $596;
        $597 = $i;
        $598 = (483264 + (($597*22)|0)|0);
        $599 = (($598) + 20|0);
        $600 = HEAP16[$599>>1]|0;
        $601 = ($600<<16>>16)!=(0);
        if ($601) {
         $602 = $i;
         $603 = (483264 + (($602*22)|0)|0);
         $604 = (($603) + 20|0);
         $605 = HEAP16[$604>>1]|0;
         $606 = $605&65535;
         $607 = Math_imul($606, 16843009)|0;
         HEAP32[600>>2] = $607;
        }
       }
      } while(0);
      $608 = $i;
      $609 = (($608) + 1)|0;
      $i = $609;
     }
     $610 = HEAP32[133224>>2]|0;
     $611 = $610 | 131072;
     $612 = ($611|0)==(41025536);
     if ($612) {
      HEAP16[608>>1] = 8;
      HEAP16[616>>1] = 16;
     }
    }
   } while(0);
   $i = 0;
   while(1) {
    $613 = $i;
    $614 = ($613>>>0)<(38);
    if (!($614)) {
     break;
    }
    $615 = HEAP32[133224>>2]|0;
    $616 = $i;
    $617 = (484192 + (($616*22)|0)|0);
    $618 = HEAP16[$617>>1]|0;
    $619 = $618&65535;
    $620 = (-2147483648 + ($619))|0;
    $621 = ($615|0)==($620|0);
    if ($621) {
     $622 = $i;
     $623 = (484192 + (($622*22)|0)|0);
     $624 = (($623) + 2|0);
     _adobe_coeff(455360,$624);
     $625 = HEAP8[((134232 + 4|0))>>0]|0;
     $626 = $625 << 24 >> 24;
     $627 = ($626|0)==(75);
     do {
      if ($627) {
       $628 = (_strlen((134232|0))|0);
       $629 = ($628|0)==(8);
       if (!($629)) {
        break;
       }
       $630 = $i;
       $631 = (484192 + (($630*22)|0)|0);
       $632 = (($631) + 2|0);
       (_strcpy((134232|0),($632|0))|0);
      }
     } while(0);
    }
    $633 = $i;
    $634 = (($633) + 1)|0;
    $i = $634;
   }
   $i = 0;
   while(1) {
    $635 = $i;
    $636 = ($635>>>0)<(51);
    if (!($636)) {
     break;
    }
    $637 = HEAP32[133224>>2]|0;
    $638 = $i;
    $639 = (485032 + (($638*22)|0)|0);
    $640 = HEAP16[$639>>1]|0;
    $641 = $640&65535;
    $642 = ($637|0)==($641|0);
    if ($642) {
     $643 = $i;
     $644 = (485032 + (($643*22)|0)|0);
     $645 = (($644) + 2|0);
     (_strcpy((134232|0),($645|0))|0);
    }
    $646 = $i;
    $647 = (($646) + 1)|0;
    $i = $647;
   }
   $648 = (_strcmp(134168,455184)|0);
   $649 = ($648|0)!=(0);
   if (!($649)) {
    $650 = HEAP32[190504>>2]|0;
    $651 = ($650|0)!=(0|0);
    if (!($651)) {
     HEAP32[190504>>2] = 10;
    }
    $652 = HEAP8[134232>>0]|0;
    $653 = $652 << 24 >> 24;
    $654 = ($653|0)==(69);
    if ($654) {
     $655 = HEAP32[133816>>2]|0;
     $656 = ($655|0)!=(0);
     $657 = $656 ^ 1;
     $658 = $657&1;
     $659 = $658 << 2;
     $660 = $659 | 2;
     $661 = HEAP32[133128>>2]|0;
     $662 = $661 | $660;
     HEAP32[133128>>2] = $662;
    }
   }
   $663 = (_strcmp(134232,491624)|0);
   $664 = ($663|0)!=(0);
   do {
    if (!($664)) {
     $665 = (+_find_green(16,16,3840,5120));
     $666 = $665 < 25.0;
     if (!($666)) {
      break;
     }
     HEAP16[132112>>1] = 480;
     HEAP32[600>>2] = 0;
     HEAP16[616>>1] = 0;
     (_strcpy((134232|0),(491640|0))|0);
    }
   } while(0);
   $667 = HEAP32[458768>>2]|0;
   $668 = ($667|0)!=(0);
   if ($668) {
    $669 = HEAP16[132112>>1]|0;
    $670 = $669&65535;
    $671 = $670<<1;
    $672 = HEAP16[132120>>1]|0;
    $673 = $672&65535;
    $674 = ($671|0)<($673|0);
    if ($674) {
     HEAPF64[458024>>3] = 0.5;
    }
    $675 = HEAP16[132112>>1]|0;
    $676 = $675&65535;
    $677 = HEAP16[132120>>1]|0;
    $678 = $677&65535;
    $679 = ($676|0)>($678|0);
    if ($679) {
     HEAPF64[458024>>3] = 2.0;
    }
    HEAP32[600>>2] = 0;
    _simple_coeff(0);
   } else {
    $680 = (_strcmp(134168,455360)|0);
    $681 = ($680|0)!=(0);
    do {
     if ($681) {
      label = 258;
     } else {
      $682 = HEAP32[133800>>2]|0;
      $683 = ($682|0)==(15);
      if (!($683)) {
       label = 258;
       break;
      }
      $684 = HEAP16[132120>>1]|0;
      $685 = $684&65535;
      if ((($685|0) == 3344)) {
       $686 = HEAP16[132120>>1]|0;
       $687 = $686&65535;
       $688 = (($687) - 66)|0;
       $689 = $688&65535;
       HEAP16[132120>>1] = $689;
       label = 251;
      } else if ((($685|0) == 3872)) {
       label = 251;
      }
      if ((label|0) == 251) {
       $690 = HEAP16[132120>>1]|0;
       $691 = $690&65535;
       $692 = (($691) - 6)|0;
       $693 = $692&65535;
       HEAP16[132120>>1] = $693;
      }
      $694 = HEAP16[132112>>1]|0;
      $695 = $694&65535;
      $696 = HEAP16[132120>>1]|0;
      $697 = $696&65535;
      $698 = ($695|0)>($697|0);
      if ($698) {
       $699 = HEAP16[132112>>1]|0;
       $700 = $699&65535;
       $701 = HEAP16[132120>>1]|0;
       $702 = $701&65535;
       $703 = (($700) + ($702))|0;
       $704 = $703&65535;
       HEAP16[132112>>1] = $704;
       $705 = HEAP16[132112>>1]|0;
       $706 = $705&65535;
       $707 = HEAP16[132120>>1]|0;
       $708 = $707&65535;
       $709 = (($706) - ($708))|0;
       $710 = $709&65535;
       HEAP16[132120>>1] = $710;
       $711 = HEAP16[132112>>1]|0;
       $712 = $711&65535;
       $713 = HEAP16[132120>>1]|0;
       $714 = $713&65535;
       $715 = (($712) - ($714))|0;
       $716 = $715&65535;
       HEAP16[132112>>1] = $716;
       $717 = HEAP16[133096>>1]|0;
       $718 = $717&65535;
       $719 = HEAP16[132368>>1]|0;
       $720 = $719&65535;
       $721 = (($718) + ($720))|0;
       $722 = $721&65535;
       HEAP16[133096>>1] = $722;
       $723 = HEAP16[133096>>1]|0;
       $724 = $723&65535;
       $725 = HEAP16[132368>>1]|0;
       $726 = $725&65535;
       $727 = (($724) - ($726))|0;
       $728 = $727&65535;
       HEAP16[132368>>1] = $728;
       $729 = HEAP16[133096>>1]|0;
       $730 = $729&65535;
       $731 = HEAP16[132368>>1]|0;
       $732 = $731&65535;
       $733 = (($730) - ($732))|0;
       $734 = $733&65535;
       HEAP16[133096>>1] = $734;
      }
      $735 = HEAP16[132120>>1]|0;
      $736 = $735&65535;
      $737 = ($736|0)==(7200);
      do {
       if ($737) {
        $738 = HEAP16[132112>>1]|0;
        $739 = $738&65535;
        $740 = ($739|0)==(3888);
        if (!($740)) {
         break;
        }
        HEAP16[132120>>1] = 6480;
        HEAP16[132368>>1] = 6480;
        HEAP16[132112>>1] = 4320;
        HEAP16[133096>>1] = 4320;
       }
      } while(0);
      HEAP32[600>>2] = 0;
      HEAP32[132304>>2] = 3;
      HEAP32[133240>>2] = 3;
      HEAP32[190504>>2] = 47;
     }
    } while(0);
    if ((label|0) == 258) {
     $741 = (_strcmp(134232,491648)|0);
     $742 = ($741|0)!=(0);
     if ($742) {
      $743 = (_strcmp(134232,491664)|0);
      $744 = ($743|0)!=(0);
      do {
       if ($744) {
        $745 = (_strcmp(134232,491680)|0);
        $746 = ($745|0)!=(0);
        if (!($746)) {
         label = 262;
         break;
        }
        $747 = (_strcmp(134232,491704)|0);
        $748 = ($747|0)!=(0);
        if (!($748)) {
         HEAP16[132112>>1] = 968;
         HEAP16[132120>>1] = 1290;
         HEAP16[132368>>1] = 1320;
         HEAP32[600>>2] = 458115870;
         label = 267;
         break;
        }
        $749 = (_strcmp(134232,491720)|0);
        $750 = ($749|0)!=(0);
        if (!($750)) {
         HEAP16[132112>>1] = 1024;
         HEAP16[132120>>1] = 1552;
         HEAP32[600>>2] = 508251675;
         label = 267;
         break;
        }
        $751 = (_strcmp(134232,491736)|0);
        $752 = ($751|0)!=(0);
        do {
         if ($752) {
          $753 = (_strcmp(134232,491760)|0);
          $754 = ($753|0)!=(0);
          if (!($754)) {
           label = 270;
           break;
          }
          $755 = (_strcmp(134232,491776)|0);
          $756 = ($755|0)!=(0);
          if ($756) {
           $759 = (_strcmp(134232,491800)|0);
           $760 = ($759|0)!=(0);
           if ($760) {
            $761 = (_strcmp(134232,491824)|0);
            $762 = ($761|0)!=(0);
            if ($762) {
             $765 = (_strcmp(134232,491840)|0);
             $766 = ($765|0)!=(0);
             if ($766) {
              $775 = (_strcmp(134232,491848)|0);
              $776 = ($775|0)!=(0);
              if ($776) {
               $781 = (_strcmp(134232,491856)|0);
               $782 = ($781|0)!=(0);
               do {
                if ($782) {
                 $783 = (_strcmp(134232,491864)|0);
                 $784 = ($783|0)!=(0);
                 if (!($784)) {
                  label = 287;
                  break;
                 }
                 $785 = (_strcmp(134232,491872)|0);
                 $786 = ($785|0)!=(0);
                 if (!($786)) {
                  label = 287;
                  break;
                 }
                 $787 = (_strcmp(134232,491880)|0);
                 $788 = ($787|0)!=(0);
                 if (!($788)) {
                  label = 287;
                  break;
                 }
                 $797 = (_strcmp(134232,491888)|0);
                 $798 = ($797|0)!=(0);
                 do {
                  if ($798) {
                   $799 = (_strcmp(134232,491896)|0);
                   $800 = ($799|0)!=(0);
                   if (!($800)) {
                    label = 291;
                    break;
                   }
                   $801 = (_strcmp(134232,491904)|0);
                   $802 = ($801|0)!=(0);
                   if (!($802)) {
                    label = 291;
                    break;
                   }
                   $807 = (_strcmp(134232,491912)|0);
                   $808 = ($807|0)!=(0);
                   if ($808) {
                    $813 = (_strcmp(134232,491920)|0);
                    $814 = ($813|0)!=(0);
                    do {
                     if ($814) {
                      $815 = (_strcmp(134232,491928)|0);
                      $816 = ($815|0)!=(0);
                      if (!($816)) {
                       label = 296;
                       break;
                      }
                      $821 = (_strcmp(134232,491936)|0);
                      $822 = ($821|0)!=(0);
                      do {
                       if ($822) {
                        $823 = (_strcmp(134232,491944)|0);
                        $824 = ($823|0)!=(0);
                        if (!($824)) {
                         label = 300;
                         break;
                        }
                        $825 = (_strcmp(134232,491952)|0);
                        $826 = ($825|0)!=(0);
                        if (!($826)) {
                         label = 300;
                         break;
                        }
                        $831 = (_strcmp(134232,491968)|0);
                        $832 = ($831|0)!=(0);
                        do {
                         if ($832) {
                          $833 = (_strncmp(134232,491976,2)|0);
                          $834 = ($833|0)!=(0);
                          if (!($834)) {
                           label = 304;
                           break;
                          }
                          $835 = (_strncmp(134232,491984,4)|0);
                          $836 = ($835|0)!=(0);
                          if (!($836)) {
                           label = 304;
                           break;
                          }
                          $841 = (_strcmp(134232,491992)|0);
                          $842 = ($841|0)!=(0);
                          do {
                           if ($842) {
                            $843 = (_strcmp(134232,492000)|0);
                            $844 = ($843|0)!=(0);
                            if (!($844)) {
                             label = 307;
                             break;
                            }
                            $849 = (_strncmp(134232,492008,3)|0);
                            $850 = ($849|0)!=(0);
                            do {
                             if ($850) {
                              $851 = (_strncmp(134232,492016,3)|0);
                              $852 = ($851|0)!=(0);
                              if (!($852)) {
                               label = 311;
                               break;
                              }
                              $853 = (_strncmp(134232,492024,3)|0);
                              $854 = ($853|0)!=(0);
                              if (!($854)) {
                               label = 311;
                               break;
                              }
                              $857 = (_strcmp(134232,492032)|0);
                              $858 = ($857|0)!=(0);
                              if ($858) {
                               $868 = (_strcmp(134232,492040)|0);
                               $869 = ($868|0)!=(0);
                               if ($869) {
                                $874 = (_strncmp(134232,492048,3)|0);
                                $875 = ($874|0)!=(0);
                                if ($875) {
                                 $880 = (_strncmp(134232,492056,3)|0);
                                 $881 = ($880|0)!=(0);
                                 if ($881) {
                                  $893 = (_strncmp(134232,492064,4)|0);
                                  $894 = ($893|0)!=(0);
                                  if ($894) {
                                   $899 = (_strncmp(134232,492072,9)|0);
                                   $900 = ($899|0)!=(0);
                                   do {
                                    if ($900) {
                                     label = 333;
                                    } else {
                                     $901 = HEAP16[132368>>1]|0;
                                     $902 = $901&65535;
                                     $903 = ($902|0)!=(4032);
                                     if (!($903)) {
                                      label = 333;
                                      break;
                                     }
                                     HEAP32[133128>>2] = 24;
                                     HEAP32[600>>2] = -1802201964;
                                     $904 = HEAP8[((134232 + 9|0))>>0]|0;
                                     $905 = $904 << 24 >> 24;
                                     $906 = ($905|0)==(55);
                                     do {
                                      if ($906) {
                                       $907 = +HEAPF32[455312>>2];
                                       $908 = $907 >= 400.0;
                                       if (!($908)) {
                                        break;
                                       }
                                       HEAP32[132392>>2] = 255;
                                      }
                                     } while(0);
                                    }
                                   } while(0);
                                   if ((label|0) == 333) {
                                    $909 = (_strncmp(134232,492088,2)|0);
                                    $910 = ($909|0)!=(0);
                                    if ($910) {
                                     $915 = $fsize;
                                     $916 = ($915|0)==(1581060);
                                     if ($916) {
                                      _simple_coeff(3);
                                      HEAPF32[132080>>2] = 1.2085000276565552;
                                      HEAPF32[((132080 + 4|0))>>2] = 1.0943000316619873;
                                      HEAPF32[((132080 + 12|0))>>2] = 1.1102999448776245;
                                     } else {
                                      $917 = $fsize;
                                      $918 = ($917|0)==(3178560);
                                      if ($918) {
                                       $919 = +HEAPF32[134016>>2];
                                       $920 = $919 * 4.0;
                                       HEAPF32[134016>>2] = $920;
                                       $921 = +HEAPF32[((134016 + 8|0))>>2];
                                       $922 = $921 * 4.0;
                                       HEAPF32[((134016 + 8|0))>>2] = $922;
                                      } else {
                                       $923 = $fsize;
                                       $924 = ($923|0)==(4771840);
                                       if ($924) {
                                        $925 = HEAP32[190704>>2]|0;
                                        $926 = ($925|0)!=(0);
                                        do {
                                         if (!($926)) {
                                          $927 = (_nikon_e995()|0);
                                          $928 = ($927|0)!=(0);
                                          if (!($928)) {
                                           break;
                                          }
                                          (_strcpy((134232|0),(492096|0))|0);
                                         }
                                        } while(0);
                                        $929 = (_strcmp(134232,492096)|0);
                                        $930 = ($929|0)!=(0);
                                        if ($930) {
                                         HEAP32[600>>2] = -1263225676;
                                         _simple_coeff(3);
                                         HEAPF32[132080>>2] = 1.1959999799728394;
                                         HEAPF32[((132080 + 4|0))>>2] = 1.2460000514984131;
                                         HEAPF32[((132080 + 8|0))>>2] = 1.0180000066757202;
                                        }
                                       } else {
                                        $931 = $fsize;
                                        $932 = ($931|0)==(2940928);
                                        if ($932) {
                                         $933 = HEAP32[190704>>2]|0;
                                         $934 = ($933|0)!=(0);
                                         do {
                                          if (!($934)) {
                                           $935 = (_nikon_e2100()|0);
                                           $936 = ($935|0)!=(0);
                                           if ($936) {
                                            break;
                                           }
                                           (_strcpy((134232|0),(492104|0))|0);
                                          }
                                         } while(0);
                                         $937 = (_strcmp(134232,492104)|0);
                                         $938 = ($937|0)!=(0);
                                         if (!($938)) {
                                          $939 = HEAP16[132112>>1]|0;
                                          $940 = $939&65535;
                                          $941 = (($940) - 2)|0;
                                          $942 = $941&65535;
                                          HEAP16[132112>>1] = $942;
                                          HEAP32[133128>>2] = 6;
                                          HEAP32[132304>>2] = 4;
                                          HEAP32[600>>2] = 1263225675;
                                         }
                                        } else {
                                         $943 = $fsize;
                                         $944 = ($943|0)==(4775936);
                                         if ($944) {
                                          $945 = HEAP32[190704>>2]|0;
                                          $946 = ($945|0)!=(0);
                                          if (!($946)) {
                                           _nikon_3700();
                                          }
                                          $947 = HEAP8[134232>>0]|0;
                                          $948 = $947 << 24 >> 24;
                                          $949 = ($948|0)==(69);
                                          do {
                                           if ($949) {
                                            $950 = (_atoi(((134232 + 1|0)))|0);
                                            $951 = ($950|0)<(3700);
                                            if (!($951)) {
                                             break;
                                            }
                                            HEAP32[600>>2] = 1229539657;
                                           }
                                          } while(0);
                                          $952 = (_strcmp(134232,492112)|0);
                                          $953 = ($952|0)!=(0);
                                          if (!($953)) {
                                           HEAP32[455352>>2] = 1;
                                           HEAP32[600>>2] = 370546198;
                                          }
                                          $954 = HEAP8[134168>>0]|0;
                                          $955 = $954 << 24 >> 24;
                                          $956 = ($955|0)==(79);
                                          if ($956) {
                                           $957 = (+_find_green(12,32,1188864,3576832));
                                           $958 = (~~(($957)));
                                           $i = $958;
                                           $959 = (+_find_green(12,32,2383920,2387016));
                                           $960 = (~~(($959)));
                                           $c = $960;
                                           $961 = $i;
                                           $962 = (Math_abs(($961|0))|0);
                                           $963 = $c;
                                           $964 = (Math_abs(($963|0))|0);
                                           $965 = ($962|0)<($964|0);
                                           if ($965) {
                                            $966 = $i;
                                            $967 = $c;
                                            $968 = (($966) + ($967))|0;
                                            $i = $968;
                                            $969 = $i;
                                            $970 = $c;
                                            $971 = (($969) - ($970))|0;
                                            $c = $971;
                                            $972 = $i;
                                            $973 = $c;
                                            $974 = (($972) - ($973))|0;
                                            $i = $974;
                                            HEAP32[133128>>2] = 24;
                                           }
                                           $975 = $i;
                                           $976 = ($975|0)<(0);
                                           if ($976) {
                                            HEAP32[600>>2] = 1633771873;
                                           }
                                          }
                                         } else {
                                          $977 = $fsize;
                                          $978 = ($977|0)==(5869568);
                                          if ($978) {
                                           $979 = HEAP32[190704>>2]|0;
                                           $980 = ($979|0)!=(0);
                                           do {
                                            if (!($980)) {
                                             $981 = (_minolta_z2()|0);
                                             $982 = ($981|0)!=(0);
                                             if (!($982)) {
                                              break;
                                             }
                                             (_strcpy((134168|0),(491104|0))|0);
                                             (_strcpy((134232|0),(492128|0))|0);
                                            }
                                           } while(0);
                                           $983 = HEAP8[134168>>0]|0;
                                           $984 = $983 << 24 >> 24;
                                           $985 = ($984|0)==(77);
                                           $986 = $985&1;
                                           $987 = ($986*24)|0;
                                           $988 = (6 + ($987))|0;
                                           HEAP32[133128>>2] = $988;
                                          } else {
                                           $989 = $fsize;
                                           $990 = ($989|0)==(6291456);
                                           if ($990) {
                                            $991 = HEAP32[880>>2]|0;
                                            (_fseek(($991|0),3145728,0)|0);
                                            $992 = (_guess_byte_order(65536)|0);
                                            HEAP16[944>>1] = $992;
                                            $993 = $992 << 16 >> 16;
                                            $994 = ($993|0)==(19789);
                                            if ($994) {
                                             HEAP16[616>>1] = 16;
                                             $995 = HEAP16[132112>>1]|0;
                                             $996 = $995&65535;
                                             $997 = (($996) - 16)|0;
                                             $998 = $997&65535;
                                             HEAP16[132112>>1] = $998;
                                             HEAP16[608>>1] = 28;
                                             $999 = HEAP16[132120>>1]|0;
                                             $1000 = $999&65535;
                                             $1001 = (($1000) - 28)|0;
                                             $1002 = $1001&65535;
                                             HEAP16[132120>>1] = $1002;
                                             HEAP32[132400>>2] = 62912;
                                             (_strcpy((134168|0),(492144|0))|0);
                                             HEAP8[134232>>0] = 0;
                                            }
                                           } else {
                                            $1003 = (_strcmp(134168,491080)|0);
                                            $1004 = ($1003|0)!=(0);
                                            if ($1004) {
                                             $1092 = (_strcmp(134232,492176)|0);
                                             $1093 = ($1092|0)!=(0);
                                             L546: do {
                                              if ($1093) {
                                               $1094 = (_strcmp(134232,492184)|0);
                                               $1095 = ($1094|0)!=(0);
                                               L549: do {
                                                if ($1095) {
                                                 $1096 = (_strcasecmp(134168,491104)|0);
                                                 $1097 = ($1096|0)!=(0);
                                                 if (!($1097)) {
                                                  $1098 = HEAP32[190504>>2]|0;
                                                  $1099 = ($1098|0)!=(0|0);
                                                  if (!($1099)) {
                                                   HEAP32[132400>>2] = 4095;
                                                   HEAP32[190504>>2] = 19;
                                                  }
                                                  $1100 = (_strncmp(134232,492192,8)|0);
                                                  $1101 = ($1100|0)!=(0);
                                                  if (!($1101)) {
                                                   $1102 = (_strcmp(134232,458080)|0);
                                                   $1103 = ($1102|0)!=(0);
                                                   if (!($1103)) {
                                                    HEAP32[600>>2] = 1229539657;
                                                   }
                                                   HEAP32[133800>>2] = 12;
                                                   HEAP32[190504>>2] = 10;
                                                   label = 438;
                                                   break L546;
                                                  }
                                                  $1104 = (_strncmp(134232,492208,5)|0);
                                                  $1105 = ($1104|0)!=(0);
                                                  do {
                                                   if ($1105) {
                                                    $1106 = (_strncmp(134232,492216,5)|0);
                                                    $1107 = ($1106|0)!=(0);
                                                    if (!($1107)) {
                                                     break;
                                                    }
                                                    $1108 = (_strncmp(134232,492224,6)|0);
                                                    $1109 = ($1108|0)!=(0);
                                                    if (!($1109)) {
                                                     break;
                                                    }
                                                    $1115 = (_strncmp(134232,492248,8)|0);
                                                    $1116 = ($1115|0)!=(0);
                                                    if ($1116) {
                                                     label = 436;
                                                     break L546;
                                                    }
                                                    $1117 = HEAP8[((134232 + 8|0))>>0]|0;
                                                    $1118 = $1117 << 24 >> 24;
                                                    $1119 = ($1118|0)==(52);
                                                    if ($1119) {
                                                     HEAP16[132112>>1] = 1716;
                                                     HEAP16[132120>>1] = 2304;
                                                     break L549;
                                                    }
                                                    $1120 = HEAP8[((134232 + 8|0))>>0]|0;
                                                    $1121 = $1120 << 24 >> 24;
                                                    $1122 = ($1121|0)==(53);
                                                    if ($1122) {
                                                     label = 429;
                                                     break L549;
                                                    }
                                                    $1123 = HEAP8[((134232 + 8|0))>>0]|0;
                                                    $1124 = $1123 << 24 >> 24;
                                                    $1125 = ($1124|0)==(54);
                                                    if ($1125) {
                                                     HEAP16[132112>>1] = 2136;
                                                     HEAP16[132120>>1] = 2848;
                                                    }
                                                    label = 433;
                                                    break L549;
                                                   }
                                                  } while(0);
                                                  $1110 = HEAP8[134232>>0]|0;
                                                  $1111 = $1110 << 24 >> 24;
                                                  $1112 = ($1111|0)==(77);
                                                  $1113 = $1112&1;
                                                  $1114 = (((134232 + 6|0)) + ($1113)|0);
                                                  HEAP32[$vararg_buffer>>2] = $1114;
                                                  (_sprintf(((134232 + 20|0)),492232,$vararg_buffer)|0);
                                                  _adobe_coeff(134168,((134232 + 20|0)));
                                                  HEAP32[190504>>2] = 10;
                                                  label = 437;
                                                  break L546;
                                                 }
                                                 $1128 = (_strcmp(134232,492264)|0);
                                                 $1129 = ($1128|0)!=(0);
                                                 if ($1129) {
                                                  $1130 = (_strcmp(134232,492272)|0);
                                                  $1131 = ($1130|0)!=(0);
                                                  if ($1131) {
                                                   $1136 = (_strcmp(134168,491160)|0);
                                                   $1137 = ($1136|0)!=(0);
                                                   do {
                                                    if ($1137) {
                                                     label = 446;
                                                    } else {
                                                     $1138 = HEAP16[132368>>1]|0;
                                                     $1139 = $1138&65535;
                                                     $1140 = ($1139|0)==(4704);
                                                     if (!($1140)) {
                                                      label = 446;
                                                      break;
                                                     }
                                                     HEAP16[616>>1] = 8;
                                                     $1141 = HEAP16[132112>>1]|0;
                                                     $1142 = $1141&65535;
                                                     $1143 = (($1142) - 8)|0;
                                                     $1144 = $1143&65535;
                                                     HEAP16[132112>>1] = $1144;
                                                     HEAP16[608>>1] = 8;
                                                     $1145 = HEAP16[132120>>1]|0;
                                                     $1146 = $1145&65535;
                                                     $1147 = (($1146) - 16)|0;
                                                     $1148 = $1147&65535;
                                                     HEAP16[132120>>1] = $1148;
                                                     HEAP32[133128>>2] = 32;
                                                    }
                                                   } while(0);
                                                   if ((label|0) == 446) {
                                                    $1149 = (_strcmp(134168,491160)|0);
                                                    $1150 = ($1149|0)!=(0);
                                                    do {
                                                     if ($1150) {
                                                      label = 451;
                                                     } else {
                                                      $1151 = HEAP16[133096>>1]|0;
                                                      $1152 = $1151&65535;
                                                      $1153 = ($1152|0)==(3714);
                                                      if (!($1153)) {
                                                       label = 451;
                                                       break;
                                                      }
                                                      HEAP16[616>>1] = 18;
                                                      $1154 = HEAP16[132112>>1]|0;
                                                      $1155 = $1154&65535;
                                                      $1156 = (($1155) - 18)|0;
                                                      $1157 = $1156&65535;
                                                      HEAP16[132112>>1] = $1157;
                                                      $1158 = HEAP16[132368>>1]|0;
                                                      $1159 = $1158&65535;
                                                      HEAP16[132120>>1] = 5536;
                                                      $1160 = (($1159) - 5536)|0;
                                                      $1161 = $1160&65535;
                                                      HEAP16[608>>1] = $1161;
                                                      $1162 = HEAP16[132368>>1]|0;
                                                      $1163 = $1162&65535;
                                                      $1164 = ($1163|0)!=(5600);
                                                      if ($1164) {
                                                       HEAP16[616>>1] = 0;
                                                       HEAP16[608>>1] = 0;
                                                      }
                                                      HEAP32[600>>2] = 1633771873;
                                                      HEAP32[132304>>2] = 3;
                                                     }
                                                    } while(0);
                                                    if ((label|0) == 451) {
                                                     $1165 = (_strcmp(134168,491160)|0);
                                                     $1166 = ($1165|0)!=(0);
                                                     do {
                                                      if ($1166) {
                                                       label = 456;
                                                      } else {
                                                       $1167 = HEAP16[132368>>1]|0;
                                                       $1168 = $1167&65535;
                                                       $1169 = ($1168|0)==(5632);
                                                       if (!($1169)) {
                                                        label = 456;
                                                        break;
                                                       }
                                                       HEAP16[944>>1] = 18761;
                                                       HEAP16[132112>>1] = 3694;
                                                       HEAP16[616>>1] = 2;
                                                       $1170 = HEAP32[133800>>2]|0;
                                                       $1171 = (32 + ($1170))|0;
                                                       $1172 = $1171&65535;
                                                       HEAP16[608>>1] = $1172;
                                                       $1173 = $1172&65535;
                                                       $1174 = (5574 - ($1173))|0;
                                                       $1175 = $1174&65535;
                                                       HEAP16[132120>>1] = $1175;
                                                       $1176 = HEAP32[133800>>2]|0;
                                                       $1177 = ($1176|0)==(12);
                                                       if ($1177) {
                                                        HEAP32[133128>>2] = 80;
                                                       }
                                                      }
                                                     } while(0);
                                                     if ((label|0) == 456) {
                                                      $1178 = (_strcmp(134168,491160)|0);
                                                      $1179 = ($1178|0)!=(0);
                                                      do {
                                                       if ($1179) {
                                                        label = 459;
                                                       } else {
                                                        $1180 = HEAP16[132368>>1]|0;
                                                        $1181 = $1180&65535;
                                                        $1182 = ($1181|0)==(5664);
                                                        if (!($1182)) {
                                                         label = 459;
                                                         break;
                                                        }
                                                        HEAP16[616>>1] = 17;
                                                        $1183 = HEAP16[132112>>1]|0;
                                                        $1184 = $1183&65535;
                                                        $1185 = (($1184) - 17)|0;
                                                        $1186 = $1185&65535;
                                                        HEAP16[132112>>1] = $1186;
                                                        HEAP16[608>>1] = 96;
                                                        HEAP16[132120>>1] = 5544;
                                                        HEAP32[600>>2] = 1229539657;
                                                       }
                                                      } while(0);
                                                      if ((label|0) == 459) {
                                                       $1187 = (_strcmp(134168,491160)|0);
                                                       $1188 = ($1187|0)!=(0);
                                                       do {
                                                        if ($1188) {
                                                         label = 462;
                                                        } else {
                                                         $1189 = HEAP16[132368>>1]|0;
                                                         $1190 = $1189&65535;
                                                         $1191 = ($1190|0)==(6496);
                                                         if (!($1191)) {
                                                          label = 462;
                                                          break;
                                                         }
                                                         HEAP32[600>>2] = 1633771873;
                                                         $1192 = HEAP32[133800>>2]|0;
                                                         $1193 = (($1192) - 7)|0;
                                                         $1194 = 1 << $1193;
                                                         HEAP32[132392>>2] = $1194;
                                                        }
                                                       } while(0);
                                                       if ((label|0) == 462) {
                                                        $1195 = (_strcmp(134232,492280)|0);
                                                        $1196 = ($1195|0)!=(0);
                                                        if ($1196) {
                                                         $1215 = (_strcmp(134232,492288)|0);
                                                         $1216 = ($1215|0)!=(0);
                                                         if ($1216) {
                                                          $1235 = (_strstr(134232,492296)|0);
                                                          $1236 = ($1235|0)!=(0|0);
                                                          if ($1236) {
                                                           (_strcpy((134232|0),(492296|0))|0);
                                                          } else {
                                                           $1237 = (_strcmp(134232,492304)|0);
                                                           $1238 = ($1237|0)!=(0);
                                                           if ($1238) {
                                                            $1239 = (_strcmp(134232,492312)|0);
                                                            $1240 = ($1239|0)!=(0);
                                                            if ($1240) {
                                                             $1241 = (_strcmp(134232,492328)|0);
                                                             $1242 = ($1241|0)!=(0);
                                                             if ($1242) {
                                                              $1247 = (_strcmp(134232,492336)|0);
                                                              $1248 = ($1247|0)!=(0);
                                                              if ($1248) {
                                                               $1249 = (_strcmp(134168,457992)|0);
                                                               $1250 = ($1249|0)!=(0);
                                                               if ($1250) {
                                                                $1294 = (_strcmp(134168,482040)|0);
                                                                $1295 = ($1294|0)!=(0);
                                                                if ($1295) {
                                                                 $1304 = (_strcmp(134168,457928)|0);
                                                                 $1305 = ($1304|0)!=(0);
                                                                 if ($1305) {
                                                                  $1372 = (_strcmp(134168,491136)|0);
                                                                  $1373 = ($1372|0)!=(0);
                                                                  do {
                                                                   if ($1373) {
                                                                    $1374 = (_strcmp(134168,455216)|0);
                                                                    $1375 = ($1374|0)!=(0);
                                                                    if (!($1375)) {
                                                                     label = 544;
                                                                     break;
                                                                    }
                                                                    $1458 = (_strcmp(134232,492384)|0);
                                                                    $1459 = ($1458|0)!=(0);
                                                                    if ($1459) {
                                                                     $1460 = (_strcmp(134168,491144)|0);
                                                                     $1461 = ($1460|0)!=(0);
                                                                     if ($1461) {
                                                                      $1521 = (_strcmp(134232,491240)|0);
                                                                      $1522 = ($1521|0)!=(0);
                                                                      if ($1522) {
                                                                       $1523 = (_strcmp(134232,492424)|0);
                                                                       $1524 = ($1523|0)!=(0);
                                                                       if ($1524) {
                                                                        $1525 = (_strcmp(134232,492448)|0);
                                                                        $1526 = ($1525|0)!=(0);
                                                                        if ($1526) {
                                                                         $1527 = (_strcmp(134168,491176)|0);
                                                                         $1528 = ($1527|0)!=(0);
                                                                         do {
                                                                          if ($1528) {
                                                                           label = 594;
                                                                          } else {
                                                                           $1529 = HEAP16[132368>>1]|0;
                                                                           $1530 = $1529&65535;
                                                                           $1531 = ($1530|0)==(3984);
                                                                           if (!($1531)) {
                                                                            label = 594;
                                                                            break;
                                                                           }
                                                                           HEAP16[132120>>1] = 3925;
                                                                           HEAP16[944>>1] = 19789;
                                                                          }
                                                                         } while(0);
                                                                         if ((label|0) == 594) {
                                                                          $1532 = (_strcmp(134168,491176)|0);
                                                                          $1533 = ($1532|0)!=(0);
                                                                          do {
                                                                           if ($1533) {
                                                                            label = 597;
                                                                           } else {
                                                                            $1534 = HEAP16[132368>>1]|0;
                                                                            $1535 = $1534&65535;
                                                                            $1536 = ($1535|0)==(4288);
                                                                            if (!($1536)) {
                                                                             label = 597;
                                                                             break;
                                                                            }
                                                                            $1537 = HEAP16[132120>>1]|0;
                                                                            $1538 = $1537&65535;
                                                                            $1539 = (($1538) - 32)|0;
                                                                            $1540 = $1539&65535;
                                                                            HEAP16[132120>>1] = $1540;
                                                                           }
                                                                          } while(0);
                                                                          if ((label|0) == 597) {
                                                                           $1541 = (_strcmp(134168,491176)|0);
                                                                           $1542 = ($1541|0)!=(0);
                                                                           do {
                                                                            if ($1542) {
                                                                             label = 602;
                                                                            } else {
                                                                             $1543 = HEAP16[132368>>1]|0;
                                                                             $1544 = $1543&65535;
                                                                             $1545 = ($1544|0)==(4928);
                                                                             if (!($1545)) {
                                                                              label = 602;
                                                                              break;
                                                                             }
                                                                             $1546 = HEAP16[132112>>1]|0;
                                                                             $1547 = $1546&65535;
                                                                             $1548 = ($1547|0)<(3280);
                                                                             if ($1548) {
                                                                              $1549 = HEAP16[132120>>1]|0;
                                                                              $1550 = $1549&65535;
                                                                              $1551 = (($1550) - 8)|0;
                                                                              $1552 = $1551&65535;
                                                                              HEAP16[132120>>1] = $1552;
                                                                             }
                                                                            }
                                                                           } while(0);
                                                                           if ((label|0) == 602) {
                                                                            $1553 = (_strcmp(134168,491176)|0);
                                                                            $1554 = ($1553|0)!=(0);
                                                                            do {
                                                                             if ($1554) {
                                                                              label = 605;
                                                                             } else {
                                                                              $1555 = HEAP16[132368>>1]|0;
                                                                              $1556 = $1555&65535;
                                                                              $1557 = ($1556|0)==(5504);
                                                                              if (!($1557)) {
                                                                               label = 605;
                                                                               break;
                                                                              }
                                                                              $1558 = HEAP16[132112>>1]|0;
                                                                              $1559 = $1558&65535;
                                                                              $1560 = ($1559|0)>(3664);
                                                                              $1561 = $1560 ? 8 : 32;
                                                                              $1562 = HEAP16[132120>>1]|0;
                                                                              $1563 = $1562&65535;
                                                                              $1564 = (($1563) - ($1561))|0;
                                                                              $1565 = $1564&65535;
                                                                              HEAP16[132120>>1] = $1565;
                                                                             }
                                                                            } while(0);
                                                                            if ((label|0) == 605) {
                                                                             $1566 = (_strcmp(134168,491176)|0);
                                                                             $1567 = ($1566|0)!=(0);
                                                                             do {
                                                                              if ($1567) {
                                                                               label = 611;
                                                                              } else {
                                                                               $1568 = HEAP16[132368>>1]|0;
                                                                               $1569 = $1568&65535;
                                                                               $1570 = ($1569|0)==(6048);
                                                                               if (!($1570)) {
                                                                                label = 611;
                                                                                break;
                                                                               }
                                                                               $1571 = HEAP16[132120>>1]|0;
                                                                               $1572 = $1571&65535;
                                                                               $1573 = (($1572) - 24)|0;
                                                                               $1574 = $1573&65535;
                                                                               HEAP16[132120>>1] = $1574;
                                                                               $1575 = (_strstr(134232,492456)|0);
                                                                               $1576 = ($1575|0)!=(0|0);
                                                                               if ($1576) {
                                                                                label = 609;
                                                                               } else {
                                                                                $1577 = (_strstr(134232,492464)|0);
                                                                                $1578 = ($1577|0)!=(0|0);
                                                                                if ($1578) {
                                                                                 label = 609;
                                                                                }
                                                                               }
                                                                               if ((label|0) == 609) {
                                                                                $1579 = HEAP16[132120>>1]|0;
                                                                                $1580 = $1579&65535;
                                                                                $1581 = (($1580) - 6)|0;
                                                                                $1582 = $1581&65535;
                                                                                HEAP16[132120>>1] = $1582;
                                                                               }
                                                                              }
                                                                             } while(0);
                                                                             if ((label|0) == 611) {
                                                                              $1583 = (_strcmp(134168,491176)|0);
                                                                              $1584 = ($1583|0)!=(0);
                                                                              do {
                                                                               if ($1584) {
                                                                                label = 614;
                                                                               } else {
                                                                                $1585 = HEAP16[132368>>1]|0;
                                                                                $1586 = $1585&65535;
                                                                                $1587 = ($1586|0)==(7392);
                                                                                if (!($1587)) {
                                                                                 label = 614;
                                                                                 break;
                                                                                }
                                                                                $1588 = HEAP16[132120>>1]|0;
                                                                                $1589 = $1588&65535;
                                                                                $1590 = (($1589) - 30)|0;
                                                                                $1591 = $1590&65535;
                                                                                HEAP16[132120>>1] = $1591;
                                                                               }
                                                                              } while(0);
                                                                              if ((label|0) == 614) {
                                                                               $1592 = (_strcmp(134232,457880)|0);
                                                                               $1593 = ($1592|0)!=(0);
                                                                               if ($1593) {
                                                                                $1609 = (_strcmp(134232,492472)|0);
                                                                                $1610 = ($1609|0)!=(0);
                                                                                if ($1610) {
                                                                                 $1615 = (_strcmp(134232,492488)|0);
                                                                                 $1616 = ($1615|0)!=(0);
                                                                                 if ($1616) {
                                                                                  $1625 = (_strcmp(134232,491640)|0);
                                                                                  $1626 = ($1625|0)!=(0);
                                                                                  do {
                                                                                   if ($1626) {
                                                                                    $1627 = (_strcmp(134232,492496)|0);
                                                                                    $1628 = ($1627|0)!=(0);
                                                                                    if (!($1628)) {
                                                                                     label = 626;
                                                                                     break;
                                                                                    }
                                                                                    $1629 = (_strcmp(134232,492504)|0);
                                                                                    $1630 = ($1629|0)!=(0);
                                                                                    if (!($1630)) {
                                                                                     label = 626;
                                                                                     break;
                                                                                    }
                                                                                    $1648 = (_strncasecmp(134232,492512,9)|0);
                                                                                    $1649 = ($1648|0)!=(0);
                                                                                    if ($1649) {
                                                                                     $1653 = (_strcasecmp(134168,458040)|0);
                                                                                     $1654 = ($1653|0)!=(0);
                                                                                     if ($1654) {
                                                                                      $1721 = (_strcmp(134232,491280)|0);
                                                                                      $1722 = ($1721|0)!=(0);
                                                                                      if ($1722) {
                                                                                       $1723 = (_strncmp(134232,492640,9)|0);
                                                                                       $1724 = ($1723|0)!=(0);
                                                                                       if ($1724) {
                                                                                        $1767 = (_strcmp(134168,458392)|0);
                                                                                        $1768 = ($1767|0)!=(0);
                                                                                        do {
                                                                                         if (!($1768)) {
                                                                                          $1769 = HEAP32[190504>>2]|0;
                                                                                          $1770 = ($1769|0)!=(0|0);
                                                                                          if ($1770) {
                                                                                           break;
                                                                                          }
                                                                                          $1771 = HEAP16[132368>>1]|0;
                                                                                          $1772 = $1771&65535;
                                                                                          if ((($1772|0) == 1316)) {
                                                                                           HEAP16[132112>>1] = 1030;
                                                                                           HEAP16[132120>>1] = 1300;
                                                                                           HEAP16[616>>1] = 1;
                                                                                           HEAP16[608>>1] = 6;
                                                                                          } else if ((($1772|0) == 2568)) {
                                                                                           HEAP16[132112>>1] = 1960;
                                                                                           HEAP16[132120>>1] = 2560;
                                                                                           HEAP16[616>>1] = 2;
                                                                                           HEAP16[608>>1] = 8;
                                                                                          }
                                                                                          HEAP32[600>>2] = 370546198;
                                                                                          HEAP32[190504>>2] = 54;
                                                                                         }
                                                                                        } while(0);
                                                                                       } else {
                                                                                        $1725 = (($head) + 5|0);
                                                                                        $1726 = HEAP8[$1725>>0]|0;
                                                                                        $1727 = ($1726<<24>>24)!=(0);
                                                                                        if ($1727) {
                                                                                         (_strcpy((((134232 + 10|0))|0),(492656|0))|0);
                                                                                        }
                                                                                        $1728 = HEAP32[880>>2]|0;
                                                                                        (_fseek(($1728|0),544,0)|0);
                                                                                        $1729 = (_get2()|0);
                                                                                        HEAP16[132112>>1] = $1729;
                                                                                        $1730 = (_get2()|0);
                                                                                        HEAP16[132120>>1] = $1730;
                                                                                        (_get4()|0);
                                                                                        $1731 = (_get2()|0);
                                                                                        $1732 = $1731&65535;
                                                                                        $1733 = ($1732|0)==(30);
                                                                                        $1734 = $1733 ? 738 : 736;
                                                                                        HEAP32[133816>>2] = $1734;
                                                                                        $1735 = HEAP16[132112>>1]|0;
                                                                                        $1736 = $1735&65535;
                                                                                        $1737 = HEAP16[132120>>1]|0;
                                                                                        $1738 = $1737&65535;
                                                                                        $1739 = ($1736|0)>($1738|0);
                                                                                        if ($1739) {
                                                                                         $1740 = HEAP16[132112>>1]|0;
                                                                                         $1741 = $1740&65535;
                                                                                         $1742 = HEAP16[132120>>1]|0;
                                                                                         $1743 = $1742&65535;
                                                                                         $1744 = (($1741) + ($1743))|0;
                                                                                         $1745 = $1744&65535;
                                                                                         HEAP16[132112>>1] = $1745;
                                                                                         $1746 = HEAP16[132112>>1]|0;
                                                                                         $1747 = $1746&65535;
                                                                                         $1748 = HEAP16[132120>>1]|0;
                                                                                         $1749 = $1748&65535;
                                                                                         $1750 = (($1747) - ($1749))|0;
                                                                                         $1751 = $1750&65535;
                                                                                         HEAP16[132120>>1] = $1751;
                                                                                         $1752 = HEAP16[132112>>1]|0;
                                                                                         $1753 = $1752&65535;
                                                                                         $1754 = HEAP16[132120>>1]|0;
                                                                                         $1755 = $1754&65535;
                                                                                         $1756 = (($1753) - ($1755))|0;
                                                                                         $1757 = $1756&65535;
                                                                                         HEAP16[132112>>1] = $1757;
                                                                                         $1758 = HEAP32[880>>2]|0;
                                                                                         $1759 = HEAP32[133816>>2]|0;
                                                                                         $1760 = (($1759) - 6)|0;
                                                                                         (_fseek(($1758|0),($1760|0),0)|0);
                                                                                         $1761 = (_get2()|0);
                                                                                         $1762 = $1761&65535;
                                                                                         $1763 = $1762 ^ -1;
                                                                                         $1764 = $1763 & 3;
                                                                                         $1765 = ($1764|0)!=(0);
                                                                                         $1766 = $1765 ? 5 : 6;
                                                                                         HEAP32[455352>>2] = $1766;
                                                                                        }
                                                                                        HEAP32[600>>2] = 1633771873;
                                                                                       }
                                                                                      } else {
                                                                                       HEAP16[132112>>1] = 512;
                                                                                       HEAP16[132120>>1] = 768;
                                                                                       HEAP32[133816>>2] = 3632;
                                                                                       HEAP32[190504>>2] = 40;
                                                                                       HEAP32[600>>2] = 1633771873;
                                                                                       _simple_coeff(2);
                                                                                      }
                                                                                     } else {
                                                                                      $1655 = HEAP32[600>>2]|0;
                                                                                      $1656 = ($1655|0)==(-1);
                                                                                      if ($1656) {
                                                                                       HEAP32[600>>2] = 1633771873;
                                                                                      }
                                                                                      $1657 = (_strncmp(134232,492528,6)|0);
                                                                                      $1658 = ($1657|0)!=(0);
                                                                                      do {
                                                                                       if ($1658) {
                                                                                        $1659 = (_strncmp(134232,492536,6)|0);
                                                                                        $1660 = ($1659|0)!=(0);
                                                                                        if (!($1660)) {
                                                                                         label = 642;
                                                                                         break;
                                                                                        }
                                                                                        $1661 = (_strncmp(134232,492544,4)|0);
                                                                                        $1662 = ($1661|0)!=(0);
                                                                                        if (!($1662)) {
                                                                                         label = 642;
                                                                                         break;
                                                                                        }
                                                                                        $1672 = (_strcmp(134232,492560)|0);
                                                                                        $1673 = ($1672|0)!=(0);
                                                                                        if (!($1673)) {
                                                                                         HEAP32[132392>>2] = 214;
                                                                                         label = 651;
                                                                                         break;
                                                                                        }
                                                                                        $1674 = (_strcmp(134232,492568)|0);
                                                                                        $1675 = ($1674|0)!=(0);
                                                                                        if ($1675) {
                                                                                         label = 652;
                                                                                         break;
                                                                                        }
                                                                                        label = 651;
                                                                                       } else {
                                                                                        label = 642;
                                                                                       }
                                                                                      } while(0);
                                                                                      do {
                                                                                       if ((label|0) == 642) {
                                                                                        $1663 = HEAP16[132120>>1]|0;
                                                                                        $1664 = $1663&65535;
                                                                                        $1665 = (($1664) - 4)|0;
                                                                                        $1666 = $1665&65535;
                                                                                        HEAP16[132120>>1] = $1666;
                                                                                        HEAP16[608>>1] = 2;
                                                                                        $1667 = HEAP8[((134232 + 6|0))>>0]|0;
                                                                                        $1668 = $1667 << 24 >> 24;
                                                                                        $1669 = ($1668|0)==(32);
                                                                                        if ($1669) {
                                                                                         HEAP8[((134232 + 6|0))>>0] = 0;
                                                                                        }
                                                                                        $1670 = (_strcmp(134232,492552)|0);
                                                                                        $1671 = ($1670|0)!=(0);
                                                                                        if ($1671) {
                                                                                         break;
                                                                                        } else {
                                                                                         label = 651;
                                                                                         break;
                                                                                        }
                                                                                       }
                                                                                      } while(0);
                                                                                      if ((label|0) == 651) {
                                                                                       HEAP32[132304>>2] = 1;
                                                                                       HEAP32[600>>2] = 0;
                                                                                       label = 652;
                                                                                      }
                                                                                      if ((label|0) == 652) {
                                                                                      }
                                                                                      $1676 = (_strcmp(((134232 + 4|0)),492576)|0);
                                                                                      $1677 = ($1676|0)!=(0);
                                                                                      if (!($1677)) {
                                                                                       (_strcpy((458016|0),(492584|0))|0);
                                                                                      }
                                                                                      $1678 = (_strstr(134232,492592)|0);
                                                                                      $1679 = ($1678|0)!=(0|0);
                                                                                      if ($1679) {
                                                                                       (_strcpy((134232|0),(492592|0))|0);
                                                                                       HEAP32[133816>>2] = 15424;
                                                                                      }
                                                                                      $1680 = (_strncmp(134232,190656,3)|0);
                                                                                      $1681 = ($1680|0)!=(0);
                                                                                      if ($1681) {
                                                                                       $1702 = (_strcmp(134232,492600)|0);
                                                                                       $1703 = ($1702|0)!=(0);
                                                                                       if ($1703) {
                                                                                        $1704 = (_strstr(134232,492616)|0);
                                                                                        $1705 = ($1704|0)!=(0|0);
                                                                                        if ($1705) {
                                                                                         (_strcpy((134232|0),(492616|0))|0);
                                                                                         HEAP16[132112>>1] = 512;
                                                                                         HEAP16[132120>>1] = 768;
                                                                                         HEAP32[133816>>2] = 19712;
                                                                                         HEAP32[190504>>2] = 40;
                                                                                        } else {
                                                                                         $1706 = (_strstr(134232,492624)|0);
                                                                                         $1707 = ($1706|0)!=(0|0);
                                                                                         if ($1707) {
                                                                                          (_strcpy((134232|0),(492624|0))|0);
                                                                                          HEAP16[132112>>1] = 976;
                                                                                          HEAP16[132120>>1] = 848;
                                                                                          $1708 = HEAP16[132112>>1]|0;
                                                                                          $1709 = $1708&65535;
                                                                                          $1710 = (+($1709|0));
                                                                                          $1711 = $1710 / 0.75;
                                                                                          $1712 = HEAP16[132120>>1]|0;
                                                                                          $1713 = $1712&65535;
                                                                                          $1714 = (+($1713|0));
                                                                                          $1715 = $1711 / $1714;
                                                                                          HEAPF64[458024>>3] = $1715;
                                                                                          $1716 = HEAP32[133088>>2]|0;
                                                                                          $1717 = ($1716|0)==(7);
                                                                                          $1718 = $1717 ? 53 : 52;
                                                                                          HEAP32[190504>>2] = $1718;
                                                                                         } else {
                                                                                          $1719 = (_strcmp(134232,492632)|0);
                                                                                          $1720 = ($1719|0)!=(0);
                                                                                          if (!($1720)) {
                                                                                           HEAP16[134304>>1] = 128;
                                                                                           HEAP16[134296>>1] = 192;
                                                                                           HEAP32[454608>>2] = 6144;
                                                                                           HEAP32[134384>>2] = 360;
                                                                                           HEAP32[458064>>2] = 28;
                                                                                           HEAP32[132392>>2] = 17;
                                                                                          }
                                                                                         }
                                                                                        }
                                                                                       } else {
                                                                                        (_strcpy((134232|0),(492608|0))|0);
                                                                                        HEAP16[132112>>1] = 512;
                                                                                        HEAP16[132120>>1] = 768;
                                                                                        HEAP32[133816>>2] = 1152;
                                                                                        HEAP32[190504>>2] = 40;
                                                                                       }
                                                                                      } else {
                                                                                       HEAP16[132112>>1] = 242;
                                                                                       HEAP16[133096>>1] = 244;
                                                                                       $1682 = $flen;
                                                                                       $1683 = ($1682|0)<(100000);
                                                                                       if ($1683) {
                                                                                        HEAP16[132368>>1] = 256;
                                                                                        HEAP16[132120>>1] = 249;
                                                                                        $1684 = HEAP16[132112>>1]|0;
                                                                                        $1685 = $1684&65535;
                                                                                        $1686 = (+($1685|0));
                                                                                        $1687 = 4.0 * $1686;
                                                                                        $1688 = HEAP16[132120>>1]|0;
                                                                                        $1689 = $1688&65535;
                                                                                        $1690 = (+($1689|0));
                                                                                        $1691 = 3.0 * $1690;
                                                                                        $1692 = $1687 / $1691;
                                                                                        HEAPF64[458024>>3] = $1692;
                                                                                       } else {
                                                                                        HEAP16[132368>>1] = 512;
                                                                                        HEAP16[132120>>1] = 501;
                                                                                        $1693 = HEAP16[132112>>1]|0;
                                                                                        $1694 = $1693&65535;
                                                                                        $1695 = (+($1694|0));
                                                                                        $1696 = 493.0 * $1695;
                                                                                        $1697 = HEAP16[132120>>1]|0;
                                                                                        $1698 = $1697&65535;
                                                                                        $1699 = (+($1698|0));
                                                                                        $1700 = 373.0 * $1699;
                                                                                        $1701 = $1696 / $1700;
                                                                                        HEAPF64[458024>>3] = $1701;
                                                                                       }
                                                                                       HEAP16[608>>1] = 1;
                                                                                       HEAP16[616>>1] = 1;
                                                                                       HEAP32[132304>>2] = 4;
                                                                                       HEAP32[600>>2] = -1920103027;
                                                                                       _simple_coeff(1);
                                                                                       HEAPF32[((132080 + 4|0))>>2] = 1.1790000200271606;
                                                                                       HEAPF32[((132080 + 8|0))>>2] = 1.2089999914169312;
                                                                                       HEAPF32[((132080 + 12|0))>>2] = 1.0360000133514404;
                                                                                       HEAP32[190504>>2] = 8;
                                                                                      }
                                                                                     }
                                                                                    } else {
                                                                                     $1650 = HEAP32[133816>>2]|0;
                                                                                     $1651 = ($1650|0)<(86016);
                                                                                     $1652 = $1651 ? 86016 : 94208;
                                                                                     HEAP32[133816>>2] = $1652;
                                                                                     HEAP32[190504>>2] = 10;
                                                                                    }
                                                                                   } else {
                                                                                    label = 626;
                                                                                   }
                                                                                  } while(0);
                                                                                  if ((label|0) == 626) {
                                                                                   HEAP16[944>>1] = 18761;
                                                                                   $1631 = HEAP32[600>>2]|0;
                                                                                   $1632 = ($1631|0)!=(0);
                                                                                   do {
                                                                                    if ($1632) {
                                                                                     $1633 = HEAP32[133816>>2]|0;
                                                                                     $1634 = ($1633|0)!=(0);
                                                                                     if (!($1634)) {
                                                                                      label = 629;
                                                                                      break;
                                                                                     }
                                                                                     $1635 = HEAP32[880>>2]|0;
                                                                                     $1636 = HEAP32[133816>>2]|0;
                                                                                     $1637 = ($1636|0)<(4096);
                                                                                     $1638 = $1637 ? 168 : 5252;
                                                                                     (_fseek(($1635|0),($1638|0),0)|0);
                                                                                     _read_shorts(968,256);
                                                                                    } else {
                                                                                     label = 629;
                                                                                    }
                                                                                   } while(0);
                                                                                   if ((label|0) == 629) {
                                                                                    _gamma_curve(0.0,3.875,1,255);
                                                                                   }
                                                                                   $1639 = HEAP32[600>>2]|0;
                                                                                   $1640 = ($1639|0)!=(0);
                                                                                   if ($1640) {
                                                                                    $1644 = 8;
                                                                                   } else {
                                                                                    $1641 = (_strcmp(134232,492496)|0);
                                                                                    $1642 = ($1641|0)!=(0);
                                                                                    $1643 = $1642 ? 51 : 50;
                                                                                    $1644 = $1643;
                                                                                   }
                                                                                   HEAP32[190504>>2] = $1644;
                                                                                   $1645 = HEAP32[133800>>2]|0;
                                                                                   $1646 = ($1645>>>0)>(16);
                                                                                   $1647 = $1646&1;
                                                                                   HEAP32[133128>>2] = $1647;
                                                                                   HEAP32[133800>>2] = 8;
                                                                                  }
                                                                                 } else {
                                                                                  HEAP16[616>>1] = 4;
                                                                                  $1617 = HEAP16[132112>>1]|0;
                                                                                  $1618 = $1617&65535;
                                                                                  $1619 = (($1618) - 4)|0;
                                                                                  $1620 = $1619&65535;
                                                                                  HEAP16[132112>>1] = $1620;
                                                                                  HEAP16[608>>1] = 32;
                                                                                  $1621 = HEAP16[132120>>1]|0;
                                                                                  $1622 = $1621&65535;
                                                                                  $1623 = (($1622) - 32)|0;
                                                                                  $1624 = $1623&65535;
                                                                                  HEAP16[132120>>1] = $1624;
                                                                                  _gamma_curve(0.0,7.0,1,255);
                                                                                 }
                                                                                } else {
                                                                                 $1611 = HEAP16[132112>>1]|0;
                                                                                 $1612 = $1611&65535;
                                                                                 $1613 = (($1612) - 4)|0;
                                                                                 $1614 = $1613&65535;
                                                                                 HEAP16[132112>>1] = $1614;
                                                                                }
                                                                               } else {
                                                                                $1594 = HEAP16[132120>>1]|0;
                                                                                $1595 = $1594&65535;
                                                                                $1596 = ($1595|0)==(3880);
                                                                                if ($1596) {
                                                                                 $1597 = HEAP16[132112>>1]|0;
                                                                                 $1598 = (($1597) + -1)<<16>>16;
                                                                                 HEAP16[132112>>1] = $1598;
                                                                                 $1599 = HEAP16[132368>>1]|0;
                                                                                 $1600 = (($1599) + 1)<<16>>16;
                                                                                 HEAP16[132368>>1] = $1600;
                                                                                 HEAP16[132120>>1] = $1600;
                                                                                } else {
                                                                                 $1601 = HEAP16[132112>>1]|0;
                                                                                 $1602 = $1601&65535;
                                                                                 $1603 = (($1602) - 4)|0;
                                                                                 $1604 = $1603&65535;
                                                                                 HEAP16[132112>>1] = $1604;
                                                                                 $1605 = HEAP16[132120>>1]|0;
                                                                                 $1606 = $1605&65535;
                                                                                 $1607 = (($1606) - 4)|0;
                                                                                 $1608 = $1607&65535;
                                                                                 HEAP16[132120>>1] = $1608;
                                                                                 HEAP16[944>>1] = 19789;
                                                                                 HEAP32[133128>>2] = 2;
                                                                                }
                                                                                HEAP32[600>>2] = 1633771873;
                                                                               }
                                                                              }
                                                                             }
                                                                            }
                                                                           }
                                                                          }
                                                                         }
                                                                        } else {
                                                                         HEAP16[132120>>1] = 3109;
                                                                         HEAP16[608>>1] = 59;
                                                                         HEAP32[((190528 + 4|0))>>2] = 9;
                                                                         HEAP32[133816>>2] = 787392;
                                                                         HEAP32[190504>>2] = 7;
                                                                        }
                                                                       } else {
                                                                        HEAP16[132120>>1] = 3288;
                                                                        HEAP16[608>>1] = 5;
                                                                        HEAP32[((190528 + 28|0))>>2] = -17;
                                                                        HEAP32[133816>>2] = 862144;
                                                                        HEAP32[190504>>2] = 7;
                                                                        HEAP32[600>>2] = -1667457892;
                                                                        HEAP32[132304>>2] = 4;
                                                                        (_strcpy((458016|0),(492440|0))|0);
                                                                       }
                                                                      } else {
                                                                       HEAP16[132112>>1] = 2047;
                                                                       HEAP16[132120>>1] = 3072;
                                                                       HEAP32[600>>2] = 1633771873;
                                                                       HEAP32[133816>>2] = 6656;
                                                                       HEAP32[190504>>2] = 10;
                                                                      }
                                                                     } else {
                                                                      $1462 = HEAP16[132112>>1]|0;
                                                                      $1463 = $1462&65535;
                                                                      $1464 = $1463 & 1;
                                                                      $1465 = HEAP16[132112>>1]|0;
                                                                      $1466 = $1465&65535;
                                                                      $1467 = (($1466) + ($1464))|0;
                                                                      $1468 = $1467&65535;
                                                                      HEAP16[132112>>1] = $1468;
                                                                      $1469 = HEAP32[456088>>2]|0;
                                                                      $1470 = ($1469|0)!=(0);
                                                                      if ($1470) {
                                                                       $1471 = HEAP32[456088>>2]|0;
                                                                       HEAP32[600>>2] = $1471;
                                                                      }
                                                                      $1472 = HEAP16[132120>>1]|0;
                                                                      $1473 = $1472&65535;
                                                                      $1474 = ($1473|0)==(4100);
                                                                      if ($1474) {
                                                                       $1475 = HEAP16[132120>>1]|0;
                                                                       $1476 = $1475&65535;
                                                                       $1477 = (($1476) - 4)|0;
                                                                       $1478 = $1477&65535;
                                                                       HEAP16[132120>>1] = $1478;
                                                                      }
                                                                      $1479 = HEAP16[132120>>1]|0;
                                                                      $1480 = $1479&65535;
                                                                      $1481 = ($1480|0)==(4080);
                                                                      if ($1481) {
                                                                       $1482 = HEAP16[132120>>1]|0;
                                                                       $1483 = $1482&65535;
                                                                       $1484 = (($1483) - 24)|0;
                                                                       $1485 = $1484&65535;
                                                                       HEAP16[132120>>1] = $1485;
                                                                      }
                                                                      $1486 = HEAP16[132120>>1]|0;
                                                                      $1487 = $1486&65535;
                                                                      $1488 = ($1487|0)==(9280);
                                                                      if ($1488) {
                                                                       $1489 = HEAP16[132120>>1]|0;
                                                                       $1490 = $1489&65535;
                                                                       $1491 = (($1490) - 6)|0;
                                                                       $1492 = $1491&65535;
                                                                       HEAP16[132120>>1] = $1492;
                                                                       $1493 = HEAP16[132112>>1]|0;
                                                                       $1494 = $1493&65535;
                                                                       $1495 = (($1494) - 6)|0;
                                                                       $1496 = $1495&65535;
                                                                       HEAP16[132112>>1] = $1496;
                                                                      }
                                                                      $1497 = HEAP32[190504>>2]|0;
                                                                      $1498 = ($1497|0)==(19|0);
                                                                      if ($1498) {
                                                                       HEAP32[133128>>2] = 4;
                                                                      }
                                                                      HEAP32[133800>>2] = 12;
                                                                      $1499 = (_strcmp(134232,492392)|0);
                                                                      $1500 = ($1499|0)!=(0);
                                                                      do {
                                                                       if ($1500) {
                                                                        $1501 = (_strcmp(134232,492400)|0);
                                                                        $1502 = ($1501|0)!=(0);
                                                                        if (!($1502)) {
                                                                         label = 573;
                                                                         break;
                                                                        }
                                                                        $1509 = (_strcmp(134232,492408)|0);
                                                                        $1510 = ($1509|0)!=(0);
                                                                        if ($1510) {
                                                                         $1517 = (_strcmp(134232,492416)|0);
                                                                         $1518 = ($1517|0)!=(0);
                                                                         if (!($1518)) {
                                                                          $1519 = $flen;
                                                                          HEAP32[454608>>2] = 10721280;
                                                                          $1520 = (($1519) - 10721280)|0;
                                                                          HEAP32[134312>>2] = $1520;
                                                                          HEAP16[134304>>1] = 480;
                                                                          HEAP16[134296>>1] = 640;
                                                                         }
                                                                        } else {
                                                                         $1511 = HEAP16[132120>>1]|0;
                                                                         $1512 = $1511&65535;
                                                                         $1513 = (($1512) - 30)|0;
                                                                         $1514 = $1513&65535;
                                                                         HEAP16[132120>>1] = $1514;
                                                                         $1515 = HEAP32[190504>>2]|0;
                                                                         $1516 = ($1515|0)==(19|0);
                                                                         if ($1516) {
                                                                          HEAP32[132400>>2] = 3961;
                                                                         }
                                                                        }
                                                                       } else {
                                                                        label = 573;
                                                                       }
                                                                      } while(0);
                                                                      if ((label|0) == 573) {
                                                                       $1503 = HEAP16[132120>>1]|0;
                                                                       $1504 = $1503&65535;
                                                                       $1505 = (($1504) - 20)|0;
                                                                       $1506 = $1505&65535;
                                                                       HEAP16[132120>>1] = $1506;
                                                                       $1507 = HEAP32[190504>>2]|0;
                                                                       $1508 = ($1507|0)==(19|0);
                                                                       if ($1508) {
                                                                        HEAP32[132400>>2] = 4035;
                                                                        _memset((134720|0),0,8204)|0;
                                                                       }
                                                                      }
                                                                     }
                                                                    } else {
                                                                     HEAP16[132112>>1] = 1718;
                                                                     HEAP16[132120>>1] = 2304;
                                                                     HEAP32[600>>2] = 370546198;
                                                                     HEAP32[190504>>2] = 10;
                                                                     HEAP32[133128>>2] = 30;
                                                                    }
                                                                   } else {
                                                                    label = 544;
                                                                   }
                                                                  } while(0);
                                                                  if ((label|0) == 544) {
                                                                   $1376 = $flen;
                                                                   $1377 = HEAP32[133816>>2]|0;
                                                                   $1378 = (($1376) - ($1377))|0;
                                                                   $1379 = HEAP16[132368>>1]|0;
                                                                   $1380 = $1379&65535;
                                                                   $1381 = $1380<<3;
                                                                   $1382 = (($1381|0) / 7)&-1;
                                                                   $1383 = (($1378|0) / ($1382|0))&-1;
                                                                   $1384 = HEAP16[133096>>1]|0;
                                                                   $1385 = $1384&65535;
                                                                   $1386 = ($1383|0)==($1385|0);
                                                                   if ($1386) {
                                                                    HEAP32[190504>>2] = 12;
                                                                   }
                                                                   $1387 = HEAP32[190504>>2]|0;
                                                                   $1388 = ($1387|0)!=(0|0);
                                                                   if (!($1388)) {
                                                                    HEAP32[190504>>2] = 19;
                                                                    HEAP32[133128>>2] = 4;
                                                                   }
                                                                   HEAP32[491184>>2] = 1;
                                                                   $1389 = HEAP16[132112>>1]|0;
                                                                   $1390 = $1389&65535;
                                                                   $1391 = (($1390) + 12)|0;
                                                                   $1392 = $1391&65535;
                                                                   HEAP16[132112>>1] = $1392;
                                                                   $1393 = $1392&65535;
                                                                   $1394 = HEAP16[133096>>1]|0;
                                                                   $1395 = $1394&65535;
                                                                   $1396 = ($1393|0)>($1395|0);
                                                                   if ($1396) {
                                                                    $1397 = HEAP16[133096>>1]|0;
                                                                    HEAP16[132112>>1] = $1397;
                                                                   }
                                                                   $i = 0;
                                                                   while(1) {
                                                                    $1398 = $i;
                                                                    $1399 = ($1398>>>0)<(23);
                                                                    if (!($1399)) {
                                                                     break;
                                                                    }
                                                                    $1400 = HEAP16[132368>>1]|0;
                                                                    $1401 = $1400&65535;
                                                                    $1402 = $i;
                                                                    $1403 = (482984 + (($1402*12)|0)|0);
                                                                    $1404 = HEAP16[$1403>>1]|0;
                                                                    $1405 = $1404 << 16 >> 16;
                                                                    $1406 = ($1401|0)==($1405|0);
                                                                    do {
                                                                     if ($1406) {
                                                                      $1407 = HEAP16[133096>>1]|0;
                                                                      $1408 = $1407&65535;
                                                                      $1409 = $i;
                                                                      $1410 = (482984 + (($1409*12)|0)|0);
                                                                      $1411 = (($1410) + 2|0);
                                                                      $1412 = HEAP16[$1411>>1]|0;
                                                                      $1413 = $1412 << 16 >> 16;
                                                                      $1414 = ($1408|0)==($1413|0);
                                                                      if (!($1414)) {
                                                                       break;
                                                                      }
                                                                      $1415 = $i;
                                                                      $1416 = (482984 + (($1415*12)|0)|0);
                                                                      $1417 = (($1416) + 4|0);
                                                                      $1418 = HEAP16[$1417>>1]|0;
                                                                      HEAP16[608>>1] = $1418;
                                                                      $1419 = $i;
                                                                      $1420 = (482984 + (($1419*12)|0)|0);
                                                                      $1421 = (($1420) + 6|0);
                                                                      $1422 = HEAP16[$1421>>1]|0;
                                                                      HEAP16[616>>1] = $1422;
                                                                      $1423 = $i;
                                                                      $1424 = (482984 + (($1423*12)|0)|0);
                                                                      $1425 = (($1424) + 8|0);
                                                                      $1426 = HEAP16[$1425>>1]|0;
                                                                      $1427 = $1426 << 16 >> 16;
                                                                      $1428 = HEAP16[132120>>1]|0;
                                                                      $1429 = $1428&65535;
                                                                      $1430 = (($1429) + ($1427))|0;
                                                                      $1431 = $1430&65535;
                                                                      HEAP16[132120>>1] = $1431;
                                                                      $1432 = $i;
                                                                      $1433 = (482984 + (($1432*12)|0)|0);
                                                                      $1434 = (($1433) + 10|0);
                                                                      $1435 = HEAP16[$1434>>1]|0;
                                                                      $1436 = $1435 << 16 >> 16;
                                                                      $1437 = HEAP16[132112>>1]|0;
                                                                      $1438 = $1437&65535;
                                                                      $1439 = (($1438) + ($1436))|0;
                                                                      $1440 = $1439&65535;
                                                                      HEAP16[132112>>1] = $1440;
                                                                     }
                                                                    } while(0);
                                                                    $1441 = $i;
                                                                    $1442 = (($1441) + 1)|0;
                                                                    $i = $1442;
                                                                   }
                                                                   $1443 = HEAP32[600>>2]|0;
                                                                   $1444 = (($1443) - 1)|0;
                                                                   $1445 = HEAP16[608>>1]|0;
                                                                   $1446 = $1445&65535;
                                                                   $1447 = $1446 & 1;
                                                                   $1448 = $1444 ^ $1447;
                                                                   $1449 = HEAP16[616>>1]|0;
                                                                   $1450 = $1449&65535;
                                                                   $1451 = $1450 << 1;
                                                                   $1452 = $1448 ^ $1451;
                                                                   $1453 = $1452 & 3;
                                                                   $1454 = (492376 + ($1453)|0);
                                                                   $1455 = HEAP8[$1454>>0]|0;
                                                                   $1456 = $1455&255;
                                                                   $1457 = Math_imul(16843009, $1456)|0;
                                                                   HEAP32[600>>2] = $1457;
                                                                  }
                                                                 } else {
                                                                  HEAP32[132400>>2] = 16383;
                                                                  $1306 = HEAP32[880>>2]|0;
                                                                  $1307 = HEAP32[133816>>2]|0;
                                                                  (_fseek(($1306|0),($1307|0),0)|0);
                                                                  $1308 = (_ljpeg_start($jh,1)|0);
                                                                  $1309 = ($1308|0)!=(0);
                                                                  do {
                                                                   if ($1309) {
                                                                    $1310 = (($jh) + 4|0);
                                                                    $1311 = HEAP32[$1310>>2]|0;
                                                                    $1312 = ($1311|0)==(15);
                                                                    if (!($1312)) {
                                                                     break;
                                                                    }
                                                                    HEAP32[132400>>2] = 8191;
                                                                   }
                                                                  } while(0);
                                                                  $1313 = HEAP32[133240>>2]|0;
                                                                  $1314 = ($1313>>>0)>(1);
                                                                  if ($1314) {
                                                                   HEAP32[600>>2] = 0;
                                                                  }
                                                                  $1315 = HEAP32[133240>>2]|0;
                                                                  $1316 = ($1315>>>0)>(1);
                                                                  if ($1316) {
                                                                   label = 517;
                                                                  } else {
                                                                   $1317 = HEAP32[133752>>2]|0;
                                                                   $1318 = HEAP16[133096>>1]|0;
                                                                   $1319 = $1318&65535;
                                                                   $1320 = ($1317>>>0)<($1319>>>0);
                                                                   if ($1320) {
                                                                    label = 517;
                                                                   }
                                                                  }
                                                                  if ((label|0) == 517) {
                                                                   HEAP32[190504>>2] = 49;
                                                                   $1321 = HEAP32[133768>>2]|0;
                                                                   $1322 = $1321&65535;
                                                                   HEAP16[132368>>1] = $1322;
                                                                  }
                                                                  $1323 = HEAP16[132120>>1]|0;
                                                                  $1324 = $1323&65535;
                                                                  $1325 = HEAP16[132112>>1]|0;
                                                                  $1326 = $1325&65535;
                                                                  $1327 = $1324 | $1326;
                                                                  $1328 = ($1327|0)==(2048);
                                                                  if ($1328) {
                                                                   $1329 = HEAP32[133240>>2]|0;
                                                                   $1330 = ($1329|0)==(1);
                                                                   if ($1330) {
                                                                    HEAP32[600>>2] = 1;
                                                                    (_strcpy((458016|0),(492352|0))|0);
                                                                    (_strcpy((134232|0),(492360|0))|0);
                                                                    HEAP16[616>>1] = 8;
                                                                    HEAP16[608>>1] = 18;
                                                                    HEAP16[132112>>1] = 2032;
                                                                    HEAP16[132120>>1] = 2016;
                                                                   } else {
                                                                    (_strcpy((134232|0),(456432|0))|0);
                                                                    HEAP16[616>>1] = 10;
                                                                    HEAP16[608>>1] = 16;
                                                                    HEAP16[132112>>1] = 2028;
                                                                    HEAP16[132120>>1] = 2022;
                                                                   }
                                                                  } else {
                                                                   $1331 = HEAP16[132120>>1]|0;
                                                                   $1332 = $1331&65535;
                                                                   $1333 = HEAP16[132112>>1]|0;
                                                                   $1334 = $1333&65535;
                                                                   $1335 = (($1332) + ($1334))|0;
                                                                   $1336 = ($1335|0)==(5204);
                                                                   if ($1336) {
                                                                    $1337 = HEAP8[134232>>0]|0;
                                                                    $1338 = ($1337<<24>>24)!=(0);
                                                                    if (!($1338)) {
                                                                     (_strcpy((134232|0),(456448|0))|0);
                                                                    }
                                                                    $1339 = HEAP16[132120>>1]|0;
                                                                    $1340 = $1339&65535;
                                                                    $1341 = HEAP16[132112>>1]|0;
                                                                    $1342 = $1341&65535;
                                                                    $1343 = ($1340|0)>($1342|0);
                                                                    if ($1343) {
                                                                     HEAP16[616>>1] = 6;
                                                                     HEAP16[608>>1] = 32;
                                                                     HEAP16[132112>>1] = 2048;
                                                                     HEAP16[132120>>1] = 3072;
                                                                     HEAP32[600>>2] = 1633771873;
                                                                    } else {
                                                                     HEAP16[608>>1] = 6;
                                                                     HEAP16[616>>1] = 32;
                                                                     HEAP16[132120>>1] = 2048;
                                                                     HEAP16[132112>>1] = 3072;
                                                                     HEAP32[600>>2] = 370546198;
                                                                    }
                                                                    $1344 = +HEAPF32[134016>>2];
                                                                    $1345 = $1344 != 0.0;
                                                                    do {
                                                                     if ($1345) {
                                                                      $1346 = HEAP8[134232>>0]|0;
                                                                      $1347 = $1346 << 24 >> 24;
                                                                      $1348 = ($1347|0)==(86);
                                                                      if ($1348) {
                                                                       label = 531;
                                                                       break;
                                                                      }
                                                                      $1349 = HEAP32[133240>>2]|0;
                                                                      HEAP32[133760>>2] = $1349;
                                                                     } else {
                                                                      label = 531;
                                                                     }
                                                                    } while(0);
                                                                    if ((label|0) == 531) {
                                                                     HEAP32[600>>2] = 0;
                                                                    }
                                                                   } else {
                                                                    $1350 = HEAP16[132120>>1]|0;
                                                                    $1351 = $1350&65535;
                                                                    $1352 = ($1351|0)==(2116);
                                                                    if ($1352) {
                                                                     (_strcpy((134232|0),(456464|0))|0);
                                                                     HEAP16[616>>1] = 30;
                                                                     $1353 = HEAP16[132112>>1]|0;
                                                                     $1354 = $1353&65535;
                                                                     $1355 = (($1354) - 60)|0;
                                                                     $1356 = $1355&65535;
                                                                     HEAP16[132112>>1] = $1356;
                                                                     HEAP16[608>>1] = 55;
                                                                     $1357 = HEAP16[132120>>1]|0;
                                                                     $1358 = $1357&65535;
                                                                     $1359 = (($1358) - 110)|0;
                                                                     $1360 = $1359&65535;
                                                                     HEAP16[132120>>1] = $1360;
                                                                     HEAP32[600>>2] = 1229539657;
                                                                    } else {
                                                                     $1361 = HEAP16[132120>>1]|0;
                                                                     $1362 = $1361&65535;
                                                                     $1363 = ($1362|0)==(3171);
                                                                     if ($1363) {
                                                                      (_strcpy((134232|0),(456464|0))|0);
                                                                      HEAP16[616>>1] = 24;
                                                                      $1364 = HEAP16[132112>>1]|0;
                                                                      $1365 = $1364&65535;
                                                                      $1366 = (($1365) - 48)|0;
                                                                      $1367 = $1366&65535;
                                                                      HEAP16[132112>>1] = $1367;
                                                                      HEAP16[608>>1] = 24;
                                                                      $1368 = HEAP16[132120>>1]|0;
                                                                      $1369 = $1368&65535;
                                                                      $1370 = (($1369) - 48)|0;
                                                                      $1371 = $1370&65535;
                                                                      HEAP16[132120>>1] = $1371;
                                                                      HEAP32[600>>2] = 370546198;
                                                                     }
                                                                    }
                                                                   }
                                                                  }
                                                                 }
                                                                } else {
                                                                 $1296 = HEAP32[190504>>2]|0;
                                                                 $1297 = ($1296|0)!=(0|0);
                                                                 if (!($1297)) {
                                                                  HEAP32[190504>>2] = 19;
                                                                 }
                                                                 $1298 = HEAP32[133760>>2]|0;
                                                                 $1299 = ($1298>>>0)>(1);
                                                                 do {
                                                                  if ($1299) {
                                                                   $1300 = HEAP32[8>>2]|0;
                                                                   $1301 = ($1300|0)!=(0);
                                                                   if ($1301) {
                                                                    break;
                                                                   }
                                                                   $1302 = HEAP32[136>>2]|0;
                                                                   $1303 = ($1302|0)!=(0);
                                                                   if ($1303) {
                                                                    break;
                                                                   }
                                                                   HEAP32[600>>2] = 0;
                                                                  }
                                                                 } while(0);
                                                                 HEAP32[132400>>2] = 16383;
                                                                }
                                                               } else {
                                                                $1251 = HEAP32[190504>>2]|0;
                                                                $1252 = ($1251|0)==(5|0);
                                                                if ($1252) {
                                                                 HEAP32[190504>>2] = 48;
                                                                }
                                                                $1253 = HEAP16[132368>>1]|0;
                                                                $1254 = $1253&65535;
                                                                $1255 = ($1254|0)==(7262);
                                                                if ($1255) {
                                                                 HEAP16[132112>>1] = 5444;
                                                                 HEAP16[132120>>1] = 7248;
                                                                 HEAP16[616>>1] = 4;
                                                                 HEAP16[608>>1] = 7;
                                                                 HEAP32[600>>2] = 1633771873;
                                                                } else {
                                                                 $1256 = HEAP16[132368>>1]|0;
                                                                 $1257 = $1256&65535;
                                                                 $1258 = ($1257|0)==(7410);
                                                                 do {
                                                                  if ($1258) {
                                                                   label = 487;
                                                                  } else {
                                                                   $1259 = HEAP16[132368>>1]|0;
                                                                   $1260 = $1259&65535;
                                                                   $1261 = ($1260|0)==(8282);
                                                                   if ($1261) {
                                                                    label = 487;
                                                                    break;
                                                                   }
                                                                   $1270 = HEAP16[132368>>1]|0;
                                                                   $1271 = $1270&65535;
                                                                   $1272 = ($1271|0)==(9044);
                                                                   if ($1272) {
                                                                    HEAP16[132112>>1] = 6716;
                                                                    HEAP16[132120>>1] = 8964;
                                                                    HEAP16[616>>1] = 8;
                                                                    HEAP16[608>>1] = 40;
                                                                    HEAP32[133128>>2] = 256;
                                                                    $1273 = HEAP32[132392>>2]|0;
                                                                    $1274 = (($1273) + 256)|0;
                                                                    HEAP32[132392>>2] = $1274;
                                                                    HEAP32[132400>>2] = 33025;
                                                                   } else {
                                                                    $1275 = HEAP16[132368>>1]|0;
                                                                    $1276 = $1275&65535;
                                                                    $1277 = ($1276|0)==(4090);
                                                                    if ($1277) {
                                                                     (_strcpy((134232|0),(492344|0))|0);
                                                                     HEAP16[616>>1] = 6;
                                                                     $1278 = HEAP16[132112>>1]|0;
                                                                     $1279 = $1278&65535;
                                                                     $1280 = (($1279) - 6)|0;
                                                                     $1281 = $1280&65535;
                                                                     HEAP16[132112>>1] = $1281;
                                                                     HEAP16[608>>1] = 3;
                                                                     $1282 = HEAP16[132120>>1]|0;
                                                                     $1283 = $1282&65535;
                                                                     $1284 = (($1283) - 10)|0;
                                                                     $1285 = $1284&65535;
                                                                     HEAP16[132120>>1] = $1285;
                                                                     HEAP32[600>>2] = 1633771873;
                                                                    }
                                                                   }
                                                                  }
                                                                 } while(0);
                                                                 if ((label|0) == 487) {
                                                                  $1262 = HEAP16[132112>>1]|0;
                                                                  $1263 = $1262&65535;
                                                                  $1264 = (($1263) - 84)|0;
                                                                  $1265 = $1264&65535;
                                                                  HEAP16[132112>>1] = $1265;
                                                                  $1266 = HEAP16[132120>>1]|0;
                                                                  $1267 = $1266&65535;
                                                                  $1268 = (($1267) - 82)|0;
                                                                  $1269 = $1268&65535;
                                                                  HEAP16[132120>>1] = $1269;
                                                                  HEAP16[616>>1] = 4;
                                                                  HEAP16[608>>1] = 41;
                                                                  HEAP32[600>>2] = 1633771873;
                                                                 }
                                                                }
                                                                $1286 = HEAP32[133240>>2]|0;
                                                                $1287 = ($1286>>>0)>(1);
                                                                if ($1287) {
                                                                 $1288 = HEAP32[133240>>2]|0;
                                                                 $1289 = (($1288) + 1)|0;
                                                                 HEAP32[133760>>2] = $1289;
                                                                 $1290 = HEAP32[8>>2]|0;
                                                                 $1291 = ($1290|0)!=(0);
                                                                 do {
                                                                  if (!($1291)) {
                                                                   $1292 = HEAP32[136>>2]|0;
                                                                   $1293 = ($1292|0)!=(0);
                                                                   if ($1293) {
                                                                    break;
                                                                   }
                                                                   HEAP32[600>>2] = 0;
                                                                  }
                                                                 } while(0);
                                                                }
                                                               }
                                                              } else {
                                                               _gamma_curve(0.45000000000000001,4.5,1,255);
                                                              }
                                                             } else {
                                                              $1243 = HEAP16[133096>>1]|0;
                                                              $1244 = $1243&65535;
                                                              HEAP16[616>>1] = 2;
                                                              $1245 = (($1244) - 2)|0;
                                                              $1246 = $1245&65535;
                                                              HEAP16[132112>>1] = $1246;
                                                             }
                                                            } else {
                                                             HEAP32[132392>>2] = 16;
                                                            }
                                                           } else {
                                                            HEAP16[132112>>1] = 3045;
                                                            HEAP16[132120>>1] = 4070;
                                                            HEAP16[616>>1] = 3;
                                                            HEAP16[944>>1] = 18761;
                                                            HEAP32[600>>2] = 1229539657;
                                                            HEAP32[190504>>2] = 19;
                                                           }
                                                          }
                                                         } else {
                                                          HEAP16[944>>1] = 18761;
                                                          $1217 = HEAP16[132112>>1]|0;
                                                          $1218 = $1217&65535;
                                                          $1219 = (($1218) - 3)|0;
                                                          $1220 = $1219&65535;
                                                          HEAP16[132112>>1] = $1220;
                                                          HEAP16[616>>1] = 2;
                                                          $1221 = HEAP16[132120>>1]|0;
                                                          $1222 = $1221&65535;
                                                          $1223 = (($1222) - 10)|0;
                                                          $1224 = $1223&65535;
                                                          HEAP16[132120>>1] = $1224;
                                                          $1225 = $1224&65535;
                                                          $1226 = ($1225|0)>(3718);
                                                          if ($1226) {
                                                           $1227 = HEAP16[132112>>1]|0;
                                                           $1228 = $1227&65535;
                                                           $1229 = (($1228) - 28)|0;
                                                           $1230 = $1229&65535;
                                                           HEAP16[132112>>1] = $1230;
                                                           $1231 = HEAP16[132120>>1]|0;
                                                           $1232 = $1231&65535;
                                                           $1233 = (($1232) - 56)|0;
                                                           $1234 = $1233&65535;
                                                           HEAP16[132120>>1] = $1234;
                                                           HEAP16[616>>1] = 8;
                                                          }
                                                         }
                                                        } else {
                                                         HEAP16[944>>1] = 18761;
                                                         $1197 = HEAP16[132112>>1]|0;
                                                         $1198 = $1197&65535;
                                                         $1199 = (($1198) - 20)|0;
                                                         $1200 = $1199&65535;
                                                         HEAP16[132112>>1] = $1200;
                                                         HEAP16[616>>1] = 2;
                                                         $1201 = HEAP16[132120>>1]|0;
                                                         $1202 = $1201&65535;
                                                         $1203 = (($1202) - 6)|0;
                                                         $1204 = $1203&65535;
                                                         HEAP16[132120>>1] = $1204;
                                                         $1205 = $1204&65535;
                                                         $1206 = ($1205|0)>(3682);
                                                         if ($1206) {
                                                          $1207 = HEAP16[132112>>1]|0;
                                                          $1208 = $1207&65535;
                                                          $1209 = (($1208) - 10)|0;
                                                          $1210 = $1209&65535;
                                                          HEAP16[132112>>1] = $1210;
                                                          $1211 = HEAP16[132120>>1]|0;
                                                          $1212 = $1211&65535;
                                                          $1213 = (($1212) - 46)|0;
                                                          $1214 = $1213&65535;
                                                          HEAP16[132120>>1] = $1214;
                                                          HEAP16[616>>1] = 8;
                                                         }
                                                        }
                                                       }
                                                      }
                                                     }
                                                    }
                                                   }
                                                  } else {
                                                   $1132 = HEAP16[132112>>1]|0;
                                                   $1133 = $1132&65535;
                                                   $1134 = (($1133) - 2)|0;
                                                   $1135 = $1134&65535;
                                                   HEAP16[132112>>1] = $1135;
                                                  }
                                                 } else {
                                                  HEAP32[190504>>2] = 19;
                                                  HEAP32[864>>2] = -1;
                                                 }
                                                 break L546;
                                                } else {
                                                 label = 429;
                                                }
                                               } while(0);
                                               if ((label|0) == 429) {
                                                HEAP16[132112>>1] = 1956;
                                                HEAP16[132120>>1] = 2607;
                                                HEAP16[132368>>1] = 2624;
                                                label = 433;
                                               }
                                               if ((label|0) == 433) {
                                               }
                                               $1126 = HEAP32[133816>>2]|0;
                                               $1127 = (($1126) + 14)|0;
                                               HEAP32[133816>>2] = $1127;
                                               HEAP32[600>>2] = 1633771873;
                                               label = 435;
                                              } else {
                                               HEAP16[132112>>1] = 1712;
                                               HEAP16[132120>>1] = 2312;
                                               HEAP16[132368>>1] = 2336;
                                               label = 435;
                                              }
                                             } while(0);
                                             if ((label|0) == 435) {
                                              HEAP32[190504>>2] = 19;
                                              HEAP32[132400>>2] = 991;
                                              HEAP16[944>>1] = 19789;
                                              label = 436;
                                             }
                                             if ((label|0) == 436) {
                                              label = 437;
                                             }
                                             if ((label|0) == 437) {
                                              label = 438;
                                             }
                                             if ((label|0) == 438) {
                                             }
                                            } else {
                                             $1005 = (_strcmp(((134232 + 7|0)),492152)|0);
                                             $1006 = ($1005|0)!=(0);
                                             if ($1006) {
                                              $1007 = HEAP32[190504>>2]|0;
                                              $1008 = ($1007|0)!=(10|0);
                                              if ($1008) {
                                               $1009 = HEAP32[133760>>2]|0;
                                               $1010 = ($1009|0)==(2);
                                               if ($1010) {
                                                $1011 = HEAP32[8>>2]|0;
                                                $1012 = ($1011|0)!=(0);
                                                $1013 = $1012;
                                               } else {
                                                $1013 = 0;
                                               }
                                               $1014 = $1013 ? 12032 : 15872;
                                               HEAP32[132400>>2] = $1014;
                                              }
                                             } else {
                                              (_strcpy((134232|0),(492152|0))|0);
                                              HEAP16[132112>>1] = 2144;
                                              HEAP16[132120>>1] = 2880;
                                              HEAP32[455352>>2] = 6;
                                             }
                                             $1015 = HEAP16[133096>>1]|0;
                                             $1016 = $1015&65535;
                                             $1017 = HEAP16[132112>>1]|0;
                                             $1018 = $1017&65535;
                                             $1019 = (($1016) - ($1018))|0;
                                             $1020 = $1019 >> 2;
                                             $1021 = $1020 << 1;
                                             $1022 = $1021&65535;
                                             HEAP16[616>>1] = $1022;
                                             $1023 = HEAP16[132368>>1]|0;
                                             $1024 = $1023&65535;
                                             $1025 = HEAP16[132120>>1]|0;
                                             $1026 = $1025&65535;
                                             $1027 = (($1024) - ($1026))|0;
                                             $1028 = $1027 >> 2;
                                             $1029 = $1028 << 1;
                                             $1030 = $1029&65535;
                                             HEAP16[608>>1] = $1030;
                                             $1031 = HEAP16[132120>>1]|0;
                                             $1032 = $1031&65535;
                                             $1033 = ($1032|0)==(2848);
                                             if ($1033) {
                                              label = 387;
                                             } else {
                                              $1034 = HEAP16[132120>>1]|0;
                                              $1035 = $1034&65535;
                                              $1036 = ($1035|0)==(3664);
                                              if ($1036) {
                                               label = 387;
                                              }
                                             }
                                             if ((label|0) == 387) {
                                              HEAP32[600>>2] = 370546198;
                                             }
                                             $1037 = HEAP16[132120>>1]|0;
                                             $1038 = $1037&65535;
                                             $1039 = ($1038|0)==(4032);
                                             if ($1039) {
                                              label = 390;
                                             } else {
                                              $1040 = HEAP16[132120>>1]|0;
                                              $1041 = $1040&65535;
                                              $1042 = ($1041|0)==(4952);
                                              if ($1042) {
                                               label = 390;
                                              }
                                             }
                                             if ((label|0) == 390) {
                                              HEAP16[608>>1] = 0;
                                             }
                                             $1043 = HEAP16[132120>>1]|0;
                                             $1044 = $1043&65535;
                                             $1045 = ($1044|0)==(3328);
                                             do {
                                              if ($1045) {
                                               $1046 = HEAP16[132120>>1]|0;
                                               $1047 = $1046&65535;
                                               $1048 = (($1047) - 66)|0;
                                               $1049 = $1048&65535;
                                               HEAP16[132120>>1] = $1049;
                                               $1050 = $1049&65535;
                                               $1051 = ($1050|0)!=(0);
                                               if (!($1051)) {
                                                break;
                                               }
                                               HEAP16[608>>1] = 34;
                                              }
                                             } while(0);
                                             $1052 = HEAP16[132120>>1]|0;
                                             $1053 = $1052&65535;
                                             $1054 = ($1053|0)==(4936);
                                             if ($1054) {
                                              HEAP16[608>>1] = 4;
                                             }
                                             $1055 = (_strcmp(134232,492160)|0);
                                             $1056 = ($1055|0)!=(0);
                                             if ($1056) {
                                              $1057 = (_strcmp(134232,492168)|0);
                                              $1058 = ($1057|0)!=(0);
                                              if (!($1058)) {
                                               label = 398;
                                              }
                                             } else {
                                              label = 398;
                                             }
                                             if ((label|0) == 398) {
                                              $1059 = HEAP16[132120>>1]|0;
                                              $1060 = $1059&65535;
                                              $1061 = (($1060) + 2)|0;
                                              $1062 = $1061&65535;
                                              HEAP16[132120>>1] = $1062;
                                              HEAP16[608>>1] = 0;
                                              HEAP32[600>>2] = 370546198;
                                             }
                                             $1063 = HEAP32[190520>>2]|0;
                                             $1064 = ($1063|0)!=(0);
                                             if ($1064) {
                                              $1065 = HEAP32[133760>>2]|0;
                                              $1066 = HEAP16[132368>>1]|0;
                                              $1067 = $1066&65535;
                                              $1068 = Math_imul($1067, $1065)|0;
                                              $1069 = $1068&65535;
                                              HEAP16[132368>>1] = $1069;
                                             }
                                             $1070 = HEAP32[600>>2]|0;
                                             $1071 = ($1070|0)==(9);
                                             if ($1071) {
                                              $c = 0;
                                              while(1) {
                                               $1072 = $c;
                                               $1073 = ($1072|0)<(36);
                                               if (!($1073)) {
                                                break;
                                               }
                                               $1074 = $c;
                                               $1075 = HEAP16[608>>1]|0;
                                               $1076 = $1075&65535;
                                               $1077 = (($1074) + ($1076))|0;
                                               $1078 = (($1077|0) % 6)&-1;
                                               $1079 = $c;
                                               $1080 = (($1079|0) / 6)&-1;
                                               $1081 = HEAP16[616>>1]|0;
                                               $1082 = $1081&65535;
                                               $1083 = (($1080) + ($1082))|0;
                                               $1084 = (($1083|0) % 6)&-1;
                                               $1085 = (458512 + (($1084*6)|0)|0);
                                               $1086 = (($1085) + ($1078)|0);
                                               $1087 = HEAP8[$1086>>0]|0;
                                               $1088 = $c;
                                               $1089 = (624 + ($1088)|0);
                                               HEAP8[$1089>>0] = $1087;
                                               $1090 = $c;
                                               $1091 = (($1090) + 1)|0;
                                               $c = $1091;
                                              }
                                             }
                                            }
                                           }
                                          }
                                         }
                                        }
                                       }
                                      }
                                     }
                                    } else {
                                     $911 = HEAP16[132112>>1]|0;
                                     $912 = $911&65535;
                                     $913 = (($912) - 2)|0;
                                     $914 = $913&65535;
                                     HEAP16[132112>>1] = $914;
                                    }
                                   }
                                  } else {
                                   $895 = HEAP16[132120>>1]|0;
                                   $896 = $895&65535;
                                   $897 = (($896) - 32)|0;
                                   $898 = $897&65535;
                                   HEAP16[132120>>1] = $898;
                                  }
                                 } else {
                                  $882 = HEAP16[132120>>1]|0;
                                  $883 = $882&65535;
                                  $884 = ($883|0)==(3264);
                                  if ($884) {
                                   $885 = HEAP16[132120>>1]|0;
                                   $886 = $885&65535;
                                   $887 = (($886) - 32)|0;
                                   $888 = $887&65535;
                                   HEAP16[132120>>1] = $888;
                                  } else {
                                   $889 = HEAP16[132120>>1]|0;
                                   $890 = $889&65535;
                                   $891 = (($890) - 8)|0;
                                   $892 = $891&65535;
                                   HEAP16[132120>>1] = $892;
                                  }
                                 }
                                } else {
                                 HEAP16[608>>1] = 6;
                                 $876 = HEAP16[132120>>1]|0;
                                 $877 = $876&65535;
                                 $878 = (($877) - 14)|0;
                                 $879 = $878&65535;
                                 HEAP16[132120>>1] = $879;
                                }
                               } else {
                                HEAP16[608>>1] = 1;
                                $870 = HEAP16[132120>>1]|0;
                                $871 = $870&65535;
                                $872 = (($871) - 4)|0;
                                $873 = $872&65535;
                                HEAP16[132120>>1] = $873;
                                HEAP32[600>>2] = -1802201964;
                               }
                              } else {
                               $859 = HEAP32[133128>>2]|0;
                               $860 = ($859|0)!=(0);
                               if ($860) {
                                $861 = HEAP16[132120>>1]|0;
                                $862 = $861&65535;
                                $863 = (($862) + 3)|0;
                                $864 = $863&65535;
                                HEAP16[132120>>1] = $864;
                                $865 = $864&65535;
                                $866 = (($865) + 3)|0;
                                $867 = $866&65535;
                                HEAP16[132368>>1] = $867;
                               }
                              }
                             } else {
                              label = 311;
                             }
                            } while(0);
                            if ((label|0) == 311) {
                             $855 = HEAP16[132120>>1]|0;
                             $856 = (($855) + -1)<<16>>16;
                             HEAP16[132120>>1] = $856;
                            }
                           } else {
                            label = 307;
                           }
                          } while(0);
                          if ((label|0) == 307) {
                           $845 = HEAP16[132120>>1]|0;
                           $846 = $845&65535;
                           $847 = (($846) - 52)|0;
                           $848 = $847&65535;
                           HEAP16[132120>>1] = $848;
                           HEAP16[608>>1] = 2;
                          }
                         } else {
                          label = 304;
                         }
                        } while(0);
                        if ((label|0) == 304) {
                         $837 = HEAP16[132120>>1]|0;
                         $838 = $837&65535;
                         $839 = (($838) - 46)|0;
                         $840 = $839&65535;
                         HEAP16[132120>>1] = $840;
                        }
                       } else {
                        label = 300;
                       }
                      } while(0);
                      if ((label|0) == 300) {
                       $827 = HEAP16[132120>>1]|0;
                       $828 = $827&65535;
                       $829 = (($828) - 44)|0;
                       $830 = $829&65535;
                       HEAP16[132120>>1] = $830;
                      }
                     } else {
                      label = 296;
                     }
                    } while(0);
                    if ((label|0) == 296) {
                     $817 = HEAP16[132120>>1]|0;
                     $818 = $817&65535;
                     $819 = (($818) - 42)|0;
                     $820 = $819&65535;
                     HEAP16[132120>>1] = $820;
                    }
                   } else {
                    $809 = HEAP16[132120>>1]|0;
                    $810 = $809&65535;
                    $811 = (($810) - 28)|0;
                    $812 = $811&65535;
                    HEAP16[132120>>1] = $812;
                    HEAP16[608>>1] = 6;
                   }
                  } else {
                   label = 291;
                  }
                 } while(0);
                 if ((label|0) == 291) {
                  $803 = HEAP16[132120>>1]|0;
                  $804 = $803&65535;
                  $805 = (($804) - 4)|0;
                  $806 = $805&65535;
                  HEAP16[132120>>1] = $806;
                  HEAP16[608>>1] = 2;
                 }
                } else {
                 label = 287;
                }
               } while(0);
               if ((label|0) == 287) {
                $789 = HEAP16[132112>>1]|0;
                $790 = $789&65535;
                $791 = (($790) - 3)|0;
                $792 = $791&65535;
                HEAP16[132112>>1] = $792;
                $793 = HEAP16[132120>>1]|0;
                $794 = $793&65535;
                $795 = (($794) - 4)|0;
                $796 = $795&65535;
                HEAP16[132120>>1] = $796;
               }
              } else {
               $777 = HEAP16[132120>>1]|0;
               $778 = $777&65535;
               $779 = (($778) - 4)|0;
               $780 = $779&65535;
               HEAP16[132120>>1] = $780;
               HEAPF64[458024>>3] = 0.5;
              }
             } else {
              $767 = +HEAPF32[134016>>2];
              $768 = $767;
              $769 = $768 * 0.48576850094876661;
              $770 = $769;
              HEAPF32[134016>>2] = $770;
              $771 = +HEAPF32[((134016 + 8|0))>>2];
              $772 = $771;
              $773 = $772 * 0.80757097791798105;
              $774 = $773;
              HEAPF32[((134016 + 8|0))>>2] = $774;
             }
            } else {
             HEAP32[600>>2] = 1633771873;
             $763 = HEAP16[((968 + 400|0))>>1]|0;
             $764 = $763&65535;
             HEAP32[132392>>2] = $764;
            }
           } else {
            HEAP32[((190528 + 28|0))>>2] = -4;
           }
          } else {
           $757 = (_canon_s2is()|0);
           $758 = ($757|0)!=(0);
           if ($758) {
            (_strcpy((((134232 + 10|0))|0),(491792|0))|0);
           }
          }
         } else {
          label = 270;
         }
        } while(0);
        if ((label|0) == 270) {
         HEAP32[132304>>2] = 4;
         HEAP32[600>>2] = -1263225676;
        }
       } else {
        label = 262;
       }
      } while(0);
      if ((label|0) == 262) {
       HEAP16[132112>>1] = 773;
       HEAP16[132120>>1] = 960;
       HEAP16[132368>>1] = 992;
       HEAPF64[458024>>3] = 1.0893617021276596;
       HEAP32[600>>2] = 508436046;
       label = 267;
      }
      if ((label|0) == 267) {
       HEAP32[132304>>2] = 4;
       HEAP32[133800>>2] = 10;
       HEAP32[190504>>2] = 10;
       HEAP32[133128>>2] = 40;
      }
     } else {
      HEAP16[132112>>1] = 613;
      HEAP16[132120>>1] = 854;
      HEAP16[132368>>1] = 896;
      HEAP32[132304>>2] = 4;
      HEAP32[600>>2] = -505093660;
      HEAP32[190504>>2] = 6;
     }
    }
   }
   $1773 = HEAP8[134232>>0]|0;
   $1774 = ($1773<<24>>24)!=(0);
   if (!($1774)) {
    $1775 = HEAP16[132120>>1]|0;
    $1776 = $1775&65535;
    $1777 = HEAP16[132112>>1]|0;
    $1778 = $1777&65535;
    HEAP32[$vararg_buffer1>>2] = $1776;
    $vararg_ptr4 = (($vararg_buffer1) + 4|0);
    HEAP32[$vararg_ptr4>>2] = $1778;
    (_sprintf(134232,492664,$vararg_buffer1)|0);
   }
   $1779 = HEAP32[600>>2]|0;
   $1780 = ($1779|0)==(-1);
   if ($1780) {
    HEAP32[600>>2] = -1802201964;
   }
   $1781 = HEAP32[454608>>2]|0;
   $1782 = ($1781|0)!=(0);
   do {
    if ($1782) {
     $1783 = HEAP16[134304>>1]|0;
     $1784 = ($1783<<16>>16)!=(0);
     if ($1784) {
      break;
     }
     $1785 = HEAP32[880>>2]|0;
     $1786 = HEAP32[454608>>2]|0;
     (_fseek(($1785|0),($1786|0),0)|0);
     $1787 = (_ljpeg_start($jh,1)|0);
     $1788 = ($1787|0)!=(0);
     if ($1788) {
      $1789 = (($jh) + 12|0);
      $1790 = HEAP32[$1789>>2]|0;
      $1791 = $1790&65535;
      HEAP16[134296>>1] = $1791;
      $1792 = (($jh) + 8|0);
      $1793 = HEAP32[$1792>>2]|0;
      $1794 = $1793&65535;
      HEAP16[134304>>1] = $1794;
     }
    }
   } while(0);
  }
  $1795 = HEAP32[192>>2]|0;
  $1796 = HEAP32[184>>2]|0;
  $1797 = ($1796|0)!=(0);
  if ($1797) {
   $1801 = 1;
  } else {
   $1798 = HEAP32[133104>>2]|0;
   $1799 = ($1798|0)!=(0);
   $1801 = $1799;
  }
  $1800 = $1801&1;
  $1802 = $1795 & $1800;
  $1803 = ($1802|0)!=(0);
  do {
   if ($1803) {
    $1804 = +HEAPF32[455992>>2];
    $1805 = $1804;
    $1806 = $1805 > 0.125;
    if (!($1806)) {
     break;
    }
    dest=132312+0|0; src=455992+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    HEAP32[132296>>2] = 0;
   }
  } while(0);
  $1807 = HEAP32[132296>>2]|0;
  $1808 = ($1807|0)!=(0);
  if ($1808) {
   _adobe_coeff(134168,134232);
  }
  $1809 = HEAP32[190504>>2]|0;
  $1810 = ($1809|0)==(40|0);
  if ($1810) {
   $1811 = HEAP32[132296>>2]|0;
   $1812 = ($1811|0)!=(0);
   if ($1812) {
    _adobe_coeff(491304,492672);
   }
  }
  $1813 = HEAP16[190512>>1]|0;
  $1814 = ($1813<<16>>16)!=(0);
  if ($1814) {
   $1815 = HEAP16[132120>>1]|0;
   $1816 = $1815&65535;
   $1817 = HEAP32[190520>>2]|0;
   $1818 = ($1817|0)!=(0);
   $1819 = $1818 ^ 1;
   $1820 = $1819&1;
   $1821 = $1816 >> $1820;
   $1822 = $1821&65535;
   HEAP16[190512>>1] = $1822;
   $1823 = HEAP16[190512>>1]|0;
   $1824 = $1823&65535;
   $1825 = $1824 & 1;
   $1826 = ($1825|0)!=(0);
   $1827 = $1826 ? -1802201964 : 1229539657;
   HEAP32[600>>2] = $1827;
   $1828 = HEAP16[132112>>1]|0;
   $1829 = $1828&65535;
   $1830 = HEAP32[190520>>2]|0;
   $1831 = $1829 >> $1830;
   $1832 = HEAP16[190512>>1]|0;
   $1833 = $1832&65535;
   $1834 = (($1831) + ($1833))|0;
   $1835 = $1834&65535;
   HEAP16[132120>>1] = $1835;
   $1836 = HEAP16[132120>>1]|0;
   $1837 = $1836&65535;
   $1838 = (($1837) - 1)|0;
   $1839 = $1838&65535;
   HEAP16[132112>>1] = $1839;
   HEAPF64[458024>>3] = 1.0;
  } else {
   $1840 = HEAP16[133096>>1]|0;
   $1841 = $1840&65535;
   $1842 = HEAP16[132112>>1]|0;
   $1843 = $1842&65535;
   $1844 = ($1841|0)<($1843|0);
   if ($1844) {
    $1845 = HEAP16[132112>>1]|0;
    HEAP16[133096>>1] = $1845;
   }
   $1846 = HEAP16[132368>>1]|0;
   $1847 = $1846&65535;
   $1848 = HEAP16[132120>>1]|0;
   $1849 = $1848&65535;
   $1850 = ($1847|0)<($1849|0);
   if ($1850) {
    $1851 = HEAP16[132120>>1]|0;
    HEAP16[132368>>1] = $1851;
   }
  }
  $1852 = HEAP32[133800>>2]|0;
  $1853 = ($1852|0)!=(0);
  if (!($1853)) {
   HEAP32[133800>>2] = 12;
  }
  $1854 = HEAP32[132400>>2]|0;
  $1855 = ($1854|0)!=(0);
  if (!($1855)) {
   $1856 = HEAP32[133800>>2]|0;
   $1857 = 1 << $1856;
   $1858 = (($1857) - 1)|0;
   HEAP32[132400>>2] = $1858;
  }
  $1859 = HEAP32[190504>>2]|0;
  $1860 = ($1859|0)!=(0|0);
  do {
   if ($1860) {
    $1861 = HEAP16[132112>>1]|0;
    $1862 = $1861&65535;
    $1863 = ($1862|0)<(22);
    if ($1863) {
     label = 803;
     break;
    }
    $1864 = HEAP16[132120>>1]|0;
    $1865 = $1864&65535;
    $1866 = ($1865|0)<(22);
    if ($1866) {
     label = 803;
     break;
    }
    $1867 = HEAP32[133800>>2]|0;
    $1868 = ($1867>>>0)>(16);
    if ($1868) {
     label = 803;
     break;
    }
    $1869 = HEAP32[133240>>2]|0;
    $1870 = ($1869>>>0)>(6);
    if ($1870) {
     label = 803;
     break;
    }
    $1871 = HEAP32[132304>>2]|0;
    $1872 = ($1871>>>0)>(4);
    if ($1872) {
     label = 803;
    }
   } else {
    label = 803;
   }
  } while(0);
  if ((label|0) == 803) {
   HEAP32[133760>>2] = 0;
  }
  $1873 = HEAP32[190504>>2]|0;
  $1874 = ($1873|0)==(42|0);
  if ($1874) {
   $1875 = HEAP32[_stderr>>2]|0;
   $1876 = HEAP32[696>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $1876;
   $vararg_ptr8 = (($vararg_buffer5) + 4|0);
   HEAP32[$vararg_ptr8>>2] = 492728;
   (_fprintf(($1875|0),(492688|0),($vararg_buffer5|0))|0);
   HEAP32[133760>>2] = 0;
  }
  $1877 = HEAP32[190504>>2]|0;
  $1878 = ($1877|0)==(53|0);
  if ($1878) {
   label = 808;
  } else {
   $1879 = HEAP32[190504>>2]|0;
   $1880 = ($1879|0)==(46|0);
   if ($1880) {
    label = 808;
   }
  }
  if ((label|0) == 808) {
   $1881 = HEAP32[_stderr>>2]|0;
   $1882 = HEAP32[696>>2]|0;
   HEAP32[$vararg_buffer9>>2] = $1882;
   $vararg_ptr12 = (($vararg_buffer9) + 4|0);
   HEAP32[$vararg_ptr12>>2] = 492744;
   (_fprintf(($1881|0),(492688|0),($vararg_buffer9|0))|0);
   HEAP32[133760>>2] = 0;
  }
  $1883 = HEAP8[458016>>0]|0;
  $1884 = ($1883<<24>>24)!=(0);
  if (!($1884)) {
   $1885 = HEAP32[132304>>2]|0;
   $1886 = ($1885|0)==(3);
   $1887 = $1886 ? 492752 : 492760;
   (_strcpy((458016|0),($1887|0))|0);
  }
  $1888 = HEAP16[133096>>1]|0;
  $1889 = ($1888<<16>>16)!=(0);
  if (!($1889)) {
   $1890 = HEAP16[132112>>1]|0;
   HEAP16[133096>>1] = $1890;
  }
  $1891 = HEAP16[132368>>1]|0;
  $1892 = ($1891<<16>>16)!=(0);
  if (!($1892)) {
   $1893 = HEAP16[132120>>1]|0;
   HEAP16[132368>>1] = $1893;
  }
  $1894 = HEAP32[600>>2]|0;
  $1895 = ($1894>>>0)>(999);
  do {
   if ($1895) {
    $1896 = HEAP32[132304>>2]|0;
    $1897 = ($1896|0)==(3);
    if (!($1897)) {
     break;
    }
    $1898 = HEAP32[600>>2]|0;
    $1899 = $1898 >>> 2;
    $1900 = $1899 & 572662306;
    $1901 = HEAP32[600>>2]|0;
    $1902 = $1901 << 2;
    $1903 = $1902 & -2004318072;
    $1904 = $1900 | $1903;
    $1905 = HEAP32[600>>2]|0;
    $1906 = $1905 << 1;
    $1907 = $1904 & $1906;
    $1908 = HEAP32[600>>2]|0;
    $1909 = $1908 | $1907;
    HEAP32[600>>2] = $1909;
   }
  } while(0);
 } else {
 }
 $1910 = HEAP32[455352>>2]|0;
 $1911 = ($1910|0)==(-1);
 if ($1911) {
  $1912 = HEAP32[458032>>2]|0;
  HEAP32[455352>>2] = $1912;
 }
 $1913 = HEAP32[455352>>2]|0;
 $1914 = ($1913|0)==(-1);
 if (!($1914)) {
  STACKTOP = sp;return;
 }
 HEAP32[455352>>2] = 0;
 STACKTOP = sp;return;
}
function _convert_to_rgb() {
 var $0 = 0.0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0.0, $278 = 0.0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0.0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $col = 0, $i = 0, $img = 0, $inverse = 0, $j = 0, $k = 0, $num = 0.0, $out = 0, $out_cam = 0;
 var $pbody = 0, $pcurve = 0, $row = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 80|0;
 $out = sp + 136|0;
 $out_cam = sp + 88|0;
 $inverse = sp + 8|0;
 $pbody = sp + 148|0;
 $pcurve = sp + 272|0;
 dest=$pbody+0|0; src=493328+0|0; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 ;HEAP32[$pcurve+0>>2]=HEAP32[493472+0>>2]|0;HEAP32[$pcurve+4>>2]=HEAP32[493472+4>>2]|0;HEAP32[$pcurve+8>>2]=HEAP32[493472+8>>2]|0;HEAP32[$pcurve+12>>2]=HEAP32[493472+12>>2]|0;
 $0 = +HEAPF64[56>>3];
 $1 = +HEAPF64[((56 + 8|0))>>3];
 _gamma_curve($0,$1,0,0);
 dest=$out_cam+0|0; src=132312+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $2 = HEAP32[132304>>2]|0;
 $3 = ($2|0)==(1);
 if ($3) {
  $11 = 1;
 } else {
  $4 = HEAP32[152>>2]|0;
  $5 = ($4|0)!=(0);
  if ($5) {
   $11 = 1;
  } else {
   $6 = HEAP32[200>>2]|0;
   $7 = ($6|0)<(1);
   if ($7) {
    $11 = 1;
   } else {
    $8 = HEAP32[200>>2]|0;
    $9 = ($8|0)>(5);
    $11 = $9;
   }
  }
 }
 $10 = $11&1;
 $12 = HEAP32[132296>>2]|0;
 $13 = $12 | $10;
 HEAP32[132296>>2] = $13;
 $14 = HEAP32[132296>>2]|0;
 $15 = ($14|0)!=(0);
 if (!($15)) {
  $16 = HEAP32[493248>>2]|0;
  $17 = (_calloc($16,1)|0);
  HEAP32[493488>>2] = $17;
  $18 = HEAP32[493488>>2]|0;
  _merror($18,493496);
  $19 = HEAP32[493488>>2]|0;
  dest=$19+0|0; src=493248+0|0; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $20 = HEAP32[200>>2]|0;
  $21 = ($20|0)==(5);
  if ($21) {
   $22 = HEAP32[493488>>2]|0;
   $23 = (($22) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[493488>>2]|0;
   $26 = (($25) + 16|0);
   HEAP32[$26>>2] = $24;
  }
  $27 = HEAP32[$pbody>>2]|0;
  $28 = ($27*12)|0;
  $29 = (132 + ($28))|0;
  $30 = HEAP32[493488>>2]|0;
  HEAP32[$30>>2] = $29;
  $i = 0;
  while(1) {
   $31 = $i;
   $32 = HEAP32[$pbody>>2]|0;
   $33 = ($31>>>0)<($32>>>0);
   if (!($33)) {
    break;
   }
   $34 = $i;
   $35 = ($34|0)!=(0);
   if ($35) {
    $36 = $i;
    $37 = ($36|0)>(1);
    $38 = $37 ? 1482250784 : 1684370275;
    $44 = $38;
   } else {
    $44 = 1952807028;
   }
   $39 = HEAP32[493488>>2]|0;
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40>>>0) / 4)&-1;
   $42 = HEAP32[493488>>2]|0;
   $43 = (($42) + ($41<<2)|0);
   HEAP32[$43>>2] = $44;
   $45 = HEAP32[493488>>2]|0;
   $46 = HEAP32[$45>>2]|0;
   $47 = $i;
   $48 = ($47*3)|0;
   $49 = (($48) + 2)|0;
   $50 = (($pbody) + ($49<<2)|0);
   HEAP32[$50>>2] = $46;
   $51 = $i;
   $52 = ($51*3)|0;
   $53 = (($52) + 3)|0;
   $54 = (($pbody) + ($53<<2)|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) + 3)|0;
   $57 = $56 & -4;
   $58 = HEAP32[493488>>2]|0;
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59) + ($57))|0;
   HEAP32[$58>>2] = $60;
   $61 = $i;
   $62 = (($61) + 1)|0;
   $i = $62;
  }
  $63 = HEAP32[493488>>2]|0;
  $64 = (($63) + 128|0);
  dest=$64+0|0; src=$pbody+0|0; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $65 = HEAP32[200>>2]|0;
  $66 = (($65) - 1)|0;
  $67 = (493152 + ($66<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (_strlen(($68|0))|0);
  $70 = (($69) + 1)|0;
  $71 = (($pbody) + 20|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($72>>>0) / 4)&-1;
  $74 = (($73) + 2)|0;
  $75 = HEAP32[493488>>2]|0;
  $76 = (($75) + ($74<<2)|0);
  HEAP32[$76>>2] = $70;
  $77 = HEAP32[493488>>2]|0;
  $78 = (($pbody) + 32|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($77) + ($79)|0);
  $81 = (($80) + 8|0);
  dest=$81+0|0; src=493456+0|0; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $82 = +HEAPF64[((56 + 40|0))>>3];
  $83 = 256.0 / $82;
  $84 = $83 + 0.5;
  $85 = (~~(($84)));
  $86 = $85 << 16 >> 16;
  $87 = $86 << 16;
  $88 = (($pcurve) + 12|0);
  HEAP32[$88>>2] = $87;
  $i = 4;
  while(1) {
   $89 = $i;
   $90 = ($89|0)<(7);
   if (!($90)) {
    break;
   }
   $91 = HEAP32[493488>>2]|0;
   $92 = $i;
   $93 = ($92*3)|0;
   $94 = (($93) + 2)|0;
   $95 = (($pbody) + ($94<<2)|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (($91) + ($96)|0);
   dest=$97+0|0; src=$pcurve+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $98 = $i;
   $99 = (($98) + 1)|0;
   $i = $99;
  }
  $100 = HEAP32[200>>2]|0;
  $101 = (($100) - 1)|0;
  $102 = (493128 + ($101<<2)|0);
  $103 = HEAP32[$102>>2]|0;
  _pseudoinverse($103,$inverse,3);
  $i = 0;
  while(1) {
   $104 = $i;
   $105 = ($104|0)<(3);
   if (!($105)) {
    break;
   }
   $j = 0;
   while(1) {
    $106 = $j;
    $107 = ($106|0)<(3);
    if (!($107)) {
     break;
    }
    $k = 0;
    $num = 0.0;
    while(1) {
     $108 = $k;
     $109 = ($108|0)<(3);
     if (!($109)) {
      break;
     }
     $110 = $k;
     $111 = $i;
     $112 = (492768 + (($111*24)|0)|0);
     $113 = (($112) + ($110<<3)|0);
     $114 = +HEAPF64[$113>>3];
     $115 = $k;
     $116 = $j;
     $117 = (($inverse) + (($116*24)|0)|0);
     $118 = (($117) + ($115<<3)|0);
     $119 = +HEAPF64[$118>>3];
     $120 = $114 * $119;
     $121 = $num;
     $122 = $121 + $120;
     $num = $122;
     $123 = $k;
     $124 = (($123) + 1)|0;
     $k = $124;
    }
    $125 = $num;
    $126 = $125 * 65536.0;
    $127 = $126 + 0.5;
    $128 = (~~(($127))>>>0);
    $129 = $j;
    $130 = ($129*3)|0;
    $131 = (($130) + 23)|0;
    $132 = (($pbody) + ($131<<2)|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (($133>>>0) / 4)&-1;
    $135 = $i;
    $136 = (($134) + ($135))|0;
    $137 = (($136) + 2)|0;
    $138 = HEAP32[493488>>2]|0;
    $139 = (($138) + ($137<<2)|0);
    HEAP32[$139>>2] = $128;
    $140 = $j;
    $141 = (($140) + 1)|0;
    $j = $141;
   }
   $142 = $i;
   $143 = (($142) + 1)|0;
   $i = $143;
  }
  $i = 0;
  while(1) {
   $144 = $i;
   $145 = HEAP32[493248>>2]|0;
   $146 = (($145>>>0) / 4)&-1;
   $147 = ($144>>>0)<($146>>>0);
   if (!($147)) {
    break;
   }
   $148 = $i;
   $149 = HEAP32[493488>>2]|0;
   $150 = (($149) + ($148<<2)|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = (_htonl(($151|0))|0);
   $153 = $i;
   $154 = HEAP32[493488>>2]|0;
   $155 = (($154) + ($153<<2)|0);
   HEAP32[$155>>2] = $152;
   $156 = $i;
   $157 = (($156) + 1)|0;
   $i = $157;
  }
  $158 = HEAP32[493488>>2]|0;
  $159 = (($pbody) + 8|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (($158) + ($160)|0);
  $162 = (($161) + 8|0);
  (_strcpy(($162|0),(493520|0))|0);
  $163 = HEAP32[493488>>2]|0;
  $164 = (($pbody) + 20|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = (($163) + ($165)|0);
  $167 = (($166) + 12|0);
  $168 = HEAP32[200>>2]|0;
  $169 = (($168) - 1)|0;
  $170 = (493152 + ($169<<2)|0);
  $171 = HEAP32[$170>>2]|0;
  (_strcpy(($167|0),($171|0))|0);
  $i = 0;
  while(1) {
   $172 = $i;
   $173 = ($172|0)<(3);
   if (!($173)) {
    break;
   }
   $j = 0;
   while(1) {
    $174 = $j;
    $175 = HEAP32[132304>>2]|0;
    $176 = ($174>>>0)<($175>>>0);
    if (!($176)) {
     break;
    }
    $k = 0;
    $177 = $j;
    $178 = $i;
    $179 = (($out_cam) + ($178<<4)|0);
    $180 = (($179) + ($177<<2)|0);
    HEAPF32[$180>>2] = 0.0;
    while(1) {
     $181 = $k;
     $182 = ($181|0)<(3);
     if (!($182)) {
      break;
     }
     $183 = $k;
     $184 = $i;
     $185 = HEAP32[200>>2]|0;
     $186 = (($185) - 1)|0;
     $187 = (493128 + ($186<<2)|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = (($188) + (($184*24)|0)|0);
     $190 = (($189) + ($183<<3)|0);
     $191 = +HEAPF64[$190>>3];
     $192 = $j;
     $193 = $k;
     $194 = (132312 + ($193<<4)|0);
     $195 = (($194) + ($192<<2)|0);
     $196 = +HEAPF32[$195>>2];
     $197 = $196;
     $198 = $191 * $197;
     $199 = $j;
     $200 = $i;
     $201 = (($out_cam) + ($200<<4)|0);
     $202 = (($201) + ($199<<2)|0);
     $203 = +HEAPF32[$202>>2];
     $204 = $203;
     $205 = $204 + $198;
     $206 = $205;
     HEAPF32[$202>>2] = $206;
     $207 = $k;
     $208 = (($207) + 1)|0;
     $k = $208;
    }
    $209 = $j;
    $210 = (($209) + 1)|0;
    $j = $210;
   }
   $211 = $i;
   $212 = (($211) + 1)|0;
   $i = $212;
  }
 }
 $213 = HEAP32[168>>2]|0;
 $214 = ($213|0)!=(0);
 if ($214) {
  $215 = HEAP32[_stderr>>2]|0;
  $216 = HEAP32[132296>>2]|0;
  $217 = ($216|0)!=(0);
  $218 = $217 ? 493544 : 493568;
  $219 = HEAP32[200>>2]|0;
  $220 = (($219) - 1)|0;
  $221 = (493152 + ($220<<2)|0);
  $222 = HEAP32[$221>>2]|0;
  HEAP32[$vararg_buffer>>2] = $222;
  (_fprintf(($215|0),($218|0),($vararg_buffer|0))|0);
 }
 _memset((493600|0),0,131072)|0;
 $223 = HEAP32[132144>>2]|0;
 $img = $223;
 $row = 0;
 while(1) {
  $224 = $row;
  $225 = HEAP16[132112>>1]|0;
  $226 = $225&65535;
  $227 = ($224|0)<($226|0);
  if (!($227)) {
   break;
  }
  $col = 0;
  while(1) {
   $228 = $col;
   $229 = HEAP16[132120>>1]|0;
   $230 = $229&65535;
   $231 = ($228|0)<($230|0);
   if (!($231)) {
    break;
   }
   $232 = HEAP32[132296>>2]|0;
   $233 = ($232|0)!=(0);
   if ($233) {
    $310 = HEAP32[152>>2]|0;
    $311 = ($310|0)!=(0);
    if ($311) {
     $312 = $row;
     $313 = $col;
     $314 = (_fcol($312,$313)|0);
     $315 = $img;
     $316 = (($315) + ($314<<1)|0);
     $317 = HEAP16[$316>>1]|0;
     $318 = $img;
     HEAP16[$318>>1] = $317;
    }
   } else {
    $234 = (($out) + 8|0);
    HEAPF32[$234>>2] = 0.0;
    $235 = (($out) + 4|0);
    HEAPF32[$235>>2] = 0.0;
    HEAPF32[$out>>2] = 0.0;
    $c = 0;
    while(1) {
     $236 = $c;
     $237 = HEAP32[132304>>2]|0;
     $238 = ($236>>>0)<($237>>>0);
     if (!($238)) {
      break;
     }
     $239 = $c;
     $240 = (($out_cam) + ($239<<2)|0);
     $241 = +HEAPF32[$240>>2];
     $242 = $c;
     $243 = $img;
     $244 = (($243) + ($242<<1)|0);
     $245 = HEAP16[$244>>1]|0;
     $246 = $245&65535;
     $247 = (+($246|0));
     $248 = $241 * $247;
     $249 = +HEAPF32[$out>>2];
     $250 = $249 + $248;
     HEAPF32[$out>>2] = $250;
     $251 = $c;
     $252 = (($out_cam) + 16|0);
     $253 = (($252) + ($251<<2)|0);
     $254 = +HEAPF32[$253>>2];
     $255 = $c;
     $256 = $img;
     $257 = (($256) + ($255<<1)|0);
     $258 = HEAP16[$257>>1]|0;
     $259 = $258&65535;
     $260 = (+($259|0));
     $261 = $254 * $260;
     $262 = (($out) + 4|0);
     $263 = +HEAPF32[$262>>2];
     $264 = $263 + $261;
     HEAPF32[$262>>2] = $264;
     $265 = $c;
     $266 = (($out_cam) + 32|0);
     $267 = (($266) + ($265<<2)|0);
     $268 = +HEAPF32[$267>>2];
     $269 = $c;
     $270 = $img;
     $271 = (($270) + ($269<<1)|0);
     $272 = HEAP16[$271>>1]|0;
     $273 = $272&65535;
     $274 = (+($273|0));
     $275 = $268 * $274;
     $276 = (($out) + 8|0);
     $277 = +HEAPF32[$276>>2];
     $278 = $277 + $275;
     HEAPF32[$276>>2] = $278;
     $279 = $c;
     $280 = (($279) + 1)|0;
     $c = $280;
    }
    $c = 0;
    while(1) {
     $281 = $c;
     $282 = ($281|0)<(3);
     if (!($282)) {
      break;
     }
     $283 = $c;
     $284 = (($out) + ($283<<2)|0);
     $285 = +HEAPF32[$284>>2];
     $286 = (~~(($285)));
     $287 = ($286|0)<(65535);
     if ($287) {
      $288 = $c;
      $289 = (($out) + ($288<<2)|0);
      $290 = +HEAPF32[$289>>2];
      $291 = (~~(($290)));
      $293 = $291;
     } else {
      $293 = 65535;
     }
     $292 = (0)>($293|0);
     if ($292) {
      $304 = 0;
     } else {
      $294 = $c;
      $295 = (($out) + ($294<<2)|0);
      $296 = +HEAPF32[$295>>2];
      $297 = (~~(($296)));
      $298 = ($297|0)<(65535);
      if ($298) {
       $299 = $c;
       $300 = (($out) + ($299<<2)|0);
       $301 = +HEAPF32[$300>>2];
       $302 = (~~(($301)));
       $349 = $302;
      } else {
       $349 = 65535;
      }
      $304 = $349;
     }
     $303 = $304&65535;
     $305 = $c;
     $306 = $img;
     $307 = (($306) + ($305<<1)|0);
     HEAP16[$307>>1] = $303;
     $308 = $c;
     $309 = (($308) + 1)|0;
     $c = $309;
    }
   }
   $c = 0;
   while(1) {
    $319 = $c;
    $320 = HEAP32[132304>>2]|0;
    $321 = ($319>>>0)<($320>>>0);
    if (!($321)) {
     break;
    }
    $322 = $c;
    $323 = $img;
    $324 = (($323) + ($322<<1)|0);
    $325 = HEAP16[$324>>1]|0;
    $326 = $325&65535;
    $327 = $326 >> 3;
    $328 = $c;
    $329 = (493600 + ($328<<15)|0);
    $330 = (($329) + ($327<<2)|0);
    $331 = HEAP32[$330>>2]|0;
    $332 = (($331) + 1)|0;
    HEAP32[$330>>2] = $332;
    $333 = $c;
    $334 = (($333) + 1)|0;
    $c = $334;
   }
   $335 = $col;
   $336 = (($335) + 1)|0;
   $col = $336;
   $337 = $img;
   $338 = (($337) + 8|0);
   $img = $338;
  }
  $339 = $row;
  $340 = (($339) + 1)|0;
  $row = $340;
 }
 $341 = HEAP32[132304>>2]|0;
 $342 = ($341|0)==(4);
 if ($342) {
  $343 = HEAP32[200>>2]|0;
  $344 = ($343|0)!=(0);
  if ($344) {
   HEAP32[132304>>2] = 3;
  }
 }
 $345 = HEAP32[152>>2]|0;
 $346 = ($345|0)!=(0);
 if (!($346)) {
  STACKTOP = sp;return;
 }
 $347 = HEAP32[600>>2]|0;
 $348 = ($347|0)!=(0);
 if (!($348)) {
  STACKTOP = sp;return;
 }
 HEAP32[132304>>2] = 1;
 STACKTOP = sp;return;
}
function _fuji_rotate() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0.0, $col = 0, $fc = 0.0, $fr = 0.0, $high = 0, $i = 0, $img = 0, $pix = 0, $r = 0.0, $row = 0, $step = 0.0, $uc = 0, $ur = 0, $vararg_buffer = 0;
 var $wide = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $0 = HEAP16[190512>>1]|0;
 $1 = ($0<<16>>16)!=(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[168>>2]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = HEAP32[_stderr>>2]|0;
  (_fprintf(($4|0),(624672|0),($vararg_buffer|0))|0);
 }
 $5 = HEAP16[190512>>1]|0;
 $6 = $5&65535;
 $7 = (($6) - 1)|0;
 $8 = HEAP16[132128>>1]|0;
 $9 = $8&65535;
 $10 = (($7) + ($9))|0;
 $11 = HEAP16[132128>>1]|0;
 $12 = $11&65535;
 $13 = $10 >> $12;
 $14 = $13&65535;
 HEAP16[190512>>1] = $14;
 $15 = (+Math_sqrt(0.5));
 $step = $15;
 $16 = HEAP16[190512>>1]|0;
 $17 = $16&65535;
 $18 = (+($17|0));
 $19 = $step;
 $20 = $18 / $19;
 $21 = (~~(($20))&65535);
 $wide = $21;
 $22 = HEAP16[132112>>1]|0;
 $23 = $22&65535;
 $24 = HEAP16[190512>>1]|0;
 $25 = $24&65535;
 $26 = (($23) - ($25))|0;
 $27 = (+($26|0));
 $28 = $step;
 $29 = $27 / $28;
 $30 = (~~(($29))&65535);
 $high = $30;
 $31 = $high;
 $32 = $31&65535;
 $33 = $wide;
 $34 = $33&65535;
 $35 = $34<<3;
 $36 = (_calloc($32,$35)|0);
 $img = $36;
 $37 = $img;
 _merror($37,624704);
 $row = 0;
 while(1) {
  $38 = $row;
  $39 = $high;
  $40 = $39&65535;
  $41 = ($38|0)<($40|0);
  if (!($41)) {
   break;
  }
  $col = 0;
  while(1) {
   $42 = $col;
   $43 = $wide;
   $44 = $43&65535;
   $45 = ($42|0)<($44|0);
   if (!($45)) {
    break;
   }
   $46 = HEAP16[190512>>1]|0;
   $47 = $46&65535;
   $48 = (+($47|0));
   $49 = $row;
   $50 = $col;
   $51 = (($49) - ($50))|0;
   $52 = (+($51|0));
   $53 = $step;
   $54 = $52 * $53;
   $55 = $48 + $54;
   $56 = $55;
   $r = $56;
   $57 = (~~(($56))>>>0);
   $ur = $57;
   $58 = $row;
   $59 = $col;
   $60 = (($58) + ($59))|0;
   $61 = (+($60|0));
   $62 = $step;
   $63 = $61 * $62;
   $64 = $63;
   $c = $64;
   $65 = (~~(($64))>>>0);
   $uc = $65;
   $66 = $ur;
   $67 = HEAP16[132112>>1]|0;
   $68 = $67&65535;
   $69 = (($68) - 2)|0;
   $70 = ($66>>>0)>($69>>>0);
   if ($70) {
    label = 11;
   } else {
    $71 = $uc;
    $72 = HEAP16[132120>>1]|0;
    $73 = $72&65535;
    $74 = (($73) - 2)|0;
    $75 = ($71>>>0)>($74>>>0);
    if ($75) {
     label = 11;
    } else {
     $76 = $r;
     $77 = $ur;
     $78 = (+($77>>>0));
     $79 = $76 - $78;
     $fr = $79;
     $80 = $c;
     $81 = $uc;
     $82 = (+($81>>>0));
     $83 = $80 - $82;
     $fc = $83;
     $84 = HEAP32[132144>>2]|0;
     $85 = $ur;
     $86 = HEAP16[132120>>1]|0;
     $87 = $86&65535;
     $88 = Math_imul($85, $87)|0;
     $89 = (($84) + ($88<<3)|0);
     $90 = $uc;
     $91 = (($89) + ($90<<3)|0);
     $pix = $91;
     $i = 0;
     while(1) {
      $92 = $i;
      $93 = HEAP32[132304>>2]|0;
      $94 = ($92>>>0)<($93>>>0);
      if (!($94)) {
       break;
      }
      $95 = $i;
      $96 = $pix;
      $97 = (($96) + ($95<<1)|0);
      $98 = HEAP16[$97>>1]|0;
      $99 = $98&65535;
      $100 = (+($99|0));
      $101 = $fc;
      $102 = 1.0 - $101;
      $103 = $100 * $102;
      $104 = $i;
      $105 = $pix;
      $106 = (($105) + 8|0);
      $107 = (($106) + ($104<<1)|0);
      $108 = HEAP16[$107>>1]|0;
      $109 = $108&65535;
      $110 = (+($109|0));
      $111 = $fc;
      $112 = $110 * $111;
      $113 = $103 + $112;
      $114 = $fr;
      $115 = 1.0 - $114;
      $116 = $113 * $115;
      $117 = $i;
      $118 = HEAP16[132120>>1]|0;
      $119 = $118&65535;
      $120 = $pix;
      $121 = (($120) + ($119<<3)|0);
      $122 = (($121) + ($117<<1)|0);
      $123 = HEAP16[$122>>1]|0;
      $124 = $123&65535;
      $125 = (+($124|0));
      $126 = $fc;
      $127 = 1.0 - $126;
      $128 = $125 * $127;
      $129 = $i;
      $130 = HEAP16[132120>>1]|0;
      $131 = $130&65535;
      $132 = (($131) + 1)|0;
      $133 = $pix;
      $134 = (($133) + ($132<<3)|0);
      $135 = (($134) + ($129<<1)|0);
      $136 = HEAP16[$135>>1]|0;
      $137 = $136&65535;
      $138 = (+($137|0));
      $139 = $fc;
      $140 = $138 * $139;
      $141 = $128 + $140;
      $142 = $fr;
      $143 = $141 * $142;
      $144 = $116 + $143;
      $145 = (~~(($144))&65535);
      $146 = $i;
      $147 = $row;
      $148 = $wide;
      $149 = $148&65535;
      $150 = Math_imul($147, $149)|0;
      $151 = $col;
      $152 = (($150) + ($151))|0;
      $153 = $img;
      $154 = (($153) + ($152<<3)|0);
      $155 = (($154) + ($146<<1)|0);
      HEAP16[$155>>1] = $145;
      $156 = $i;
      $157 = (($156) + 1)|0;
      $i = $157;
     }
    }
   }
   if ((label|0) == 11) {
    label = 0;
   }
   $158 = $col;
   $159 = (($158) + 1)|0;
   $col = $159;
  }
  $160 = $row;
  $161 = (($160) + 1)|0;
  $row = $161;
 }
 $162 = HEAP32[132144>>2]|0;
 _free($162);
 $163 = $wide;
 HEAP16[132120>>1] = $163;
 $164 = $high;
 HEAP16[132112>>1] = $164;
 $165 = $img;
 HEAP32[132144>>2] = $165;
 HEAP16[190512>>1] = 0;
 STACKTOP = sp;return;
}
function _stretch() {
 var $0 = 0.0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $c = 0, $col = 0, $frac = 0.0, $img = 0, $newdim = 0, $pix0 = 0, $pix1 = 0, $rc = 0.0, $row = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 16|0;
 $0 = +HEAPF64[458024>>3];
 $1 = $0 == 1.0;
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[168>>2]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = HEAP32[_stderr>>2]|0;
  (_fprintf(($4|0),(624720|0),($vararg_buffer|0))|0);
 }
 $5 = +HEAPF64[458024>>3];
 $6 = $5 < 1.0;
 if ($6) {
  $7 = HEAP16[132112>>1]|0;
  $8 = $7&65535;
  $9 = (+($8|0));
  $10 = +HEAPF64[458024>>3];
  $11 = $9 / $10;
  $12 = $11 + 0.5;
  $13 = (~~(($12))&65535);
  $newdim = $13;
  $14 = HEAP16[132120>>1]|0;
  $15 = $14&65535;
  $16 = $newdim;
  $17 = $16&65535;
  $18 = $17<<3;
  $19 = (_calloc($15,$18)|0);
  $img = $19;
  $20 = $img;
  _merror($20,624752);
  $row = 0;
  $rc = 0.0;
  while(1) {
   $21 = $row;
   $22 = $newdim;
   $23 = $22&65535;
   $24 = ($21|0)<($23|0);
   if (!($24)) {
    break;
   }
   $25 = $rc;
   $26 = $rc;
   $27 = (~~(($26)));
   $c = $27;
   $28 = (+($27|0));
   $29 = $25 - $28;
   $frac = $29;
   $30 = $c;
   $31 = HEAP16[132120>>1]|0;
   $32 = $31&65535;
   $33 = Math_imul($30, $32)|0;
   $34 = HEAP32[132144>>2]|0;
   $35 = (($34) + ($33<<3)|0);
   $pix1 = $35;
   $pix0 = $35;
   $36 = $c;
   $37 = (($36) + 1)|0;
   $38 = HEAP16[132112>>1]|0;
   $39 = $38&65535;
   $40 = ($37|0)<($39|0);
   if ($40) {
    $41 = HEAP16[132120>>1]|0;
    $42 = $41&65535;
    $43 = $42<<2;
    $44 = $pix1;
    $45 = (($44) + ($43<<1)|0);
    $pix1 = $45;
   }
   $col = 0;
   while(1) {
    $46 = $col;
    $47 = HEAP16[132120>>1]|0;
    $48 = $47&65535;
    $49 = ($46|0)<($48|0);
    if (!($49)) {
     break;
    }
    $c = 0;
    while(1) {
     $50 = $c;
     $51 = HEAP32[132304>>2]|0;
     $52 = ($50>>>0)<($51>>>0);
     if (!($52)) {
      break;
     }
     $53 = $c;
     $54 = $pix0;
     $55 = (($54) + ($53<<1)|0);
     $56 = HEAP16[$55>>1]|0;
     $57 = $56&65535;
     $58 = (+($57|0));
     $59 = $frac;
     $60 = 1.0 - $59;
     $61 = $58 * $60;
     $62 = $c;
     $63 = $pix1;
     $64 = (($63) + ($62<<1)|0);
     $65 = HEAP16[$64>>1]|0;
     $66 = $65&65535;
     $67 = (+($66|0));
     $68 = $frac;
     $69 = $67 * $68;
     $70 = $61 + $69;
     $71 = $70 + 0.5;
     $72 = (~~(($71))&65535);
     $73 = $c;
     $74 = $row;
     $75 = HEAP16[132120>>1]|0;
     $76 = $75&65535;
     $77 = Math_imul($74, $76)|0;
     $78 = $col;
     $79 = (($77) + ($78))|0;
     $80 = $img;
     $81 = (($80) + ($79<<3)|0);
     $82 = (($81) + ($73<<1)|0);
     HEAP16[$82>>1] = $72;
     $83 = $c;
     $84 = (($83) + 1)|0;
     $c = $84;
    }
    $85 = $col;
    $86 = (($85) + 1)|0;
    $col = $86;
    $87 = $pix0;
    $88 = (($87) + 8|0);
    $pix0 = $88;
    $89 = $pix1;
    $90 = (($89) + 8|0);
    $pix1 = $90;
   }
   $91 = $row;
   $92 = (($91) + 1)|0;
   $row = $92;
   $93 = +HEAPF64[458024>>3];
   $94 = $rc;
   $95 = $94 + $93;
   $rc = $95;
  }
  $96 = $newdim;
  HEAP16[132112>>1] = $96;
 } else {
  $97 = HEAP16[132120>>1]|0;
  $98 = $97&65535;
  $99 = (+($98|0));
  $100 = +HEAPF64[458024>>3];
  $101 = $99 * $100;
  $102 = $101 + 0.5;
  $103 = (~~(($102))&65535);
  $newdim = $103;
  $104 = HEAP16[132112>>1]|0;
  $105 = $104&65535;
  $106 = $newdim;
  $107 = $106&65535;
  $108 = $107<<3;
  $109 = (_calloc($105,$108)|0);
  $img = $109;
  $110 = $img;
  _merror($110,624752);
  $col = 0;
  $rc = 0.0;
  while(1) {
   $111 = $col;
   $112 = $newdim;
   $113 = $112&65535;
   $114 = ($111|0)<($113|0);
   if (!($114)) {
    break;
   }
   $115 = $rc;
   $116 = $rc;
   $117 = (~~(($116)));
   $c = $117;
   $118 = (+($117|0));
   $119 = $115 - $118;
   $frac = $119;
   $120 = $c;
   $121 = HEAP32[132144>>2]|0;
   $122 = (($121) + ($120<<3)|0);
   $pix1 = $122;
   $pix0 = $122;
   $123 = $c;
   $124 = (($123) + 1)|0;
   $125 = HEAP16[132120>>1]|0;
   $126 = $125&65535;
   $127 = ($124|0)<($126|0);
   if ($127) {
    $128 = $pix1;
    $129 = (($128) + 8|0);
    $pix1 = $129;
   }
   $row = 0;
   while(1) {
    $130 = $row;
    $131 = HEAP16[132112>>1]|0;
    $132 = $131&65535;
    $133 = ($130|0)<($132|0);
    if (!($133)) {
     break;
    }
    $c = 0;
    while(1) {
     $134 = $c;
     $135 = HEAP32[132304>>2]|0;
     $136 = ($134>>>0)<($135>>>0);
     if (!($136)) {
      break;
     }
     $137 = $c;
     $138 = $pix0;
     $139 = (($138) + ($137<<1)|0);
     $140 = HEAP16[$139>>1]|0;
     $141 = $140&65535;
     $142 = (+($141|0));
     $143 = $frac;
     $144 = 1.0 - $143;
     $145 = $142 * $144;
     $146 = $c;
     $147 = $pix1;
     $148 = (($147) + ($146<<1)|0);
     $149 = HEAP16[$148>>1]|0;
     $150 = $149&65535;
     $151 = (+($150|0));
     $152 = $frac;
     $153 = $151 * $152;
     $154 = $145 + $153;
     $155 = $154 + 0.5;
     $156 = (~~(($155))&65535);
     $157 = $c;
     $158 = $row;
     $159 = $newdim;
     $160 = $159&65535;
     $161 = Math_imul($158, $160)|0;
     $162 = $col;
     $163 = (($161) + ($162))|0;
     $164 = $img;
     $165 = (($164) + ($163<<3)|0);
     $166 = (($165) + ($157<<1)|0);
     HEAP16[$166>>1] = $156;
     $167 = $c;
     $168 = (($167) + 1)|0;
     $c = $168;
    }
    $169 = $row;
    $170 = (($169) + 1)|0;
    $row = $170;
    $171 = HEAP16[132120>>1]|0;
    $172 = $171&65535;
    $173 = $172<<2;
    $174 = $pix0;
    $175 = (($174) + ($173<<1)|0);
    $pix0 = $175;
    $176 = HEAP16[132120>>1]|0;
    $177 = $176&65535;
    $178 = $177<<2;
    $179 = $pix1;
    $180 = (($179) + ($178<<1)|0);
    $pix1 = $180;
   }
   $181 = $col;
   $182 = (($181) + 1)|0;
   $col = $182;
   $183 = +HEAPF64[458024>>3];
   $184 = 1.0 / $183;
   $185 = $rc;
   $186 = $185 + $184;
   $rc = $186;
  }
  $187 = $newdim;
  HEAP16[132120>>1] = $187;
 }
 $188 = HEAP32[132144>>2]|0;
 _free($188);
 $189 = $img;
 HEAP32[132144>>2] = $189;
 STACKTOP = sp;return;
}
function _flip_index($row,$col) {
 $row = $row|0;
 $col = $col|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row;
 $1 = $col;
 $2 = HEAP32[455352>>2]|0;
 $3 = $2 & 4;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $0;
  $6 = $1;
  $7 = (($5) + ($6))|0;
  $0 = $7;
  $8 = $0;
  $9 = $1;
  $10 = (($8) - ($9))|0;
  $1 = $10;
  $11 = $0;
  $12 = $1;
  $13 = (($11) - ($12))|0;
  $0 = $13;
 }
 $14 = HEAP32[455352>>2]|0;
 $15 = $14 & 2;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = HEAP16[190888>>1]|0;
  $18 = $17&65535;
  $19 = (($18) - 1)|0;
  $20 = $0;
  $21 = (($19) - ($20))|0;
  $0 = $21;
 }
 $22 = HEAP32[455352>>2]|0;
 $23 = $22 & 1;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = HEAP16[132136>>1]|0;
  $26 = $25&65535;
  $27 = (($26) - 1)|0;
  $28 = $1;
  $29 = (($27) - ($28))|0;
  $1 = $29;
 }
 $30 = $0;
 $31 = HEAP16[132136>>1]|0;
 $32 = $31&65535;
 $33 = Math_imul($30, $32)|0;
 $34 = $1;
 $35 = (($33) + ($34))|0;
 STACKTOP = sp;return ($35|0);
}
function _tiff_set($th,$ntag,$tag,$type,$count,$val) {
 $th = $th|0;
 $ntag = $ntag|0;
 $tag = $tag|0;
 $type = $type|0;
 $count = $count|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $c = 0, $tt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $th;
 $1 = $ntag;
 $2 = $tag;
 $3 = $type;
 $4 = $count;
 $5 = $val;
 $6 = $1;
 $7 = (($6) + 2|0);
 $8 = $1;
 $9 = HEAP16[$8>>1]|0;
 $10 = (($9) + 1)<<16>>16;
 HEAP16[$8>>1] = $10;
 $11 = $9&65535;
 $12 = (($7) + (($11*12)|0)|0);
 $tt = $12;
 $13 = $5;
 $14 = $tt;
 $15 = (($14) + 8|0);
 HEAP32[$15>>2] = $13;
 $16 = $3;
 $17 = $16&65535;
 $18 = ($17|0)==(1);
 if ($18) {
  $19 = $4;
  $20 = ($19|0)<=(4);
  if ($20) {
   $c = 0;
   while(1) {
    $21 = $c;
    $22 = ($21|0)<(4);
    if (!($22)) {
     break;
    }
    $23 = $5;
    $24 = $c;
    $25 = $24 << 3;
    $26 = $23 >> $25;
    $27 = $26&255;
    $28 = $c;
    $29 = $tt;
    $30 = (($29) + 8|0);
    $31 = (($30) + ($28)|0);
    HEAP8[$31>>0] = $27;
    $32 = $c;
    $33 = (($32) + 1)|0;
    $c = $33;
   }
   $78 = $4;
   $79 = $tt;
   $80 = (($79) + 4|0);
   HEAP32[$80>>2] = $78;
   $81 = $3;
   $82 = $tt;
   $83 = (($82) + 2|0);
   HEAP16[$83>>1] = $81;
   $84 = $2;
   $85 = $tt;
   HEAP16[$85>>1] = $84;
   STACKTOP = sp;return;
  }
 }
 $34 = $3;
 $35 = $34&65535;
 $36 = ($35|0)==(2);
 if ($36) {
  $37 = $0;
  $38 = $5;
  $39 = (($37) + ($38)|0);
  $40 = $4;
  $41 = (($40) - 1)|0;
  $42 = (_strnlen($39,$41)|0);
  $43 = (($42) + 1)|0;
  $4 = $43;
  $44 = $4;
  $45 = ($44|0)<=(4);
  if ($45) {
   $c = 0;
   while(1) {
    $46 = $c;
    $47 = ($46|0)<(4);
    if (!($47)) {
     break;
    }
    $48 = $5;
    $49 = $c;
    $50 = (($48) + ($49))|0;
    $51 = $0;
    $52 = (($51) + ($50)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $c;
    $55 = $tt;
    $56 = (($55) + 8|0);
    $57 = (($56) + ($54)|0);
    HEAP8[$57>>0] = $53;
    $58 = $c;
    $59 = (($58) + 1)|0;
    $c = $59;
   }
  }
 } else {
  $60 = $3;
  $61 = $60&65535;
  $62 = ($61|0)==(3);
  if ($62) {
   $63 = $4;
   $64 = ($63|0)<=(2);
   if ($64) {
    $c = 0;
    while(1) {
     $65 = $c;
     $66 = ($65|0)<(2);
     if (!($66)) {
      break;
     }
     $67 = $5;
     $68 = $c;
     $69 = $68 << 4;
     $70 = $67 >> $69;
     $71 = $70&65535;
     $72 = $c;
     $73 = $tt;
     $74 = (($73) + 8|0);
     $75 = (($74) + ($72<<1)|0);
     HEAP16[$75>>1] = $71;
     $76 = $c;
     $77 = (($76) + 1)|0;
     $c = $77;
    }
   }
  }
 }
 $78 = $4;
 $79 = $tt;
 $80 = (($79) + 4|0);
 HEAP32[$80>>2] = $78;
 $81 = $3;
 $82 = $tt;
 $83 = (($82) + 2|0);
 HEAP16[$83>>1] = $81;
 $84 = $2;
 $85 = $tt;
 HEAP16[$85>>1] = $84;
 STACKTOP = sp;return;
}
function _tiff_head($th,$full) {
 $th = $th|0;
 $full = $full|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c = 0, $psize = 0, $t = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $th;
 $1 = $full;
 $psize = 0;
 $2 = $0;
 _memset(($2|0),0,1376)|0;
 $3 = (_htonl(1296910665)|0);
 $4 = $3 >>> 16;
 $5 = $4&65535;
 $6 = $0;
 HEAP16[$6>>1] = $5;
 $7 = $0;
 $8 = (($7) + 2|0);
 HEAP16[$8>>1] = 42;
 $9 = $0;
 $10 = (($9) + 4|0);
 HEAP32[$10>>2] = 10;
 $11 = $0;
 $12 = (($11) + 476|0);
 $13 = (($12) + 8|0);
 HEAP32[$13>>2] = 300;
 $14 = $0;
 $15 = (($14) + 476|0);
 HEAP32[$15>>2] = 300;
 $16 = $0;
 $17 = (($16) + 476|0);
 $18 = (($17) + 12|0);
 HEAP32[$18>>2] = 1;
 $19 = $0;
 $20 = (($19) + 476|0);
 $21 = (($20) + 4|0);
 HEAP32[$21>>2] = 1;
 $c = 0;
 while(1) {
  $22 = $c;
  $23 = ($22|0)<(6);
  if (!($23)) {
   break;
  }
  $24 = $c;
  $25 = (4 + ($24))|0;
  $26 = $0;
  $27 = (($26) + 476|0);
  $28 = (($27) + ($25<<2)|0);
  HEAP32[$28>>2] = 1000000;
  $29 = $c;
  $30 = (($29) + 1)|0;
  $c = $30;
 }
 $31 = +HEAPF32[455328>>2];
 $32 = $0;
 $33 = (($32) + 476|0);
 $34 = (($33) + 16|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (+($35|0));
 $37 = $36 * $31;
 $38 = (~~(($37)));
 HEAP32[$34>>2] = $38;
 $39 = +HEAPF32[455320>>2];
 $40 = $0;
 $41 = (($40) + 476|0);
 $42 = (($41) + 24|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (+($43|0));
 $45 = $44 * $39;
 $46 = (~~(($45)));
 HEAP32[$42>>2] = $46;
 $47 = +HEAPF32[456080>>2];
 $48 = $0;
 $49 = (($48) + 476|0);
 $50 = (($49) + 32|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (+($51|0));
 $53 = $52 * $47;
 $54 = (~~(($53)));
 HEAP32[$50>>2] = $54;
 $55 = $0;
 $56 = (($55) + 620|0);
 (_strncpy(($56|0),(457272|0),512)|0);
 $57 = $0;
 $58 = (($57) + 1132|0);
 (_strncpy(($58|0),(134168|0),64)|0);
 $59 = $0;
 $60 = (($59) + 1196|0);
 (_strncpy(($60|0),(134232|0),64)|0);
 $61 = $0;
 $62 = (($61) + 1260|0);
 (_strcpy(($62|0),(624768|0))|0);
 $63 = (_localtime((190704|0))|0);
 $t = $63;
 $64 = $0;
 $65 = (($64) + 1292|0);
 $66 = $t;
 $67 = (($66) + 20|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (($68) + 1900)|0;
 $70 = $t;
 $71 = (($70) + 16|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($72) + 1)|0;
 $74 = $t;
 $75 = (($74) + 12|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = $t;
 $78 = (($77) + 8|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $t;
 $81 = (($80) + 4|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = $t;
 $84 = HEAP32[$83>>2]|0;
 HEAP32[$vararg_buffer>>2] = $69;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $73;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $76;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $79;
 $vararg_ptr4 = (($vararg_buffer) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $82;
 $vararg_ptr5 = (($vararg_buffer) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $84;
 (_sprintf($65,624784,$vararg_buffer)|0);
 $85 = $0;
 $86 = (($85) + 1312|0);
 (_strncpy(($86|0),(455368|0),64)|0);
 $87 = $1;
 $88 = ($87|0)!=(0);
 if ($88) {
  $89 = $0;
  $90 = $0;
  $91 = (($90) + 10|0);
  _tiff_set($89,$91,254,4,1,0);
  $92 = $0;
  $93 = $0;
  $94 = (($93) + 10|0);
  $95 = HEAP16[132120>>1]|0;
  $96 = $95&65535;
  _tiff_set($92,$94,256,4,1,$96);
  $97 = $0;
  $98 = $0;
  $99 = (($98) + 10|0);
  $100 = HEAP16[132112>>1]|0;
  $101 = $100&65535;
  _tiff_set($97,$99,257,4,1,$101);
  $102 = $0;
  $103 = $0;
  $104 = (($103) + 10|0);
  $105 = HEAP32[132304>>2]|0;
  $106 = HEAP32[208>>2]|0;
  _tiff_set($102,$104,258,3,$105,$106);
  $107 = HEAP32[132304>>2]|0;
  $108 = ($107>>>0)>(2);
  if ($108) {
   $109 = $0;
   $110 = (($109) + 468|0);
   $111 = $0;
   $112 = $110;
   $113 = $111;
   $114 = (($112) - ($113))|0;
   $115 = $0;
   $116 = (($115) + 10|0);
   $117 = HEAP16[$116>>1]|0;
   $118 = $117&65535;
   $119 = (($118) - 1)|0;
   $120 = $0;
   $121 = (($120) + 12|0);
   $122 = (($121) + (($119*12)|0)|0);
   $123 = (($122) + 8|0);
   HEAP32[$123>>2] = $114;
  }
  $c = 0;
  while(1) {
   $124 = $c;
   $125 = ($124|0)<(4);
   if (!($125)) {
    break;
   }
   $126 = HEAP32[208>>2]|0;
   $127 = $126&65535;
   $128 = $c;
   $129 = $0;
   $130 = (($129) + 468|0);
   $131 = (($130) + ($128<<1)|0);
   HEAP16[$131>>1] = $127;
   $132 = $c;
   $133 = (($132) + 1)|0;
   $c = $133;
  }
  $134 = $0;
  $135 = $0;
  $136 = (($135) + 10|0);
  _tiff_set($134,$136,259,3,1,1);
  $137 = $0;
  $138 = $0;
  $139 = (($138) + 10|0);
  $140 = HEAP32[132304>>2]|0;
  $141 = ($140>>>0)>(1);
  $142 = $141&1;
  $143 = (1 + ($142))|0;
  _tiff_set($137,$139,262,3,1,$143);
 }
 $144 = $0;
 $145 = $0;
 $146 = (($145) + 10|0);
 $147 = $0;
 $148 = (($147) + 620|0);
 $149 = $0;
 $150 = $148;
 $151 = $149;
 $152 = (($150) - ($151))|0;
 _tiff_set($144,$146,270,2,512,$152);
 $153 = $0;
 $154 = $0;
 $155 = (($154) + 10|0);
 $156 = $0;
 $157 = (($156) + 1132|0);
 $158 = $0;
 $159 = $157;
 $160 = $158;
 $161 = (($159) - ($160))|0;
 _tiff_set($153,$155,271,2,64,$161);
 $162 = $0;
 $163 = $0;
 $164 = (($163) + 10|0);
 $165 = $0;
 $166 = (($165) + 1196|0);
 $167 = $0;
 $168 = $166;
 $169 = $167;
 $170 = (($168) - ($169))|0;
 _tiff_set($162,$164,272,2,64,$170);
 $171 = $1;
 $172 = ($171|0)!=(0);
 if ($172) {
  $173 = HEAP32[493488>>2]|0;
  $174 = ($173|0)!=(0|0);
  if ($174) {
   $175 = HEAP32[493488>>2]|0;
   $176 = HEAP32[$175>>2]|0;
   $177 = (_ntohl(($176|0))|0);
   $psize = $177;
  }
  $178 = $0;
  $179 = $0;
  $180 = (($179) + 10|0);
  $181 = $psize;
  $182 = (1376 + ($181))|0;
  _tiff_set($178,$180,273,4,1,$182);
  $183 = $0;
  $184 = $0;
  $185 = (($184) + 10|0);
  $186 = HEAP32[132304>>2]|0;
  _tiff_set($183,$185,277,3,1,$186);
  $187 = $0;
  $188 = $0;
  $189 = (($188) + 10|0);
  $190 = HEAP16[132112>>1]|0;
  $191 = $190&65535;
  _tiff_set($187,$189,278,4,1,$191);
  $192 = $0;
  $193 = $0;
  $194 = (($193) + 10|0);
  $195 = HEAP16[132112>>1]|0;
  $196 = $195&65535;
  $197 = HEAP16[132120>>1]|0;
  $198 = $197&65535;
  $199 = Math_imul($196, $198)|0;
  $200 = HEAP32[132304>>2]|0;
  $201 = Math_imul($199, $200)|0;
  $202 = HEAP32[208>>2]|0;
  $203 = Math_imul($201, $202)|0;
  $204 = (($203>>>0) / 8)&-1;
  _tiff_set($192,$194,279,4,1,$204);
 } else {
  $205 = $0;
  $206 = $0;
  $207 = (($206) + 10|0);
  $208 = HEAP32[455352>>2]|0;
  $209 = (624816 + ($208)|0);
  $210 = HEAP8[$209>>0]|0;
  $211 = $210 << 24 >> 24;
  $212 = (($211) - 48)|0;
  _tiff_set($205,$207,274,3,1,$212);
 }
 $213 = $0;
 $214 = $0;
 $215 = (($214) + 10|0);
 $216 = $0;
 $217 = (($216) + 476|0);
 $218 = $0;
 $219 = $217;
 $220 = $218;
 $221 = (($219) - ($220))|0;
 _tiff_set($213,$215,282,5,1,$221);
 $222 = $0;
 $223 = $0;
 $224 = (($223) + 10|0);
 $225 = $0;
 $226 = (($225) + 476|0);
 $227 = (($226) + 8|0);
 $228 = $0;
 $229 = $227;
 $230 = $228;
 $231 = (($229) - ($230))|0;
 _tiff_set($222,$224,283,5,1,$231);
 $232 = $0;
 $233 = $0;
 $234 = (($233) + 10|0);
 _tiff_set($232,$234,284,3,1,1);
 $235 = $0;
 $236 = $0;
 $237 = (($236) + 10|0);
 _tiff_set($235,$237,296,3,1,2);
 $238 = $0;
 $239 = $0;
 $240 = (($239) + 10|0);
 $241 = $0;
 $242 = (($241) + 1260|0);
 $243 = $0;
 $244 = $242;
 $245 = $243;
 $246 = (($244) - ($245))|0;
 _tiff_set($238,$240,305,2,32,$246);
 $247 = $0;
 $248 = $0;
 $249 = (($248) + 10|0);
 $250 = $0;
 $251 = (($250) + 1292|0);
 $252 = $0;
 $253 = $251;
 $254 = $252;
 $255 = (($253) - ($254))|0;
 _tiff_set($247,$249,306,2,20,$255);
 $256 = $0;
 $257 = $0;
 $258 = (($257) + 10|0);
 $259 = $0;
 $260 = (($259) + 1312|0);
 $261 = $0;
 $262 = $260;
 $263 = $261;
 $264 = (($262) - ($263))|0;
 _tiff_set($256,$258,315,2,64,$264);
 $265 = $0;
 $266 = $0;
 $267 = (($266) + 10|0);
 $268 = $0;
 $269 = (($268) + 294|0);
 $270 = $0;
 $271 = $269;
 $272 = $270;
 $273 = (($271) - ($272))|0;
 _tiff_set($265,$267,-30871,4,1,$273);
 $274 = $psize;
 $275 = ($274|0)!=(0);
 if ($275) {
  $276 = $0;
  $277 = $0;
  $278 = (($277) + 10|0);
  $279 = $psize;
  _tiff_set($276,$278,-30861,7,$279,1376);
 }
 $280 = $0;
 $281 = $0;
 $282 = (($281) + 294|0);
 $283 = $0;
 $284 = (($283) + 476|0);
 $285 = (($284) + 16|0);
 $286 = $0;
 $287 = $285;
 $288 = $286;
 $289 = (($287) - ($288))|0;
 _tiff_set($280,$282,-32102,5,1,$289);
 $290 = $0;
 $291 = $0;
 $292 = (($291) + 294|0);
 $293 = $0;
 $294 = (($293) + 476|0);
 $295 = (($294) + 24|0);
 $296 = $0;
 $297 = $295;
 $298 = $296;
 $299 = (($297) - ($298))|0;
 _tiff_set($290,$292,-32099,5,1,$299);
 $300 = $0;
 $301 = $0;
 $302 = (($301) + 294|0);
 $303 = +HEAPF32[455312>>2];
 $304 = (~~(($303)));
 _tiff_set($300,$302,-30681,3,1,$304);
 $305 = $0;
 $306 = $0;
 $307 = (($306) + 294|0);
 $308 = $0;
 $309 = (($308) + 476|0);
 $310 = (($309) + 32|0);
 $311 = $0;
 $312 = $310;
 $313 = $311;
 $314 = (($312) - ($313))|0;
 _tiff_set($305,$307,-28150,5,1,$314);
 $315 = HEAP32[((456096 + 4|0))>>2]|0;
 $316 = ($315|0)!=(0);
 if (!($316)) {
  STACKTOP = sp;return;
 }
 $317 = $0;
 $318 = $0;
 $319 = (($318) + 10|0);
 $320 = $0;
 $321 = (($320) + 346|0);
 $322 = $0;
 $323 = $321;
 $324 = $322;
 $325 = (($323) - ($324))|0;
 _tiff_set($317,$319,-30683,4,1,$325);
 $326 = $0;
 $327 = $0;
 $328 = (($327) + 346|0);
 _tiff_set($326,$328,0,1,4,514);
 $329 = $0;
 $330 = $0;
 $331 = (($330) + 346|0);
 $332 = HEAP32[((456096 + 116|0))>>2]|0;
 _tiff_set($329,$331,1,2,2,$332);
 $333 = $0;
 $334 = $0;
 $335 = (($334) + 346|0);
 $336 = $0;
 $337 = (($336) + 516|0);
 $338 = $0;
 $339 = $337;
 $340 = $338;
 $341 = (($339) - ($340))|0;
 _tiff_set($333,$335,2,5,3,$341);
 $342 = $0;
 $343 = $0;
 $344 = (($343) + 346|0);
 $345 = HEAP32[((456096 + 120|0))>>2]|0;
 _tiff_set($342,$344,3,2,2,$345);
 $346 = $0;
 $347 = $0;
 $348 = (($347) + 346|0);
 $349 = $0;
 $350 = (($349) + 516|0);
 $351 = (($350) + 24|0);
 $352 = $0;
 $353 = $351;
 $354 = $352;
 $355 = (($353) - ($354))|0;
 _tiff_set($346,$348,4,5,3,$355);
 $356 = $0;
 $357 = $0;
 $358 = (($357) + 346|0);
 $359 = HEAP32[((456096 + 124|0))>>2]|0;
 _tiff_set($356,$358,5,1,1,$359);
 $360 = $0;
 $361 = $0;
 $362 = (($361) + 346|0);
 $363 = $0;
 $364 = (($363) + 516|0);
 $365 = (($364) + 72|0);
 $366 = $0;
 $367 = $365;
 $368 = $366;
 $369 = (($367) - ($368))|0;
 _tiff_set($360,$362,6,5,1,$369);
 $370 = $0;
 $371 = $0;
 $372 = (($371) + 346|0);
 $373 = $0;
 $374 = (($373) + 516|0);
 $375 = (($374) + 48|0);
 $376 = $0;
 $377 = $375;
 $378 = $376;
 $379 = (($377) - ($378))|0;
 _tiff_set($370,$372,7,5,3,$379);
 $380 = $0;
 $381 = $0;
 $382 = (($381) + 346|0);
 $383 = $0;
 $384 = (($383) + 516|0);
 $385 = (($384) + 80|0);
 $386 = $0;
 $387 = $385;
 $388 = $386;
 $389 = (($387) - ($388))|0;
 _tiff_set($380,$382,18,2,12,$389);
 $390 = $0;
 $391 = $0;
 $392 = (($391) + 346|0);
 $393 = $0;
 $394 = (($393) + 516|0);
 $395 = (($394) + 92|0);
 $396 = $0;
 $397 = $395;
 $398 = $396;
 $399 = (($397) - ($398))|0;
 _tiff_set($390,$392,29,2,12,$399);
 $400 = $0;
 $401 = (($400) + 516|0);
 dest=$401+0|0; src=456096+0|0; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _jpeg_thumb() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exif = 0, $th = 0, $thumb = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1392|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $exif = sp + 1380|0;
 $th = sp;
 $0 = HEAP32[134312>>2]|0;
 $1 = (_malloc($0)|0);
 $thumb = $1;
 $2 = $thumb;
 _merror($2,624832);
 $3 = $thumb;
 $4 = HEAP32[134312>>2]|0;
 $5 = HEAP32[880>>2]|0;
 (_fread(($3|0),1,($4|0),($5|0))|0);
 $6 = HEAP32[134336>>2]|0;
 (_fputc(255,($6|0))|0);
 $7 = HEAP32[134336>>2]|0;
 (_fputc(216,($7|0))|0);
 $8 = $thumb;
 $9 = (($8) + 6|0);
 $10 = (_strcmp($9,491216)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  dest=$exif+0|0; src=624848+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $12 = (_htons(1384)|0);
  $13 = (($exif) + 2|0);
  HEAP16[$13>>1] = $12;
  $14 = HEAP32[134336>>2]|0;
  (_fwrite(($exif|0),1,10,($14|0))|0);
  _tiff_head($th,0);
  $15 = HEAP32[134336>>2]|0;
  (_fwrite(($th|0),1,1376,($15|0))|0);
 }
 $16 = $thumb;
 $17 = (($16) + 2|0);
 $18 = HEAP32[134312>>2]|0;
 $19 = (($18) - 2)|0;
 $20 = HEAP32[134336>>2]|0;
 (_fwrite(($17|0),1,($19|0),($20|0))|0);
 $21 = $thumb;
 _free($21);
 STACKTOP = sp;return;
}
function _write_ppm_tiff() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0;
 var $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $col = 0, $cstep = 0, $perc = 0, $ppm = 0, $ppm2 = 0, $row = 0, $rstep = 0, $soff = 0, $th = 0, $total = 0, $val = 0, $vararg_buffer = 0;
 var $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, $white = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1472|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $th = sp + 88|0;
 $white = 8192;
 $0 = HEAP16[132120>>1]|0;
 $1 = $0&65535;
 $2 = HEAP16[132112>>1]|0;
 $3 = $2&65535;
 $4 = Math_imul($1, $3)|0;
 $5 = (+($4|0));
 $6 = $5 * 0.01;
 $7 = (~~(($6)));
 $perc = $7;
 $8 = HEAP16[190512>>1]|0;
 $9 = ($8<<16>>16)!=(0);
 if ($9) {
  $10 = $perc;
  $11 = (($10|0) / 2)&-1;
  $perc = $11;
 }
 $12 = HEAP32[160>>2]|0;
 $13 = $12 & -3;
 $14 = ($13|0)!=(0);
 if (!($14)) {
  $15 = HEAP32[232>>2]|0;
  $16 = ($15|0)!=(0);
  if (!($16)) {
   $c = 0;
   $white = 0;
   while(1) {
    $17 = $c;
    $18 = HEAP32[132304>>2]|0;
    $19 = ($17>>>0)<($18>>>0);
    if (!($19)) {
     break;
    }
    $val = 8192;
    $total = 0;
    while(1) {
     $20 = $val;
     $21 = (($20) + -1)|0;
     $val = $21;
     $22 = ($21|0)>(32);
     if (!($22)) {
      break;
     }
     $23 = $val;
     $24 = $c;
     $25 = (493600 + ($24<<15)|0);
     $26 = (($25) + ($23<<2)|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = $total;
     $29 = (($28) + ($27))|0;
     $total = $29;
     $30 = $perc;
     $31 = ($29|0)>($30|0);
     if ($31) {
      label = 10;
      break;
     }
    }
    if ((label|0) == 10) {
     label = 0;
    }
    $32 = $white;
    $33 = $val;
    $34 = ($32|0)<($33|0);
    if ($34) {
     $35 = $val;
     $white = $35;
    }
    $36 = $c;
    $37 = (($36) + 1)|0;
    $c = $37;
   }
  }
 }
 $38 = +HEAPF64[56>>3];
 $39 = +HEAPF64[((56 + 8|0))>>3];
 $40 = $white;
 $41 = $40 << 3;
 $42 = (+($41|0));
 $43 = +HEAPF32[104>>2];
 $44 = $42 / $43;
 $45 = (~~(($44)));
 _gamma_curve($38,$39,2,$45);
 $46 = HEAP16[132112>>1]|0;
 HEAP16[190888>>1] = $46;
 $47 = HEAP16[132120>>1]|0;
 HEAP16[132136>>1] = $47;
 $48 = HEAP32[455352>>2]|0;
 $49 = $48 & 4;
 $50 = ($49|0)!=(0);
 if ($50) {
  $51 = HEAP16[132112>>1]|0;
  $52 = $51&65535;
  $53 = HEAP16[132120>>1]|0;
  $54 = $53&65535;
  $55 = (($52) + ($54))|0;
  $56 = $55&65535;
  HEAP16[132112>>1] = $56;
  $57 = HEAP16[132112>>1]|0;
  $58 = $57&65535;
  $59 = HEAP16[132120>>1]|0;
  $60 = $59&65535;
  $61 = (($58) - ($60))|0;
  $62 = $61&65535;
  HEAP16[132120>>1] = $62;
  $63 = HEAP16[132112>>1]|0;
  $64 = $63&65535;
  $65 = HEAP16[132120>>1]|0;
  $66 = $65&65535;
  $67 = (($64) - ($66))|0;
  $68 = $67&65535;
  HEAP16[132112>>1] = $68;
 }
 $69 = HEAP16[132120>>1]|0;
 $70 = $69&65535;
 $71 = HEAP32[132304>>2]|0;
 $72 = HEAP32[208>>2]|0;
 $73 = Math_imul($71, $72)|0;
 $74 = (($73>>>0) / 8)&-1;
 $75 = (_calloc($70,$74)|0);
 $ppm = $75;
 $76 = $ppm;
 $ppm2 = $76;
 $77 = $ppm;
 _merror($77,624864);
 $78 = HEAP32[216>>2]|0;
 $79 = ($78|0)!=(0);
 if ($79) {
  _tiff_head($th,1);
  $80 = HEAP32[134336>>2]|0;
  (_fwrite(($th|0),1376,1,($80|0))|0);
  $81 = HEAP32[493488>>2]|0;
  $82 = ($81|0)!=(0|0);
  if ($82) {
   $83 = HEAP32[493488>>2]|0;
   $84 = HEAP32[493488>>2]|0;
   $85 = HEAP32[$84>>2]|0;
   $86 = (_ntohl(($85|0))|0);
   $87 = HEAP32[134336>>2]|0;
   (_fwrite(($83|0),($86|0),1,($87|0))|0);
  }
 } else {
  $88 = HEAP32[132304>>2]|0;
  $89 = ($88>>>0)>(3);
  if ($89) {
   $90 = HEAP32[134336>>2]|0;
   $91 = HEAP16[132120>>1]|0;
   $92 = $91&65535;
   $93 = HEAP16[132112>>1]|0;
   $94 = $93&65535;
   $95 = HEAP32[132304>>2]|0;
   $96 = HEAP32[208>>2]|0;
   $97 = 1 << $96;
   $98 = (($97) - 1)|0;
   HEAP32[$vararg_buffer>>2] = $92;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $94;
   $vararg_ptr2 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $95;
   $vararg_ptr3 = (($vararg_buffer) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $98;
   $vararg_ptr4 = (($vararg_buffer) + 16|0);
   HEAP32[$vararg_ptr4>>2] = 458016;
   (_fprintf(($90|0),(624888|0),($vararg_buffer|0))|0);
  } else {
   $99 = HEAP32[134336>>2]|0;
   $100 = HEAP32[132304>>2]|0;
   $101 = (($100>>>0) / 2)&-1;
   $102 = (($101) + 5)|0;
   $103 = HEAP16[132120>>1]|0;
   $104 = $103&65535;
   $105 = HEAP16[132112>>1]|0;
   $106 = $105&65535;
   $107 = HEAP32[208>>2]|0;
   $108 = 1 << $107;
   $109 = (($108) - 1)|0;
   HEAP32[$vararg_buffer5>>2] = $102;
   $vararg_ptr8 = (($vararg_buffer5) + 4|0);
   HEAP32[$vararg_ptr8>>2] = $104;
   $vararg_ptr9 = (($vararg_buffer5) + 8|0);
   HEAP32[$vararg_ptr9>>2] = $106;
   $vararg_ptr10 = (($vararg_buffer5) + 12|0);
   HEAP32[$vararg_ptr10>>2] = $109;
   (_fprintf(($99|0),(624952|0),($vararg_buffer5|0))|0);
  }
 }
 $110 = (_flip_index(0,0)|0);
 $soff = $110;
 $111 = (_flip_index(0,1)|0);
 $112 = $soff;
 $113 = (($111) - ($112))|0;
 $cstep = $113;
 $114 = (_flip_index(1,0)|0);
 $115 = HEAP16[132120>>1]|0;
 $116 = $115&65535;
 $117 = (_flip_index(0,$116)|0);
 $118 = (($114) - ($117))|0;
 $rstep = $118;
 $row = 0;
 while(1) {
  $119 = $row;
  $120 = HEAP16[132112>>1]|0;
  $121 = $120&65535;
  $122 = ($119|0)<($121|0);
  if (!($122)) {
   break;
  }
  $col = 0;
  while(1) {
   $123 = $col;
   $124 = HEAP16[132120>>1]|0;
   $125 = $124&65535;
   $126 = ($123|0)<($125|0);
   if (!($126)) {
    break;
   }
   $127 = HEAP32[208>>2]|0;
   $128 = ($127|0)==(8);
   if ($128) {
    $c = 0;
    while(1) {
     $129 = $c;
     $130 = HEAP32[132304>>2]|0;
     $131 = ($129>>>0)<($130>>>0);
     if (!($131)) {
      break;
     }
     $132 = $c;
     $133 = $soff;
     $134 = HEAP32[132144>>2]|0;
     $135 = (($134) + ($133<<3)|0);
     $136 = (($135) + ($132<<1)|0);
     $137 = HEAP16[$136>>1]|0;
     $138 = $137&65535;
     $139 = (968 + ($138<<1)|0);
     $140 = HEAP16[$139>>1]|0;
     $141 = $140&65535;
     $142 = $141 >> 8;
     $143 = $142&255;
     $144 = $col;
     $145 = HEAP32[132304>>2]|0;
     $146 = Math_imul($144, $145)|0;
     $147 = $c;
     $148 = (($146) + ($147))|0;
     $149 = $ppm;
     $150 = (($149) + ($148)|0);
     HEAP8[$150>>0] = $143;
     $151 = $c;
     $152 = (($151) + 1)|0;
     $c = $152;
    }
   } else {
    $c = 0;
    while(1) {
     $153 = $c;
     $154 = HEAP32[132304>>2]|0;
     $155 = ($153>>>0)<($154>>>0);
     if (!($155)) {
      break;
     }
     $156 = $c;
     $157 = $soff;
     $158 = HEAP32[132144>>2]|0;
     $159 = (($158) + ($157<<3)|0);
     $160 = (($159) + ($156<<1)|0);
     $161 = HEAP16[$160>>1]|0;
     $162 = $161&65535;
     $163 = (968 + ($162<<1)|0);
     $164 = HEAP16[$163>>1]|0;
     $165 = $col;
     $166 = HEAP32[132304>>2]|0;
     $167 = Math_imul($165, $166)|0;
     $168 = $c;
     $169 = (($167) + ($168))|0;
     $170 = $ppm2;
     $171 = (($170) + ($169<<1)|0);
     HEAP16[$171>>1] = $164;
     $172 = $c;
     $173 = (($172) + 1)|0;
     $c = $173;
    }
   }
   $174 = $col;
   $175 = (($174) + 1)|0;
   $col = $175;
   $176 = $cstep;
   $177 = $soff;
   $178 = (($177) + ($176))|0;
   $soff = $178;
  }
  $179 = HEAP32[208>>2]|0;
  $180 = ($179|0)==(16);
  if ($180) {
   $181 = HEAP32[216>>2]|0;
   $182 = ($181|0)!=(0);
   if (!($182)) {
    $183 = (_htons(21930)|0);
    $184 = $183&65535;
    $185 = ($184|0)!=(21930);
    if ($185) {
     $186 = $ppm2;
     $187 = $ppm2;
     $188 = HEAP16[132120>>1]|0;
     $189 = $188&65535;
     $190 = HEAP32[132304>>2]|0;
     $191 = Math_imul($189, $190)|0;
     $192 = $191<<1;
     _swab(($186|0),($187|0),($192|0));
    }
   }
  }
  $193 = $ppm;
  $194 = HEAP32[132304>>2]|0;
  $195 = HEAP32[208>>2]|0;
  $196 = Math_imul($194, $195)|0;
  $197 = (($196>>>0) / 8)&-1;
  $198 = HEAP16[132120>>1]|0;
  $199 = $198&65535;
  $200 = HEAP32[134336>>2]|0;
  (_fwrite(($193|0),($197|0),($199|0),($200|0))|0);
  $201 = $row;
  $202 = (($201) + 1)|0;
  $row = $202;
  $203 = $rstep;
  $204 = $soff;
  $205 = (($204) + ($203))|0;
  $soff = $205;
 }
 $206 = $ppm;
 _free($206);
 STACKTOP = sp;return;
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $$0 = 0, $$reg2mem535$0 = 0, $$reg2mem537$0 = 0, $$reg2mem539$0 = 0, $$reg2mem541$0 = 0, $$reg2mem543$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0;
 var $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0;
 var $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0;
 var $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0;
 var $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0;
 var $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0;
 var $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0;
 var $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0;
 var $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0;
 var $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0;
 var $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0;
 var $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0;
 var $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0;
 var $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0;
 var $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0.0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0.0, $52 = 0, $520 = 0, $521 = 0.0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0.0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0.0, $534 = 0.0, $535 = 0, $536 = 0, $537 = 0, $538 = 0.0, $539 = 0.0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0.0, $554 = 0, $555 = 0.0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0.0, $59 = 0, $590 = 0, $591 = 0.0, $592 = 0, $593 = 0.0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0.0, $656 = 0.0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0.0, $673 = 0, $674 = 0.0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0.0, $681 = 0.0, $682 = 0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0, $687 = 0.0, $688 = 0.0, $689 = 0.0, $69 = 0, $690 = 0.0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0.0, $78 = 0, $780 = 0.0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0.0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0.0, $793 = 0.0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $arg$0 = 0;
 var $arg$1 = 0, $arg$10 = 0, $arg$2 = 0, $arg$3 = 0, $arg$4 = 0, $arg$5 = 0, $arg$6 = 0, $arg$7 = 0, $arg$7$phi = 0, $arg$8 = 0, $arg$9 = 0, $bpfile$0 = 0, $bpfile$1 = 0, $bpfile$2 = 0, $bpfile$3 = 0, $bpfile$3$phi = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $c$3 = 0;
 var $c$4 = 0, $c$5 = 0, $c$6 = 0, $c$7 = 0, $c$8 = 0, $c$9 = 0, $cond = 0, $cond1 = 0, $cond10 = 0, $cond100 = 0, $cond101 = 0, $cond102 = 0, $cond103 = 0, $cond104 = 0, $cond105 = 0, $cond106 = 0, $cond107 = 0, $cond108 = 0, $cond109 = 0, $cond11 = 0;
 var $cond110 = 0, $cond111 = 0, $cond112 = 0, $cond113 = 0, $cond114 = 0, $cond115 = 0, $cond116 = 0, $cond117 = 0, $cond118 = 0, $cond119 = 0, $cond12 = 0, $cond120 = 0, $cond121 = 0, $cond122 = 0, $cond123 = 0, $cond124 = 0, $cond125 = 0, $cond126 = 0, $cond127 = 0, $cond128 = 0;
 var $cond129 = 0, $cond13 = 0, $cond130 = 0, $cond131 = 0, $cond132 = 0, $cond133 = 0, $cond134 = 0, $cond135 = 0, $cond136 = 0, $cond137 = 0, $cond138 = 0, $cond139 = 0, $cond14 = 0, $cond140 = 0, $cond141 = 0, $cond142 = 0, $cond143 = 0, $cond144 = 0, $cond145 = 0, $cond146 = 0;
 var $cond147 = 0, $cond148 = 0, $cond149 = 0, $cond15 = 0, $cond150 = 0, $cond151 = 0, $cond152 = 0, $cond153 = 0, $cond154 = 0, $cond155 = 0, $cond156 = 0, $cond157 = 0, $cond158 = 0, $cond159 = 0, $cond16 = 0, $cond160 = 0, $cond161 = 0, $cond162 = 0, $cond163 = 0, $cond164 = 0;
 var $cond165 = 0, $cond166 = 0, $cond17 = 0, $cond18 = 0, $cond19 = 0, $cond2 = 0, $cond20 = 0, $cond21 = 0, $cond22 = 0, $cond23 = 0, $cond24 = 0, $cond25 = 0, $cond26 = 0, $cond27 = 0, $cond28 = 0, $cond29 = 0, $cond3 = 0, $cond30 = 0, $cond31 = 0, $cond32 = 0;
 var $cond33 = 0, $cond34 = 0, $cond35 = 0, $cond36 = 0, $cond37 = 0, $cond38 = 0, $cond39 = 0, $cond4 = 0, $cond40 = 0, $cond41 = 0, $cond42 = 0, $cond43 = 0, $cond44 = 0, $cond45 = 0, $cond46 = 0, $cond47 = 0, $cond48 = 0, $cond49 = 0, $cond5 = 0, $cond50 = 0;
 var $cond51 = 0, $cond52 = 0, $cond53 = 0, $cond54 = 0, $cond55 = 0, $cond56 = 0, $cond57 = 0, $cond58 = 0, $cond59 = 0, $cond6 = 0, $cond60 = 0, $cond61 = 0, $cond62 = 0, $cond63 = 0, $cond64 = 0, $cond65 = 0, $cond66 = 0, $cond67 = 0, $cond68 = 0, $cond69 = 0;
 var $cond7 = 0, $cond70 = 0, $cond71 = 0, $cond72 = 0, $cond73 = 0, $cond74 = 0, $cond75 = 0, $cond76 = 0, $cond77 = 0, $cond78 = 0, $cond79 = 0, $cond8 = 0, $cond80 = 0, $cond81 = 0, $cond82 = 0, $cond83 = 0, $cond84 = 0, $cond85 = 0, $cond86 = 0, $cond87 = 0;
 var $cond88 = 0, $cond89 = 0, $cond9 = 0, $cond90 = 0, $cond91 = 0, $cond92 = 0, $cond93 = 0, $cond94 = 0, $cond95 = 0, $cond96 = 0, $cond97 = 0, $cond98 = 0, $cond99 = 0, $dark_frame$0 = 0, $dark_frame$1 = 0, $dark_frame$2 = 0, $dark_frame$3 = 0, $dark_frame$3$phi = 0, $fhigh$0 = 0, $fhigh$1 = 0;
 var $fhigh$2 = 0, $fhigh$3 = 0, $fwide$0 = 0, $fwide$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $i$7 = 0, $i$8 = 0, $identify_only$0 = 0, $identify_only$1 = 0, $identify_only$2 = 0, $identify_only$3 = 0, $identify_only$3$phi = 0, $ofname$0 = 0, $ofname$0$phi = 0;
 var $ofname$1 = 0, $quality$0 = 0, $read_from_stdin$0 = 0, $read_from_stdin$1 = 0, $read_from_stdin$2 = 0, $read_from_stdin$3 = 0, $read_from_stdin$3$phi = 0, $status$0 = 0, $status$1 = 0, $status$1$phi = 0, $status$2 = 0, $status$3 = 0, $status$4 = 0, $status$5 = 0, $status$6 = 0, $thumbnail_only$0 = 0, $thumbnail_only$1 = 0, $thumbnail_only$2 = 0, $thumbnail_only$3 = 0, $thumbnail_only$3$phi = 0;
 var $timestamp_only$0 = 0, $timestamp_only$1 = 0, $timestamp_only$2 = 0, $timestamp_only$3 = 0, $timestamp_only$3$phi = 0, $use_fuji_rotate$0 = 0, $use_fuji_rotate$1 = 0, $use_fuji_rotate$2 = 0, $use_fuji_rotate$3 = 0, $use_fuji_rotate$3$phi = 0, $user_black$0 = 0, $user_black$1 = 0, $user_black$2 = 0, $user_black$3 = 0, $user_black$3$phi = 0, $user_flip$0 = 0, $user_flip$1 = 0, $user_flip$2 = 0, $user_flip$3 = 0, $user_flip$3$phi = 0;
 var $user_qual$0 = 0, $user_qual$1 = 0, $user_qual$2 = 0, $user_qual$3 = 0, $user_qual$3$phi = 0, $user_sat$0 = 0, $user_sat$1 = 0, $user_sat$2 = 0, $user_sat$3 = 0, $user_sat$3$phi = 0, $ut = 0, $vararg_buffer = 0, $vararg_buffer545 = 0, $vararg_buffer547 = 0, $vararg_buffer550 = 0, $vararg_buffer553 = 0, $vararg_buffer556 = 0, $vararg_buffer558 = 0, $vararg_buffer560 = 0, $vararg_buffer563 = 0;
 var $vararg_buffer568 = 0, $vararg_buffer572 = 0, $vararg_buffer575 = 0, $vararg_buffer578 = 0, $vararg_buffer581 = 0, $vararg_buffer585 = 0, $vararg_buffer588 = 0, $vararg_buffer590 = 0, $vararg_buffer594 = 0, $vararg_buffer597 = 0, $vararg_buffer599 = 0, $vararg_buffer601 = 0, $vararg_buffer604 = 0, $vararg_buffer607 = 0, $vararg_buffer610 = 0, $vararg_buffer613 = 0, $vararg_buffer616 = 0, $vararg_buffer619 = 0, $vararg_buffer623 = 0, $vararg_buffer627 = 0;
 var $vararg_buffer630 = 0, $vararg_buffer634 = 0, $vararg_buffer638 = 0, $vararg_buffer641 = 0, $vararg_buffer643 = 0, $vararg_buffer645 = 0, $vararg_buffer648 = 0, $vararg_buffer650 = 0, $vararg_buffer653 = 0, $vararg_buffer658 = 0, $vararg_buffer663 = 0, $vararg_buffer667 = 0, $vararg_buffer670 = 0, $vararg_buffer674 = 0, $vararg_ptr566 = 0, $vararg_ptr567 = 0, $vararg_ptr571 = 0, $vararg_ptr584 = 0, $vararg_ptr593 = 0, $vararg_ptr622 = 0;
 var $vararg_ptr626 = 0, $vararg_ptr633 = 0, $vararg_ptr637 = 0, $vararg_ptr656 = 0, $vararg_ptr657 = 0, $vararg_ptr661 = 0, $vararg_ptr662 = 0, $vararg_ptr666 = 0, $vararg_ptr673 = 0, $write_ext$0 = 0, $write_ext$1 = 0, $write_to_stdout$0 = 0, $write_to_stdout$1 = 0, $write_to_stdout$2 = 0, $write_to_stdout$3 = 0, $write_to_stdout$3$phi = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer674 = sp + 176|0;
 $vararg_buffer670 = sp + 360|0;
 $vararg_buffer667 = sp + 352|0;
 $vararg_buffer663 = sp + 344|0;
 $vararg_buffer658 = sp + 328|0;
 $vararg_buffer653 = sp + 312|0;
 $vararg_buffer650 = sp + 304|0;
 $vararg_buffer648 = sp + 296|0;
 $vararg_buffer645 = sp + 288|0;
 $vararg_buffer643 = sp + 280|0;
 $vararg_buffer641 = sp + 272|0;
 $vararg_buffer638 = sp + 264|0;
 $vararg_buffer634 = sp + 256|0;
 $vararg_buffer630 = sp + 248|0;
 $vararg_buffer627 = sp + 240|0;
 $vararg_buffer623 = sp + 232|0;
 $vararg_buffer619 = sp + 224|0;
 $vararg_buffer616 = sp + 216|0;
 $vararg_buffer613 = sp + 208|0;
 $vararg_buffer610 = sp + 200|0;
 $vararg_buffer607 = sp + 192|0;
 $vararg_buffer604 = sp + 184|0;
 $vararg_buffer601 = sp + 168|0;
 $vararg_buffer599 = sp + 72|0;
 $vararg_buffer597 = sp + 64|0;
 $vararg_buffer594 = sp + 56|0;
 $vararg_buffer590 = sp + 48|0;
 $vararg_buffer588 = sp + 40|0;
 $vararg_buffer585 = sp + 32|0;
 $vararg_buffer581 = sp + 16|0;
 $vararg_buffer578 = sp + 8|0;
 $vararg_buffer575 = sp;
 $vararg_buffer572 = sp + 24|0;
 $vararg_buffer568 = sp + 80|0;
 $vararg_buffer563 = sp + 88|0;
 $vararg_buffer560 = sp + 104|0;
 $vararg_buffer558 = sp + 112|0;
 $vararg_buffer556 = sp + 120|0;
 $vararg_buffer553 = sp + 128|0;
 $vararg_buffer550 = sp + 136|0;
 $vararg_buffer547 = sp + 144|0;
 $vararg_buffer545 = sp + 152|0;
 $vararg_buffer = sp + 160|0;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $ut = sp + 368|0;
 __THREW__ = 0;
 (invoke_ii(55,(624968|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 if ((($0|0) != 0) & ((threwValue|0) != 0)) { $1 = _testSetjmp(HEAP32[$0>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1|0) == 0) { _longjmp($0|0, threwValue|0); } tempRet0 = threwValue; } else { $1 = -1; };
 $2 = tempRet0;
 $cond = ($1|0)==(1);
 L1: do {
  if ($cond) {
   $$reg2mem543$0 = $2;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
  } else {
   $3 = ($argc|0)==(1);
   if ($3) {
    __THREW__ = 0;
    HEAP32[$vararg_buffer>>2] = 625008;
    (invoke_iii(56,(624976|0),($vararg_buffer|0))|0);
    $4 = __THREW__; __THREW__ = 0;
    if ((($4|0) != 0) & ((threwValue|0) != 0)) { $5 = _testSetjmp(HEAP32[$4>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($5|0) == 0) { _longjmp($4|0, threwValue|0); } tempRet0 = threwValue; } else { $5 = -1; };
    $6 = tempRet0;
    $cond28 = ($5|0)==(1);
    if ($cond28) {
     $$reg2mem543$0 = $6;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_iii(56,(625016|0),($vararg_buffer545|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    if ((($7|0) != 0) & ((threwValue|0) != 0)) { $8 = _testSetjmp(HEAP32[$7>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($8|0) == 0) { _longjmp($7|0, threwValue|0); } tempRet0 = threwValue; } else { $8 = -1; };
    $9 = tempRet0;
    $cond29 = ($8|0)==(1);
    if ($cond29) {
     $$reg2mem543$0 = $9;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    $10 = HEAP32[$argv>>2]|0;
    __THREW__ = 0;
    HEAP32[$vararg_buffer547>>2] = $10;
    (invoke_iii(56,(625064|0),($vararg_buffer547|0))|0);
    $11 = __THREW__; __THREW__ = 0;
    if ((($11|0) != 0) & ((threwValue|0) != 0)) { $12 = _testSetjmp(HEAP32[$11>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($12|0) == 0) { _longjmp($11|0, threwValue|0); } tempRet0 = threwValue; } else { $12 = -1; };
    $13 = tempRet0;
    $cond30 = ($12|0)==(1);
    if ($cond30) {
     $$reg2mem543$0 = $13;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(625104|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    if ((($14|0) != 0) & ((threwValue|0) != 0)) { $15 = _testSetjmp(HEAP32[$14>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($15|0) == 0) { _longjmp($14|0, threwValue|0); } tempRet0 = threwValue; } else { $15 = -1; };
    $16 = tempRet0;
    $cond31 = ($15|0)==(1);
    if ($cond31) {
     $$reg2mem543$0 = $16;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(625144|0))|0);
    $17 = __THREW__; __THREW__ = 0;
    if ((($17|0) != 0) & ((threwValue|0) != 0)) { $18 = _testSetjmp(HEAP32[$17>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($18|0) == 0) { _longjmp($17|0, threwValue|0); } tempRet0 = threwValue; } else { $18 = -1; };
    $19 = tempRet0;
    $cond32 = ($18|0)==(1);
    if ($cond32) {
     $$reg2mem543$0 = $19;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(625192|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    if ((($20|0) != 0) & ((threwValue|0) != 0)) { $21 = _testSetjmp(HEAP32[$20>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($21|0) == 0) { _longjmp($20|0, threwValue|0); } tempRet0 = threwValue; } else { $21 = -1; };
    $22 = tempRet0;
    $cond33 = ($21|0)==(1);
    if ($cond33) {
     $$reg2mem543$0 = $22;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(625240|0))|0);
    $23 = __THREW__; __THREW__ = 0;
    if ((($23|0) != 0) & ((threwValue|0) != 0)) { $24 = _testSetjmp(HEAP32[$23>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($24|0) == 0) { _longjmp($23|0, threwValue|0); } tempRet0 = threwValue; } else { $24 = -1; };
    $25 = tempRet0;
    $cond34 = ($24|0)==(1);
    if ($cond34) {
     $$reg2mem543$0 = $25;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(625288|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    if ((($26|0) != 0) & ((threwValue|0) != 0)) { $27 = _testSetjmp(HEAP32[$26>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($27|0) == 0) { _longjmp($26|0, threwValue|0); } tempRet0 = threwValue; } else { $27 = -1; };
    $28 = tempRet0;
    $cond35 = ($27|0)==(1);
    if ($cond35) {
     $$reg2mem543$0 = $28;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(625336|0))|0);
    $29 = __THREW__; __THREW__ = 0;
    if ((($29|0) != 0) & ((threwValue|0) != 0)) { $30 = _testSetjmp(HEAP32[$29>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($30|0) == 0) { _longjmp($29|0, threwValue|0); } tempRet0 = threwValue; } else { $30 = -1; };
    $31 = tempRet0;
    $cond36 = ($30|0)==(1);
    if ($cond36) {
     $$reg2mem543$0 = $31;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(625384|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    if ((($32|0) != 0) & ((threwValue|0) != 0)) { $33 = _testSetjmp(HEAP32[$32>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($33|0) == 0) { _longjmp($32|0, threwValue|0); } tempRet0 = threwValue; } else { $33 = -1; };
    $34 = tempRet0;
    $cond37 = ($33|0)==(1);
    if ($cond37) {
     $$reg2mem543$0 = $34;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(625432|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    if ((($35|0) != 0) & ((threwValue|0) != 0)) { $36 = _testSetjmp(HEAP32[$35>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($36|0) == 0) { _longjmp($35|0, threwValue|0); } tempRet0 = threwValue; } else { $36 = -1; };
    $37 = tempRet0;
    $cond38 = ($36|0)==(1);
    if ($cond38) {
     $$reg2mem543$0 = $37;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(625488|0))|0);
    $38 = __THREW__; __THREW__ = 0;
    if ((($38|0) != 0) & ((threwValue|0) != 0)) { $39 = _testSetjmp(HEAP32[$38>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($39|0) == 0) { _longjmp($38|0, threwValue|0); } tempRet0 = threwValue; } else { $39 = -1; };
    $40 = tempRet0;
    $cond39 = ($39|0)==(1);
    if ($cond39) {
     $$reg2mem543$0 = $40;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(625544|0))|0);
    $41 = __THREW__; __THREW__ = 0;
    if ((($41|0) != 0) & ((threwValue|0) != 0)) { $42 = _testSetjmp(HEAP32[$41>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($42|0) == 0) { _longjmp($41|0, threwValue|0); } tempRet0 = threwValue; } else { $42 = -1; };
    $43 = tempRet0;
    $cond40 = ($42|0)==(1);
    if ($cond40) {
     $$reg2mem543$0 = $43;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(625584|0))|0);
    $44 = __THREW__; __THREW__ = 0;
    if ((($44|0) != 0) & ((threwValue|0) != 0)) { $45 = _testSetjmp(HEAP32[$44>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($45|0) == 0) { _longjmp($44|0, threwValue|0); } tempRet0 = threwValue; } else { $45 = -1; };
    $46 = tempRet0;
    $cond41 = ($45|0)==(1);
    if ($cond41) {
     $$reg2mem543$0 = $46;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(625640|0))|0);
    $47 = __THREW__; __THREW__ = 0;
    if ((($47|0) != 0) & ((threwValue|0) != 0)) { $48 = _testSetjmp(HEAP32[$47>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($48|0) == 0) { _longjmp($47|0, threwValue|0); } tempRet0 = threwValue; } else { $48 = -1; };
    $49 = tempRet0;
    $cond42 = ($48|0)==(1);
    if ($cond42) {
     $$reg2mem543$0 = $49;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(625680|0))|0);
    $50 = __THREW__; __THREW__ = 0;
    if ((($50|0) != 0) & ((threwValue|0) != 0)) { $51 = _testSetjmp(HEAP32[$50>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($51|0) == 0) { _longjmp($50|0, threwValue|0); } tempRet0 = threwValue; } else { $51 = -1; };
    $52 = tempRet0;
    $cond43 = ($51|0)==(1);
    if ($cond43) {
     $$reg2mem543$0 = $52;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(625736|0))|0);
    $53 = __THREW__; __THREW__ = 0;
    if ((($53|0) != 0) & ((threwValue|0) != 0)) { $54 = _testSetjmp(HEAP32[$53>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($54|0) == 0) { _longjmp($53|0, threwValue|0); } tempRet0 = threwValue; } else { $54 = -1; };
    $55 = tempRet0;
    $cond44 = ($54|0)==(1);
    if ($cond44) {
     $$reg2mem543$0 = $55;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(625784|0))|0);
    $56 = __THREW__; __THREW__ = 0;
    if ((($56|0) != 0) & ((threwValue|0) != 0)) { $57 = _testSetjmp(HEAP32[$56>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($57|0) == 0) { _longjmp($56|0, threwValue|0); } tempRet0 = threwValue; } else { $57 = -1; };
    $58 = tempRet0;
    $cond45 = ($57|0)==(1);
    if ($cond45) {
     $$reg2mem543$0 = $58;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(625824|0))|0);
    $59 = __THREW__; __THREW__ = 0;
    if ((($59|0) != 0) & ((threwValue|0) != 0)) { $60 = _testSetjmp(HEAP32[$59>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($60|0) == 0) { _longjmp($59|0, threwValue|0); } tempRet0 = threwValue; } else { $60 = -1; };
    $61 = tempRet0;
    $cond46 = ($60|0)==(1);
    if ($cond46) {
     $$reg2mem543$0 = $61;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(625864|0))|0);
    $62 = __THREW__; __THREW__ = 0;
    if ((($62|0) != 0) & ((threwValue|0) != 0)) { $63 = _testSetjmp(HEAP32[$62>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($63|0) == 0) { _longjmp($62|0, threwValue|0); } tempRet0 = threwValue; } else { $63 = -1; };
    $64 = tempRet0;
    $cond47 = ($63|0)==(1);
    if ($cond47) {
     $$reg2mem543$0 = $64;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(625912|0))|0);
    $65 = __THREW__; __THREW__ = 0;
    if ((($65|0) != 0) & ((threwValue|0) != 0)) { $66 = _testSetjmp(HEAP32[$65>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($66|0) == 0) { _longjmp($65|0, threwValue|0); } tempRet0 = threwValue; } else { $66 = -1; };
    $67 = tempRet0;
    $cond48 = ($66|0)==(1);
    if ($cond48) {
     $$reg2mem543$0 = $67;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(625984|0))|0);
    $68 = __THREW__; __THREW__ = 0;
    if ((($68|0) != 0) & ((threwValue|0) != 0)) { $69 = _testSetjmp(HEAP32[$68>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($69|0) == 0) { _longjmp($68|0, threwValue|0); } tempRet0 = threwValue; } else { $69 = -1; };
    $70 = tempRet0;
    $cond49 = ($69|0)==(1);
    if ($cond49) {
     $$reg2mem543$0 = $70;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(626040|0))|0);
    $71 = __THREW__; __THREW__ = 0;
    if ((($71|0) != 0) & ((threwValue|0) != 0)) { $72 = _testSetjmp(HEAP32[$71>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($72|0) == 0) { _longjmp($71|0, threwValue|0); } tempRet0 = threwValue; } else { $72 = -1; };
    $73 = tempRet0;
    $cond50 = ($72|0)==(1);
    if ($cond50) {
     $$reg2mem543$0 = $73;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(626104|0))|0);
    $74 = __THREW__; __THREW__ = 0;
    if ((($74|0) != 0) & ((threwValue|0) != 0)) { $75 = _testSetjmp(HEAP32[$74>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($75|0) == 0) { _longjmp($74|0, threwValue|0); } tempRet0 = threwValue; } else { $75 = -1; };
    $76 = tempRet0;
    $cond51 = ($75|0)==(1);
    if ($cond51) {
     $$reg2mem543$0 = $76;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(626160|0))|0);
    $77 = __THREW__; __THREW__ = 0;
    if ((($77|0) != 0) & ((threwValue|0) != 0)) { $78 = _testSetjmp(HEAP32[$77>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($78|0) == 0) { _longjmp($77|0, threwValue|0); } tempRet0 = threwValue; } else { $78 = -1; };
    $79 = tempRet0;
    $cond52 = ($78|0)==(1);
    if ($cond52) {
     $$reg2mem543$0 = $79;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(626216|0))|0);
    $80 = __THREW__; __THREW__ = 0;
    if ((($80|0) != 0) & ((threwValue|0) != 0)) { $81 = _testSetjmp(HEAP32[$80>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($81|0) == 0) { _longjmp($80|0, threwValue|0); } tempRet0 = threwValue; } else { $81 = -1; };
    $82 = tempRet0;
    $cond53 = ($81|0)==(1);
    if ($cond53) {
     $$reg2mem543$0 = $82;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(626264|0))|0);
    $83 = __THREW__; __THREW__ = 0;
    if ((($83|0) != 0) & ((threwValue|0) != 0)) { $84 = _testSetjmp(HEAP32[$83>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($84|0) == 0) { _longjmp($83|0, threwValue|0); } tempRet0 = threwValue; } else { $84 = -1; };
    $85 = tempRet0;
    $cond54 = ($84|0)==(1);
    if ($cond54) {
     $$reg2mem543$0 = $85;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(626320|0))|0);
    $86 = __THREW__; __THREW__ = 0;
    if ((($86|0) != 0) & ((threwValue|0) != 0)) { $87 = _testSetjmp(HEAP32[$86>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($87|0) == 0) { _longjmp($86|0, threwValue|0); } tempRet0 = threwValue; } else { $87 = -1; };
    $88 = tempRet0;
    $cond55 = ($87|0)==(1);
    if ($cond55) {
     $$reg2mem543$0 = $88;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(626368|0))|0);
    $89 = __THREW__; __THREW__ = 0;
    if ((($89|0) != 0) & ((threwValue|0) != 0)) { $90 = _testSetjmp(HEAP32[$89>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($90|0) == 0) { _longjmp($89|0, threwValue|0); } tempRet0 = threwValue; } else { $90 = -1; };
    $91 = tempRet0;
    $cond56 = ($90|0)==(1);
    if ($cond56) {
     $$reg2mem543$0 = $91;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(626424|0))|0);
    $92 = __THREW__; __THREW__ = 0;
    if ((($92|0) != 0) & ((threwValue|0) != 0)) { $93 = _testSetjmp(HEAP32[$92>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($93|0) == 0) { _longjmp($92|0, threwValue|0); } tempRet0 = threwValue; } else { $93 = -1; };
    $94 = tempRet0;
    $cond57 = ($93|0)==(1);
    if ($cond57) {
     $$reg2mem543$0 = $94;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(626464|0))|0);
    $95 = __THREW__; __THREW__ = 0;
    if ((($95|0) != 0) & ((threwValue|0) != 0)) { $96 = _testSetjmp(HEAP32[$95>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($96|0) == 0) { _longjmp($95|0, threwValue|0); } tempRet0 = threwValue; } else { $96 = -1; };
    $97 = tempRet0;
    $cond58 = ($96|0)==(1);
    if ($cond58) {
     $$reg2mem543$0 = $97;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(626528|0))|0);
    $98 = __THREW__; __THREW__ = 0;
    if ((($98|0) != 0) & ((threwValue|0) != 0)) { $99 = _testSetjmp(HEAP32[$98>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($99|0) == 0) { _longjmp($98|0, threwValue|0); } tempRet0 = threwValue; } else { $99 = -1; };
    $100 = tempRet0;
    $cond59 = ($99|0)==(1);
    if ($cond59) {
     $$reg2mem543$0 = $100;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(626576|0))|0);
    $101 = __THREW__; __THREW__ = 0;
    if ((($101|0) != 0) & ((threwValue|0) != 0)) { $102 = _testSetjmp(HEAP32[$101>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($102|0) == 0) { _longjmp($101|0, threwValue|0); } tempRet0 = threwValue; } else { $102 = -1; };
    $103 = tempRet0;
    $cond60 = ($102|0)==(1);
    if ($cond60) {
     $$reg2mem543$0 = $103;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(626632|0))|0);
    $104 = __THREW__; __THREW__ = 0;
    if ((($104|0) != 0) & ((threwValue|0) != 0)) { $105 = _testSetjmp(HEAP32[$104>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($105|0) == 0) { _longjmp($104|0, threwValue|0); } tempRet0 = threwValue; } else { $105 = -1; };
    $106 = tempRet0;
    $cond61 = ($105|0)==(1);
    if ($cond61) {
     $$reg2mem543$0 = $106;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(626696|0))|0);
    $107 = __THREW__; __THREW__ = 0;
    if ((($107|0) != 0) & ((threwValue|0) != 0)) { $108 = _testSetjmp(HEAP32[$107>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($108|0) == 0) { _longjmp($107|0, threwValue|0); } tempRet0 = threwValue; } else { $108 = -1; };
    $109 = tempRet0;
    $cond62 = ($108|0)==(1);
    if ($cond62) {
     $$reg2mem543$0 = $109;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(626736|0))|0);
    $110 = __THREW__; __THREW__ = 0;
    if ((($110|0) != 0) & ((threwValue|0) != 0)) { $111 = _testSetjmp(HEAP32[$110>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($111|0) == 0) { _longjmp($110|0, threwValue|0); } tempRet0 = threwValue; } else { $111 = -1; };
    $112 = tempRet0;
    $cond63 = ($111|0)==(1);
    if ($cond63) {
     $$reg2mem543$0 = $112;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(626784|0))|0);
    $113 = __THREW__; __THREW__ = 0;
    if ((($113|0) != 0) & ((threwValue|0) != 0)) { $114 = _testSetjmp(HEAP32[$113>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($114|0) == 0) { _longjmp($113|0, threwValue|0); } tempRet0 = threwValue; } else { $114 = -1; };
    $115 = tempRet0;
    $cond64 = ($114|0)==(1);
    if ($cond64) {
     $$reg2mem543$0 = $115;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(57,(456424|0))|0);
    $116 = __THREW__; __THREW__ = 0;
    if ((($116|0) != 0) & ((threwValue|0) != 0)) { $117 = _testSetjmp(HEAP32[$116>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($117|0) == 0) { _longjmp($116|0, threwValue|0); } tempRet0 = threwValue; } else { $117 = -1; };
    $118 = tempRet0;
    $cond65 = ($117|0)==(1);
    if ($cond65) {
     $$reg2mem543$0 = $118;$arg$7 = 0;$bpfile$3 = 0;$dark_frame$3 = 0;$identify_only$3 = 0;$ofname$0 = 0;$read_from_stdin$3 = 0;$status$1 = 0;$thumbnail_only$3 = 0;$timestamp_only$3 = 0;$use_fuji_rotate$3 = 1;$user_black$3 = -1;$user_flip$3 = -1;$user_qual$3 = -1;$user_sat$3 = -1;$write_to_stdout$3 = 0;
     break;
    }
    $$0 = 1;
    _free(_setjmpTable|0);
    STACKTOP = sp;return ($$0|0);
   }
   $119 = (($argv) + ($argc<<2)|0);
   HEAP32[$119>>2] = 456424;
   $arg$0 = 1;$bpfile$0 = 0;$dark_frame$0 = 0;$identify_only$0 = 0;$read_from_stdin$0 = 0;$thumbnail_only$0 = 0;$timestamp_only$0 = 0;$use_fuji_rotate$0 = 1;$user_black$0 = -1;$user_flip$0 = -1;$user_qual$0 = -1;$user_sat$0 = -1;$write_to_stdout$0 = 0;
   L45: while(1) {
    $120 = (($argv) + ($arg$0<<2)|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = HEAP8[$121>>0]|0;
    $123 = $122 << 24 >> 24;
    $124 = (($123) - 2)|0;
    $125 = $124 | 2;
    $126 = ($125|0)==(43);
    if (!($126)) {
     label = 126;
     break;
    }
    $127 = (($arg$0) + 1)|0;
    $128 = (($argv) + ($arg$0<<2)|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (($129) + 1|0);
    $131 = HEAP8[$130>>0]|0;
    $132 = $131 << 24 >> 24;
    __THREW__ = 0;
    $133 = (invoke_iii(58,(626824|0),($132|0))|0);
    $134 = __THREW__; __THREW__ = 0;
    if ((($134|0) != 0) & ((threwValue|0) != 0)) { $135 = _testSetjmp(HEAP32[$134>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($135|0) == 0) { _longjmp($134|0, threwValue|0); } tempRet0 = threwValue; } else { $135 = -1; };
    $136 = tempRet0;
    $cond5 = ($135|0)==(1);
    if ($cond5) {
     $$reg2mem543$0 = $136;$arg$7 = $127;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
     break L1;
    }
    $137 = ($133|0)!=(0|0);
    if ($137) {
     $i$0 = 0;
     while(1) {
      $138 = $133;
      $139 = 626824;
      $140 = (($138) - ($139))|0;
      $141 = (626840 + ($140)|0);
      $142 = HEAP8[$141>>0]|0;
      $143 = $142 << 24 >> 24;
      $144 = (($143) - 48)|0;
      $145 = ($i$0|0)<($144|0);
      if (!($145)) {
       break;
      }
      $146 = (($127) + ($i$0))|0;
      $147 = (($argv) + ($146<<2)|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = HEAP8[$148>>0]|0;
      $150 = $149 << 24 >> 24;
      __THREW__ = 0;
      $151 = (invoke_ii(59,($150|0))|0);
      $152 = __THREW__; __THREW__ = 0;
      if ((($152|0) != 0) & ((threwValue|0) != 0)) { $153 = _testSetjmp(HEAP32[$152>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($153|0) == 0) { _longjmp($152|0, threwValue|0); } tempRet0 = threwValue; } else { $153 = -1; };
      $154 = tempRet0;
      $cond26 = ($153|0)==(1);
      if ($cond26) {
       $$reg2mem543$0 = $154;$arg$7 = $127;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
       break L1;
      }
      $155 = ($151|0)!=(0);
      if (!($155)) {
       label = 50;
       break L45;
      }
      $161 = (($i$0) + 1)|0;
      $i$0 = $161;
     }
    }
    $162 = $131 << 24 >> 24;
    do {
     switch ($162|0) {
     case 114:  {
      $arg$1 = $127;$c$0 = 0;
      while(1) {
       $179 = ($c$0|0)<(4);
       if (!($179)) {
        break;
       }
       $180 = (($arg$1) + 1)|0;
       $181 = (($argv) + ($arg$1<<2)|0);
       $182 = HEAP32[$181>>2]|0;
       __THREW__ = 0;
       $183 = (+invoke_di(61,($182|0)));
       $184 = __THREW__; __THREW__ = 0;
       if ((($184|0) != 0) & ((threwValue|0) != 0)) { $185 = _testSetjmp(HEAP32[$184>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($185|0) == 0) { _longjmp($184|0, threwValue|0); } tempRet0 = threwValue; } else { $185 = -1; };
       $186 = tempRet0;
       $cond22 = ($185|0)==(1);
       if ($cond22) {
        $$reg2mem543$0 = $186;$arg$7 = $180;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
        break L1;
       }
       $187 = $183;
       $188 = (112 + ($c$0<<2)|0);
       HEAPF32[$188>>2] = $187;
       $189 = (($c$0) + 1)|0;
       $arg$1 = $180;$c$0 = $189;
      }
      $arg$5 = $arg$1;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 98:  {
      $171 = (($127) + 1)|0;
      $172 = (($argv) + ($127<<2)|0);
      $173 = HEAP32[$172>>2]|0;
      __THREW__ = 0;
      $174 = (+invoke_di(61,($173|0)));
      $175 = __THREW__; __THREW__ = 0;
      if ((($175|0) != 0) & ((threwValue|0) != 0)) { $176 = _testSetjmp(HEAP32[$175>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($176|0) == 0) { _longjmp($175|0, threwValue|0); } tempRet0 = threwValue; } else { $176 = -1; };
      $177 = tempRet0;
      $cond23 = ($176|0)==(1);
      if ($cond23) {
       $$reg2mem543$0 = $177;$arg$7 = $171;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
       break L1;
      }
      $178 = $174;
      HEAPF32[104>>2] = $178;
      $arg$5 = $171;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 110:  {
      $163 = (($127) + 1)|0;
      $164 = (($argv) + ($127<<2)|0);
      $165 = HEAP32[$164>>2]|0;
      __THREW__ = 0;
      $166 = (+invoke_di(61,($165|0)));
      $167 = __THREW__; __THREW__ = 0;
      if ((($167|0) != 0) & ((threwValue|0) != 0)) { $168 = _testSetjmp(HEAP32[$167>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($168|0) == 0) { _longjmp($167|0, threwValue|0); } tempRet0 = threwValue; } else { $168 = -1; };
      $169 = tempRet0;
      $cond24 = ($168|0)==(1);
      if ($cond24) {
       $$reg2mem543$0 = $169;$arg$7 = $163;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
       break L1;
      }
      $170 = $166;
      HEAPF32[128>>2] = $170;
      $arg$5 = $163;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 52:  {
      HEAP32[232>>2] = 1;
      HEAPF64[((56 + 8|0))>>3] = 1.0;
      HEAPF64[56>>3] = 1.0;
      label = 122;
      break;
     }
     case 87:  {
      HEAP32[232>>2] = 1;
      $arg$5 = $127;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 84:  {
      HEAP32[216>>2] = 1;
      $arg$5 = $127;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 54:  {
      label = 122;
      break;
     }
     case 104:  {
      HEAP32[136>>2] = 1;
      $arg$5 = $127;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 99:  {
      $arg$5 = $127;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = 1;
      break;
     }
     case 102:  {
      HEAP32[144>>2] = 1;
      $arg$5 = $127;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 80:  {
      $307 = (($127) + 1)|0;
      $308 = (($argv) + ($127<<2)|0);
      $309 = HEAP32[$308>>2]|0;
      $arg$5 = $307;$bpfile$1 = $309;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 97:  {
      $arg$4 = $127;
      label = 111;
      break;
     }
     case 122:  {
      $arg$5 = $127;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = 1;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 101:  {
      $arg$5 = $127;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = 1;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 65:  {
      $arg$3 = $127;$c$1 = 0;
      while(1) {
       $313 = ($c$1|0)<(4);
       if (!($313)) {
        break;
       }
       $314 = (($arg$3) + 1)|0;
       $315 = (($argv) + ($arg$3<<2)|0);
       $316 = HEAP32[$315>>2]|0;
       __THREW__ = 0;
       $317 = (invoke_ii(62,($316|0))|0);
       $318 = __THREW__; __THREW__ = 0;
       if ((($318|0) != 0) & ((threwValue|0) != 0)) { $319 = _testSetjmp(HEAP32[$318>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($319|0) == 0) { _longjmp($318|0, threwValue|0); } tempRet0 = threwValue; } else { $319 = -1; };
       $320 = tempRet0;
       $cond6 = ($319|0)==(1);
       if ($cond6) {
        $$reg2mem543$0 = $320;$arg$7 = $314;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
        break L1;
       }
       $321 = (240 + ($c$1<<2)|0);
       HEAP32[$321>>2] = $317;
       $322 = (($c$1) + 1)|0;
       $arg$3 = $314;$c$1 = $322;
      }
      $arg$4 = $arg$3;
      label = 111;
      break;
     }
     case 118:  {
      HEAP32[168>>2] = 1;
      $arg$5 = $127;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 105:  {
      $arg$5 = $127;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = 1;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 73:  {
      $arg$5 = $127;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = 1;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 75:  {
      $310 = (($127) + 1)|0;
      $311 = (($argv) + ($127<<2)|0);
      $312 = HEAP32[$311>>2]|0;
      $arg$5 = $310;$bpfile$1 = $bpfile$0;$dark_frame$1 = $312;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 100:  {
      label = 117;
      break;
     }
     case 68:  {
      label = 116;
      break;
     }
     case 77:  {
      $323 = $122 << 24 >> 24;
      $324 = ($323|0)==(43);
      $325 = $324&1;
      $326 = ($325*3)|0;
      HEAP32[192>>2] = $326;
      $arg$5 = $127;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 106:  {
      label = 118;
      break;
     }
     case 69:  {
      $327 = HEAP32[152>>2]|0;
      $328 = (($327) + 1)|0;
      HEAP32[152>>2] = $328;
      label = 116;
      break;
     }
     case 119:  {
      HEAP32[184>>2] = 1;
      $arg$5 = $127;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 103:  {
      $206 = (($127) + 1)|0;
      $207 = (($argv) + ($127<<2)|0);
      $208 = HEAP32[$207>>2]|0;
      __THREW__ = 0;
      $209 = (+invoke_di(61,($208|0)));
      $210 = __THREW__; __THREW__ = 0;
      if ((($210|0) != 0) & ((threwValue|0) != 0)) { $211 = _testSetjmp(HEAP32[$210>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($211|0) == 0) { _longjmp($210|0, threwValue|0); } tempRet0 = threwValue; } else { $211 = -1; };
      $212 = tempRet0;
      $cond18 = ($211|0)==(1);
      if ($cond18) {
       $$reg2mem543$0 = $212;$arg$7 = $206;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
       break L1;
      }
      HEAPF64[56>>3] = $209;
      $213 = (($206) + 1)|0;
      $214 = (($argv) + ($206<<2)|0);
      $215 = HEAP32[$214>>2]|0;
      __THREW__ = 0;
      $216 = (+invoke_di(61,($215|0)));
      $217 = __THREW__; __THREW__ = 0;
      if ((($217|0) != 0) & ((threwValue|0) != 0)) { $218 = _testSetjmp(HEAP32[$217>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($218|0) == 0) { _longjmp($217|0, threwValue|0); } tempRet0 = threwValue; } else { $218 = -1; };
      $219 = tempRet0;
      $cond19 = ($218|0)==(1);
      if ($cond19) {
       $$reg2mem543$0 = $219;$arg$7 = $213;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
       break L1;
      }
      HEAPF64[((56 + 8|0))>>3] = $216;
      $220 = +HEAPF64[56>>3];
      $221 = $220 != 0.0;
      if ($221) {
       $222 = +HEAPF64[56>>3];
       $223 = 1.0 / $222;
       HEAPF64[56>>3] = $223;
      }
      $arg$5 = $213;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 83:  {
      $231 = (($127) + 1)|0;
      $232 = (($argv) + ($127<<2)|0);
      $233 = HEAP32[$232>>2]|0;
      __THREW__ = 0;
      $234 = (invoke_ii(62,($233|0))|0);
      $235 = __THREW__; __THREW__ = 0;
      if ((($235|0) != 0) & ((threwValue|0) != 0)) { $236 = _testSetjmp(HEAP32[$235>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($236|0) == 0) { _longjmp($235|0, threwValue|0); } tempRet0 = threwValue; } else { $236 = -1; };
      $237 = tempRet0;
      $cond16 = ($236|0)==(1);
      if ($cond16) {
       $$reg2mem543$0 = $237;$arg$7 = $231;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
       break L1;
      }
      $arg$5 = $231;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $234;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 116:  {
      $238 = (($127) + 1)|0;
      $239 = (($argv) + ($127<<2)|0);
      $240 = HEAP32[$239>>2]|0;
      __THREW__ = 0;
      $241 = (invoke_ii(62,($240|0))|0);
      $242 = __THREW__; __THREW__ = 0;
      if ((($242|0) != 0) & ((threwValue|0) != 0)) { $243 = _testSetjmp(HEAP32[$242>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($243|0) == 0) { _longjmp($242|0, threwValue|0); } tempRet0 = threwValue; } else { $243 = -1; };
      $244 = tempRet0;
      $cond15 = ($243|0)==(1);
      if ($cond15) {
       $$reg2mem543$0 = $244;$arg$7 = $238;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
       break L1;
      }
      $arg$5 = $238;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $241;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 107:  {
      $224 = (($127) + 1)|0;
      $225 = (($argv) + ($127<<2)|0);
      $226 = HEAP32[$225>>2]|0;
      __THREW__ = 0;
      $227 = (invoke_ii(62,($226|0))|0);
      $228 = __THREW__; __THREW__ = 0;
      if ((($228|0) != 0) & ((threwValue|0) != 0)) { $229 = _testSetjmp(HEAP32[$228>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($229|0) == 0) { _longjmp($228|0, threwValue|0); } tempRet0 = threwValue; } else { $229 = -1; };
      $230 = tempRet0;
      $cond17 = ($229|0)==(1);
      if ($cond17) {
       $$reg2mem543$0 = $230;$arg$7 = $224;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
       break L1;
      }
      $arg$5 = $224;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $227;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 109:  {
      $252 = (($127) + 1)|0;
      $253 = (($argv) + ($127<<2)|0);
      $254 = HEAP32[$253>>2]|0;
      __THREW__ = 0;
      $255 = (invoke_ii(62,($254|0))|0);
      $256 = __THREW__; __THREW__ = 0;
      if ((($256|0) != 0) & ((threwValue|0) != 0)) { $257 = _testSetjmp(HEAP32[$256>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($257|0) == 0) { _longjmp($256|0, threwValue|0); } tempRet0 = threwValue; } else { $257 = -1; };
      $258 = tempRet0;
      $cond13 = ($257|0)==(1);
      if ($cond13) {
       $$reg2mem543$0 = $258;$arg$7 = $252;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
       break L1;
      }
      HEAP32[224>>2] = $255;
      $arg$5 = $252;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 67:  {
      $190 = (($127) + 1)|0;
      $191 = (($argv) + ($127<<2)|0);
      $192 = HEAP32[$191>>2]|0;
      __THREW__ = 0;
      $193 = (+invoke_di(61,($192|0)));
      $194 = __THREW__; __THREW__ = 0;
      if ((($194|0) != 0) & ((threwValue|0) != 0)) { $195 = _testSetjmp(HEAP32[$194>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($195|0) == 0) { _longjmp($194|0, threwValue|0); } tempRet0 = threwValue; } else { $195 = -1; };
      $196 = tempRet0;
      $cond20 = ($195|0)==(1);
      if ($cond20) {
       $$reg2mem543$0 = $196;$arg$7 = $190;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
       break L1;
      }
      $197 = 1.0 / $193;
      HEAPF64[24>>3] = $197;
      $198 = (($190) + 1)|0;
      $199 = (($argv) + ($190<<2)|0);
      $200 = HEAP32[$199>>2]|0;
      __THREW__ = 0;
      $201 = (+invoke_di(61,($200|0)));
      $202 = __THREW__; __THREW__ = 0;
      if ((($202|0) != 0) & ((threwValue|0) != 0)) { $203 = _testSetjmp(HEAP32[$202>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($203|0) == 0) { _longjmp($202|0, threwValue|0); } tempRet0 = threwValue; } else { $203 = -1; };
      $204 = tempRet0;
      $cond21 = ($203|0)==(1);
      if ($cond21) {
       $$reg2mem543$0 = $204;$arg$7 = $198;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
       break L1;
      }
      $205 = 1.0 / $201;
      HEAPF64[((24 + 16|0))>>3] = $205;
      $arg$5 = $198;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 113:  {
      $245 = (($127) + 1)|0;
      $246 = (($argv) + ($127<<2)|0);
      $247 = HEAP32[$246>>2]|0;
      __THREW__ = 0;
      $248 = (invoke_ii(62,($247|0))|0);
      $249 = __THREW__; __THREW__ = 0;
      if ((($249|0) != 0) & ((threwValue|0) != 0)) { $250 = _testSetjmp(HEAP32[$249>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($250|0) == 0) { _longjmp($249|0, threwValue|0); } tempRet0 = threwValue; } else { $250 = -1; };
      $251 = tempRet0;
      $cond14 = ($250|0)==(1);
      if ($cond14) {
       $$reg2mem543$0 = $251;$arg$7 = $245;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
       break L1;
      }
      $arg$5 = $245;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $248;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 111:  {
      $286 = (($argv) + ($127<<2)|0);
      $287 = HEAP32[$286>>2]|0;
      $288 = HEAP8[$287>>0]|0;
      $289 = $288 << 24 >> 24;
      __THREW__ = 0;
      $290 = (invoke_ii(59,($289|0))|0);
      $291 = __THREW__; __THREW__ = 0;
      if ((($291|0) != 0) & ((threwValue|0) != 0)) { $292 = _testSetjmp(HEAP32[$291>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($292|0) == 0) { _longjmp($291|0, threwValue|0); } tempRet0 = threwValue; } else { $292 = -1; };
      $293 = tempRet0;
      $cond7 = ($292|0)==(1);
      if ($cond7) {
       $$reg2mem543$0 = $293;$arg$7 = $127;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
       break L1;
      }
      $294 = ($290|0)!=(0);
      if ($294) {
       $295 = (($argv) + ($127<<2)|0);
       $296 = HEAP32[$295>>2]|0;
       $297 = (($296) + 1|0);
       $298 = HEAP8[$297>>0]|0;
       $299 = ($298<<24>>24)!=(0);
       if ($299) {
        $arg$2 = $127;
       } else {
        $300 = (($127) + 1)|0;
        $301 = (($argv) + ($127<<2)|0);
        $302 = HEAP32[$301>>2]|0;
        __THREW__ = 0;
        $303 = (invoke_ii(62,($302|0))|0);
        $304 = __THREW__; __THREW__ = 0;
        if ((($304|0) != 0) & ((threwValue|0) != 0)) { $305 = _testSetjmp(HEAP32[$304>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($305|0) == 0) { _longjmp($304|0, threwValue|0); } tempRet0 = threwValue; } else { $305 = -1; };
        $306 = tempRet0;
        $cond8 = ($305|0)==(1);
        if ($cond8) {
         $$reg2mem543$0 = $306;$arg$7 = $300;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
         break L1;
        }
        HEAP32[200>>2] = $303;
        $arg$2 = $300;
       }
      } else {
       $arg$2 = $127;
      }
      $arg$5 = $arg$2;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 72:  {
      $259 = (($127) + 1)|0;
      $260 = (($argv) + ($127<<2)|0);
      $261 = HEAP32[$260>>2]|0;
      __THREW__ = 0;
      $262 = (invoke_ii(62,($261|0))|0);
      $263 = __THREW__; __THREW__ = 0;
      if ((($263|0) != 0) & ((threwValue|0) != 0)) { $264 = _testSetjmp(HEAP32[$263>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($264|0) == 0) { _longjmp($263|0, threwValue|0); } tempRet0 = threwValue; } else { $264 = -1; };
      $265 = tempRet0;
      $cond12 = ($264|0)==(1);
      if ($cond12) {
       $$reg2mem543$0 = $265;$arg$7 = $259;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
       break L1;
      }
      HEAP32[160>>2] = $262;
      $arg$5 = $259;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     case 115:  {
      $266 = (($argv) + ($127<<2)|0);
      $267 = HEAP32[$266>>2]|0;
      __THREW__ = 0;
      $268 = (invoke_ii(62,($267|0))|0);
      $269 = __THREW__; __THREW__ = 0;
      if ((($269|0) != 0) & ((threwValue|0) != 0)) { $270 = _testSetjmp(HEAP32[$269>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($270|0) == 0) { _longjmp($269|0, threwValue|0); } tempRet0 = threwValue; } else { $270 = -1; };
      $271 = tempRet0;
      $cond9 = ($270|0)==(1);
      if ($cond9) {
       $$reg2mem543$0 = $271;$arg$7 = $127;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
       break L1;
      }
      __THREW__ = 0;
      $272 = (invoke_ii(63,($268|0))|0);
      $273 = __THREW__; __THREW__ = 0;
      if ((($273|0) != 0) & ((threwValue|0) != 0)) { $274 = _testSetjmp(HEAP32[$273>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($274|0) == 0) { _longjmp($273|0, threwValue|0); } tempRet0 = threwValue; } else { $274 = -1; };
      $275 = tempRet0;
      $cond10 = ($274|0)==(1);
      if ($cond10) {
       $$reg2mem543$0 = $275;$arg$7 = $127;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
       break L1;
      }
      HEAP32[8>>2] = $272;
      $276 = (($127) + 1)|0;
      $277 = (($argv) + ($127<<2)|0);
      $278 = HEAP32[$277>>2]|0;
      __THREW__ = 0;
      $279 = (invoke_iii(64,($278|0),(626888|0))|0);
      $280 = __THREW__; __THREW__ = 0;
      if ((($280|0) != 0) & ((threwValue|0) != 0)) { $281 = _testSetjmp(HEAP32[$280>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($281|0) == 0) { _longjmp($280|0, threwValue|0); } tempRet0 = threwValue; } else { $281 = -1; };
      $282 = tempRet0;
      $cond11 = ($281|0)==(1);
      if ($cond11) {
       $$reg2mem543$0 = $282;$arg$7 = $276;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
       break L1;
      }
      $283 = ($279|0)!=(0);
      $284 = $283 ^ 1;
      $285 = $284&1;
      HEAP32[16>>2] = $285;
      $arg$5 = $276;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
      break;
     }
     default: {
      label = 123;
      break L45;
     }
     }
    } while(0);
    if ((label|0) == 111) {
     label = 0;
     HEAP32[176>>2] = 1;
     $arg$5 = $arg$4;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
    }
    else if ((label|0) == 116) {
     label = 0;
     $329 = HEAP32[152>>2]|0;
     $330 = (($329) + 1)|0;
     HEAP32[152>>2] = $330;
     label = 117;
    }
    else if ((label|0) == 122) {
     label = 0;
     HEAP32[208>>2] = 16;
     $arg$5 = $127;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
    }
    if ((label|0) == 117) {
     label = 0;
     $331 = HEAP32[152>>2]|0;
     $332 = (($331) + 1)|0;
     HEAP32[152>>2] = $332;
     label = 118;
    }
    if ((label|0) == 118) {
     label = 0;
     $arg$5 = $127;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = 0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
    }
    $arg$0 = $arg$5;$bpfile$0 = $bpfile$1;$dark_frame$0 = $dark_frame$1;$identify_only$0 = $identify_only$1;$read_from_stdin$0 = $read_from_stdin$1;$thumbnail_only$0 = $thumbnail_only$1;$timestamp_only$0 = $timestamp_only$1;$use_fuji_rotate$0 = $use_fuji_rotate$1;$user_black$0 = $user_black$1;$user_flip$0 = $user_flip$1;$user_qual$0 = $user_qual$1;$user_sat$0 = $user_sat$1;$write_to_stdout$0 = $write_to_stdout$1;
   }
   if ((label|0) == 50) {
    $156 = HEAP32[_stderr>>2]|0;
    $157 = $131 << 24 >> 24;
    __THREW__ = 0;
    HEAP32[$vararg_buffer550>>2] = $157;
    (invoke_iiii(60,($156|0),(626856|0),($vararg_buffer550|0))|0);
    $158 = __THREW__; __THREW__ = 0;
    if ((($158|0) != 0) & ((threwValue|0) != 0)) { $159 = _testSetjmp(HEAP32[$158>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($159|0) == 0) { _longjmp($158|0, threwValue|0); } tempRet0 = threwValue; } else { $159 = -1; };
    $160 = tempRet0;
    $cond27 = ($159|0)==(1);
    if ($cond27) {
     $$reg2mem543$0 = $160;$arg$7 = $127;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
     break;
    }
    $$0 = 1;
    _free(_setjmpTable|0);
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 123) {
    $333 = HEAP32[_stderr>>2]|0;
    $334 = $131 << 24 >> 24;
    __THREW__ = 0;
    HEAP32[$vararg_buffer553>>2] = $334;
    (invoke_iiii(60,($333|0),(626896|0),($vararg_buffer553|0))|0);
    $335 = __THREW__; __THREW__ = 0;
    if ((($335|0) != 0) & ((threwValue|0) != 0)) { $336 = _testSetjmp(HEAP32[$335>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($336|0) == 0) { _longjmp($335|0, threwValue|0); } tempRet0 = threwValue; } else { $336 = -1; };
    $337 = tempRet0;
    $cond25 = ($336|0)==(1);
    if ($cond25) {
     $$reg2mem543$0 = $337;$arg$7 = $127;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
     break;
    }
    $$0 = 1;
    _free(_setjmpTable|0);
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 126) {
    $338 = ($arg$0|0)==($argc|0);
    if ($338) {
     $339 = HEAP32[_stderr>>2]|0;
     __THREW__ = 0;
     (invoke_iiii(60,($339|0),(626920|0),($vararg_buffer556|0))|0);
     $340 = __THREW__; __THREW__ = 0;
     if ((($340|0) != 0) & ((threwValue|0) != 0)) { $341 = _testSetjmp(HEAP32[$340>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($341|0) == 0) { _longjmp($340|0, threwValue|0); } tempRet0 = threwValue; } else { $341 = -1; };
     $342 = tempRet0;
     $cond4 = ($341|0)==(1);
     if ($cond4) {
      $$reg2mem543$0 = $342;$arg$7 = $arg$0;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
      break;
     }
     $$0 = 1;
     _free(_setjmpTable|0);
     STACKTOP = sp;return ($$0|0);
    }
    $343 = ($write_to_stdout$0|0)!=(0);
    do {
     if ($343) {
      __THREW__ = 0;
      $344 = (invoke_ii(65,1)|0);
      $345 = __THREW__; __THREW__ = 0;
      if ((($345|0) != 0) & ((threwValue|0) != 0)) { $346 = _testSetjmp(HEAP32[$345>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($346|0) == 0) { _longjmp($345|0, threwValue|0); } tempRet0 = threwValue; } else { $346 = -1; };
      $347 = tempRet0;
      $cond2 = ($346|0)==(1);
      if ($cond2) {
       $$reg2mem543$0 = $347;$arg$7 = $arg$0;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
       break L1;
      }
      $348 = ($344|0)!=(0);
      if (!($348)) {
       break;
      }
      $349 = HEAP32[_stderr>>2]|0;
      __THREW__ = 0;
      (invoke_iiii(60,($349|0),(626944|0),($vararg_buffer558|0))|0);
      $350 = __THREW__; __THREW__ = 0;
      if ((($350|0) != 0) & ((threwValue|0) != 0)) { $351 = _testSetjmp(HEAP32[$350>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($351|0) == 0) { _longjmp($350|0, threwValue|0); } tempRet0 = threwValue; } else { $351 = -1; };
      $352 = tempRet0;
      $cond3 = ($351|0)==(1);
      if ($cond3) {
       $$reg2mem543$0 = $352;$arg$7 = $arg$0;$bpfile$3 = $bpfile$0;$dark_frame$3 = $dark_frame$0;$identify_only$3 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$3 = $thumbnail_only$0;$timestamp_only$3 = $timestamp_only$0;$use_fuji_rotate$3 = $use_fuji_rotate$0;$user_black$3 = $user_black$0;$user_flip$3 = $user_flip$0;$user_qual$3 = $user_qual$0;$user_sat$3 = $user_sat$0;$write_to_stdout$3 = $write_to_stdout$0;
       break L1;
      }
      $$0 = 1;
      _free(_setjmpTable|0);
      STACKTOP = sp;return ($$0|0);
     }
    } while(0);
    $arg$6 = $arg$0;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$read_from_stdin$2 = $read_from_stdin$0;$status$0 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
    label = 136;
    break;
   }
  }
 } while(0);
 L157: while(1) {
  if ((label|0) == 136) {
   label = 0;
   $353 = ($arg$6|0)<($argc|0);
   if (!($353)) {
    break;
   }
   HEAP32[132360>>2] = 0;
   HEAP32[132144>>2] = 0;
   HEAP32[493488>>2] = 0;
   HEAP32[189920>>2] = 0;
   $354 = HEAP32[_stdout>>2]|0;
   HEAP32[134336>>2] = $354;
   _setjmpTable = _saveSetjmp(704,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
   __THREW__ = 0;
   $355 = __THREW__; __THREW__ = 0;
   if ((($355|0) != 0) & ((threwValue|0) != 0)) { $356 = _testSetjmp(HEAP32[$355>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($356|0) == 0) { _longjmp($355|0, threwValue|0); } tempRet0 = threwValue; } else { $356 = -1; };
   $357 = tempRet0;
   $cond1 = ($356|0)==(1);
   if ($cond1) {
    $$reg2mem543$0 = $357;$arg$7 = $arg$6;$bpfile$3 = $bpfile$2;$dark_frame$3 = $dark_frame$2;$identify_only$3 = $identify_only$2;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$2;$status$1 = 1;$thumbnail_only$3 = $thumbnail_only$2;$timestamp_only$3 = $timestamp_only$2;$use_fuji_rotate$3 = $use_fuji_rotate$2;$user_black$3 = $user_black$2;$user_flip$3 = $user_flip$2;$user_qual$3 = $user_qual$2;$user_sat$3 = $user_sat$2;$write_to_stdout$3 = $write_to_stdout$2;
    continue;
   }
   $$reg2mem543$0 = 0;$arg$7 = $arg$6;$bpfile$3 = $bpfile$2;$dark_frame$3 = $dark_frame$2;$identify_only$3 = $identify_only$2;$ofname$0 = 0;$read_from_stdin$3 = $read_from_stdin$2;$status$1 = 1;$thumbnail_only$3 = $thumbnail_only$2;$timestamp_only$3 = $timestamp_only$2;$use_fuji_rotate$3 = $use_fuji_rotate$2;$user_black$3 = $user_black$2;$user_flip$3 = $user_flip$2;$user_qual$3 = $user_qual$2;$user_sat$3 = $user_sat$2;$write_to_stdout$3 = $write_to_stdout$2;
  }
  $358 = ($$reg2mem543$0|0)!=(0);
  L163: do {
   if ($358) {
    $359 = HEAP32[880>>2]|0;
    __THREW__ = 0;
    $360 = (invoke_ii(66,($359|0))|0);
    $361 = __THREW__; __THREW__ = 0;
    if ((($361|0) != 0) & ((threwValue|0) != 0)) { $362 = _testSetjmp(HEAP32[$361>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($362|0) == 0) { _longjmp($361|0, threwValue|0); } tempRet0 = threwValue; } else { $362 = -1; };
    $363 = tempRet0;
    $cond163 = ($362|0)==(1);
    if ($cond163) {
     $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$status$1$phi = $status$1;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $363;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$status$1 = $status$1$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
     continue L157;
    }
    $364 = ($360|0)>(2);
    if ($364) {
     $365 = HEAP32[880>>2]|0;
     __THREW__ = 0;
     (invoke_ii(67,($365|0))|0);
     $366 = __THREW__; __THREW__ = 0;
     if ((($366|0) != 0) & ((threwValue|0) != 0)) { $367 = _testSetjmp(HEAP32[$366>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($367|0) == 0) { _longjmp($366|0, threwValue|0); } tempRet0 = threwValue; } else { $367 = -1; };
     $368 = tempRet0;
     $cond166 = ($367|0)==(1);
     if ($cond166) {
      $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$status$1$phi = $status$1;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $368;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$status$1 = $status$1$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
      continue L157;
     }
    }
    $369 = HEAP32[134336>>2]|0;
    __THREW__ = 0;
    $370 = (invoke_ii(66,($369|0))|0);
    $371 = __THREW__; __THREW__ = 0;
    if ((($371|0) != 0) & ((threwValue|0) != 0)) { $372 = _testSetjmp(HEAP32[$371>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($372|0) == 0) { _longjmp($371|0, threwValue|0); } tempRet0 = threwValue; } else { $372 = -1; };
    $373 = tempRet0;
    $cond164 = ($372|0)==(1);
    if ($cond164) {
     $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$status$1$phi = $status$1;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $373;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$status$1 = $status$1$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
     continue L157;
    }
    $374 = ($370|0)>(2);
    if ($374) {
     $375 = HEAP32[134336>>2]|0;
     __THREW__ = 0;
     (invoke_ii(67,($375|0))|0);
     $376 = __THREW__; __THREW__ = 0;
     if ((($376|0) != 0) & ((threwValue|0) != 0)) { $377 = _testSetjmp(HEAP32[$376>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($377|0) == 0) { _longjmp($376|0, threwValue|0); } tempRet0 = threwValue; } else { $377 = -1; };
     $378 = tempRet0;
     $cond165 = ($377|0)==(1);
     if ($cond165) {
      $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$status$1$phi = $status$1;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $378;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$status$1 = $status$1$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
      continue L157;
     }
    }
    $ofname$1 = $ofname$0;$status$5 = 1;
    label = 480;
   } else {
    $379 = (($argv) + ($arg$7<<2)|0);
    $380 = HEAP32[$379>>2]|0;
    HEAP32[696>>2] = $380;
    $381 = HEAP32[696>>2]|0;
    __THREW__ = 0;
    $382 = (invoke_iii(68,($381|0),(190744|0))|0);
    $383 = __THREW__; __THREW__ = 0;
    if ((($383|0) != 0) & ((threwValue|0) != 0)) { $384 = _testSetjmp(HEAP32[$383>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($384|0) == 0) { _longjmp($383|0, threwValue|0); } tempRet0 = threwValue; } else { $384 = -1; };
    $385 = tempRet0;
    $cond66 = ($384|0)==(1);
    if ($cond66) {
     $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$status$1$phi = $status$1;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $385;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$status$1 = $status$1$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
     continue L157;
    }
    HEAP32[880>>2] = $382;
    $386 = ($382|0)!=(0|0);
    if (!($386)) {
     $387 = HEAP32[696>>2]|0;
     __THREW__ = 0;
     invoke_vi(69,($387|0));
     $388 = __THREW__; __THREW__ = 0;
     if ((($388|0) != 0) & ((threwValue|0) != 0)) { $389 = _testSetjmp(HEAP32[$388>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($389|0) == 0) { _longjmp($388|0, threwValue|0); } tempRet0 = threwValue; } else { $389 = -1; };
     $390 = tempRet0;
     $cond67 = ($389|0)==(1);
     if ($cond67) {
      $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$status$1$phi = $status$1;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $390;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$status$1 = $status$1$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
      continue L157;
     }
     $arg$10 = $arg$7;$status$6 = $status$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(70);
    $391 = __THREW__; __THREW__ = 0;
    if ((($391|0) != 0) & ((threwValue|0) != 0)) { $392 = _testSetjmp(HEAP32[$391>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($392|0) == 0) { _longjmp($391|0, threwValue|0); } tempRet0 = threwValue; } else { $392 = -1; };
    $393 = tempRet0;
    $cond68 = ($392|0)==(1);
    if ($cond68) {
     $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$status$1$phi = $status$1;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $393;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$status$1 = $status$1$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
     continue L157;
    }
    $394 = HEAP32[133760>>2]|0;
    $395 = ($394|0)!=(0);
    $396 = $395 ^ 1;
    $397 = $396&1;
    $398 = ($user_flip$3|0)>=(0);
    if ($398) {
     HEAP32[455352>>2] = $user_flip$3;
    }
    $399 = HEAP32[455352>>2]|0;
    $400 = (($399) + 3600)|0;
    $401 = (($400>>>0) % 360)&-1;
    if ((($401|0) == 90)) {
     HEAP32[455352>>2] = 6;
    } else if ((($401|0) == 180)) {
     HEAP32[455352>>2] = 3;
    } else if ((($401|0) == 270)) {
     HEAP32[455352>>2] = 5;
    }
    $402 = ($timestamp_only$3|0)!=(0);
    L179: do {
     if ($402) {
      $403 = HEAP32[190704>>2]|0;
      $404 = ($403|0)!=(0);
      $405 = $404 ^ 1;
      $406 = $405&1;
      if ($405) {
       $407 = HEAP32[_stderr>>2]|0;
       $408 = HEAP32[696>>2]|0;
       __THREW__ = 0;
       HEAP32[$vararg_buffer560>>2] = $408;
       (invoke_iiii(60,($407|0),(626992|0),($vararg_buffer560|0))|0);
       $409 = __THREW__; __THREW__ = 0;
       if ((($409|0) != 0) & ((threwValue|0) != 0)) { $410 = _testSetjmp(HEAP32[$409>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($410|0) == 0) { _longjmp($409|0, threwValue|0); } tempRet0 = threwValue; } else { $410 = -1; };
       $411 = tempRet0;
       $cond162 = ($410|0)==(1);
       if ($cond162) {
        $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $411;$status$1 = $406;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
        continue L157;
       }
      } else {
       $412 = ($identify_only$3|0)!=(0);
       if ($412) {
        $413 = HEAP32[190704>>2]|0;
        $414 = HEAP32[455336>>2]|0;
        $415 = HEAP32[696>>2]|0;
        __THREW__ = 0;
        HEAP32[$vararg_buffer563>>2] = $413;
        $vararg_ptr566 = (($vararg_buffer563) + 4|0);
        HEAP32[$vararg_ptr566>>2] = $414;
        $vararg_ptr567 = (($vararg_buffer563) + 8|0);
        HEAP32[$vararg_ptr567>>2] = $415;
        (invoke_iii(56,(627016|0),($vararg_buffer563|0))|0);
        $416 = __THREW__; __THREW__ = 0;
        if ((($416|0) != 0) & ((threwValue|0) != 0)) { $417 = _testSetjmp(HEAP32[$416>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($417|0) == 0) { _longjmp($416|0, threwValue|0); } tempRet0 = threwValue; } else { $417 = -1; };
        $418 = tempRet0;
        $cond161 = ($417|0)==(1);
        if ($cond161) {
         $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $418;$status$1 = $406;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
         continue L157;
        }
       } else {
        $419 = HEAP32[168>>2]|0;
        $420 = ($419|0)!=(0);
        if ($420) {
         $421 = HEAP32[_stderr>>2]|0;
         $422 = HEAP32[696>>2]|0;
         $423 = HEAP32[190704>>2]|0;
         __THREW__ = 0;
         HEAP32[$vararg_buffer568>>2] = $422;
         $vararg_ptr571 = (($vararg_buffer568) + 4|0);
         HEAP32[$vararg_ptr571>>2] = $423;
         (invoke_iiii(60,($421|0),(627032|0),($vararg_buffer568|0))|0);
         $424 = __THREW__; __THREW__ = 0;
         if ((($424|0) != 0) & ((threwValue|0) != 0)) { $425 = _testSetjmp(HEAP32[$424>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($425|0) == 0) { _longjmp($424|0, threwValue|0); } tempRet0 = threwValue; } else { $425 = -1; };
         $426 = tempRet0;
         $cond160 = ($425|0)==(1);
         if ($cond160) {
          $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $426;$status$1 = $406;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
          continue L157;
         }
        }
        $427 = HEAP32[190704>>2]|0;
        $428 = (($ut) + 4|0);
        HEAP32[$428>>2] = $427;
        HEAP32[$ut>>2] = $427;
        $429 = HEAP32[696>>2]|0;
        __THREW__ = 0;
        (invoke_iii(71,($429|0),($ut|0))|0);
        $430 = __THREW__; __THREW__ = 0;
        if ((($430|0) != 0) & ((threwValue|0) != 0)) { $431 = _testSetjmp(HEAP32[$430>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($431|0) == 0) { _longjmp($430|0, threwValue|0); } tempRet0 = threwValue; } else { $431 = -1; };
        $432 = tempRet0;
        $cond159 = ($431|0)==(1);
        if ($cond159) {
         $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $432;$status$1 = $406;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
         continue L157;
        }
       }
      }
      $status$3 = $406;
     } else {
      HEAP32[627056>>2] = 72;
      $433 = ($thumbnail_only$3|0)!=(0);
      do {
       if ($433) {
        $434 = HEAP32[454608>>2]|0;
        $435 = ($434|0)!=(0);
        $436 = $435 ^ 1;
        $437 = $436&1;
        if ($436) {
         $438 = HEAP32[_stderr>>2]|0;
         $439 = HEAP32[696>>2]|0;
         __THREW__ = 0;
         HEAP32[$vararg_buffer572>>2] = $439;
         (invoke_iiii(60,($438|0),(627064|0),($vararg_buffer572|0))|0);
         $440 = __THREW__; __THREW__ = 0;
         if ((($440|0) != 0) & ((threwValue|0) != 0)) { $441 = _testSetjmp(HEAP32[$440>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($441|0) == 0) { _longjmp($440|0, threwValue|0); } tempRet0 = threwValue; } else { $441 = -1; };
         $442 = tempRet0;
         $cond158 = ($441|0)==(1);
         if ($cond158) {
          $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $442;$status$1 = $437;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
          continue L157;
         }
         $status$3 = $437;
         break L179;
        }
        $443 = HEAP32[458072>>2]|0;
        $444 = ($443|0)!=(0|0);
        if (!($444)) {
         $449 = HEAP32[880>>2]|0;
         $450 = HEAP32[454608>>2]|0;
         __THREW__ = 0;
         (invoke_iiii(73,($449|0),($450|0),0)|0);
         $451 = __THREW__; __THREW__ = 0;
         if ((($451|0) != 0) & ((threwValue|0) != 0)) { $452 = _testSetjmp(HEAP32[$451>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($452|0) == 0) { _longjmp($451|0, threwValue|0); } tempRet0 = threwValue; } else { $452 = -1; };
         $453 = tempRet0;
         $cond157 = ($452|0)==(1);
         if ($cond157) {
          $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $453;$status$1 = $437;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
          continue L157;
         }
         $454 = HEAP32[458064>>2]|0;
         HEAP32[627056>>2] = $454;
         $status$4 = $437;
         break;
        }
        $445 = HEAP32[458072>>2]|0;
        HEAP32[190504>>2] = $445;
        $446 = HEAP32[454608>>2]|0;
        HEAP32[133816>>2] = $446;
        $447 = HEAP16[134304>>1]|0;
        HEAP16[132112>>1] = $447;
        $448 = HEAP16[134296>>1]|0;
        HEAP16[132120>>1] = $448;
        HEAP32[600>>2] = 0;
        HEAP32[132304>>2] = 3;
        $status$2 = $437;
        label = 184;
       } else {
        $status$2 = $397;
        label = 184;
       }
      } while(0);
      if ((label|0) == 184) {
       label = 0;
       $455 = HEAP32[190504>>2]|0;
       $456 = ($455|0)==(26|0);
       if ($456) {
        $457 = HEAP16[132112>>1]|0;
        $458 = $457&65535;
        $459 = $458 & 1;
        $460 = HEAP16[132112>>1]|0;
        $461 = $460&65535;
        $462 = (($461) + ($459))|0;
        $463 = $462&65535;
        HEAP16[132112>>1] = $463;
        $464 = HEAP16[132120>>1]|0;
        $465 = $464&65535;
        $466 = $465 & 1;
        $467 = HEAP16[132120>>1]|0;
        $468 = $467&65535;
        $469 = (($468) + ($466))|0;
        $470 = $469&65535;
        HEAP16[132120>>1] = $470;
       }
       $471 = ($identify_only$3|0)!=(0);
       if ($471) {
        $472 = HEAP32[168>>2]|0;
        $473 = ($472|0)!=(0);
        if ($473) {
         $474 = HEAP8[134168>>0]|0;
         $475 = $474 << 24 >> 24;
         $476 = ($475|0)!=(0);
         if ($476) {
          $477 = HEAP32[696>>2]|0;
          __THREW__ = 0;
          HEAP32[$vararg_buffer575>>2] = $477;
          (invoke_iii(56,(627088|0),($vararg_buffer575|0))|0);
          $478 = __THREW__; __THREW__ = 0;
          if ((($478|0) != 0) & ((threwValue|0) != 0)) { $479 = _testSetjmp(HEAP32[$478>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($479|0) == 0) { _longjmp($478|0, threwValue|0); } tempRet0 = threwValue; } else { $479 = -1; };
          $480 = tempRet0;
          $cond139 = ($479|0)==(1);
          if ($cond139) {
           $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $480;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
           continue L157;
          }
          __THREW__ = 0;
          $481 = (invoke_ii(74,(190704|0))|0);
          $482 = __THREW__; __THREW__ = 0;
          if ((($482|0) != 0) & ((threwValue|0) != 0)) { $483 = _testSetjmp(HEAP32[$482>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($483|0) == 0) { _longjmp($482|0, threwValue|0); } tempRet0 = threwValue; } else { $483 = -1; };
          $484 = tempRet0;
          $cond140 = ($483|0)==(1);
          if ($cond140) {
           $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $484;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
           continue L157;
          }
          __THREW__ = 0;
          HEAP32[$vararg_buffer578>>2] = $481;
          (invoke_iii(56,(627104|0),($vararg_buffer578|0))|0);
          $485 = __THREW__; __THREW__ = 0;
          if ((($485|0) != 0) & ((threwValue|0) != 0)) { $486 = _testSetjmp(HEAP32[$485>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($486|0) == 0) { _longjmp($485|0, threwValue|0); } tempRet0 = threwValue; } else { $486 = -1; };
          $487 = tempRet0;
          $cond141 = ($486|0)==(1);
          if ($cond141) {
           $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $487;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
           continue L157;
          }
          __THREW__ = 0;
          HEAP32[$vararg_buffer581>>2] = 134168;
          $vararg_ptr584 = (($vararg_buffer581) + 4|0);
          HEAP32[$vararg_ptr584>>2] = 134232;
          (invoke_iii(56,(627120|0),($vararg_buffer581|0))|0);
          $488 = __THREW__; __THREW__ = 0;
          if ((($488|0) != 0) & ((threwValue|0) != 0)) { $489 = _testSetjmp(HEAP32[$488>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($489|0) == 0) { _longjmp($488|0, threwValue|0); } tempRet0 = threwValue; } else { $489 = -1; };
          $490 = tempRet0;
          $cond142 = ($489|0)==(1);
          if ($cond142) {
           $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $490;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
           continue L157;
          }
          $491 = HEAP8[455368>>0]|0;
          $492 = ($491<<24>>24)!=(0);
          if ($492) {
           __THREW__ = 0;
           HEAP32[$vararg_buffer585>>2] = 455368;
           (invoke_iii(56,(627136|0),($vararg_buffer585|0))|0);
           $493 = __THREW__; __THREW__ = 0;
           if ((($493|0) != 0) & ((threwValue|0) != 0)) { $494 = _testSetjmp(HEAP32[$493>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($494|0) == 0) { _longjmp($493|0, threwValue|0); } tempRet0 = threwValue; } else { $494 = -1; };
           $495 = tempRet0;
           $cond156 = ($494|0)==(1);
           if ($cond156) {
            $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $495;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
            continue L157;
           }
          }
          $496 = HEAP32[133104>>2]|0;
          $497 = ($496|0)!=(0);
          if ($497) {
           __THREW__ = 0;
           (invoke_iii(56,(627152|0),($vararg_buffer588|0))|0);
           $498 = __THREW__; __THREW__ = 0;
           if ((($498|0) != 0) & ((threwValue|0) != 0)) { $499 = _testSetjmp(HEAP32[$498>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($499|0) == 0) { _longjmp($498|0, threwValue|0); } tempRet0 = threwValue; } else { $499 = -1; };
           $500 = tempRet0;
           $cond154 = ($499|0)==(1);
           if ($cond154) {
            $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $500;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
            continue L157;
           }
           $i$1 = 24;
           while(1) {
            $501 = ($i$1|0)>=(0);
            if (!($501)) {
             break;
            }
            $502 = HEAP32[133104>>2]|0;
            $503 = $502 >>> $i$1;
            $504 = $503 & 255;
            $505 = ($i$1|0)!=(0);
            $506 = $505 ? 46 : 10;
            __THREW__ = 0;
            HEAP32[$vararg_buffer590>>2] = $504;
            $vararg_ptr593 = (($vararg_buffer590) + 4|0);
            HEAP32[$vararg_ptr593>>2] = $506;
            (invoke_iii(56,(627168|0),($vararg_buffer590|0))|0);
            $507 = __THREW__; __THREW__ = 0;
            if ((($507|0) != 0) & ((threwValue|0) != 0)) { $508 = _testSetjmp(HEAP32[$507>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($508|0) == 0) { _longjmp($507|0, threwValue|0); } tempRet0 = threwValue; } else { $508 = -1; };
            $509 = tempRet0;
            $cond155 = ($508|0)==(1);
            if ($cond155) {
             $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $509;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
             continue L157;
            }
            $510 = (($i$1) - 8)|0;
            $i$1 = $510;
           }
          }
          $511 = +HEAPF32[455312>>2];
          $512 = (~~(($511)));
          __THREW__ = 0;
          HEAP32[$vararg_buffer594>>2] = $512;
          (invoke_iii(56,(627176|0),($vararg_buffer594|0))|0);
          $513 = __THREW__; __THREW__ = 0;
          if ((($513|0) != 0) & ((threwValue|0) != 0)) { $514 = _testSetjmp(HEAP32[$513>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($514|0) == 0) { _longjmp($513|0, threwValue|0); } tempRet0 = threwValue; } else { $514 = -1; };
          $515 = tempRet0;
          $cond143 = ($514|0)==(1);
          if ($cond143) {
           $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $515;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
           continue L157;
          }
          __THREW__ = 0;
          (invoke_iii(56,(627192|0),($vararg_buffer597|0))|0);
          $516 = __THREW__; __THREW__ = 0;
          if ((($516|0) != 0) & ((threwValue|0) != 0)) { $517 = _testSetjmp(HEAP32[$516>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($517|0) == 0) { _longjmp($516|0, threwValue|0); } tempRet0 = threwValue; } else { $517 = -1; };
          $518 = tempRet0;
          $cond144 = ($517|0)==(1);
          if ($cond144) {
           $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $518;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
           continue L157;
          }
          $519 = +HEAPF32[455328>>2];
          $520 = $519 > 0.0;
          do {
           if ($520) {
            $521 = +HEAPF32[455328>>2];
            $522 = $521 < 1.0;
            if (!($522)) {
             break;
            }
            __THREW__ = 0;
            (invoke_iii(56,(627208|0),($vararg_buffer599|0))|0);
            $523 = __THREW__; __THREW__ = 0;
            if ((($523|0) != 0) & ((threwValue|0) != 0)) { $524 = _testSetjmp(HEAP32[$523>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($524|0) == 0) { _longjmp($523|0, threwValue|0); } tempRet0 = threwValue; } else { $524 = -1; };
            $525 = tempRet0;
            $cond153 = ($524|0)==(1);
            if ($cond153) {
             $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $525;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
             continue L157;
            }
            $526 = +HEAPF32[455328>>2];
            $527 = 1.0 / $526;
            HEAPF32[455328>>2] = $527;
           }
          } while(0);
          $528 = +HEAPF32[455328>>2];
          $529 = $528;
          __THREW__ = 0;
          HEAPF64[tempDoublePtr>>3]=$529;HEAP32[$vararg_buffer601>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer601+4>>2]=HEAP32[tempDoublePtr+4>>2];
          (invoke_iii(56,(627216|0),($vararg_buffer601|0))|0);
          $530 = __THREW__; __THREW__ = 0;
          if ((($530|0) != 0) & ((threwValue|0) != 0)) { $531 = _testSetjmp(HEAP32[$530>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($531|0) == 0) { _longjmp($530|0, threwValue|0); } tempRet0 = threwValue; } else { $531 = -1; };
          $532 = tempRet0;
          $cond145 = ($531|0)==(1);
          if ($cond145) {
           $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $532;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
           continue L157;
          }
          $533 = +HEAPF32[455320>>2];
          $534 = $533;
          __THREW__ = 0;
          HEAPF64[tempDoublePtr>>3]=$534;HEAP32[$vararg_buffer604>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer604+4>>2]=HEAP32[tempDoublePtr+4>>2];
          (invoke_iii(56,(627232|0),($vararg_buffer604|0))|0);
          $535 = __THREW__; __THREW__ = 0;
          if ((($535|0) != 0) & ((threwValue|0) != 0)) { $536 = _testSetjmp(HEAP32[$535>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($536|0) == 0) { _longjmp($535|0, threwValue|0); } tempRet0 = threwValue; } else { $536 = -1; };
          $537 = tempRet0;
          $cond146 = ($536|0)==(1);
          if ($cond146) {
           $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $537;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
           continue L157;
          }
          $538 = +HEAPF32[456080>>2];
          $539 = $538;
          __THREW__ = 0;
          HEAPF64[tempDoublePtr>>3]=$539;HEAP32[$vararg_buffer607>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer607+4>>2]=HEAP32[tempDoublePtr+4>>2];
          (invoke_iii(56,(627256|0),($vararg_buffer607|0))|0);
          $540 = __THREW__; __THREW__ = 0;
          if ((($540|0) != 0) & ((threwValue|0) != 0)) { $541 = _testSetjmp(HEAP32[$540>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($541|0) == 0) { _longjmp($540|0, threwValue|0); } tempRet0 = threwValue; } else { $541 = -1; };
          $542 = tempRet0;
          $cond147 = ($541|0)==(1);
          if ($cond147) {
           $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $542;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
           continue L157;
          }
          $543 = HEAP32[456872>>2]|0;
          $544 = ($543|0)!=(0);
          $545 = $544 ? 627312 : 627320;
          __THREW__ = 0;
          HEAP32[$vararg_buffer610>>2] = $545;
          (invoke_iii(56,(627280|0),($vararg_buffer610|0))|0);
          $546 = __THREW__; __THREW__ = 0;
          if ((($546|0) != 0) & ((threwValue|0) != 0)) { $547 = _testSetjmp(HEAP32[$546>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($547|0) == 0) { _longjmp($546|0, threwValue|0); } tempRet0 = threwValue; } else { $547 = -1; };
          $548 = tempRet0;
          $cond148 = ($547|0)==(1);
          if ($cond148) {
           $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $548;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
           continue L157;
          }
          $549 = HEAP32[133760>>2]|0;
          __THREW__ = 0;
          HEAP32[$vararg_buffer613>>2] = $549;
          (invoke_iii(56,(627328|0),($vararg_buffer613|0))|0);
          $550 = __THREW__; __THREW__ = 0;
          if ((($550|0) != 0) & ((threwValue|0) != 0)) { $551 = _testSetjmp(HEAP32[$550>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($551|0) == 0) { _longjmp($550|0, threwValue|0); } tempRet0 = threwValue; } else { $551 = -1; };
          $552 = tempRet0;
          $cond149 = ($551|0)==(1);
          if ($cond149) {
           $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $552;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
           continue L157;
          }
          $553 = +HEAPF64[458024>>3];
          $554 = $553 != 1.0;
          if ($554) {
           $555 = +HEAPF64[458024>>3];
           __THREW__ = 0;
           HEAPF64[tempDoublePtr>>3]=$555;HEAP32[$vararg_buffer616>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer616+4>>2]=HEAP32[tempDoublePtr+4>>2];
           (invoke_iii(56,(627360|0),($vararg_buffer616|0))|0);
           $556 = __THREW__; __THREW__ = 0;
           if ((($556|0) != 0) & ((threwValue|0) != 0)) { $557 = _testSetjmp(HEAP32[$556>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($557|0) == 0) { _longjmp($556|0, threwValue|0); } tempRet0 = threwValue; } else { $557 = -1; };
           $558 = tempRet0;
           $cond152 = ($557|0)==(1);
           if ($cond152) {
            $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $558;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
            continue L157;
           }
          }
          $559 = HEAP32[454608>>2]|0;
          $560 = ($559|0)!=(0);
          if ($560) {
           $561 = HEAP16[134296>>1]|0;
           $562 = $561&65535;
           $563 = HEAP16[134304>>1]|0;
           $564 = $563&65535;
           __THREW__ = 0;
           HEAP32[$vararg_buffer619>>2] = $562;
           $vararg_ptr622 = (($vararg_buffer619) + 4|0);
           HEAP32[$vararg_ptr622>>2] = $564;
           (invoke_iii(56,(627392|0),($vararg_buffer619|0))|0);
           $565 = __THREW__; __THREW__ = 0;
           if ((($565|0) != 0) & ((threwValue|0) != 0)) { $566 = _testSetjmp(HEAP32[$565>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($566|0) == 0) { _longjmp($565|0, threwValue|0); } tempRet0 = threwValue; } else { $566 = -1; };
           $567 = tempRet0;
           $cond151 = ($566|0)==(1);
           if ($cond151) {
            $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $567;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
            continue L157;
           }
          }
          $568 = HEAP16[132368>>1]|0;
          $569 = $568&65535;
          $570 = HEAP16[133096>>1]|0;
          $571 = $570&65535;
          __THREW__ = 0;
          HEAP32[$vararg_buffer623>>2] = $569;
          $vararg_ptr626 = (($vararg_buffer623) + 4|0);
          HEAP32[$vararg_ptr626>>2] = $571;
          (invoke_iii(56,(627416|0),($vararg_buffer623|0))|0);
          $572 = __THREW__; __THREW__ = 0;
          if ((($572|0) != 0) & ((threwValue|0) != 0)) { $573 = _testSetjmp(HEAP32[$572>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($573|0) == 0) { _longjmp($572|0, threwValue|0); } tempRet0 = threwValue; } else { $573 = -1; };
          $574 = tempRet0;
          $cond150 = ($573|0)==(1);
          if ($cond150) {
           $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $574;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
           continue L157;
          }
         } else {
          label = 223;
         }
        } else {
         label = 223;
        }
       } else {
        label = 223;
       }
       if ((label|0) == 223) {
        label = 0;
        $575 = HEAP32[133760>>2]|0;
        $576 = ($575|0)!=(0);
        if (!($576)) {
         $577 = HEAP32[_stderr>>2]|0;
         $578 = HEAP32[696>>2]|0;
         __THREW__ = 0;
         HEAP32[$vararg_buffer627>>2] = $578;
         (invoke_iiii(60,($577|0),(627440|0),($vararg_buffer627|0))|0);
         $579 = __THREW__; __THREW__ = 0;
         if ((($579|0) != 0) & ((threwValue|0) != 0)) { $580 = _testSetjmp(HEAP32[$579>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($580|0) == 0) { _longjmp($579|0, threwValue|0); } tempRet0 = threwValue; } else { $580 = -1; };
         $581 = tempRet0;
         $cond69 = ($580|0)==(1);
         if ($cond69) {
          $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $581;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
          continue L157;
         }
        }
       }
       $582 = HEAP32[133760>>2]|0;
       $583 = ($582|0)!=(0);
       if (!($583)) {
        $status$3 = $status$2;
        break;
       }
       $584 = HEAP32[600>>2]|0;
       $585 = ($584|0)!=(0);
       if ($585) {
        $586 = HEAP32[136>>2]|0;
        $587 = ($586|0)!=(0);
        if ($587) {
         $$reg2mem537$0 = 1;
        } else {
         $588 = ($identify_only$3|0)!=(0);
         if ($588) {
          $$reg2mem539$0 = 0;
         } else {
          $589 = +HEAPF32[128>>2];
          $590 = $589 != 0.0;
          do {
           if ($590) {
            $$reg2mem541$0 = 1;
           } else {
            $591 = +HEAPF64[24>>3];
            $592 = $591 != 1.0;
            if ($592) {
             $$reg2mem541$0 = 1;
             break;
            }
            $593 = +HEAPF64[((24 + 16|0))>>3];
            $594 = $593 != 1.0;
            $$reg2mem541$0 = $594;
           }
          } while(0);
          $$reg2mem539$0 = $$reg2mem541$0;
         }
         $$reg2mem537$0 = $$reg2mem539$0;
        }
        $$reg2mem535$0 = $$reg2mem537$0;
       } else {
        $$reg2mem535$0 = 0;
       }
       $595 = $$reg2mem535$0&1;
       $596 = $595&65535;
       HEAP16[132128>>1] = $596;
       $597 = HEAP16[132112>>1]|0;
       $598 = $597&65535;
       $599 = HEAP16[132128>>1]|0;
       $600 = $599&65535;
       $601 = (($598) + ($600))|0;
       $602 = HEAP16[132128>>1]|0;
       $603 = $602&65535;
       $604 = $601 >> $603;
       $605 = $604&65535;
       HEAP16[190888>>1] = $605;
       $606 = HEAP16[132120>>1]|0;
       $607 = $606&65535;
       $608 = HEAP16[132128>>1]|0;
       $609 = $608&65535;
       $610 = (($607) + ($609))|0;
       $611 = HEAP16[132128>>1]|0;
       $612 = $611&65535;
       $613 = $610 >> $612;
       $614 = $613&65535;
       HEAP16[132136>>1] = $614;
       $615 = ($identify_only$3|0)!=(0);
       if ($615) {
        $616 = HEAP32[168>>2]|0;
        $617 = ($616|0)!=(0);
        if ($617) {
         $618 = HEAP32[152>>2]|0;
         $619 = ($618|0)==(3);
         if ($619) {
          HEAP16[190512>>1] = 0;
          HEAP16[608>>1] = 0;
          HEAP16[616>>1] = 0;
          $620 = HEAP16[133096>>1]|0;
          HEAP16[132112>>1] = $620;
          $621 = HEAP16[132368>>1]|0;
          HEAP16[132120>>1] = $621;
         }
         $622 = HEAP16[132112>>1]|0;
         $623 = $622&65535;
         $624 = HEAP16[132128>>1]|0;
         $625 = $624&65535;
         $626 = (($623) + ($625))|0;
         $627 = HEAP16[132128>>1]|0;
         $628 = $627&65535;
         $629 = $626 >> $628;
         $630 = $629&65535;
         HEAP16[190888>>1] = $630;
         $631 = HEAP16[132120>>1]|0;
         $632 = $631&65535;
         $633 = HEAP16[132128>>1]|0;
         $634 = $633&65535;
         $635 = (($632) + ($634))|0;
         $636 = HEAP16[132128>>1]|0;
         $637 = $636&65535;
         $638 = $635 >> $637;
         $639 = $638&65535;
         HEAP16[132136>>1] = $639;
         $640 = ($use_fuji_rotate$3|0)!=(0);
         if ($640) {
          $641 = HEAP16[190512>>1]|0;
          $642 = ($641<<16>>16)!=(0);
          if ($642) {
           $643 = HEAP16[190512>>1]|0;
           $644 = $643&65535;
           $645 = (($644) - 1)|0;
           $646 = HEAP16[132128>>1]|0;
           $647 = $646&65535;
           $648 = (($645) + ($647))|0;
           $649 = HEAP16[132128>>1]|0;
           $650 = $649&65535;
           $651 = $648 >> $650;
           $652 = $651&65535;
           HEAP16[190512>>1] = $652;
           $653 = HEAP16[190512>>1]|0;
           $654 = $653&65535;
           $655 = (+($654|0));
           __THREW__ = 0;
           $656 = (+invoke_dd(75,0.5));
           $657 = __THREW__; __THREW__ = 0;
           if ((($657|0) != 0) & ((threwValue|0) != 0)) { $658 = _testSetjmp(HEAP32[$657>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($658|0) == 0) { _longjmp($657|0, threwValue|0); } tempRet0 = threwValue; } else { $658 = -1; };
           $659 = tempRet0;
           $cond137 = ($658|0)==(1);
           if ($cond137) {
            $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $659;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
            continue L157;
           }
           $660 = $655 / $656;
           $661 = (~~(($660))&65535);
           HEAP16[132136>>1] = $661;
           $662 = HEAP16[190888>>1]|0;
           $663 = $662&65535;
           $664 = HEAP16[190512>>1]|0;
           $665 = $664&65535;
           $666 = (($663) - ($665))|0;
           $667 = (+($666|0));
           __THREW__ = 0;
           $668 = (+invoke_dd(75,0.5));
           $669 = __THREW__; __THREW__ = 0;
           if ((($669|0) != 0) & ((threwValue|0) != 0)) { $670 = _testSetjmp(HEAP32[$669>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($670|0) == 0) { _longjmp($669|0, threwValue|0); } tempRet0 = threwValue; } else { $670 = -1; };
           $671 = tempRet0;
           $cond138 = ($670|0)==(1);
           if ($cond138) {
            $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $671;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
            continue L157;
           }
           $672 = $667 / $668;
           $673 = (~~(($672))&65535);
           HEAP16[190888>>1] = $673;
          } else {
           $674 = +HEAPF64[458024>>3];
           $675 = $674 < 1.0;
           if ($675) {
            $676 = HEAP16[190888>>1]|0;
            $677 = $676&65535;
            $678 = (+($677|0));
            $679 = +HEAPF64[458024>>3];
            $680 = $678 / $679;
            $681 = $680 + 0.5;
            $682 = (~~(($681))&65535);
            HEAP16[190888>>1] = $682;
           }
           $683 = +HEAPF64[458024>>3];
           $684 = $683 > 1.0;
           if ($684) {
            $685 = HEAP16[132136>>1]|0;
            $686 = $685&65535;
            $687 = (+($686|0));
            $688 = +HEAPF64[458024>>3];
            $689 = $687 * $688;
            $690 = $689 + 0.5;
            $691 = (~~(($690))&65535);
            HEAP16[132136>>1] = $691;
           }
          }
         }
         $692 = HEAP32[455352>>2]|0;
         $693 = $692 & 4;
         $694 = ($693|0)!=(0);
         if ($694) {
          $695 = HEAP16[190888>>1]|0;
          $696 = $695&65535;
          $697 = HEAP16[132136>>1]|0;
          $698 = $697&65535;
          $699 = (($696) + ($698))|0;
          $700 = $699&65535;
          HEAP16[190888>>1] = $700;
          $701 = HEAP16[190888>>1]|0;
          $702 = $701&65535;
          $703 = HEAP16[132136>>1]|0;
          $704 = $703&65535;
          $705 = (($702) - ($704))|0;
          $706 = $705&65535;
          HEAP16[132136>>1] = $706;
          $707 = HEAP16[190888>>1]|0;
          $708 = $707&65535;
          $709 = HEAP16[132136>>1]|0;
          $710 = $709&65535;
          $711 = (($708) - ($710))|0;
          $712 = $711&65535;
          HEAP16[190888>>1] = $712;
         }
         $713 = HEAP16[132120>>1]|0;
         $714 = $713&65535;
         $715 = HEAP16[132112>>1]|0;
         $716 = $715&65535;
         __THREW__ = 0;
         HEAP32[$vararg_buffer630>>2] = $714;
         $vararg_ptr633 = (($vararg_buffer630) + 4|0);
         HEAP32[$vararg_ptr633>>2] = $716;
         (invoke_iii(56,(627464|0),($vararg_buffer630|0))|0);
         $717 = __THREW__; __THREW__ = 0;
         if ((($717|0) != 0) & ((threwValue|0) != 0)) { $718 = _testSetjmp(HEAP32[$717>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($718|0) == 0) { _longjmp($717|0, threwValue|0); } tempRet0 = threwValue; } else { $718 = -1; };
         $719 = tempRet0;
         $cond125 = ($718|0)==(1);
         if ($cond125) {
          $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $719;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
          continue L157;
         }
         $720 = HEAP16[132136>>1]|0;
         $721 = $720&65535;
         $722 = HEAP16[190888>>1]|0;
         $723 = $722&65535;
         __THREW__ = 0;
         HEAP32[$vararg_buffer634>>2] = $721;
         $vararg_ptr637 = (($vararg_buffer634) + 4|0);
         HEAP32[$vararg_ptr637>>2] = $723;
         (invoke_iii(56,(627488|0),($vararg_buffer634|0))|0);
         $724 = __THREW__; __THREW__ = 0;
         if ((($724|0) != 0) & ((threwValue|0) != 0)) { $725 = _testSetjmp(HEAP32[$724>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($725|0) == 0) { _longjmp($724|0, threwValue|0); } tempRet0 = threwValue; } else { $725 = -1; };
         $726 = tempRet0;
         $cond126 = ($725|0)==(1);
         if ($cond126) {
          $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $726;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
          continue L157;
         }
         $727 = HEAP32[132304>>2]|0;
         __THREW__ = 0;
         HEAP32[$vararg_buffer638>>2] = $727;
         (invoke_iii(56,(627512|0),($vararg_buffer638|0))|0);
         $728 = __THREW__; __THREW__ = 0;
         if ((($728|0) != 0) & ((threwValue|0) != 0)) { $729 = _testSetjmp(HEAP32[$728>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($729|0) == 0) { _longjmp($728|0, threwValue|0); } tempRet0 = threwValue; } else { $729 = -1; };
         $730 = tempRet0;
         $cond127 = ($729|0)==(1);
         if ($cond127) {
          $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $730;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
          continue L157;
         }
         $731 = HEAP32[600>>2]|0;
         $732 = ($731|0)!=(0);
         if ($732) {
          $733 = HEAP32[600>>2]|0;
          $734 = HEAP32[600>>2]|0;
          $735 = $734 >>> 8;
          $736 = $733 ^ $735;
          $737 = $736 & 255;
          $738 = ($737|0)!=(0);
          if ($738) {
           $fhigh$0 = 4;
          } else {
           $fhigh$0 = 2;
          }
          $739 = HEAP32[600>>2]|0;
          $740 = HEAP32[600>>2]|0;
          $741 = $740 >>> 16;
          $742 = $739 ^ $741;
          $743 = $742 & 65535;
          $744 = ($743|0)!=(0);
          if ($744) {
           $fhigh$1 = 8;
          } else {
           $fhigh$1 = $fhigh$0;
          }
          $745 = HEAP32[600>>2]|0;
          $746 = ($745|0)==(1);
          if ($746) {
           $fhigh$2 = 16;$fwide$0 = 16;
          } else {
           $fhigh$2 = $fhigh$1;$fwide$0 = 2;
          }
          $747 = HEAP32[600>>2]|0;
          $748 = ($747|0)==(9);
          if ($748) {
           $fhigh$3 = 6;$fwide$1 = 6;
          } else {
           $fhigh$3 = $fhigh$2;$fwide$1 = $fwide$0;
          }
          __THREW__ = 0;
          (invoke_iii(56,(627528|0),($vararg_buffer641|0))|0);
          $749 = __THREW__; __THREW__ = 0;
          if ((($749|0) != 0) & ((threwValue|0) != 0)) { $750 = _testSetjmp(HEAP32[$749>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($750|0) == 0) { _longjmp($749|0, threwValue|0); } tempRet0 = threwValue; } else { $750 = -1; };
          $751 = tempRet0;
          $cond133 = ($750|0)==(1);
          if ($cond133) {
           $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $751;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
           continue L157;
          }
          $i$2 = 0;
          while(1) {
           $752 = ($i$2|0)<($fhigh$3|0);
           if (!($752)) {
            break;
           }
           $753 = ($i$2|0)!=(0);
           do {
            if ($753) {
             __THREW__ = 0;
             $754 = (invoke_ii(76,47)|0);
             $755 = __THREW__; __THREW__ = 0;
             if ((($755|0) != 0) & ((threwValue|0) != 0)) { $756 = _testSetjmp(HEAP32[$755>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($756|0) == 0) { _longjmp($755|0, threwValue|0); } tempRet0 = threwValue; } else { $756 = -1; };
             $757 = tempRet0;
             $cond136 = ($756|0)==(1);
             if ($cond136) {
              $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $757;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
              continue L157;
             }
             $758 = ($754|0)!=(0);
             if (!($758)) {
              break;
             }
            }
           } while(0);
           $759 = 0;
           $c$2 = $759;
           while(1) {
            $760 = ($c$2|0)<($fwide$1|0);
            if (!($760)) {
             break;
            }
            __THREW__ = 0;
            $761 = (invoke_iii(77,($i$2|0),($c$2|0))|0);
            $762 = __THREW__; __THREW__ = 0;
            if ((($762|0) != 0) & ((threwValue|0) != 0)) { $763 = _testSetjmp(HEAP32[$762>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($763|0) == 0) { _longjmp($762|0, threwValue|0); } tempRet0 = threwValue; } else { $763 = -1; };
            $764 = tempRet0;
            $cond134 = ($763|0)==(1);
            if ($cond134) {
             $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $764;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
             continue L157;
            }
            $765 = (458016 + ($761)|0);
            $766 = HEAP8[$765>>0]|0;
            $767 = $766 << 24 >> 24;
            __THREW__ = 0;
            (invoke_ii(76,($767|0))|0);
            $768 = __THREW__; __THREW__ = 0;
            if ((($768|0) != 0) & ((threwValue|0) != 0)) { $769 = _testSetjmp(HEAP32[$768>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($769|0) == 0) { _longjmp($768|0, threwValue|0); } tempRet0 = threwValue; } else { $769 = -1; };
            $770 = tempRet0;
            $cond135 = ($769|0)==(1);
            if ($cond135) {
             $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $770;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
             continue L157;
            }
            $771 = (($c$2) + 1)|0;
            $c$2 = $771;
           }
           $772 = (($i$2) + 1)|0;
           $i$2 = $772;
          }
         }
         __THREW__ = 0;
         (invoke_iii(56,(627552|0),($vararg_buffer643|0))|0);
         $773 = __THREW__; __THREW__ = 0;
         if ((($773|0) != 0) & ((threwValue|0) != 0)) { $774 = _testSetjmp(HEAP32[$773>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($774|0) == 0) { _longjmp($773|0, threwValue|0); } tempRet0 = threwValue; } else { $774 = -1; };
         $775 = tempRet0;
         $cond128 = ($774|0)==(1);
         if ($cond128) {
          $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $775;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
          continue L157;
         }
         $c$3 = 0;
         while(1) {
          $776 = HEAP32[132304>>2]|0;
          $777 = ($c$3>>>0)<($776>>>0);
          if (!($777)) {
           break;
          }
          $778 = (132080 + ($c$3<<2)|0);
          $779 = +HEAPF32[$778>>2];
          $780 = $779;
          __THREW__ = 0;
          HEAPF64[tempDoublePtr>>3]=$780;HEAP32[$vararg_buffer645>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer645+4>>2]=HEAP32[tempDoublePtr+4>>2];
          (invoke_iii(56,(191152|0),($vararg_buffer645|0))|0);
          $781 = __THREW__; __THREW__ = 0;
          if ((($781|0) != 0) & ((threwValue|0) != 0)) { $782 = _testSetjmp(HEAP32[$781>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($782|0) == 0) { _longjmp($781|0, threwValue|0); } tempRet0 = threwValue; } else { $782 = -1; };
          $783 = tempRet0;
          $cond132 = ($782|0)==(1);
          if ($cond132) {
           $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $783;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
           continue L157;
          }
          $784 = (($c$3) + 1)|0;
          $c$3 = $784;
         }
         $785 = +HEAPF32[134016>>2];
         $786 = $785 > 0.0;
         if ($786) {
          __THREW__ = 0;
          (invoke_iii(56,(627576|0),($vararg_buffer648|0))|0);
          $787 = __THREW__; __THREW__ = 0;
          if ((($787|0) != 0) & ((threwValue|0) != 0)) { $788 = _testSetjmp(HEAP32[$787>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($788|0) == 0) { _longjmp($787|0, threwValue|0); } tempRet0 = threwValue; } else { $788 = -1; };
          $789 = tempRet0;
          $cond130 = ($788|0)==(1);
          if ($cond130) {
           $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $789;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
           continue L157;
          }
          $c$4 = 0;
          while(1) {
           $790 = ($c$4|0)<(4);
           if (!($790)) {
            break;
           }
           $791 = (134016 + ($c$4<<2)|0);
           $792 = +HEAPF32[$791>>2];
           $793 = $792;
           __THREW__ = 0;
           HEAPF64[tempDoublePtr>>3]=$793;HEAP32[$vararg_buffer650>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer650+4>>2]=HEAP32[tempDoublePtr+4>>2];
           (invoke_iii(56,(191152|0),($vararg_buffer650|0))|0);
           $794 = __THREW__; __THREW__ = 0;
           if ((($794|0) != 0) & ((threwValue|0) != 0)) { $795 = _testSetjmp(HEAP32[$794>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($795|0) == 0) { _longjmp($794|0, threwValue|0); } tempRet0 = threwValue; } else { $795 = -1; };
           $796 = tempRet0;
           $cond131 = ($795|0)==(1);
           if ($cond131) {
            $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $796;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
            continue L157;
           }
           $797 = (($c$4) + 1)|0;
           $c$4 = $797;
          }
         }
         __THREW__ = 0;
         (invoke_ii(76,10)|0);
         $798 = __THREW__; __THREW__ = 0;
         if ((($798|0) != 0) & ((threwValue|0) != 0)) { $799 = _testSetjmp(HEAP32[$798>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($799|0) == 0) { _longjmp($798|0, threwValue|0); } tempRet0 = threwValue; } else { $799 = -1; };
         $800 = tempRet0;
         $cond129 = ($799|0)==(1);
         if ($cond129) {
          $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $800;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
          continue L157;
         }
        } else {
         $801 = HEAP32[696>>2]|0;
         __THREW__ = 0;
         HEAP32[$vararg_buffer653>>2] = $801;
         $vararg_ptr656 = (($vararg_buffer653) + 4|0);
         HEAP32[$vararg_ptr656>>2] = 134168;
         $vararg_ptr657 = (($vararg_buffer653) + 8|0);
         HEAP32[$vararg_ptr657>>2] = 134232;
         (invoke_iii(56,(627600|0),($vararg_buffer653|0))|0);
         $802 = __THREW__; __THREW__ = 0;
         if ((($802|0) != 0) & ((threwValue|0) != 0)) { $803 = _testSetjmp(HEAP32[$802>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($803|0) == 0) { _longjmp($802|0, threwValue|0); } tempRet0 = threwValue; } else { $803 = -1; };
         $804 = tempRet0;
         $cond124 = ($803|0)==(1);
         if ($cond124) {
          $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $804;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
          continue L157;
         }
        }
        $status$3 = $status$2;
        break;
       }
       $809 = HEAP32[134488>>2]|0;
       $810 = ($809|0)!=(0);
       if ($810) {
        $811 = HEAP32[134488>>2]|0;
        __THREW__ = 0;
        $812 = (invoke_ii(78,($811|0))|0);
        $813 = __THREW__; __THREW__ = 0;
        if ((($813|0) != 0) & ((threwValue|0) != 0)) { $814 = _testSetjmp(HEAP32[$813>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($814|0) == 0) { _longjmp($813|0, threwValue|0); } tempRet0 = threwValue; } else { $814 = -1; };
        $815 = tempRet0;
        $cond122 = ($814|0)==(1);
        if ($cond122) {
         $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $815;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
         continue L157;
        }
        HEAP32[189920>>2] = $812;
        $816 = HEAP32[189920>>2]|0;
        __THREW__ = 0;
        invoke_vii(79,($816|0),(627624|0));
        $817 = __THREW__; __THREW__ = 0;
        if ((($817|0) != 0) & ((threwValue|0) != 0)) { $818 = _testSetjmp(HEAP32[$817>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($818|0) == 0) { _longjmp($817|0, threwValue|0); } tempRet0 = threwValue; } else { $818 = -1; };
        $819 = tempRet0;
        $cond123 = ($818|0)==(1);
        if ($cond123) {
         $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $819;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
         continue L157;
        }
       }
       $820 = HEAP32[600>>2]|0;
       $821 = ($820|0)!=(0);
       do {
        if ($821) {
         label = 310;
        } else {
         $822 = HEAP32[132304>>2]|0;
         $823 = ($822|0)==(1);
         if ($823) {
          label = 310;
          break;
         }
         $838 = HEAP16[190888>>1]|0;
         $839 = $838&65535;
         $840 = HEAP16[132136>>1]|0;
         $841 = $840&65535;
         $842 = $841<<3;
         __THREW__ = 0;
         $843 = (invoke_iii(80,($839|0),($842|0))|0);
         $844 = __THREW__; __THREW__ = 0;
         if ((($844|0) != 0) & ((threwValue|0) != 0)) { $845 = _testSetjmp(HEAP32[$844>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($845|0) == 0) { _longjmp($844|0, threwValue|0); } tempRet0 = threwValue; } else { $845 = -1; };
         $846 = tempRet0;
         $cond71 = ($845|0)==(1);
         if ($cond71) {
          $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $846;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
          continue L157;
         }
         HEAP32[132144>>2] = $843;
         $847 = HEAP32[132144>>2]|0;
         __THREW__ = 0;
         invoke_vii(79,($847|0),(627624|0));
         $848 = __THREW__; __THREW__ = 0;
         if ((($848|0) != 0) & ((threwValue|0) != 0)) { $849 = _testSetjmp(HEAP32[$848>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($849|0) == 0) { _longjmp($848|0, threwValue|0); } tempRet0 = threwValue; } else { $849 = -1; };
         $850 = tempRet0;
         $cond72 = ($849|0)==(1);
         if ($cond72) {
          $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $850;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
          continue L157;
         }
        }
       } while(0);
       if ((label|0) == 310) {
        label = 0;
        $824 = HEAP16[133096>>1]|0;
        $825 = $824&65535;
        $826 = (($825) + 7)|0;
        $827 = HEAP16[132368>>1]|0;
        $828 = $827&65535;
        $829 = $828<<1;
        __THREW__ = 0;
        $830 = (invoke_iii(80,($826|0),($829|0))|0);
        $831 = __THREW__; __THREW__ = 0;
        if ((($831|0) != 0) & ((threwValue|0) != 0)) { $832 = _testSetjmp(HEAP32[$831>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($832|0) == 0) { _longjmp($831|0, threwValue|0); } tempRet0 = threwValue; } else { $832 = -1; };
        $833 = tempRet0;
        $cond120 = ($832|0)==(1);
        if ($cond120) {
         $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $833;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
         continue L157;
        }
        HEAP32[132360>>2] = $830;
        $834 = HEAP32[132360>>2]|0;
        __THREW__ = 0;
        invoke_vii(79,($834|0),(627624|0));
        $835 = __THREW__; __THREW__ = 0;
        if ((($835|0) != 0) & ((threwValue|0) != 0)) { $836 = _testSetjmp(HEAP32[$835>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($836|0) == 0) { _longjmp($835|0, threwValue|0); } tempRet0 = threwValue; } else { $836 = -1; };
        $837 = tempRet0;
        $cond121 = ($836|0)==(1);
        if ($cond121) {
         $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $837;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
         continue L157;
        }
       }
       $851 = HEAP32[168>>2]|0;
       $852 = ($851|0)!=(0);
       if ($852) {
        $853 = HEAP32[_stderr>>2]|0;
        $854 = HEAP32[696>>2]|0;
        __THREW__ = 0;
        HEAP32[$vararg_buffer658>>2] = 134168;
        $vararg_ptr661 = (($vararg_buffer658) + 4|0);
        HEAP32[$vararg_ptr661>>2] = 134232;
        $vararg_ptr662 = (($vararg_buffer658) + 8|0);
        HEAP32[$vararg_ptr662>>2] = $854;
        (invoke_iiii(60,($853|0),(627632|0),($vararg_buffer658|0))|0);
        $855 = __THREW__; __THREW__ = 0;
        if ((($855|0) != 0) & ((threwValue|0) != 0)) { $856 = _testSetjmp(HEAP32[$855>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($856|0) == 0) { _longjmp($855|0, threwValue|0); } tempRet0 = threwValue; } else { $856 = -1; };
        $857 = tempRet0;
        $cond119 = ($856|0)==(1);
        if ($cond119) {
         $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $857;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
         continue L157;
        }
       }
       $858 = HEAP32[8>>2]|0;
       $859 = HEAP32[133760>>2]|0;
       $860 = ($858>>>0)>=($859>>>0);
       if ($860) {
        $861 = HEAP32[_stderr>>2]|0;
        $862 = HEAP32[696>>2]|0;
        $863 = HEAP32[8>>2]|0;
        __THREW__ = 0;
        HEAP32[$vararg_buffer663>>2] = $862;
        $vararg_ptr666 = (($vararg_buffer663) + 4|0);
        HEAP32[$vararg_ptr666>>2] = $863;
        (invoke_iiii(60,($861|0),(627672|0),($vararg_buffer663|0))|0);
        $864 = __THREW__; __THREW__ = 0;
        if ((($864|0) != 0) & ((threwValue|0) != 0)) { $865 = _testSetjmp(HEAP32[$864>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($865|0) == 0) { _longjmp($864|0, threwValue|0); } tempRet0 = threwValue; } else { $865 = -1; };
        $866 = tempRet0;
        $cond118 = ($865|0)==(1);
        if ($cond118) {
         $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $866;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
         continue L157;
        }
       }
       $867 = HEAP32[880>>2]|0;
       $868 = HEAP32[133816>>2]|0;
       __THREW__ = 0;
       (invoke_iiii(81,($867|0),($868|0),0)|0);
       $869 = __THREW__; __THREW__ = 0;
       if ((($869|0) != 0) & ((threwValue|0) != 0)) { $870 = _testSetjmp(HEAP32[$869>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($870|0) == 0) { _longjmp($869|0, threwValue|0); } tempRet0 = threwValue; } else { $870 = -1; };
       $871 = tempRet0;
       $cond73 = ($870|0)==(1);
       if ($cond73) {
        $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $871;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
        continue L157;
       }
       $872 = HEAP32[132360>>2]|0;
       $873 = ($872|0)!=(0|0);
       do {
        if ($873) {
         $874 = ($read_from_stdin$3|0)!=(0);
         if (!($874)) {
          label = 327;
          break;
         }
         $875 = HEAP32[132360>>2]|0;
         $876 = HEAP16[133096>>1]|0;
         $877 = $876&65535;
         $878 = HEAP16[132368>>1]|0;
         $879 = $878&65535;
         $880 = Math_imul($877, $879)|0;
         $881 = HEAP32[_stdin>>2]|0;
         __THREW__ = 0;
         (invoke_iiiii(82,($875|0),2,($880|0),($881|0))|0);
         $882 = __THREW__; __THREW__ = 0;
         if ((($882|0) != 0) & ((threwValue|0) != 0)) { $883 = _testSetjmp(HEAP32[$882>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($883|0) == 0) { _longjmp($882|0, threwValue|0); } tempRet0 = threwValue; } else { $883 = -1; };
         $884 = tempRet0;
         $cond117 = ($883|0)==(1);
         if ($cond117) {
          $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $884;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
          continue L157;
         }
        } else {
         label = 327;
        }
       } while(0);
       if ((label|0) == 327) {
        label = 0;
        $885 = HEAP32[190504>>2]|0;
        __THREW__ = 0;
        invoke_v($885|0);
        $886 = __THREW__; __THREW__ = 0;
        if ((($886|0) != 0) & ((threwValue|0) != 0)) { $887 = _testSetjmp(HEAP32[$886>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($887|0) == 0) { _longjmp($886|0, threwValue|0); } tempRet0 = threwValue; } else { $887 = -1; };
        $888 = tempRet0;
        $cond74 = ($887|0)==(1);
        if ($cond74) {
         $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $888;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
         continue L157;
        }
       }
       $889 = HEAP32[152>>2]|0;
       $890 = ($889|0)==(3);
       if ($890) {
        HEAP16[190512>>1] = 0;
        HEAP16[608>>1] = 0;
        HEAP16[616>>1] = 0;
        $891 = HEAP16[133096>>1]|0;
        HEAP16[132112>>1] = $891;
        $892 = HEAP16[132368>>1]|0;
        HEAP16[132120>>1] = $892;
       }
       $893 = HEAP16[132112>>1]|0;
       $894 = $893&65535;
       $895 = HEAP16[132128>>1]|0;
       $896 = $895&65535;
       $897 = (($894) + ($896))|0;
       $898 = HEAP16[132128>>1]|0;
       $899 = $898&65535;
       $900 = $897 >> $899;
       $901 = $900&65535;
       HEAP16[190888>>1] = $901;
       $902 = HEAP16[132120>>1]|0;
       $903 = $902&65535;
       $904 = HEAP16[132128>>1]|0;
       $905 = $904&65535;
       $906 = (($903) + ($905))|0;
       $907 = HEAP16[132128>>1]|0;
       $908 = $907&65535;
       $909 = $906 >> $908;
       $910 = $909&65535;
       HEAP16[132136>>1] = $910;
       $911 = HEAP32[132360>>2]|0;
       $912 = ($911|0)!=(0|0);
       if ($912) {
        $913 = HEAP16[190888>>1]|0;
        $914 = $913&65535;
        $915 = HEAP16[132136>>1]|0;
        $916 = $915&65535;
        $917 = $916<<3;
        __THREW__ = 0;
        $918 = (invoke_iii(80,($914|0),($917|0))|0);
        $919 = __THREW__; __THREW__ = 0;
        if ((($919|0) != 0) & ((threwValue|0) != 0)) { $920 = _testSetjmp(HEAP32[$919>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($920|0) == 0) { _longjmp($919|0, threwValue|0); } tempRet0 = threwValue; } else { $920 = -1; };
        $921 = tempRet0;
        $cond113 = ($920|0)==(1);
        if ($cond113) {
         $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $921;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
         continue L157;
        }
        HEAP32[132144>>2] = $918;
        $922 = HEAP32[132144>>2]|0;
        __THREW__ = 0;
        invoke_vii(79,($922|0),(627624|0));
        $923 = __THREW__; __THREW__ = 0;
        if ((($923|0) != 0) & ((threwValue|0) != 0)) { $924 = _testSetjmp(HEAP32[$923>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($924|0) == 0) { _longjmp($923|0, threwValue|0); } tempRet0 = threwValue; } else { $924 = -1; };
        $925 = tempRet0;
        $cond114 = ($924|0)==(1);
        if ($cond114) {
         $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $925;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
         continue L157;
        }
        __THREW__ = 0;
        invoke_v(83);
        $926 = __THREW__; __THREW__ = 0;
        if ((($926|0) != 0) & ((threwValue|0) != 0)) { $927 = _testSetjmp(HEAP32[$926>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($927|0) == 0) { _longjmp($926|0, threwValue|0); } tempRet0 = threwValue; } else { $927 = -1; };
        $928 = tempRet0;
        $cond115 = ($927|0)==(1);
        if ($cond115) {
         $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $928;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
         continue L157;
        }
        $929 = HEAP32[132360>>2]|0;
        __THREW__ = 0;
        invoke_vi(84,($929|0));
        $930 = __THREW__; __THREW__ = 0;
        if ((($930|0) != 0) & ((threwValue|0) != 0)) { $931 = _testSetjmp(HEAP32[$930>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($931|0) == 0) { _longjmp($930|0, threwValue|0); } tempRet0 = threwValue; } else { $931 = -1; };
        $932 = tempRet0;
        $cond116 = ($931|0)==(1);
        if ($cond116) {
         $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $932;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
         continue L157;
        }
       }
       $933 = HEAP32[491184>>2]|0;
       $934 = ($933|0)!=(0);
       if ($934) {
        __THREW__ = 0;
        invoke_v(85);
        $935 = __THREW__; __THREW__ = 0;
        if ((($935|0) != 0) & ((threwValue|0) != 0)) { $936 = _testSetjmp(HEAP32[$935>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($936|0) == 0) { _longjmp($935|0, threwValue|0); } tempRet0 = threwValue; } else { $936 = -1; };
        $937 = tempRet0;
        $cond112 = ($936|0)==(1);
        if ($cond112) {
         $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $937;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
         continue L157;
        }
       }
       __THREW__ = 0;
       invoke_vi(86,($bpfile$3|0));
       $938 = __THREW__; __THREW__ = 0;
       if ((($938|0) != 0) & ((threwValue|0) != 0)) { $939 = _testSetjmp(HEAP32[$938>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($939|0) == 0) { _longjmp($938|0, threwValue|0); } tempRet0 = threwValue; } else { $939 = -1; };
       $940 = tempRet0;
       $cond75 = ($939|0)==(1);
       if ($cond75) {
        $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $940;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
        continue L157;
       }
       $941 = ($dark_frame$3|0)!=(0|0);
       if ($941) {
        __THREW__ = 0;
        invoke_vi(87,($dark_frame$3|0));
        $942 = __THREW__; __THREW__ = 0;
        if ((($942|0) != 0) & ((threwValue|0) != 0)) { $943 = _testSetjmp(HEAP32[$942>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($943|0) == 0) { _longjmp($942|0, threwValue|0); } tempRet0 = threwValue; } else { $943 = -1; };
        $944 = tempRet0;
        $cond111 = ($943|0)==(1);
        if ($cond111) {
         $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $944;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
         continue L157;
        }
       }
       $945 = HEAP16[190512>>1]|0;
       $946 = ($945<<16>>16)!=(0);
       $947 = $946 ^ 1;
       $948 = $947&1;
       $949 = (2 + ($948))|0;
       $950 = ($user_qual$3|0)>=(0);
       if ($950) {
        $quality$0 = $user_qual$3;
       } else {
        $quality$0 = $949;
       }
       $951 = HEAP16[((134720 + 6|0))>>1]|0;
       $952 = $951&65535;
       $c$5 = 0;$i$3 = $952;
       while(1) {
        $953 = ($c$5|0)<(3);
        if (!($953)) {
         break;
        }
        $954 = (134720 + ($c$5<<1)|0);
        $955 = HEAP16[$954>>1]|0;
        $956 = $955&65535;
        $957 = ($i$3|0)>($956|0);
        if ($957) {
         $958 = (134720 + ($c$5<<1)|0);
         $959 = HEAP16[$958>>1]|0;
         $960 = $959&65535;
         $i$4 = $960;
        } else {
         $i$4 = $i$3;
        }
        $961 = (($c$5) + 1)|0;
        $c$5 = $961;$i$3 = $i$4;
       }
       $c$6 = 0;
       while(1) {
        $962 = ($c$6|0)<(4);
        if (!($962)) {
         break;
        }
        $963 = (134720 + ($c$6<<1)|0);
        $964 = HEAP16[$963>>1]|0;
        $965 = $964&65535;
        $966 = (($965) - ($i$3))|0;
        $967 = $966&65535;
        HEAP16[$963>>1] = $967;
        $968 = (($c$6) + 1)|0;
        $c$6 = $968;
       }
       $969 = HEAP32[132392>>2]|0;
       $970 = (($969) + ($i$3))|0;
       HEAP32[132392>>2] = $970;
       $971 = HEAP16[((134720 + 12|0))>>1]|0;
       $972 = $971&65535;
       $c$7 = 0;$i$5 = $972;
       while(1) {
        $973 = HEAP16[((134720 + 8|0))>>1]|0;
        $974 = $973&65535;
        $975 = HEAP16[((134720 + 10|0))>>1]|0;
        $976 = $975&65535;
        $977 = Math_imul($974, $976)|0;
        $978 = ($c$7|0)<($977|0);
        if (!($978)) {
         break;
        }
        $979 = (6 + ($c$7))|0;
        $980 = (134720 + ($979<<1)|0);
        $981 = HEAP16[$980>>1]|0;
        $982 = $981&65535;
        $983 = ($i$5|0)>($982|0);
        if ($983) {
         $984 = (6 + ($c$7))|0;
         $985 = (134720 + ($984<<1)|0);
         $986 = HEAP16[$985>>1]|0;
         $987 = $986&65535;
         $i$6 = $987;
        } else {
         $i$6 = $i$5;
        }
        $988 = (($c$7) + 1)|0;
        $c$7 = $988;$i$5 = $i$6;
       }
       $c$8 = 0;
       while(1) {
        $989 = HEAP16[((134720 + 8|0))>>1]|0;
        $990 = $989&65535;
        $991 = HEAP16[((134720 + 10|0))>>1]|0;
        $992 = $991&65535;
        $993 = Math_imul($990, $992)|0;
        $994 = ($c$8|0)<($993|0);
        if (!($994)) {
         break;
        }
        $995 = (6 + ($c$8))|0;
        $996 = (134720 + ($995<<1)|0);
        $997 = HEAP16[$996>>1]|0;
        $998 = $997&65535;
        $999 = (($998) - ($i$5))|0;
        $1000 = $999&65535;
        HEAP16[$996>>1] = $1000;
        $1001 = (($c$8) + 1)|0;
        $c$8 = $1001;
       }
       $1002 = HEAP32[132392>>2]|0;
       $1003 = (($1002) + ($i$5))|0;
       HEAP32[132392>>2] = $1003;
       $1004 = ($user_black$3|0)>=(0);
       if ($1004) {
        HEAP32[132392>>2] = $user_black$3;
       }
       $c$9 = 0;
       while(1) {
        $1005 = ($c$9|0)<(4);
        if (!($1005)) {
         break;
        }
        $1006 = HEAP32[132392>>2]|0;
        $1007 = (134720 + ($c$9<<1)|0);
        $1008 = HEAP16[$1007>>1]|0;
        $1009 = $1008&65535;
        $1010 = (($1009) + ($1006))|0;
        $1011 = $1010&65535;
        HEAP16[$1007>>1] = $1011;
        $1012 = (($c$9) + 1)|0;
        $c$9 = $1012;
       }
       $1013 = ($user_sat$3|0)>(0);
       if ($1013) {
        HEAP32[132400>>2] = $user_sat$3;
       }
       $1014 = HEAP32[458768>>2]|0;
       $1015 = ($1014|0)!=(0);
       if ($1015) {
        $1016 = HEAP32[152>>2]|0;
        $1017 = ($1016|0)!=(0);
        do {
         if ($1017) {
          label = 377;
         } else {
          $1018 = HEAP32[190504>>2]|0;
          $1019 = ($1018|0)==(36|0);
          if ($1019) {
           label = 377;
           break;
          }
          __THREW__ = 0;
          invoke_v(88);
          $1035 = __THREW__; __THREW__ = 0;
          if ((($1035|0) != 0) & ((threwValue|0) != 0)) { $1036 = _testSetjmp(HEAP32[$1035>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1036|0) == 0) { _longjmp($1035|0, threwValue|0); } tempRet0 = threwValue; } else { $1036 = -1; };
          $1037 = tempRet0;
          $cond110 = ($1036|0)==(1);
          if ($cond110) {
           $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1037;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
           continue L157;
          }
         }
        } while(0);
        if ((label|0) == 377) {
         label = 0;
         $i$7 = 0;
         while(1) {
          $1020 = HEAP16[132112>>1]|0;
          $1021 = $1020&65535;
          $1022 = HEAP16[132120>>1]|0;
          $1023 = $1022&65535;
          $1024 = Math_imul($1021, $1023)|0;
          $1025 = $1024<<2;
          $1026 = ($i$7|0)<($1025|0);
          if (!($1026)) {
           break;
          }
          $1027 = HEAP32[132144>>2]|0;
          $1028 = (($1027) + ($i$7<<1)|0);
          $1029 = HEAP16[$1028>>1]|0;
          $1030 = $1029 << 16 >> 16;
          $1031 = ($1030|0)<(0);
          if ($1031) {
           $1032 = HEAP32[132144>>2]|0;
           $1033 = (($1032) + ($i$7<<1)|0);
           HEAP16[$1033>>1] = 0;
          }
          $1034 = (($i$7) + 1)|0;
          $i$7 = $1034;
         }
        }
       } else {
        $1038 = HEAP32[152>>2]|0;
        $1039 = ($1038|0)<(2);
        if ($1039) {
         __THREW__ = 0;
         invoke_v(89);
         $1040 = __THREW__; __THREW__ = 0;
         if ((($1040|0) != 0) & ((threwValue|0) != 0)) { $1041 = _testSetjmp(HEAP32[$1040>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1041|0) == 0) { _longjmp($1040|0, threwValue|0); } tempRet0 = threwValue; } else { $1041 = -1; };
         $1042 = tempRet0;
         $cond109 = ($1041|0)==(1);
         if ($cond109) {
          $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1042;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
          continue L157;
         }
        }
       }
       __THREW__ = 0;
       invoke_v(90);
       $1043 = __THREW__; __THREW__ = 0;
       if ((($1043|0) != 0) & ((threwValue|0) != 0)) { $1044 = _testSetjmp(HEAP32[$1043>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1044|0) == 0) { _longjmp($1043|0, threwValue|0); } tempRet0 = threwValue; } else { $1044 = -1; };
       $1045 = tempRet0;
       $cond76 = ($1044|0)==(1);
       if ($cond76) {
        $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1045;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
        continue L157;
       }
       $1046 = HEAP32[600>>2]|0;
       $1047 = ($1046|0)!=(0);
       do {
        if ($1047) {
         $1048 = HEAP32[152>>2]|0;
         $1049 = ($1048|0)!=(0);
         if ($1049) {
          break;
         }
         $1050 = ($quality$0|0)==(0);
         if ($1050) {
          __THREW__ = 0;
          invoke_v(91);
          $1051 = __THREW__; __THREW__ = 0;
          if ((($1051|0) != 0) & ((threwValue|0) != 0)) { $1052 = _testSetjmp(HEAP32[$1051>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1052|0) == 0) { _longjmp($1051|0, threwValue|0); } tempRet0 = threwValue; } else { $1052 = -1; };
          $1053 = tempRet0;
          $cond108 = ($1052|0)==(1);
          if ($cond108) {
           $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1053;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
           continue L157;
          }
         } else {
          $1054 = ($quality$0|0)==(1);
          do {
           if ($1054) {
            label = 399;
           } else {
            $1055 = HEAP32[132304>>2]|0;
            $1056 = ($1055>>>0)>(3);
            if ($1056) {
             label = 399;
             break;
            }
            $1060 = ($quality$0|0)==(2);
            do {
             if ($1060) {
              $1061 = HEAP32[600>>2]|0;
              $1062 = ($1061>>>0)>(1000);
              if (!($1062)) {
               label = 405;
               break;
              }
              __THREW__ = 0;
              invoke_v(93);
              $1063 = __THREW__; __THREW__ = 0;
              if ((($1063|0) != 0) & ((threwValue|0) != 0)) { $1064 = _testSetjmp(HEAP32[$1063>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1064|0) == 0) { _longjmp($1063|0, threwValue|0); } tempRet0 = threwValue; } else { $1064 = -1; };
              $1065 = tempRet0;
              $cond106 = ($1064|0)==(1);
              if ($cond106) {
               $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1065;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
               continue L157;
              }
             } else {
              label = 405;
             }
            } while(0);
            if ((label|0) == 405) {
             label = 0;
             $1066 = HEAP32[600>>2]|0;
             $1067 = ($1066|0)==(9);
             if ($1067) {
              $1068 = $quality$0<<1;
              $1069 = (($1068) - 3)|0;
              __THREW__ = 0;
              invoke_vi(94,($1069|0));
              $1070 = __THREW__; __THREW__ = 0;
              if ((($1070|0) != 0) & ((threwValue|0) != 0)) { $1071 = _testSetjmp(HEAP32[$1070>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1071|0) == 0) { _longjmp($1070|0, threwValue|0); } tempRet0 = threwValue; } else { $1071 = -1; };
              $1072 = tempRet0;
              $cond105 = ($1071|0)==(1);
              if ($cond105) {
               $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1072;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
               continue L157;
              }
             } else {
              __THREW__ = 0;
              invoke_v(95);
              $1073 = __THREW__; __THREW__ = 0;
              if ((($1073|0) != 0) & ((threwValue|0) != 0)) { $1074 = _testSetjmp(HEAP32[$1073>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1074|0) == 0) { _longjmp($1073|0, threwValue|0); } tempRet0 = threwValue; } else { $1074 = -1; };
              $1075 = tempRet0;
              $cond104 = ($1074|0)==(1);
              if ($cond104) {
               $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1075;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
               continue L157;
              }
             }
            }
           }
          } while(0);
          if ((label|0) == 399) {
           label = 0;
           __THREW__ = 0;
           invoke_v(92);
           $1057 = __THREW__; __THREW__ = 0;
           if ((($1057|0) != 0) & ((threwValue|0) != 0)) { $1058 = _testSetjmp(HEAP32[$1057>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1058|0) == 0) { _longjmp($1057|0, threwValue|0); } tempRet0 = threwValue; } else { $1058 = -1; };
           $1059 = tempRet0;
           $cond107 = ($1058|0)==(1);
           if ($cond107) {
            $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1059;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
            continue L157;
           }
          }
         }
        }
       } while(0);
       $1076 = HEAP32[142928>>2]|0;
       $1077 = ($1076|0)!=(0);
       if ($1077) {
        HEAP32[132304>>2] = 3;
        $i$8 = 0;
        while(1) {
         $1078 = HEAP16[132112>>1]|0;
         $1079 = $1078&65535;
         $1080 = HEAP16[132120>>1]|0;
         $1081 = $1080&65535;
         $1082 = Math_imul($1079, $1081)|0;
         $1083 = ($i$8|0)<($1082|0);
         if (!($1083)) {
          break;
         }
         $1084 = HEAP32[132144>>2]|0;
         $1085 = (($1084) + ($i$8<<3)|0);
         $1086 = (($1085) + 2|0);
         $1087 = HEAP16[$1086>>1]|0;
         $1088 = $1087&65535;
         $1089 = HEAP32[132144>>2]|0;
         $1090 = (($1089) + ($i$8<<3)|0);
         $1091 = (($1090) + 6|0);
         $1092 = HEAP16[$1091>>1]|0;
         $1093 = $1092&65535;
         $1094 = (($1088) + ($1093))|0;
         $1095 = $1094 >> 1;
         $1096 = $1095&65535;
         $1097 = HEAP32[132144>>2]|0;
         $1098 = (($1097) + ($i$8<<3)|0);
         $1099 = (($1098) + 2|0);
         HEAP16[$1099>>1] = $1096;
         $1100 = (($i$8) + 1)|0;
         $i$8 = $1100;
        }
       }
       $1101 = HEAP32[458768>>2]|0;
       $1102 = ($1101|0)!=(0);
       do {
        if (!($1102)) {
         $1103 = HEAP32[132304>>2]|0;
         $1104 = ($1103|0)==(3);
         if (!($1104)) {
          break;
         }
         __THREW__ = 0;
         invoke_v(96);
         $1105 = __THREW__; __THREW__ = 0;
         if ((($1105|0) != 0) & ((threwValue|0) != 0)) { $1106 = _testSetjmp(HEAP32[$1105>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1106|0) == 0) { _longjmp($1105|0, threwValue|0); } tempRet0 = threwValue; } else { $1106 = -1; };
         $1107 = tempRet0;
         $cond77 = ($1106|0)==(1);
         if ($cond77) {
          $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1107;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
          continue L157;
         }
        }
       } while(0);
       $1108 = HEAP32[458768>>2]|0;
       $1109 = ($1108|0)!=(0);
       do {
        if (!($1109)) {
         $1110 = HEAP32[160>>2]|0;
         $1111 = ($1110|0)==(2);
         if (!($1111)) {
          break;
         }
         __THREW__ = 0;
         invoke_v(97);
         $1112 = __THREW__; __THREW__ = 0;
         if ((($1112|0) != 0) & ((threwValue|0) != 0)) { $1113 = _testSetjmp(HEAP32[$1112>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1113|0) == 0) { _longjmp($1112|0, threwValue|0); } tempRet0 = threwValue; } else { $1113 = -1; };
         $1114 = tempRet0;
         $cond78 = ($1113|0)==(1);
         if ($cond78) {
          $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1114;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
          continue L157;
         }
        }
       } while(0);
       $1115 = HEAP32[458768>>2]|0;
       $1116 = ($1115|0)!=(0);
       do {
        if (!($1116)) {
         $1117 = HEAP32[160>>2]|0;
         $1118 = ($1117|0)>(2);
         if (!($1118)) {
          break;
         }
         __THREW__ = 0;
         invoke_v(98);
         $1119 = __THREW__; __THREW__ = 0;
         if ((($1119|0) != 0) & ((threwValue|0) != 0)) { $1120 = _testSetjmp(HEAP32[$1119>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1120|0) == 0) { _longjmp($1119|0, threwValue|0); } tempRet0 = threwValue; } else { $1120 = -1; };
         $1121 = tempRet0;
         $cond79 = ($1120|0)==(1);
         if ($cond79) {
          $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1121;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
          continue L157;
         }
        }
       } while(0);
       $1122 = ($use_fuji_rotate$3|0)!=(0);
       if ($1122) {
        __THREW__ = 0;
        invoke_v(99);
        $1123 = __THREW__; __THREW__ = 0;
        if ((($1123|0) != 0) & ((threwValue|0) != 0)) { $1124 = _testSetjmp(HEAP32[$1123>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1124|0) == 0) { _longjmp($1123|0, threwValue|0); } tempRet0 = threwValue; } else { $1124 = -1; };
        $1125 = tempRet0;
        $cond103 = ($1124|0)==(1);
        if ($cond103) {
         $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1125;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
         continue L157;
        }
       }
       __THREW__ = 0;
       invoke_v(100);
       $1126 = __THREW__; __THREW__ = 0;
       if ((($1126|0) != 0) & ((threwValue|0) != 0)) { $1127 = _testSetjmp(HEAP32[$1126>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1127|0) == 0) { _longjmp($1126|0, threwValue|0); } tempRet0 = threwValue; } else { $1127 = -1; };
       $1128 = tempRet0;
       $cond80 = ($1127|0)==(1);
       if ($cond80) {
        $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1128;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
        continue L157;
       }
       $1129 = ($use_fuji_rotate$3|0)!=(0);
       if ($1129) {
        __THREW__ = 0;
        invoke_v(101);
        $1130 = __THREW__; __THREW__ = 0;
        if ((($1130|0) != 0) & ((threwValue|0) != 0)) { $1131 = _testSetjmp(HEAP32[$1130>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1131|0) == 0) { _longjmp($1130|0, threwValue|0); } tempRet0 = threwValue; } else { $1131 = -1; };
        $1132 = tempRet0;
        $cond102 = ($1131|0)==(1);
        if ($cond102) {
         $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1132;$status$1 = $status$2;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
         continue L157;
        }
       }
       $status$4 = $status$2;
      }
      $1133 = HEAP32[627056>>2]|0;
      $1134 = ($1133|0)==(37|0);
      if ($1134) {
       $write_ext$1 = 458120;
      } else {
       $1135 = HEAP32[216>>2]|0;
       $1136 = ($1135|0)!=(0);
       if ($1136) {
        $1137 = HEAP32[627056>>2]|0;
        $1138 = ($1137|0)==(72|0);
        if ($1138) {
         $write_ext$0 = 627720;
        } else {
         label = 445;
        }
       } else {
        label = 445;
       }
       if ((label|0) == 445) {
        label = 0;
        $1139 = HEAP32[132304>>2]|0;
        $1140 = ($1139*5)|0;
        $1141 = (627728 + ($1140)|0);
        $1142 = (($1141) + -5|0);
        $write_ext$0 = $1142;
       }
       $write_ext$1 = $write_ext$0;
      }
      $1143 = HEAP32[696>>2]|0;
      __THREW__ = 0;
      $1144 = (invoke_ii(102,($1143|0))|0);
      $1145 = __THREW__; __THREW__ = 0;
      if ((($1145|0) != 0) & ((threwValue|0) != 0)) { $1146 = _testSetjmp(HEAP32[$1145>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1146|0) == 0) { _longjmp($1145|0, threwValue|0); } tempRet0 = threwValue; } else { $1146 = -1; };
      $1147 = tempRet0;
      $cond81 = ($1146|0)==(1);
      if ($cond81) {
       $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1147;$status$1 = $status$4;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
       continue L157;
      }
      $1148 = (($1144) + 64)|0;
      __THREW__ = 0;
      $1149 = (invoke_ii(78,($1148|0))|0);
      $1150 = __THREW__; __THREW__ = 0;
      if ((($1150|0) != 0) & ((threwValue|0) != 0)) { $1151 = _testSetjmp(HEAP32[$1150>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1151|0) == 0) { _longjmp($1150|0, threwValue|0); } tempRet0 = threwValue; } else { $1151 = -1; };
      $1152 = tempRet0;
      $cond82 = ($1151|0)==(1);
      if ($cond82) {
       $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1152;$status$1 = $status$4;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
       continue L157;
      }
      __THREW__ = 0;
      invoke_vii(79,($1149|0),(627624|0));
      $1153 = __THREW__; __THREW__ = 0;
      if ((($1153|0) != 0) & ((threwValue|0) != 0)) { $1154 = _testSetjmp(HEAP32[$1153>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1154|0) == 0) { _longjmp($1153|0, threwValue|0); } tempRet0 = threwValue; } else { $1154 = -1; };
      $1155 = tempRet0;
      $cond83 = ($1154|0)==(1);
      if ($cond83) {
       $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1155;$ofname$0 = $1149;$status$1 = $status$4;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
       continue L157;
      }
      $1156 = ($write_to_stdout$3|0)!=(0);
      do {
       if ($1156) {
        __THREW__ = 0;
        (invoke_iii(103,($1149|0),(627752|0))|0);
        $1157 = __THREW__; __THREW__ = 0;
        if ((($1157|0) != 0) & ((threwValue|0) != 0)) { $1158 = _testSetjmp(HEAP32[$1157>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1158|0) == 0) { _longjmp($1157|0, threwValue|0); } tempRet0 = threwValue; } else { $1158 = -1; };
        $1159 = tempRet0;
        $cond101 = ($1158|0)==(1);
        if ($cond101) {
         $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1159;$ofname$0 = $1149;$status$1 = $status$4;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
         continue L157;
        }
       } else {
        $1160 = HEAP32[696>>2]|0;
        __THREW__ = 0;
        (invoke_iii(103,($1149|0),($1160|0))|0);
        $1161 = __THREW__; __THREW__ = 0;
        if ((($1161|0) != 0) & ((threwValue|0) != 0)) { $1162 = _testSetjmp(HEAP32[$1161>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1162|0) == 0) { _longjmp($1161|0, threwValue|0); } tempRet0 = threwValue; } else { $1162 = -1; };
        $1163 = tempRet0;
        $cond84 = ($1162|0)==(1);
        if ($cond84) {
         $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1163;$ofname$0 = $1149;$status$1 = $status$4;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
         continue L157;
        }
        __THREW__ = 0;
        $1164 = (invoke_iii(104,($1149|0),46)|0);
        $1165 = __THREW__; __THREW__ = 0;
        if ((($1165|0) != 0) & ((threwValue|0) != 0)) { $1166 = _testSetjmp(HEAP32[$1165>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1166|0) == 0) { _longjmp($1165|0, threwValue|0); } tempRet0 = threwValue; } else { $1166 = -1; };
        $1167 = tempRet0;
        $cond85 = ($1166|0)==(1);
        if ($cond85) {
         $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1167;$ofname$0 = $1149;$status$1 = $status$4;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
         continue L157;
        }
        $1168 = ($1164|0)!=(0|0);
        if ($1168) {
         HEAP8[$1164>>0] = 0;
        }
        $1169 = HEAP32[16>>2]|0;
        $1170 = ($1169|0)!=(0);
        if ($1170) {
         __THREW__ = 0;
         $1171 = (invoke_ii(102,($1149|0))|0);
         $1172 = __THREW__; __THREW__ = 0;
         if ((($1172|0) != 0) & ((threwValue|0) != 0)) { $1173 = _testSetjmp(HEAP32[$1172>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1173|0) == 0) { _longjmp($1172|0, threwValue|0); } tempRet0 = threwValue; } else { $1173 = -1; };
         $1174 = tempRet0;
         $cond98 = ($1173|0)==(1);
         if ($cond98) {
          $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1174;$ofname$0 = $1149;$status$1 = $status$4;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
          continue L157;
         }
         $1175 = (($1149) + ($1171)|0);
         $1176 = HEAP32[133760>>2]|0;
         $1177 = (($1176) - 1)|0;
         __THREW__ = 0;
         HEAP32[$vararg_buffer667>>2] = $1177;
         $1178 = (invoke_iiiii(105,(0|0),0,(456904|0),($vararg_buffer667|0))|0);
         $1179 = __THREW__; __THREW__ = 0;
         if ((($1179|0) != 0) & ((threwValue|0) != 0)) { $1180 = _testSetjmp(HEAP32[$1179>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1180|0) == 0) { _longjmp($1179|0, threwValue|0); } tempRet0 = threwValue; } else { $1180 = -1; };
         $1181 = tempRet0;
         $cond99 = ($1180|0)==(1);
         if ($cond99) {
          $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1181;$ofname$0 = $1149;$status$1 = $status$4;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
          continue L157;
         }
         $1182 = HEAP32[8>>2]|0;
         __THREW__ = 0;
         HEAP32[$vararg_buffer670>>2] = $1178;
         $vararg_ptr673 = (($vararg_buffer670) + 4|0);
         HEAP32[$vararg_ptr673>>2] = $1182;
         (invoke_iiii(106,($1175|0),(627768|0),($vararg_buffer670|0))|0);
         $1183 = __THREW__; __THREW__ = 0;
         if ((($1183|0) != 0) & ((threwValue|0) != 0)) { $1184 = _testSetjmp(HEAP32[$1183>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1184|0) == 0) { _longjmp($1183|0, threwValue|0); } tempRet0 = threwValue; } else { $1184 = -1; };
         $1185 = tempRet0;
         $cond100 = ($1184|0)==(1);
         if ($cond100) {
          $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1185;$ofname$0 = $1149;$status$1 = $status$4;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
          continue L157;
         }
        }
        $1186 = ($thumbnail_only$3|0)!=(0);
        if ($1186) {
         __THREW__ = 0;
         (invoke_iii(107,($1149|0),(627776|0))|0);
         $1187 = __THREW__; __THREW__ = 0;
         if ((($1187|0) != 0) & ((threwValue|0) != 0)) { $1188 = _testSetjmp(HEAP32[$1187>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1188|0) == 0) { _longjmp($1187|0, threwValue|0); } tempRet0 = threwValue; } else { $1188 = -1; };
         $1189 = tempRet0;
         $cond97 = ($1188|0)==(1);
         if ($cond97) {
          $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1189;$ofname$0 = $1149;$status$1 = $status$4;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
          continue L157;
         }
        }
        __THREW__ = 0;
        (invoke_iii(107,($1149|0),($write_ext$1|0))|0);
        $1190 = __THREW__; __THREW__ = 0;
        if ((($1190|0) != 0) & ((threwValue|0) != 0)) { $1191 = _testSetjmp(HEAP32[$1190>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1191|0) == 0) { _longjmp($1190|0, threwValue|0); } tempRet0 = threwValue; } else { $1191 = -1; };
        $1192 = tempRet0;
        $cond86 = ($1191|0)==(1);
        if ($cond86) {
         $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1192;$ofname$0 = $1149;$status$1 = $status$4;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
         continue L157;
        }
        __THREW__ = 0;
        $1193 = (invoke_iii(68,($1149|0),(627784|0))|0);
        $1194 = __THREW__; __THREW__ = 0;
        if ((($1194|0) != 0) & ((threwValue|0) != 0)) { $1195 = _testSetjmp(HEAP32[$1194>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1195|0) == 0) { _longjmp($1194|0, threwValue|0); } tempRet0 = threwValue; } else { $1195 = -1; };
        $1196 = tempRet0;
        $cond87 = ($1195|0)==(1);
        if ($cond87) {
         $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1196;$ofname$0 = $1149;$status$1 = $status$4;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
         continue L157;
        }
        HEAP32[134336>>2] = $1193;
        $1197 = HEAP32[134336>>2]|0;
        $1198 = ($1197|0)!=(0|0);
        if ($1198) {
         break;
        }
        __THREW__ = 0;
        invoke_vi(69,($1149|0));
        $1199 = __THREW__; __THREW__ = 0;
        if ((($1199|0) != 0) & ((threwValue|0) != 0)) { $1200 = _testSetjmp(HEAP32[$1199>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1200|0) == 0) { _longjmp($1199|0, threwValue|0); } tempRet0 = threwValue; } else { $1200 = -1; };
        $1201 = tempRet0;
        $cond88 = ($1200|0)==(1);
        if ($cond88) {
         $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1201;$ofname$0 = $1149;$status$1 = 1;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
         continue L157;
        }
        $ofname$1 = $1149;$status$5 = 1;
        label = 480;
        break L163;
       }
      } while(0);
      $1202 = HEAP32[168>>2]|0;
      $1203 = ($1202|0)!=(0);
      if ($1203) {
       $1204 = HEAP32[_stderr>>2]|0;
       __THREW__ = 0;
       HEAP32[$vararg_buffer674>>2] = $1149;
       (invoke_iiii(60,($1204|0),(627792|0),($vararg_buffer674|0))|0);
       $1205 = __THREW__; __THREW__ = 0;
       if ((($1205|0) != 0) & ((threwValue|0) != 0)) { $1206 = _testSetjmp(HEAP32[$1205>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1206|0) == 0) { _longjmp($1205|0, threwValue|0); } tempRet0 = threwValue; } else { $1206 = -1; };
       $1207 = tempRet0;
       $cond96 = ($1206|0)==(1);
       if ($cond96) {
        $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1207;$ofname$0 = $1149;$status$1 = $status$4;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
        continue L157;
       }
      }
      $1208 = HEAP32[627056>>2]|0;
      __THREW__ = 0;
      invoke_v($1208|0);
      $1209 = __THREW__; __THREW__ = 0;
      if ((($1209|0) != 0) & ((threwValue|0) != 0)) { $1210 = _testSetjmp(HEAP32[$1209>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1210|0) == 0) { _longjmp($1209|0, threwValue|0); } tempRet0 = threwValue; } else { $1210 = -1; };
      $1211 = tempRet0;
      $cond93 = ($1210|0)==(1);
      if ($cond93) {
       $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1211;$ofname$0 = $1149;$status$1 = $status$4;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
       continue L157;
      }
      $1212 = HEAP32[880>>2]|0;
      __THREW__ = 0;
      (invoke_ii(67,($1212|0))|0);
      $1213 = __THREW__; __THREW__ = 0;
      if ((($1213|0) != 0) & ((threwValue|0) != 0)) { $1214 = _testSetjmp(HEAP32[$1213>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1214|0) == 0) { _longjmp($1213|0, threwValue|0); } tempRet0 = threwValue; } else { $1214 = -1; };
      $1215 = tempRet0;
      $cond94 = ($1214|0)==(1);
      if ($cond94) {
       $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1215;$ofname$0 = $1149;$status$1 = $status$4;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
       continue L157;
      }
      $1216 = HEAP32[134336>>2]|0;
      $1217 = HEAP32[_stdout>>2]|0;
      $1218 = ($1216|0)!=($1217|0);
      if ($1218) {
       $1219 = HEAP32[134336>>2]|0;
       __THREW__ = 0;
       (invoke_ii(67,($1219|0))|0);
       $1220 = __THREW__; __THREW__ = 0;
       if ((($1220|0) != 0) & ((threwValue|0) != 0)) { $1221 = _testSetjmp(HEAP32[$1220>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1221|0) == 0) { _longjmp($1220|0, threwValue|0); } tempRet0 = threwValue; } else { $1221 = -1; };
       $1222 = tempRet0;
       $cond95 = ($1221|0)==(1);
       if ($cond95) {
        $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1222;$ofname$0 = $1149;$status$1 = $status$4;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
        continue L157;
       }
      }
      $ofname$1 = $1149;$status$5 = $status$4;
      label = 480;
      break L163;
     }
    } while(0);
    $805 = HEAP32[880>>2]|0;
    __THREW__ = 0;
    (invoke_ii(67,($805|0))|0);
    $806 = __THREW__; __THREW__ = 0;
    if ((($806|0) != 0) & ((threwValue|0) != 0)) { $807 = _testSetjmp(HEAP32[$806>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($807|0) == 0) { _longjmp($806|0, threwValue|0); } tempRet0 = threwValue; } else { $807 = -1; };
    $808 = tempRet0;
    $cond70 = ($807|0)==(1);
    if ($cond70) {
     $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$ofname$0$phi = $ofname$0;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $808;$status$1 = $status$3;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$ofname$0 = $ofname$0$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
     continue L157;
    }
    $arg$10 = $arg$7;$status$6 = $status$3;
   }
  } while(0);
  if ((label|0) == 480) {
   label = 0;
   $1223 = HEAP32[189920>>2]|0;
   $1224 = ($1223|0)!=(0|0);
   if ($1224) {
    $1225 = HEAP32[189920>>2]|0;
    __THREW__ = 0;
    invoke_vi(84,($1225|0));
    $1226 = __THREW__; __THREW__ = 0;
    if ((($1226|0) != 0) & ((threwValue|0) != 0)) { $1227 = _testSetjmp(HEAP32[$1226>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1227|0) == 0) { _longjmp($1226|0, threwValue|0); } tempRet0 = threwValue; } else { $1227 = -1; };
    $1228 = tempRet0;
    $cond92 = ($1227|0)==(1);
    if ($cond92) {
     $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1228;$ofname$0 = $ofname$1;$status$1 = $status$5;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
     continue;
    }
   }
   $1229 = ($ofname$1|0)!=(0|0);
   if ($1229) {
    __THREW__ = 0;
    invoke_vi(84,($ofname$1|0));
    $1230 = __THREW__; __THREW__ = 0;
    if ((($1230|0) != 0) & ((threwValue|0) != 0)) { $1231 = _testSetjmp(HEAP32[$1230>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1231|0) == 0) { _longjmp($1230|0, threwValue|0); } tempRet0 = threwValue; } else { $1231 = -1; };
    $1232 = tempRet0;
    $cond91 = ($1231|0)==(1);
    if ($cond91) {
     $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1232;$ofname$0 = $ofname$1;$status$1 = $status$5;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
     continue;
    }
   }
   $1233 = HEAP32[493488>>2]|0;
   $1234 = ($1233|0)!=(0|0);
   if ($1234) {
    $1235 = HEAP32[493488>>2]|0;
    __THREW__ = 0;
    invoke_vi(84,($1235|0));
    $1236 = __THREW__; __THREW__ = 0;
    if ((($1236|0) != 0) & ((threwValue|0) != 0)) { $1237 = _testSetjmp(HEAP32[$1236>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1237|0) == 0) { _longjmp($1236|0, threwValue|0); } tempRet0 = threwValue; } else { $1237 = -1; };
    $1238 = tempRet0;
    $cond90 = ($1237|0)==(1);
    if ($cond90) {
     $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1238;$ofname$0 = $ofname$1;$status$1 = $status$5;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
     continue;
    }
   }
   $1239 = HEAP32[132144>>2]|0;
   $1240 = ($1239|0)!=(0|0);
   if ($1240) {
    $1241 = HEAP32[132144>>2]|0;
    __THREW__ = 0;
    invoke_vi(84,($1241|0));
    $1242 = __THREW__; __THREW__ = 0;
    if ((($1242|0) != 0) & ((threwValue|0) != 0)) { $1243 = _testSetjmp(HEAP32[$1242>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1243|0) == 0) { _longjmp($1242|0, threwValue|0); } tempRet0 = threwValue; } else { $1243 = -1; };
    $1244 = tempRet0;
    $cond89 = ($1243|0)==(1);
    if ($cond89) {
     $write_to_stdout$3$phi = $write_to_stdout$3;$user_sat$3$phi = $user_sat$3;$user_qual$3$phi = $user_qual$3;$user_flip$3$phi = $user_flip$3;$user_black$3$phi = $user_black$3;$use_fuji_rotate$3$phi = $use_fuji_rotate$3;$timestamp_only$3$phi = $timestamp_only$3;$thumbnail_only$3$phi = $thumbnail_only$3;$read_from_stdin$3$phi = $read_from_stdin$3;$identify_only$3$phi = $identify_only$3;$dark_frame$3$phi = $dark_frame$3;$bpfile$3$phi = $bpfile$3;$arg$7$phi = $arg$7;$$reg2mem543$0 = $1244;$ofname$0 = $ofname$1;$status$1 = $status$5;$write_to_stdout$3 = $write_to_stdout$3$phi;$user_sat$3 = $user_sat$3$phi;$user_qual$3 = $user_qual$3$phi;$user_flip$3 = $user_flip$3$phi;$user_black$3 = $user_black$3$phi;$use_fuji_rotate$3 = $use_fuji_rotate$3$phi;$timestamp_only$3 = $timestamp_only$3$phi;$thumbnail_only$3 = $thumbnail_only$3$phi;$read_from_stdin$3 = $read_from_stdin$3$phi;$identify_only$3 = $identify_only$3$phi;$dark_frame$3 = $dark_frame$3$phi;$bpfile$3 = $bpfile$3$phi;$arg$7 = $arg$7$phi;
     continue;
    }
   }
   $1245 = HEAP32[16>>2]|0;
   $1246 = ($1245|0)!=(0);
   if ($1246) {
    $1247 = HEAP32[8>>2]|0;
    $1248 = (($1247) + 1)|0;
    HEAP32[8>>2] = $1248;
    $1249 = HEAP32[133760>>2]|0;
    $1250 = ($1248>>>0)<($1249>>>0);
    if ($1250) {
     $1251 = (($arg$7) + -1)|0;
     $arg$8 = $1251;
    } else {
     HEAP32[8>>2] = 0;
     $arg$8 = $arg$7;
    }
    $arg$9 = $arg$8;
   } else {
    $arg$9 = $arg$7;
   }
   $arg$10 = $arg$9;$status$6 = $status$5;
  }
  $1252 = (($arg$10) + 1)|0;
  $arg$6 = $1252;$bpfile$2 = $bpfile$3;$dark_frame$2 = $dark_frame$3;$identify_only$2 = $identify_only$3;$read_from_stdin$2 = $read_from_stdin$3;$status$0 = $status$6;$thumbnail_only$2 = $thumbnail_only$3;$timestamp_only$2 = $timestamp_only$3;$use_fuji_rotate$2 = $use_fuji_rotate$3;$user_black$2 = $user_black$3;$user_flip$2 = $user_flip$3;$user_qual$2 = $user_qual$3;$user_sat$2 = $user_sat$3;$write_to_stdout$2 = $write_to_stdout$3;
  label = 136;
 }
 $$0 = $status$0;
 _free(_setjmpTable|0);
 STACKTOP = sp;return ($$0|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$lcssa14 = 0, $$lcssa16 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$st = $1 ? 628024 : $st;
 $2 = HEAP32[$$st>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src>>0]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = (($src) + 1|0);
      $17 = (627816 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $$02 = $19;$c$0 = $18;$s$0 = $16;
      break;
     }
    } else {
     $$02 = $n;$c$0 = $2;$s$0 = $src;
    }
   } while(0);
   $20 = ($$02|0)==(0);
   do {
    if ($20) {
     $c$2 = $c$0;
    } else {
     $21 = HEAP8[$s$0>>0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$0 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     }
     $$1 = $$02;$32 = $21;$c$1 = $c$0;$s$1 = $s$0;
     while(1) {
      $29 = $c$1 << 6;
      $30 = (($s$1) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       $$lcssa = $34;$$lcssa16 = $35;
       label = 15;
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $$lcssa14 = $34;
       label = 18;
       break;
      }
      $39 = HEAP8[$30>>0]|0;
      $40 = $39 & -64;
      $41 = ($40<<24>>24)==(-128);
      if ($41) {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      } else {
       label = 20;
       break;
      }
     }
     if ((label|0) == 15) {
      HEAP32[$$st>>2] = 0;
      HEAP32[$11>>2] = $$lcssa;
      $37 = (($n) - ($$lcssa16))|0;
      $$0 = $37;
      STACKTOP = sp;return ($$0|0);
     }
     else if ((label|0) == 18) {
      $c$2 = $$lcssa14;
      break;
     }
     else if ((label|0) == 20) {
      break L1;
     }
    }
   } while(0);
   HEAP32[$$st>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$st>>2] = 0;
 $42 = (___errno_location()|0);
 HEAP32[$42>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $k$0 = $2;
 } else {
  $5 = $3;
  $6 = $1;
  $7 = (($5) - ($6))|0;
  $k$0 = $7;
 }
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = (($f) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = (($f) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 return ($k$0$len|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$8 = 0, $$lcssa = 0, $$lcssa231 = 0, $$lcssa232 = 0, $$lcssa233 = 0, $$lcssa234 = 0, $$lcssa280 = 0, $$lcssa39 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi219Z2D = 0, $$pre205 = 0, $$pre207 = 0, $$pre211 = 0;
 var $$pre213 = 0, $$pre214 = 0, $$pre216 = 0, $$pre217 = 0, $$pre218 = 0, $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0.0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0.0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0$lcssa = 0, $alloc$0$lcssa295 = 0, $alloc$0$lcssa296 = 0, $alloc$0$lcssa297 = 0;
 var $alloc$0$lcssa299 = 0, $alloc$0$lcssa300 = 0, $alloc$0$lcssa301 = 0, $alloc$0200 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$0101 = 0, $dest$0 = 0, $factor = 0, $factor17 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$lcssa = 0, $i$0$ph$lcssa247 = 0;
 var $i$0$ph21 = 0, $i$0$ph21$lcssa = 0, $i$0$ph21$lcssa250 = 0, $i$0$ph21$us106 = 0, $i$0$ph21$us106$lcssa = 0, $i$1$lcssa = 0, $i$2 = 0, $i$2$lcssa = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$3$lcssa = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit7 = 0, $isdigit796 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $isdigittmp695 = 0;
 var $k$0$ph = 0, $k$1$ph = 0, $matches$0$ = 0, $matches$0111 = 0, $matches$0111$lcssa = 0, $matches$0111$lcssa252 = 0, $matches$0111$lcssa253 = 0, $matches$0111$lcssa254 = 0, $matches$0111$lcssa255 = 0, $matches$0111$lcssa256 = 0, $matches$0111$lcssa257 = 0, $matches$0111$lcssa258 = 0, $matches$0111$lcssa259 = 0, $matches$0111261 = 0, $matches$1 = 0, $matches$1$lcssa = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond$us = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $or$cond9 = 0, $p$0117 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$397 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$lcssa = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0116 = 0;
 var $pos$1 = 0, $pos$2 = 0, $s$0109 = 0, $s$0109$lcssa = 0, $s$1 = 0, $s$1$lcssa282 = 0, $s$2$ph = 0, $s$2$ph$lcssa = 0, $s$2$ph$lcssa237 = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$6$ph = 0, $s$7 = 0, $s$8 = 0, $s$8$ph = 0, $scanset = 0, $size$0 = 0, $st = 0;
 var $vacopy_currentptr = 0, $wc = 0, $wcs$0110 = 0, $wcs$0110$lcssa = 0, $wcs$1 = 0, $wcs$1$lcssa289 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$3$ph$lcssa$lcssa = 0, $wcs$3$ph$lcssa240 = 0, $wcs$3$ph$lcssa241 = 0, $wcs$3$ph$lcssa244 = 0, $wcs$3$ph141 = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$7$ph = 0, $wcs$8 = 0;
 var $wcs$9 = 0, $wcs$9$ph = 0, $width$0$lcssa = 0, $width$098 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp;
 $scanset = sp + 33|0;
 $wc = sp + 8|0;
 $0 = sp + 32|0;
 $1 = HEAP8[$fmt>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $matches$3 = 0;
  STACKTOP = sp;return ($matches$3|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 $5 = (($f) + 108|0);
 $6 = (($f) + 8|0);
 $7 = (($scanset) + 10|0);
 $8 = (($scanset) + 33|0);
 $9 = (($st) + 4|0);
 $10 = (($scanset) + 46|0);
 $11 = (($scanset) + 94|0);
 $13 = $1;$matches$0111 = 0;$p$0117 = $fmt;$pos$0116 = 0;$s$0109 = 0;$wcs$0110 = 0;
 L4: while(1) {
  $12 = $13&255;
  $14 = (_isspace($12)|0);
  $15 = ($14|0)==(0);
  L6: do {
   if ($15) {
    $42 = HEAP8[$p$0117>>0]|0;
    $43 = ($42<<24>>24)==(37);
    L8: do {
     if ($43) {
      $44 = (($p$0117) + 1|0);
      $45 = HEAP8[$44>>0]|0;
      do {
       if ((($45<<24>>24) == 42)) {
        $66 = (($p$0117) + 2|0);
        $dest$0 = 0;$p$2 = $66;
       } else if ((($45<<24>>24) == 37)) {
        break L8;
       } else {
        $67 = $45&255;
        $isdigittmp = (($67) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $68 = (($p$0117) + 2|0);
         $69 = HEAP8[$68>>0]|0;
         $70 = ($69<<24>>24)==(36);
         if ($70) {
          $vacopy_currentptr = HEAP32[$ap>>2]|0;
          HEAP32[$ap2$i>>2] = $vacopy_currentptr;
          $i$0$i = $isdigittmp;
          while(1) {
           $71 = ($i$0$i>>>0)>(1);
           $arglist_current = HEAP32[$ap2$i>>2]|0;
           $72 = HEAP32[$arglist_current>>2]|0;
           $arglist_next = (($arglist_current) + 4|0);
           HEAP32[$ap2$i>>2] = $arglist_next;
           $73 = (($i$0$i) + -1)|0;
           if ($71) {
            $i$0$i = $73;
           } else {
            $$lcssa = $72;
            break;
           }
          }
          $74 = (($p$0117) + 3|0);
          $dest$0 = $$lcssa;$p$2 = $74;
          break;
         }
        }
        $arglist_current2 = HEAP32[$ap>>2]|0;
        $75 = HEAP32[$arglist_current2>>2]|0;
        $arglist_next3 = (($arglist_current2) + 4|0);
        HEAP32[$ap>>2] = $arglist_next3;
        $dest$0 = $75;$p$2 = $44;
       }
      } while(0);
      $76 = HEAP8[$p$2>>0]|0;
      $77 = $76&255;
      $isdigittmp695 = (($77) + -48)|0;
      $isdigit796 = ($isdigittmp695>>>0)<(10);
      if ($isdigit796) {
       $81 = $77;$p$397 = $p$2;$width$098 = 0;
       while(1) {
        $78 = ($width$098*10)|0;
        $79 = (($78) + -48)|0;
        $80 = (($79) + ($81))|0;
        $82 = (($p$397) + 1|0);
        $83 = HEAP8[$82>>0]|0;
        $84 = $83&255;
        $isdigittmp6 = (($84) + -48)|0;
        $isdigit7 = ($isdigittmp6>>>0)<(10);
        if ($isdigit7) {
         $81 = $84;$p$397 = $82;$width$098 = $80;
        } else {
         $$lcssa231 = $80;$$lcssa232 = $82;$$lcssa233 = $83;
         break;
        }
       }
       $$lcssa39 = $$lcssa233;$p$3$lcssa = $$lcssa232;$width$0$lcssa = $$lcssa231;
      } else {
       $$lcssa39 = $76;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
      }
      $85 = ($$lcssa39<<24>>24)==(109);
      if ($85) {
       $86 = ($dest$0|0)!=(0|0);
       $87 = $86&1;
       $88 = (($p$3$lcssa) + 1|0);
       $$pre = HEAP8[$88>>0]|0;
       $91 = $$pre;$alloc$0 = $87;$p$4 = $88;$s$1 = 0;$wcs$1 = 0;
      } else {
       $91 = $$lcssa39;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0109;$wcs$1 = $wcs$0110;
      }
      $89 = (($p$4) + 1|0);
      $90 = $91&255;
      switch ($90|0) {
      case 116: case 122:  {
       $p$5 = $89;$size$0 = 1;
       break;
      }
      case 76:  {
       $p$5 = $89;$size$0 = 2;
       break;
      }
      case 106:  {
       $p$5 = $89;$size$0 = 3;
       break;
      }
      case 108:  {
       $95 = HEAP8[$89>>0]|0;
       $96 = ($95<<24>>24)==(108);
       $97 = (($p$4) + 2|0);
       $$12 = $96 ? $97 : $89;
       $$13 = $96 ? 3 : 1;
       $p$5 = $$12;$size$0 = $$13;
       break;
      }
      case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
       $p$5 = $p$4;$size$0 = 0;
       break;
      }
      case 104:  {
       $92 = HEAP8[$89>>0]|0;
       $93 = ($92<<24>>24)==(104);
       $94 = (($p$4) + 2|0);
       $$10 = $93 ? $94 : $89;
       $$11 = $93 ? -2 : -1;
       $p$5 = $$10;$size$0 = $$11;
       break;
      }
      default: {
       $alloc$0$lcssa = $alloc$0;$matches$0111$lcssa252 = $matches$0111;$s$6$ph = $s$1;$wcs$7$ph = $wcs$1;
       label = 188;
       break L4;
      }
      }
      $98 = HEAP8[$p$5>>0]|0;
      $99 = $98&255;
      $100 = $99 & 47;
      $101 = ($100|0)==(3);
      $102 = $99 | 32;
      $$ = $101 ? $102 : $99;
      $$size$0 = $101 ? 1 : $size$0;
      if ((($$|0) == 99)) {
       $103 = ($width$0$lcssa|0)<(1);
       $$width$0 = $103 ? 1 : $width$0$lcssa;
       $pos$1 = $pos$0116;$width$1 = $$width$0;
      } else if ((($$|0) == 110)) {
       $104 = ($pos$0116|0)<(0);
       $105 = $104 << 31 >> 31;
       $106 = ($dest$0|0)==(0|0);
       if ($106) {
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       switch ($$size$0|0) {
       case -2:  {
        $107 = $pos$0116&255;
        HEAP8[$dest$0>>0] = $107;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 0:  {
        HEAP32[$dest$0>>2] = $pos$0116;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case -1:  {
        $108 = $pos$0116&65535;
        HEAP16[$dest$0>>1] = $108;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 3:  {
        $109 = $dest$0;
        $110 = $109;
        HEAP32[$110>>2] = $pos$0116;
        $111 = (($109) + 4)|0;
        $112 = $111;
        HEAP32[$112>>2] = $105;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 1:  {
        HEAP32[$dest$0>>2] = $pos$0116;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       default: {
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       }
      } else if ((($$|0) == 91)) {
       $pos$1 = $pos$0116;$width$1 = $width$0$lcssa;
      } else {
       ___shlim($f,0);
       while(1) {
        $113 = HEAP32[$3>>2]|0;
        $114 = HEAP32[$4>>2]|0;
        $115 = ($113>>>0)<($114>>>0);
        if ($115) {
         $116 = (($113) + 1|0);
         HEAP32[$3>>2] = $116;
         $117 = HEAP8[$113>>0]|0;
         $118 = $117&255;
         $120 = $118;
        } else {
         $119 = (___shgetc($f)|0);
         $120 = $119;
        }
        $121 = (_isspace($120)|0);
        $122 = ($121|0)==(0);
        if ($122) {
         break;
        }
       }
       $123 = HEAP32[$4>>2]|0;
       $124 = ($123|0)==(0|0);
       $$pre205 = HEAP32[$3>>2]|0;
       if ($124) {
        $128 = $$pre205;
       } else {
        $125 = (($$pre205) + -1|0);
        HEAP32[$3>>2] = $125;
        $128 = $125;
       }
       $126 = HEAP32[$5>>2]|0;
       $127 = HEAP32[$6>>2]|0;
       $129 = $128;
       $130 = $127;
       $131 = (($126) + ($pos$0116))|0;
       $132 = (($131) + ($129))|0;
       $133 = (($132) - ($130))|0;
       $pos$1 = $133;$width$1 = $width$0$lcssa;
      }
      ___shlim($f,$width$1);
      $134 = HEAP32[$3>>2]|0;
      $135 = HEAP32[$4>>2]|0;
      $136 = ($134>>>0)<($135>>>0);
      if ($136) {
       $137 = (($134) + 1|0);
       HEAP32[$3>>2] = $137;
       $140 = $135;
      } else {
       $138 = (___shgetc($f)|0);
       $139 = ($138|0)<(0);
       if ($139) {
        $alloc$0$lcssa = $alloc$0;$matches$0111$lcssa252 = $matches$0111;$s$6$ph = $s$1;$wcs$7$ph = $wcs$1;
        label = 188;
        break L4;
       }
       $$pre207 = HEAP32[$4>>2]|0;
       $140 = $$pre207;
      }
      $141 = ($140|0)==(0|0);
      if (!($141)) {
       $142 = HEAP32[$3>>2]|0;
       $143 = (($142) + -1|0);
       HEAP32[$3>>2] = $143;
      }
      L67: do {
       switch ($$|0) {
       case 105:  {
        $base$0 = 0;
        label = 164;
        break;
       }
       case 120: case 88: case 112:  {
        $base$0 = 16;
        label = 164;
        break;
       }
       case 111:  {
        $base$0 = 8;
        label = 164;
        break;
       }
       case 117: case 100:  {
        $base$0 = 10;
        label = 164;
        break;
       }
       case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
        $325 = (+___floatscan($f,$$size$0,0));
        $326 = HEAP32[$5>>2]|0;
        $327 = HEAP32[$3>>2]|0;
        $328 = HEAP32[$6>>2]|0;
        $329 = $327;
        $330 = $328;
        $331 = (($330) - ($329))|0;
        $332 = ($326|0)==($331|0);
        if ($332) {
         $alloc$0$lcssa295 = $alloc$0;$matches$0111$lcssa253 = $matches$0111;$s$8$ph = $s$1;$wcs$9$ph = $wcs$1;
         label = 191;
         break L4;
        }
        $333 = ($dest$0|0)==(0|0);
        if ($333) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         if ((($$size$0|0) == 1)) {
          HEAPF64[$dest$0>>3] = $325;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L67;
         } else if ((($$size$0|0) == 2)) {
          HEAPF64[$dest$0>>3] = $325;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L67;
         } else if ((($$size$0|0) == 0)) {
          $334 = $325;
          HEAPF32[$dest$0>>2] = $334;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L67;
         } else {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L67;
         }
        }
        break;
       }
       case 91: case 99: case 115:  {
        $144 = ($$|0)==(99);
        $145 = $$ & 239;
        $146 = ($145|0)==(99);
        if ($146) {
         $147 = ($$|0)==(115);
         _memset(($scanset|0),-1,257)|0;
         HEAP8[$scanset>>0] = 0;
         if ($147) {
          HEAP8[$8>>0] = 0;
          ;HEAP8[$7+0>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;HEAP8[$7+4>>0]=0|0;
          $p$9 = $p$5;
         } else {
          $p$9 = $p$5;
         }
        } else {
         $148 = (($p$5) + 1|0);
         $149 = HEAP8[$148>>0]|0;
         $150 = ($149<<24>>24)==(94);
         $151 = (($p$5) + 2|0);
         $invert$0 = $150&1;
         $152 = $150 ? $148 : $p$5;
         $p$6 = $150 ? $151 : $148;
         $153 = $150&1;
         _memset(($scanset|0),($153|0),257)|0;
         HEAP8[$scanset>>0] = 0;
         $154 = HEAP8[$p$6>>0]|0;
         if ((($154<<24>>24) == 93)) {
          $158 = (($152) + 2|0);
          $159 = $invert$0 ^ 1;
          $160 = $159&255;
          HEAP8[$11>>0] = $160;
          $$pre$phi219Z2D = $160;$p$7$ph = $158;
         } else if ((($154<<24>>24) == 45)) {
          $155 = (($152) + 2|0);
          $156 = $invert$0 ^ 1;
          $157 = $156&255;
          HEAP8[$10>>0] = $157;
          $$pre$phi219Z2D = $157;$p$7$ph = $155;
         } else {
          $$pre217 = $invert$0 ^ 1;
          $$pre218 = $$pre217&255;
          $$pre$phi219Z2D = $$pre218;$p$7$ph = $p$6;
         }
         $p$7 = $p$7$ph;
         while(1) {
          $161 = HEAP8[$p$7>>0]|0;
          if ((($161<<24>>24) == 93)) {
           $p$7$lcssa = $p$7;
           break;
          } else if ((($161<<24>>24) == 45)) {
           $162 = (($p$7) + 1|0);
           $163 = HEAP8[$162>>0]|0;
           if ((($163<<24>>24) == 93) | (($163<<24>>24) == 0)) {
            $174 = 45;$p$8 = $p$7;
           } else {
            $164 = (($p$7) + -1|0);
            $165 = HEAP8[$164>>0]|0;
            $166 = ($165&255)<($163&255);
            if ($166) {
             $167 = $165&255;
             $c$0101 = $167;
             while(1) {
              $168 = (($c$0101) + 1)|0;
              $169 = (($scanset) + ($168)|0);
              HEAP8[$169>>0] = $$pre$phi219Z2D;
              $170 = HEAP8[$162>>0]|0;
              $171 = $170&255;
              $172 = ($168|0)<($171|0);
              if ($172) {
               $c$0101 = $168;
              } else {
               $$lcssa234 = $170;
               break;
              }
             }
             $174 = $$lcssa234;$p$8 = $162;
            } else {
             $174 = $163;$p$8 = $162;
            }
           }
          } else if ((($161<<24>>24) == 0)) {
           $alloc$0$lcssa296 = $alloc$0;$matches$0111$lcssa254 = $matches$0111;$s$1$lcssa282 = $s$1;$wcs$1$lcssa289 = $wcs$1;
           label = 187;
           break L4;
          } else {
           $174 = $161;$p$8 = $p$7;
          }
          $173 = $174&255;
          $175 = (($173) + 1)|0;
          $176 = (($scanset) + ($175)|0);
          HEAP8[$176>>0] = $$pre$phi219Z2D;
          $177 = (($p$8) + 1|0);
          $p$7 = $177;
         }
         $p$9 = $p$7$lcssa;
        }
        $178 = (($width$1) + 1)|0;
        $$8 = $144 ? $178 : 31;
        $179 = ($$size$0|0)==(1);
        $180 = ($alloc$0|0)!=(0);
        do {
         if ($179) {
          if ($180) {
           $181 = $$8 << 2;
           $182 = (_malloc($181)|0);
           $183 = ($182|0)==(0|0);
           if ($183) {
            $alloc$0$lcssa = $alloc$0;$matches$0111$lcssa252 = $matches$0111;$s$6$ph = 0;$wcs$7$ph = $182;
            label = 188;
            break L4;
           } else {
            $wcs$2 = $182;
           }
          } else {
           $wcs$2 = $dest$0;
          }
          HEAP32[$st>>2] = 0;
          HEAP32[$9>>2] = 0;
          $i$0$ph = 0;$k$0$ph = $$8;$wcs$3$ph = $wcs$2;
          L106: while(1) {
           $184 = ($wcs$3$ph|0)==(0|0);
           if ($184) {
            while(1) {
             $187 = HEAP32[$3>>2]|0;
             $198 = HEAP32[$4>>2]|0;
             $199 = ($187>>>0)<($198>>>0);
             if ($199) {
              $186 = (($187) + 1|0);
              HEAP32[$3>>2] = $186;
              $188 = HEAP8[$187>>0]|0;
              $189 = $188&255;
              $191 = $189;
             } else {
              $185 = (___shgetc($f)|0);
              $191 = $185;
             }
             $190 = (($191) + 1)|0;
             $192 = (($scanset) + ($190)|0);
             $193 = HEAP8[$192>>0]|0;
             $194 = ($193<<24>>24)==(0);
             if ($194) {
              $i$0$ph$lcssa247 = $i$0$ph;
              label = 120;
              break L106;
             }
             $195 = $191&255;
             HEAP8[$0>>0] = $195;
             $196 = (_mbrtowc($wc,$0,1,$st)|0);
             if ((($196|0) == -1)) {
              $alloc$0$lcssa300 = $alloc$0;$matches$0111$lcssa258 = $matches$0111;
              label = 184;
              break L4;
             } else if (!((($196|0) == -2))) {
              $197 = ($i$0$ph|0)==($k$0$ph|0);
              $or$cond$us = $180 & $197;
              if ($or$cond$us) {
               break;
              }
             }
            }
            $i$1$lcssa = $i$0$ph;
           } else {
            if (!($180)) {
             $i$0$ph$lcssa = $i$0$ph;$wcs$3$ph$lcssa = $wcs$3$ph;
             label = 91;
             break;
            }
            $i$0$ph21$us106 = $i$0$ph;
            while(1) {
             while(1) {
              $202 = HEAP32[$3>>2]|0;
              $216 = HEAP32[$4>>2]|0;
              $217 = ($202>>>0)<($216>>>0);
              if ($217) {
               $201 = (($202) + 1|0);
               HEAP32[$3>>2] = $201;
               $203 = HEAP8[$202>>0]|0;
               $204 = $203&255;
               $206 = $204;
              } else {
               $200 = (___shgetc($f)|0);
               $206 = $200;
              }
              $205 = (($206) + 1)|0;
              $207 = (($scanset) + ($205)|0);
              $208 = HEAP8[$207>>0]|0;
              $209 = ($208<<24>>24)==(0);
              if ($209) {
               $i$0$ph21$us106$lcssa = $i$0$ph21$us106;$wcs$3$ph$lcssa240 = $wcs$3$ph;
               label = 118;
               break L106;
              }
              $210 = $206&255;
              HEAP8[$0>>0] = $210;
              $211 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($211|0) == -1)) {
               $alloc$0$lcssa299 = $alloc$0;$matches$0111$lcssa257 = $matches$0111;$wcs$3$ph$lcssa241 = $wcs$3$ph;
               label = 182;
               break L4;
              } else if (!((($211|0) == -2))) {
               break;
              }
             }
             $212 = HEAP32[$wc>>2]|0;
             $213 = (($i$0$ph21$us106) + 1)|0;
             $214 = (($wcs$3$ph) + ($i$0$ph21$us106<<2)|0);
             HEAP32[$214>>2] = $212;
             $215 = ($213|0)==($k$0$ph|0);
             if ($215) {
              break;
             } else {
              $i$0$ph21$us106 = $213;
             }
            }
            $i$1$lcssa = $k$0$ph;
           }
           $factor = $k$0$ph << 1;
           $235 = $factor | 1;
           $236 = $235 << 2;
           $237 = (_realloc($wcs$3$ph,$236)|0);
           $238 = ($237|0)==(0|0);
           if ($238) {
            $alloc$0$lcssa301 = $alloc$0;$matches$0111$lcssa259 = $matches$0111;$wcs$3$ph$lcssa244 = $wcs$3$ph;
            label = 185;
            break L4;
           }
           $i$0$ph = $i$1$lcssa;$k$0$ph = $235;$wcs$3$ph = $237;
          }
          if ((label|0) == 91) {
           label = 0;
           $i$0$ph21 = $i$0$ph$lcssa;
           L140: while(1) {
            while(1) {
             $218 = HEAP32[$3>>2]|0;
             $219 = HEAP32[$4>>2]|0;
             $220 = ($218>>>0)<($219>>>0);
             if ($220) {
              $221 = (($218) + 1|0);
              HEAP32[$3>>2] = $221;
              $222 = HEAP8[$218>>0]|0;
              $223 = $222&255;
              $226 = $223;
             } else {
              $224 = (___shgetc($f)|0);
              $226 = $224;
             }
             $225 = (($226) + 1)|0;
             $227 = (($scanset) + ($225)|0);
             $228 = HEAP8[$227>>0]|0;
             $229 = ($228<<24>>24)==(0);
             if ($229) {
              $i$0$ph21$lcssa250 = $i$0$ph21;
              break L140;
             }
             $230 = $226&255;
             HEAP8[$0>>0] = $230;
             $231 = (_mbrtowc($wc,$0,1,$st)|0);
             if ((($231|0) == -1)) {
              $matches$0111$lcssa256 = $matches$0111;$wcs$3$ph$lcssa$lcssa = $wcs$3$ph$lcssa;
              label = 183;
              break L4;
             } else if (!((($231|0) == -2))) {
              break;
             }
            }
            $232 = HEAP32[$wc>>2]|0;
            $233 = (($i$0$ph21) + 1)|0;
            $234 = (($wcs$3$ph$lcssa) + ($i$0$ph21<<2)|0);
            HEAP32[$234>>2] = $232;
            $i$0$ph21 = $233;
           }
           $i$0$ph21$lcssa = $i$0$ph21$lcssa250;$wcs$3$ph141 = $wcs$3$ph$lcssa;
          }
          else if ((label|0) == 118) {
           label = 0;
           $i$0$ph21$lcssa = $i$0$ph21$us106$lcssa;$wcs$3$ph141 = $wcs$3$ph$lcssa240;
          }
          else if ((label|0) == 120) {
           label = 0;
           $i$0$ph21$lcssa = $i$0$ph$lcssa247;$wcs$3$ph141 = 0;
          }
          $239 = (_mbsinit($st)|0);
          $240 = ($239|0)==(0);
          if ($240) {
           $alloc$0$lcssa = $alloc$0;$matches$0111$lcssa252 = $matches$0111;$s$6$ph = 0;$wcs$7$ph = $wcs$3$ph141;
           label = 188;
           break L4;
          } else {
           $i$4 = $i$0$ph21$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph141;
          }
         } else {
          if ($180) {
           $241 = (_malloc($$8)|0);
           $242 = ($241|0)==(0|0);
           if ($242) {
            $alloc$0$lcssa = $alloc$0;$matches$0111$lcssa252 = $matches$0111;$s$6$ph = 0;$wcs$7$ph = 0;
            label = 188;
            break L4;
           }
           $i$2$ph = 0;$k$1$ph = $$8;$s$2$ph = $241;
           L156: while(1) {
            $i$2 = $i$2$ph;
            while(1) {
             $243 = HEAP32[$3>>2]|0;
             $244 = HEAP32[$4>>2]|0;
             $245 = ($243>>>0)<($244>>>0);
             if ($245) {
              $246 = (($243) + 1|0);
              HEAP32[$3>>2] = $246;
              $247 = HEAP8[$243>>0]|0;
              $248 = $247&255;
              $251 = $248;
             } else {
              $249 = (___shgetc($f)|0);
              $251 = $249;
             }
             $250 = (($251) + 1)|0;
             $252 = (($scanset) + ($250)|0);
             $253 = HEAP8[$252>>0]|0;
             $254 = ($253<<24>>24)==(0);
             if ($254) {
              $i$2$lcssa = $i$2;$s$2$ph$lcssa = $s$2$ph;
              break L156;
             }
             $255 = $251&255;
             $256 = (($i$2) + 1)|0;
             $257 = (($s$2$ph) + ($i$2)|0);
             HEAP8[$257>>0] = $255;
             $258 = ($256|0)==($k$1$ph|0);
             if ($258) {
              break;
             } else {
              $i$2 = $256;
             }
            }
            $factor17 = $k$1$ph << 1;
            $259 = $factor17 | 1;
            $260 = (_realloc($s$2$ph,$259)|0);
            $261 = ($260|0)==(0|0);
            if ($261) {
             $alloc$0$lcssa297 = $alloc$0;$matches$0111$lcssa255 = $matches$0111;$s$2$ph$lcssa237 = $s$2$ph;
             label = 186;
             break L4;
            } else {
             $i$2$ph$phi = $k$1$ph;$k$1$ph = $259;$s$2$ph = $260;$i$2$ph = $i$2$ph$phi;
            }
           }
           $i$4 = $i$2$lcssa;$s$3 = $s$2$ph$lcssa;$wcs$4 = 0;
           break;
          }
          $262 = ($dest$0|0)==(0|0);
          if ($262) {
           $280 = $140;
           while(1) {
            $278 = HEAP32[$3>>2]|0;
            $279 = ($278>>>0)<($280>>>0);
            if ($279) {
             $281 = (($278) + 1|0);
             HEAP32[$3>>2] = $281;
             $282 = HEAP8[$278>>0]|0;
             $283 = $282&255;
             $286 = $283;
            } else {
             $284 = (___shgetc($f)|0);
             $286 = $284;
            }
            $285 = (($286) + 1)|0;
            $287 = (($scanset) + ($285)|0);
            $288 = HEAP8[$287>>0]|0;
            $289 = ($288<<24>>24)==(0);
            if ($289) {
             break;
            }
            $$pre213 = HEAP32[$4>>2]|0;
            $280 = $$pre213;
           }
           $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
           break;
          } else {
           $265 = $140;$i$3 = 0;
           while(1) {
            $263 = HEAP32[$3>>2]|0;
            $264 = ($263>>>0)<($265>>>0);
            if ($264) {
             $266 = (($263) + 1|0);
             HEAP32[$3>>2] = $266;
             $267 = HEAP8[$263>>0]|0;
             $268 = $267&255;
             $271 = $268;
            } else {
             $269 = (___shgetc($f)|0);
             $271 = $269;
            }
            $270 = (($271) + 1)|0;
            $272 = (($scanset) + ($270)|0);
            $273 = HEAP8[$272>>0]|0;
            $274 = ($273<<24>>24)==(0);
            if ($274) {
             $i$3$lcssa = $i$3;
             break;
            }
            $275 = $271&255;
            $276 = (($i$3) + 1)|0;
            $277 = (($dest$0) + ($i$3)|0);
            HEAP8[$277>>0] = $275;
            $$pre214 = HEAP32[$4>>2]|0;
            $265 = $$pre214;$i$3 = $276;
           }
           $i$4 = $i$3$lcssa;$s$3 = $dest$0;$wcs$4 = 0;
           break;
          }
         }
        } while(0);
        $290 = HEAP32[$4>>2]|0;
        $291 = ($290|0)==(0|0);
        $$pre211 = HEAP32[$3>>2]|0;
        if ($291) {
         $295 = $$pre211;
        } else {
         $292 = (($$pre211) + -1|0);
         HEAP32[$3>>2] = $292;
         $295 = $292;
        }
        $293 = HEAP32[$5>>2]|0;
        $294 = HEAP32[$6>>2]|0;
        $296 = $295;
        $297 = $294;
        $298 = (($296) - ($297))|0;
        $299 = (($298) + ($293))|0;
        $300 = ($299|0)==(0);
        if ($300) {
         $alloc$0$lcssa295 = $alloc$0;$matches$0111$lcssa253 = $matches$0111;$s$8$ph = $s$3;$wcs$9$ph = $wcs$4;
         label = 191;
         break L4;
        }
        $$not = $144 ^ 1;
        $301 = ($299|0)==($width$1|0);
        $or$cond9 = $301 | $$not;
        if (!($or$cond9)) {
         $alloc$0$lcssa295 = $alloc$0;$matches$0111$lcssa253 = $matches$0111;$s$8$ph = $s$3;$wcs$9$ph = $wcs$4;
         label = 191;
         break L4;
        }
        do {
         if ($180) {
          if ($179) {
           HEAP32[$dest$0>>2] = $wcs$4;
           break;
          } else {
           HEAP32[$dest$0>>2] = $s$3;
           break;
          }
         }
        } while(0);
        if ($144) {
         $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
        } else {
         $302 = ($wcs$4|0)==(0|0);
         if (!($302)) {
          $303 = (($wcs$4) + ($i$4<<2)|0);
          HEAP32[$303>>2] = 0;
         }
         $304 = ($s$3|0)==(0|0);
         if ($304) {
          $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
         } else {
          $305 = (($s$3) + ($i$4)|0);
          HEAP8[$305>>0] = 0;
          $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
         }
        }
        break;
       }
       default: {
        $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
       }
       }
      } while(0);
      L204: do {
       if ((label|0) == 164) {
        label = 0;
        $306 = (___intscan($f,$base$0,0,-1,-1)|0);
        $307 = tempRet0;
        $308 = HEAP32[$5>>2]|0;
        $309 = HEAP32[$3>>2]|0;
        $310 = HEAP32[$6>>2]|0;
        $311 = $309;
        $312 = $310;
        $313 = (($312) - ($311))|0;
        $314 = ($308|0)==($313|0);
        if ($314) {
         $alloc$0$lcssa295 = $alloc$0;$matches$0111$lcssa253 = $matches$0111;$s$8$ph = $s$1;$wcs$9$ph = $wcs$1;
         label = 191;
         break L4;
        }
        $315 = ($$|0)==(112);
        $316 = ($dest$0|0)!=(0|0);
        $or$cond3 = $315 & $316;
        if ($or$cond3) {
         $317 = $306;
         HEAP32[$dest$0>>2] = $317;
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         break;
        }
        $318 = ($dest$0|0)==(0|0);
        if ($318) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         switch ($$size$0|0) {
         case -2:  {
          $319 = $306&255;
          HEAP8[$dest$0>>0] = $319;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L204;
          break;
         }
         case -1:  {
          $320 = $306&65535;
          HEAP16[$dest$0>>1] = $320;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L204;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $306;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L204;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $306;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L204;
          break;
         }
         case 3:  {
          $321 = $dest$0;
          $322 = $321;
          HEAP32[$322>>2] = $306;
          $323 = (($321) + 4)|0;
          $324 = $323;
          HEAP32[$324>>2] = $307;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L204;
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L204;
         }
         }
        }
       }
      } while(0);
      $335 = HEAP32[$5>>2]|0;
      $336 = HEAP32[$3>>2]|0;
      $337 = HEAP32[$6>>2]|0;
      $338 = $336;
      $339 = $337;
      $340 = (($335) + ($pos$1))|0;
      $341 = (($340) + ($338))|0;
      $342 = (($341) - ($339))|0;
      $not$ = ($dest$0|0)!=(0|0);
      $343 = $not$&1;
      $matches$0$ = (($343) + ($matches$0111))|0;
      $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $342;$s$5 = $s$4;$wcs$6 = $wcs$5;
      break L6;
     }
    } while(0);
    $46 = $43&1;
    $47 = (($p$0117) + ($46)|0);
    ___shlim($f,0);
    $48 = HEAP32[$3>>2]|0;
    $49 = HEAP32[$4>>2]|0;
    $50 = ($48>>>0)<($49>>>0);
    if ($50) {
     $51 = (($48) + 1|0);
     HEAP32[$3>>2] = $51;
     $52 = HEAP8[$48>>0]|0;
     $53 = $52&255;
     $57 = $53;
    } else {
     $54 = (___shgetc($f)|0);
     $57 = $54;
    }
    $55 = HEAP8[$47>>0]|0;
    $56 = $55&255;
    $58 = ($57|0)==($56|0);
    if (!($58)) {
     $$lcssa280 = $57;$matches$0111$lcssa = $matches$0111;$s$0109$lcssa = $s$0109;$wcs$0110$lcssa = $wcs$0110;
     label = 20;
     break L4;
    }
    $65 = (($pos$0116) + 1)|0;
    $matches$1 = $matches$0111;$p$11 = $47;$pos$2 = $65;$s$5 = $s$0109;$wcs$6 = $wcs$0110;
   } else {
    $p$1 = $p$0117;
    while(1) {
     $16 = (($p$1) + 1|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = (_isspace($18)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      $p$1$lcssa = $p$1;
      break;
     } else {
      $p$1 = $16;
     }
    }
    ___shlim($f,0);
    while(1) {
     $21 = HEAP32[$3>>2]|0;
     $22 = HEAP32[$4>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = (($21) + 1|0);
      HEAP32[$3>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $28 = $26;
     } else {
      $27 = (___shgetc($f)|0);
      $28 = $27;
     }
     $29 = (_isspace($28)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      break;
     }
    }
    $31 = HEAP32[$4>>2]|0;
    $32 = ($31|0)==(0|0);
    $$pre216 = HEAP32[$3>>2]|0;
    if ($32) {
     $36 = $$pre216;
    } else {
     $33 = (($$pre216) + -1|0);
     HEAP32[$3>>2] = $33;
     $36 = $33;
    }
    $34 = HEAP32[$5>>2]|0;
    $35 = HEAP32[$6>>2]|0;
    $37 = $36;
    $38 = $35;
    $39 = (($34) + ($pos$0116))|0;
    $40 = (($39) + ($37))|0;
    $41 = (($40) - ($38))|0;
    $matches$1 = $matches$0111;$p$11 = $p$1$lcssa;$pos$2 = $41;$s$5 = $s$0109;$wcs$6 = $wcs$0110;
   }
  } while(0);
  $344 = (($p$11) + 1|0);
  $345 = HEAP8[$344>>0]|0;
  $346 = ($345<<24>>24)==(0);
  if ($346) {
   $matches$1$lcssa = $matches$1;
   label = 194;
   break;
  } else {
   $13 = $345;$matches$0111 = $matches$1;$p$0117 = $344;$pos$0116 = $pos$2;$s$0109 = $s$5;$wcs$0110 = $wcs$6;
  }
 }
 switch (label|0) {
  case 20: {
   $59 = HEAP32[$4>>2]|0;
   $60 = ($59|0)==(0|0);
   if (!($60)) {
    $61 = HEAP32[$3>>2]|0;
    $62 = (($61) + -1|0);
    HEAP32[$3>>2] = $62;
   }
   $63 = ($$lcssa280|0)>(-1);
   $64 = ($matches$0111$lcssa|0)!=(0);
   $or$cond5 = $63 | $64;
   if ($or$cond5) {
    $matches$3 = $matches$0111$lcssa;
    STACKTOP = sp;return ($matches$3|0);
   } else {
    $alloc$1 = 0;$s$7 = $s$0109$lcssa;$wcs$8 = $wcs$0110$lcssa;
    label = 190;
   }
   break;
  }
  case 182: {
   $alloc$0200 = $alloc$0$lcssa299;$matches$0111261 = $matches$0111$lcssa257;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa241;
   label = 189;
   break;
  }
  case 183: {
   $alloc$0200 = 0;$matches$0111261 = $matches$0111$lcssa256;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa$lcssa;
   label = 189;
   break;
  }
  case 184: {
   $alloc$0200 = $alloc$0$lcssa300;$matches$0111261 = $matches$0111$lcssa258;$s$6 = 0;$wcs$7 = 0;
   label = 189;
   break;
  }
  case 185: {
   $alloc$0200 = $alloc$0$lcssa301;$matches$0111261 = $matches$0111$lcssa259;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa244;
   label = 189;
   break;
  }
  case 186: {
   $alloc$0200 = $alloc$0$lcssa297;$matches$0111261 = $matches$0111$lcssa255;$s$6 = $s$2$ph$lcssa237;$wcs$7 = 0;
   label = 189;
   break;
  }
  case 187: {
   $alloc$0200 = $alloc$0$lcssa296;$matches$0111261 = $matches$0111$lcssa254;$s$6 = $s$1$lcssa282;$wcs$7 = $wcs$1$lcssa289;
   label = 189;
   break;
  }
  case 188: {
   $alloc$0200 = $alloc$0$lcssa;$matches$0111261 = $matches$0111$lcssa252;$s$6 = $s$6$ph;$wcs$7 = $wcs$7$ph;
   label = 189;
   break;
  }
  case 191: {
   $alloc$2 = $alloc$0$lcssa295;$matches$2 = $matches$0111$lcssa253;$s$8 = $s$8$ph;$wcs$9 = $wcs$9$ph;
   break;
  }
  case 194: {
   $matches$3 = $matches$1$lcssa;
   STACKTOP = sp;return ($matches$3|0);
   break;
  }
 }
 if ((label|0) == 189) {
  $$old4 = ($matches$0111261|0)==(0);
  if ($$old4) {
   $alloc$1 = $alloc$0200;$s$7 = $s$6;$wcs$8 = $wcs$7;
   label = 190;
  } else {
   $alloc$2 = $alloc$0200;$matches$2 = $matches$0111261;$s$8 = $s$6;$wcs$9 = $wcs$7;
  }
 }
 if ((label|0) == 190) {
  $alloc$2 = $alloc$1;$matches$2 = -1;$s$8 = $s$7;$wcs$9 = $wcs$8;
 }
 $347 = ($alloc$2|0)==(0);
 if ($347) {
  $matches$3 = $matches$2;
  STACKTOP = sp;return ($matches$3|0);
 }
 _free($s$8);
 _free($wcs$9);
 $matches$3 = $matches$2;
 STACKTOP = sp;return ($matches$3|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f) + 32|0);
 HEAP32[$0>>2] = 108;
 $1 = (($f) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = (($f) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = (($f) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_MUSL_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   label = 4;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   label = 4;
   break;
  } else {
   $$01 = $1;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$0211$lcssa = 0, $$1 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$0$lcssa$ph = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $$02$lcssa = $s;
  } else {
   $5 = $c&255;
   $$0211 = $s;
   while(1) {
    $12 = HEAP8[$$0211>>0]|0;
    $13 = ($12<<24>>24)==(0);
    $14 = ($12<<24>>24)==($5<<24>>24);
    $or$cond = $13 | $14;
    $8 = (($$0211) + 1|0);
    if ($or$cond) {
     $$0211$lcssa = $$0211;
     break;
    }
    $9 = $8;
    $10 = $9 & 3;
    $11 = ($10|0)==(0);
    if ($11) {
     $$lcssa20 = $8;
     label = 7;
     break;
    } else {
     $$0211 = $8;
    }
   }
   if ((label|0) == 7) {
    $$02$lcssa = $$lcssa20;
    break;
   }
   $$0 = $$0211$lcssa;
   return ($$0|0);
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$02$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 if ($21) {
  $30 = $16;$w$08 = $$02$lcssa;
  while(1) {
   $29 = $30 ^ $15;
   $31 = (($29) + -16843009)|0;
   $32 = $29 & -2139062144;
   $33 = $32 ^ -2139062144;
   $34 = $33 & $31;
   $35 = ($34|0)==(0);
   $23 = (($w$08) + 4|0);
   if (!($35)) {
    $w$0$lcssa$ph = $w$08;
    break;
   }
   $22 = HEAP32[$23>>2]|0;
   $24 = (($22) + -16843009)|0;
   $25 = $22 & -2139062144;
   $26 = $25 ^ -2139062144;
   $27 = $26 & $24;
   $28 = ($27|0)==(0);
   if ($28) {
    $30 = $22;$w$08 = $23;
   } else {
    $w$0$lcssa$ph = $23;
    break;
   }
  }
  $w$0$lcssa = $w$0$lcssa$ph;
 } else {
  $w$0$lcssa = $$02$lcssa;
 }
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond5 = $38 | $39;
  $40 = (($$1) + 1|0);
  if ($or$cond5) {
   $$1$lcssa = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 $$0 = $$1$lcssa;
 return ($$0|0);
}
function _strnlen($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_memchr($s,0,$n)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $5 = $n;
  return ($5|0);
 }
 $2 = $0;
 $3 = $s;
 $4 = (($2) - ($3))|0;
 $5 = $4;
 return ($5|0);
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 return ($2|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$$i = 0, $$$i15 = 0, $$$i7 = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i14 = 0, $$01$i = 0, $$02$i = 0, $$02$i10 = 0, $$03$i = 0, $$03$i$be = 0, $$03$i$lcssa136 = 0, $$03$us$i = 0, $$03$us$i$be = 0, $$03$us$i$lcssa138 = 0, $$lcssa = 0, $$lcssa$i = 0, $$lcssa$i13 = 0, $$lcssa$i6 = 0, $$lcssa132 = 0;
 var $$lcssa133 = 0, $$lcssa134 = 0, $$lcssa139 = 0, $$lcssa142 = 0, $$lcssa145 = 0, $$lcssa155 = 0, $$lcssa159 = 0, $$lcssa162 = 0, $$lcssa165 = 0, $$lcssa175 = 0, $$lcssa180 = 0, $$mem$0$us$i = 0, $$pr$i = 0, $$pr$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $27$phi = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $byteset$i = 0, $div$i = 0, $div$us$i = 0;
 var $div4$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i9 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa147$i = 0, $ip$0$ph76$i = 0, $ip$0$ph76$i$lcssa176 = 0, $ip$0$ph76$i$lcssa177 = 0, $ip$0$ph76$i$lcssa178 = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph$lcssa$i = 0, $ip$1$ph55$i = 0, $ip$1$ph55$i$lcssa156 = 0, $ip$1$ph55$i$lcssa157 = 0, $ip$1$ph55$i$lcssa158 = 0, $jp$0$ph13$ph70$i = 0, $jp$0$ph1365$i = 0, $jp$0$ph1365$i$lcssa = 0;
 var $jp$0$ph1365$i$lcssa$lcssa = 0, $jp$0$ph1365$i$lcssa$lcssa$lcssa = 0, $jp$0$ph77$i = 0, $jp$1$ph56$i = 0, $jp$1$ph9$ph49$i = 0, $jp$1$ph944$i = 0, $jp$1$ph944$i$lcssa = 0, $jp$1$ph944$i$lcssa$lcssa = 0, $jp$1$ph944$i$lcssa$lcssa$lcssa = 0, $k$059$i = 0, $k$139$i = 0, $k$2$us$i = 0, $k$338$i = 0, $k$338$i$lcssa = 0, $k$338$us$i = 0, $k$338$us$i$lcssa = 0, $k$4$i = 0, $k$4$us$i = 0, $l$080$i = 0, $l$080$i$lcssa179 = 0;
 var $mem$0$us$i = 0, $mem$0$us$i$be = 0, $or$cond$i = 0, $or$cond$i11 = 0, $or$cond5$us$i = 0, $p$0$ph$ph$lcssa32$i = 0, $p$0$ph$ph$lcssa32151$i = 0, $p$0$ph$ph71$i = 0, $p$0$ph$ph71$i$lcssa171 = 0, $p$0$ph$ph71$i$lcssa172 = 0, $p$1$p$0$i = 0, $p$1$ph$ph$lcssa23$i = 0, $p$1$ph$ph50$i = 0, $p$1$ph$ph50$i$lcssa151 = 0, $p$1$ph$ph50$i$lcssa152 = 0, $p$3155$i = 0, $shift$i = 0, $z$0$i = 0, $z$0$us$i = 0, $z$1$i = 0;
 var $z$1$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = $h;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $0 << 24 >> 24;
 $3 = (_strchr($h,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($n) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($3) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($n) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  $14 = $0&255;
  $15 = $14 << 8;
  $16 = $6&255;
  $17 = $16 | $15;
  $18 = HEAP8[$3>>0]|0;
  $19 = $18&255;
  $20 = $19 << 8;
  $21 = $9&255;
  $22 = $20 | $21;
  $$01$i = $8;$27 = $3;$275 = $9;$hw$0$in2$i = $22;
  while(1) {
   $23 = $hw$0$in2$i & 65535;
   $24 = ($23|0)==($17|0);
   if ($24) {
    $$lcssa$i = $27;$32 = $275;
    break;
   }
   $25 = $23 << 8;
   $26 = (($27) + 2|0);
   $28 = HEAP8[$26>>0]|0;
   $29 = $28&255;
   $30 = $29 | $25;
   $31 = ($28<<24>>24)==(0);
   if ($31) {
    $$lcssa$i = $$01$i;$32 = 0;
    break;
   } else {
    $27$phi = $$01$i;$$01$i = $26;$275 = $28;$hw$0$in2$i = $30;$27 = $27$phi;
   }
  }
  $33 = ($32<<24>>24)==(0);
  $$$i = $33 ? 0 : $$lcssa$i;
  $$0 = $$$i;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = (($3) + 2|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = (($n) + 3|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = ($38<<24>>24)==(0);
 if ($39) {
  $40 = $0&255;
  $41 = $40 << 24;
  $42 = $6&255;
  $43 = $42 << 16;
  $44 = $43 | $41;
  $45 = $12&255;
  $46 = $45 << 8;
  $47 = $44 | $46;
  $48 = HEAP8[$3>>0]|0;
  $49 = $48&255;
  $50 = $49 << 24;
  $51 = $9&255;
  $52 = $51 << 16;
  $53 = $35&255;
  $54 = $53 << 8;
  $55 = $54 | $52;
  $56 = $55 | $50;
  $57 = ($56|0)==($47|0);
  if ($57) {
   $$0$lcssa$i = $34;$$lcssa$i6 = 0;
  } else {
   $$02$i = $34;$hw$03$i = $56;
   while(1) {
    $58 = (($$02$i) + 1|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = $60 | $hw$03$i;
    $62 = $61 << 8;
    $63 = ($59<<24>>24)==(0);
    $64 = ($62|0)==($47|0);
    $or$cond$i = $63 | $64;
    if ($or$cond$i) {
     $$lcssa = $58;$$lcssa132 = $63;
     break;
    } else {
     $$02$i = $58;$hw$03$i = $62;
    }
   }
   $$0$lcssa$i = $$lcssa;$$lcssa$i6 = $$lcssa132;
  }
  $65 = (($$0$lcssa$i) + -2|0);
  $$$i7 = $$lcssa$i6 ? 0 : $65;
  $$0 = $$$i7;
  STACKTOP = sp;return ($$0|0);
 }
 $66 = (($3) + 3|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = ($67<<24>>24)==(0);
 if ($68) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $69 = (($n) + 4|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = ($70<<24>>24)==(0);
 if ($71) {
  $72 = $0&255;
  $73 = $72 << 24;
  $74 = $6&255;
  $75 = $74 << 16;
  $76 = $75 | $73;
  $77 = $12&255;
  $78 = $77 << 8;
  $79 = $76 | $78;
  $80 = $38&255;
  $81 = $79 | $80;
  $82 = HEAP8[$3>>0]|0;
  $83 = $82&255;
  $84 = $83 << 24;
  $85 = $9&255;
  $86 = $85 << 16;
  $87 = $35&255;
  $88 = $87 << 8;
  $89 = $67&255;
  $90 = $88 | $86;
  $91 = $90 | $89;
  $92 = $91 | $84;
  $93 = ($92|0)==($81|0);
  if ($93) {
   $$0$lcssa$i14 = $66;$$lcssa$i13 = 0;
  } else {
   $$02$i10 = $66;$hw$03$i9 = $92;
   while(1) {
    $94 = $hw$03$i9 << 8;
    $95 = (($$02$i10) + 1|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96&255;
    $98 = $97 | $94;
    $99 = ($96<<24>>24)==(0);
    $100 = ($98|0)==($81|0);
    $or$cond$i11 = $99 | $100;
    if ($or$cond$i11) {
     $$lcssa133 = $95;$$lcssa134 = $99;
     break;
    } else {
     $$02$i10 = $95;$hw$03$i9 = $98;
    }
   }
   $$0$lcssa$i14 = $$lcssa133;$$lcssa$i13 = $$lcssa134;
  }
  $101 = (($$0$lcssa$i14) + -3|0);
  $$$i15 = $$lcssa$i13 ? 0 : $101;
  $$0 = $$$i15;
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$byteset$i+0>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
 $106 = $0;$l$080$i = 0;
 while(1) {
  $102 = (($3) + ($l$080$i)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = ($103<<24>>24)==(0);
  if ($104) {
   label = 105;
   break;
  }
  $105 = $106 & 31;
  $107 = $105&255;
  $108 = 1 << $107;
  $div4$i = ($106&255) >>> 5;
  $109 = $div4$i&255;
  $110 = (($byteset$i) + ($109<<2)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $111 | $108;
  HEAP32[$110>>2] = $112;
  $113 = (($l$080$i) + 1)|0;
  $114 = $106&255;
  $115 = (($shift$i) + ($114<<2)|0);
  HEAP32[$115>>2] = $113;
  $116 = (($n) + ($113)|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = ($117<<24>>24)==(0);
  if ($118) {
   $$lcssa180 = $113;$l$080$i$lcssa179 = $l$080$i;
   break;
  } else {
   $106 = $117;$l$080$i = $113;
  }
 }
 if ((label|0) == 105) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $119 = ($$lcssa180>>>0)>(1);
 do {
  if ($119) {
   $276 = 1;$ip$0$ph76$i = -1;$jp$0$ph77$i = 0;
   L56: while(1) {
    $277 = $276;$jp$0$ph13$ph70$i = $jp$0$ph77$i;$p$0$ph$ph71$i = 1;
    while(1) {
     $278 = $277;$jp$0$ph1365$i = $jp$0$ph13$ph70$i;
     L60: while(1) {
      $129 = $278;$k$059$i = 1;
      while(1) {
       $125 = (($k$059$i) + ($ip$0$ph76$i))|0;
       $126 = (($n) + ($125)|0);
       $127 = HEAP8[$126>>0]|0;
       $128 = (($n) + ($129)|0);
       $130 = HEAP8[$128>>0]|0;
       $131 = ($127<<24>>24)==($130<<24>>24);
       if (!($131)) {
        $$lcssa159 = $129;$$lcssa162 = $127;$$lcssa165 = $130;$jp$0$ph1365$i$lcssa = $jp$0$ph1365$i;
        break L60;
       }
       $132 = ($k$059$i|0)==($p$0$ph$ph71$i|0);
       $123 = (($k$059$i) + 1)|0;
       if ($132) {
        break;
       }
       $122 = (($123) + ($jp$0$ph1365$i))|0;
       $124 = ($122>>>0)<($$lcssa180>>>0);
       if ($124) {
        $129 = $122;$k$059$i = $123;
       } else {
        $ip$0$ph76$i$lcssa177 = $ip$0$ph76$i;$p$0$ph$ph71$i$lcssa171 = $p$0$ph$ph71$i;
        label = 34;
        break L56;
       }
      }
      $133 = (($jp$0$ph1365$i) + ($p$0$ph$ph71$i))|0;
      $134 = (($133) + 1)|0;
      $135 = ($134>>>0)<($$lcssa180>>>0);
      if ($135) {
       $278 = $134;$jp$0$ph1365$i = $133;
      } else {
       $ip$0$ph76$i$lcssa178 = $ip$0$ph76$i;$p$0$ph$ph71$i$lcssa172 = $p$0$ph$ph71$i;
       label = 35;
       break L56;
      }
     }
     $136 = ($$lcssa162&255)>($$lcssa165&255);
     $137 = (($$lcssa159) - ($ip$0$ph76$i))|0;
     if (!($136)) {
      $jp$0$ph1365$i$lcssa$lcssa = $jp$0$ph1365$i$lcssa;
      break;
     }
     $120 = (($$lcssa159) + 1)|0;
     $121 = ($120>>>0)<($$lcssa180>>>0);
     if ($121) {
      $277 = $120;$jp$0$ph13$ph70$i = $$lcssa159;$p$0$ph$ph71$i = $137;
     } else {
      $$lcssa175 = $137;$ip$0$ph76$i$lcssa176 = $ip$0$ph76$i;
      label = 36;
      break L56;
     }
    }
    $138 = (($jp$0$ph1365$i$lcssa$lcssa) + 1)|0;
    $139 = (($jp$0$ph1365$i$lcssa$lcssa) + 2)|0;
    $140 = ($139>>>0)<($$lcssa180>>>0);
    if ($140) {
     $276 = $139;$ip$0$ph76$i = $jp$0$ph1365$i$lcssa$lcssa;$jp$0$ph77$i = $138;
    } else {
     $jp$0$ph1365$i$lcssa$lcssa$lcssa = $jp$0$ph1365$i$lcssa$lcssa;
     label = 37;
     break;
    }
   }
   if ((label|0) == 34) {
    $ip$0$ph$lcssa$i = $ip$0$ph76$i$lcssa177;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i$lcssa171;
   }
   else if ((label|0) == 35) {
    $ip$0$ph$lcssa$i = $ip$0$ph76$i$lcssa178;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i$lcssa172;
   }
   else if ((label|0) == 36) {
    $ip$0$ph$lcssa$i = $ip$0$ph76$i$lcssa176;$p$0$ph$ph$lcssa32$i = $$lcssa175;
   }
   else if ((label|0) == 37) {
    $ip$0$ph$lcssa$i = $jp$0$ph1365$i$lcssa$lcssa$lcssa;$p$0$ph$ph$lcssa32$i = 1;
   }
   $279 = 1;$ip$1$ph55$i = -1;$jp$1$ph56$i = 0;
   L76: while(1) {
    $281 = $279;$jp$1$ph9$ph49$i = $jp$1$ph56$i;$p$1$ph$ph50$i = 1;
    while(1) {
     $280 = $281;$jp$1$ph944$i = $jp$1$ph9$ph49$i;
     L80: while(1) {
      $148 = $280;$k$139$i = 1;
      while(1) {
       $144 = (($k$139$i) + ($ip$1$ph55$i))|0;
       $145 = (($n) + ($144)|0);
       $146 = HEAP8[$145>>0]|0;
       $147 = (($n) + ($148)|0);
       $149 = HEAP8[$147>>0]|0;
       $150 = ($146<<24>>24)==($149<<24>>24);
       if (!($150)) {
        $$lcssa139 = $148;$$lcssa142 = $146;$$lcssa145 = $149;$jp$1$ph944$i$lcssa = $jp$1$ph944$i;
        break L80;
       }
       $151 = ($k$139$i|0)==($p$1$ph$ph50$i|0);
       $142 = (($k$139$i) + 1)|0;
       if ($151) {
        break;
       }
       $141 = (($142) + ($jp$1$ph944$i))|0;
       $143 = ($141>>>0)<($$lcssa180>>>0);
       if ($143) {
        $148 = $141;$k$139$i = $142;
       } else {
        $ip$1$ph55$i$lcssa157 = $ip$1$ph55$i;$p$1$ph$ph50$i$lcssa151 = $p$1$ph$ph50$i;
        label = 54;
        break L76;
       }
      }
      $152 = (($jp$1$ph944$i) + ($p$1$ph$ph50$i))|0;
      $153 = (($152) + 1)|0;
      $154 = ($153>>>0)<($$lcssa180>>>0);
      if ($154) {
       $280 = $153;$jp$1$ph944$i = $152;
      } else {
       $ip$1$ph55$i$lcssa158 = $ip$1$ph55$i;$p$1$ph$ph50$i$lcssa152 = $p$1$ph$ph50$i;
       label = 55;
       break L76;
      }
     }
     $155 = ($$lcssa142&255)<($$lcssa145&255);
     $156 = (($$lcssa139) - ($ip$1$ph55$i))|0;
     if (!($155)) {
      $jp$1$ph944$i$lcssa$lcssa = $jp$1$ph944$i$lcssa;
      break;
     }
     $160 = (($$lcssa139) + 1)|0;
     $161 = ($160>>>0)<($$lcssa180>>>0);
     if ($161) {
      $281 = $160;$jp$1$ph9$ph49$i = $$lcssa139;$p$1$ph$ph50$i = $156;
     } else {
      $$lcssa155 = $156;$ip$1$ph55$i$lcssa156 = $ip$1$ph55$i;
      label = 56;
      break L76;
     }
    }
    $157 = (($jp$1$ph944$i$lcssa$lcssa) + 1)|0;
    $158 = (($jp$1$ph944$i$lcssa$lcssa) + 2)|0;
    $159 = ($158>>>0)<($$lcssa180>>>0);
    if ($159) {
     $279 = $158;$ip$1$ph55$i = $jp$1$ph944$i$lcssa$lcssa;$jp$1$ph56$i = $157;
    } else {
     $jp$1$ph944$i$lcssa$lcssa$lcssa = $jp$1$ph944$i$lcssa$lcssa;
     label = 57;
     break;
    }
   }
   if ((label|0) == 54) {
    $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i$lcssa157;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i$lcssa151;
    break;
   }
   else if ((label|0) == 55) {
    $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i$lcssa158;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i$lcssa152;
    break;
   }
   else if ((label|0) == 56) {
    $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i$lcssa156;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $$lcssa155;
    break;
   }
   else if ((label|0) == 57) {
    $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $jp$1$ph944$i$lcssa$lcssa$lcssa;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = 1;
    break;
   }
  } else {
   $ip$0$ph$lcssa147$i = -1;$ip$1$ph$lcssa$i = -1;$p$0$ph$ph$lcssa32151$i = 1;$p$1$ph$ph$lcssa23$i = 1;
  }
 } while(0);
 $162 = (($ip$1$ph$lcssa$i) + 1)|0;
 $163 = (($ip$0$ph$lcssa147$i) + 1)|0;
 $164 = ($162>>>0)>($163>>>0);
 $p$1$p$0$i = $164 ? $p$1$ph$ph$lcssa23$i : $p$0$ph$ph$lcssa32151$i;
 $ip$1$ip$0$i = $164 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa147$i;
 $165 = (($n) + ($p$1$p$0$i)|0);
 $166 = (($ip$1$ip$0$i) + 1)|0;
 $167 = (_memcmp($n,$165,$166)|0);
 $168 = ($167|0)==(0);
 if ($168) {
  $174 = (($$lcssa180) - ($p$1$p$0$i))|0;
  $175 = $$lcssa180 | 63;
  $176 = ($$lcssa180|0)==($p$1$p$0$i|0);
  if ($176) {
   $232 = $175;$p$3155$i = $$lcssa180;
  } else {
   $$03$us$i = $3;$mem$0$us$i = 0;$z$0$us$i = $3;
   L99: while(1) {
    $178 = $z$0$us$i;
    $179 = $$03$us$i;
    $180 = (($178) - ($179))|0;
    $181 = ($180>>>0)<($$lcssa180>>>0);
    do {
     if ($181) {
      $182 = (_memchr($z$0$us$i,0,$175)|0);
      $183 = ($182|0)==(0|0);
      if ($183) {
       $187 = (($z$0$us$i) + ($175)|0);
       $z$1$us$i = $187;
       break;
      } else {
       $184 = $182;
       $185 = (($184) - ($179))|0;
       $186 = ($185>>>0)<($$lcssa180>>>0);
       if ($186) {
        label = 104;
        break L99;
       } else {
        $z$1$us$i = $182;
        break;
       }
      }
     } else {
      $z$1$us$i = $z$0$us$i;
     }
    } while(0);
    $188 = (($$03$us$i) + ($l$080$i$lcssa179)|0);
    $189 = HEAP8[$188>>0]|0;
    $div$us$i = ($189&255) >>> 5;
    $190 = $div$us$i&255;
    $191 = (($byteset$i) + ($190<<2)|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = $189 & 31;
    $194 = $193&255;
    $195 = 1 << $194;
    $196 = $195 & $192;
    $197 = ($196|0)==(0);
    L107: do {
     if ($197) {
      $227 = (($$03$us$i) + ($$lcssa180)|0);
      $$03$us$i$be = $227;$mem$0$us$i$be = 0;
     } else {
      $198 = $189&255;
      $199 = (($shift$i) + ($198<<2)|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = (($$lcssa180) - ($200))|0;
      $202 = ($$lcssa180|0)==($200|0);
      if (!($202)) {
       $203 = ($mem$0$us$i|0)!=(0);
       $204 = ($201>>>0)<($p$1$p$0$i>>>0);
       $or$cond5$us$i = $203 & $204;
       $k$2$us$i = $or$cond5$us$i ? $174 : $201;
       $205 = (($$03$us$i) + ($k$2$us$i)|0);
       $$03$us$i$be = $205;$mem$0$us$i$be = 0;
       break;
      }
      $206 = ($166>>>0)>($mem$0$us$i>>>0);
      $$mem$0$us$i = $206 ? $166 : $mem$0$us$i;
      $207 = (($n) + ($$mem$0$us$i)|0);
      $208 = HEAP8[$207>>0]|0;
      $209 = ($208<<24>>24)==(0);
      do {
       if (!($209)) {
        $$pr$us$i = $208;$k$338$us$i = $$mem$0$us$i;
        while(1) {
         $214 = (($$03$us$i) + ($k$338$us$i)|0);
         $215 = HEAP8[$214>>0]|0;
         $216 = ($$pr$us$i<<24>>24)==($215<<24>>24);
         $211 = (($k$338$us$i) + 1)|0;
         if (!($216)) {
          $k$338$us$i$lcssa = $k$338$us$i;
          label = 77;
          break;
         }
         $210 = (($n) + ($211)|0);
         $212 = HEAP8[$210>>0]|0;
         $213 = ($212<<24>>24)==(0);
         if ($213) {
          label = 73;
          break;
         } else {
          $$pr$us$i = $212;$k$338$us$i = $211;
         }
        }
        if ((label|0) == 73) {
         label = 0;
         break;
        }
        else if ((label|0) == 77) {
         label = 0;
         $217 = (($k$338$us$i$lcssa) - ($ip$1$ip$0$i))|0;
         $218 = (($$03$us$i) + ($217)|0);
         $$03$us$i$be = $218;$mem$0$us$i$be = 0;
         break L107;
        }
       }
      } while(0);
      $k$4$us$i = $166;
      while(1) {
       $219 = ($k$4$us$i>>>0)>($mem$0$us$i>>>0);
       if (!($219)) {
        $$03$us$i$lcssa138 = $$03$us$i;
        label = 103;
        break L99;
       }
       $220 = (($k$4$us$i) + -1)|0;
       $221 = (($n) + ($220)|0);
       $222 = HEAP8[$221>>0]|0;
       $223 = (($$03$us$i) + ($220)|0);
       $224 = HEAP8[$223>>0]|0;
       $225 = ($222<<24>>24)==($224<<24>>24);
       if ($225) {
        $k$4$us$i = $220;
       } else {
        break;
       }
      }
      $226 = (($$03$us$i) + ($p$1$p$0$i)|0);
      $$03$us$i$be = $226;$mem$0$us$i$be = $174;
     }
    } while(0);
    $$03$us$i = $$03$us$i$be;$mem$0$us$i = $mem$0$us$i$be;$z$0$us$i = $z$1$us$i;
   }
   if ((label|0) == 103) {
    $$0 = $$03$us$i$lcssa138;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 104) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } else {
  $169 = (($$lcssa180) - ($ip$1$ip$0$i))|0;
  $170 = (($169) + -1)|0;
  $171 = ($ip$1$ip$0$i>>>0)>($170>>>0);
  $ip$1$ip$0$$i = $171 ? $ip$1$ip$0$i : $170;
  $172 = (($ip$1$ip$0$$i) + 1)|0;
  $173 = $$lcssa180 | 63;
  $232 = $173;$p$3155$i = $172;
 }
 $177 = (($n) + ($166)|0);
 $$03$i = $3;$z$0$i = $3;
 L134: while(1) {
  $228 = $z$0$i;
  $229 = $$03$i;
  $230 = (($228) - ($229))|0;
  $231 = ($230>>>0)<($$lcssa180>>>0);
  do {
   if ($231) {
    $233 = (_memchr($z$0$i,0,$232)|0);
    $234 = ($233|0)==(0|0);
    if ($234) {
     $238 = (($z$0$i) + ($232)|0);
     $z$1$i = $238;
     break;
    } else {
     $235 = $233;
     $236 = (($235) - ($229))|0;
     $237 = ($236>>>0)<($$lcssa180>>>0);
     if ($237) {
      label = 102;
      break L134;
     } else {
      $z$1$i = $233;
      break;
     }
    }
   } else {
    $z$1$i = $z$0$i;
   }
  } while(0);
  $239 = (($$03$i) + ($l$080$i$lcssa179)|0);
  $240 = HEAP8[$239>>0]|0;
  $div$i = ($240&255) >>> 5;
  $241 = $div$i&255;
  $242 = (($byteset$i) + ($241<<2)|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = $240 & 31;
  $245 = $244&255;
  $246 = 1 << $245;
  $247 = $246 & $243;
  $248 = ($247|0)==(0);
  L142: do {
   if ($248) {
    $255 = (($$03$i) + ($$lcssa180)|0);
    $$03$i$be = $255;
   } else {
    $249 = $240&255;
    $250 = (($shift$i) + ($249<<2)|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = ($$lcssa180|0)==($251|0);
    if (!($252)) {
     $253 = (($$lcssa180) - ($251))|0;
     $254 = (($$03$i) + ($253)|0);
     $$03$i$be = $254;
     break;
    }
    $256 = HEAP8[$177>>0]|0;
    $257 = ($256<<24>>24)==(0);
    do {
     if (!($257)) {
      $$pr$i = $256;$k$338$i = $166;
      while(1) {
       $262 = (($$03$i) + ($k$338$i)|0);
       $263 = HEAP8[$262>>0]|0;
       $264 = ($$pr$i<<24>>24)==($263<<24>>24);
       $259 = (($k$338$i) + 1)|0;
       if (!($264)) {
        $k$338$i$lcssa = $k$338$i;
        label = 97;
        break;
       }
       $258 = (($n) + ($259)|0);
       $260 = HEAP8[$258>>0]|0;
       $261 = ($260<<24>>24)==(0);
       if ($261) {
        label = 93;
        break;
       } else {
        $$pr$i = $260;$k$338$i = $259;
       }
      }
      if ((label|0) == 93) {
       label = 0;
       break;
      }
      else if ((label|0) == 97) {
       label = 0;
       $265 = (($k$338$i$lcssa) - ($ip$1$ip$0$i))|0;
       $266 = (($$03$i) + ($265)|0);
       $$03$i$be = $266;
       break L142;
      }
     }
    } while(0);
    $k$4$i = $166;
    while(1) {
     $267 = ($k$4$i|0)==(0);
     if ($267) {
      $$03$i$lcssa136 = $$03$i;
      label = 101;
      break L134;
     }
     $268 = (($k$4$i) + -1)|0;
     $269 = (($n) + ($268)|0);
     $270 = HEAP8[$269>>0]|0;
     $271 = (($$03$i) + ($268)|0);
     $272 = HEAP8[$271>>0]|0;
     $273 = ($270<<24>>24)==($272<<24>>24);
     if ($273) {
      $k$4$i = $268;
     } else {
      break;
     }
    }
    $274 = (($$03$i) + ($p$3155$i)|0);
    $$03$i$be = $274;
   }
  } while(0);
  $$03$i = $$03$i$be;$z$0$i = $z$1$i;
 }
 if ((label|0) == 101) {
  $$0 = $$03$i$lcssa136;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 102) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 return ($0|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$lcssa = 0, $$lcssa110 = 0, $$lcssa112 = 0, $$lcssa115 = 0, $$lcssa116 = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa120 = 0, $$lcssa123 = 0, $$lcssa125 = 0, $$lcssa127 = 0, $$lcssa130 = 0, $$lcssa132 = 0, $$lcssa134 = 0, $$lcssa137 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i23$i = 0, $$pre$i25 = 0;
 var $$pre$phi$i$iZ2D = 0, $$pre$phi$i24$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$rsize$3$i$lcssa = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0, $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2338 = 0, $$sum$i32 = 0;
 var $$sum$i39 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum102$i = 0, $$sum103$i = 0, $$sum104$i = 0, $$sum105$i = 0, $$sum106$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0, $$sum11$i = 0;
 var $$sum11$i$i = 0, $$sum11$i22$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0;
 var $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0;
 var $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0;
 var $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0;
 var $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0;
 var $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0;
 var $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0;
 var $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0;
 var $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0;
 var $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$015$i$i = 0, $K8$053$i$i = 0, $R$0$i = 0, $R$0$i$be = 0, $R$0$i$i = 0, $R$0$i$i$be = 0;
 var $R$0$i$i$lcssa = 0, $R$0$i$i$ph = 0, $R$0$i$lcssa = 0, $R$0$i$ph = 0, $R$0$i18 = 0, $R$0$i18$be = 0, $R$0$i18$lcssa = 0, $R$0$i18$ph = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$be = 0, $RP$0$i$i = 0, $RP$0$i$i$be = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$i$ph = 0, $RP$0$i$lcssa = 0, $RP$0$i$ph = 0, $RP$0$i17 = 0;
 var $RP$0$i17$be = 0, $RP$0$i17$lcssa = 0, $RP$0$i17$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i26$i = 0, $T$014$i$i = 0, $T$014$i$i$lcssa = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$052$i$i = 0, $T$052$i$i$lcssa = 0, $br$0$i = 0, $br$030$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0;
 var $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i27$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond47$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0;
 var $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$2$i$ph = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0$i$i$lcssa = 0, $sp$074$i = 0, $sp$074$i$lcssa = 0, $sp$173$i = 0, $sp$173$i$lcssa = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$129$i = 0, $ssize$2$i = 0;
 var $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$1$i$ph = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$2$v$3$i$lcssa = 0, $t$230$i = 0, $t$230$i$be = 0, $tbase$245$i = 0, $tsize$03141$i = 0, $tsize$1$i = 0, $tsize$244$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$2$i$ph = 0, $v$3$lcssa$i = 0;
 var $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[628032>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((628032 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((628032 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[628032>>2] = $22;
     } else {
      $23 = HEAP32[((628032 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[((628032 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((628032 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((628032 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[628032>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[((628032 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((628032 + 8|0))>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((628032 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((628032 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[628032>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[628032>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre105 = ((628032 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre105;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((628032 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((628032 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((628032 + 8|0))>>2] = $81;
     HEAP32[((628032 + 20|0))>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[((628032 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((628032 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((628032 + 16|0))>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($5)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i$lcssa) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i$lcssa) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = (($v$0$i$lcssa) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i$lcssa) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i$ph = $171;$RP$0$i$ph = $170;
        }
       } else {
        $R$0$i$ph = $168;$RP$0$i$ph = $167;
       }
       $R$0$i = $R$0$i$ph;$RP$0$i = $RP$0$i$ph;
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if ($175) {
         $176 = (($R$0$i) + 16|0);
         $177 = HEAP32[$176>>2]|0;
         $178 = ($177|0)==(0|0);
         if ($178) {
          $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
          break;
         } else {
          $R$0$i$be = $177;$RP$0$i$be = $176;
         }
        } else {
         $R$0$i$be = $174;$RP$0$i$be = $173;
        }
        $R$0$i = $R$0$i$be;$RP$0$i = $RP$0$i$be;
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = (($v$0$i$lcssa) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i$lcssa) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((628032 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((628032 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((628032 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((628032 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((628032 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i$lcssa) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i$lcssa) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((628032 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i39 = $5 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i39)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($5))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[((628032 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((628032 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((628032 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[628032>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[628032>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((628032 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((628032 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((628032 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((628032 + 8|0))>>2] = $rsize$0$i$lcssa;
      HEAP32[((628032 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i$lcssa) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((628032 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((628032 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     if ($277) {
      $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
     } else {
      $278 = ($idx$0$i|0)==(31);
      if ($278) {
       $282 = 0;
      } else {
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $282 = $280;
      }
      $281 = $246 << $282;
      $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
      while(1) {
       $283 = (($t$0$i14) + 4|0);
       $284 = HEAP32[$283>>2]|0;
       $285 = $284 & -8;
       $286 = (($285) - ($246))|0;
       $287 = ($286>>>0)<($rsize$0$i15>>>0);
       if ($287) {
        $288 = ($285|0)==($246|0);
        if ($288) {
         $rsize$2$i$ph = $286;$t$1$i$ph = $t$0$i14;$v$2$i$ph = $t$0$i14;
         break;
        } else {
         $rsize$1$i = $286;$v$1$i = $t$0$i14;
        }
       } else {
        $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
       }
       $289 = (($t$0$i14) + 20|0);
       $290 = HEAP32[$289>>2]|0;
       $291 = $sizebits$0$i >>> 31;
       $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
       $293 = HEAP32[$292>>2]|0;
       $294 = ($290|0)==(0|0);
       $295 = ($290|0)==($293|0);
       $or$cond19$i = $294 | $295;
       $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
       $296 = ($293|0)==(0|0);
       $297 = $sizebits$0$i << 1;
       if ($296) {
        $rsize$2$i$ph = $rsize$1$i;$t$1$i$ph = $rst$1$i;$v$2$i$ph = $v$1$i;
        break;
       } else {
        $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
       }
      }
      $rsize$2$i = $rsize$2$i$ph;$t$1$i = $t$1$i$ph;$v$2$i = $v$2$i$ph;
     }
     $298 = ($t$1$i|0)==(0|0);
     $299 = ($v$2$i|0)==(0|0);
     $or$cond$i = $298 & $299;
     if ($or$cond$i) {
      $300 = 2 << $idx$0$i;
      $301 = (0 - ($300))|0;
      $302 = $300 | $301;
      $303 = $247 & $302;
      $304 = ($303|0)==(0);
      if ($304) {
       $nb$0 = $246;
       break;
      }
      $305 = (0 - ($303))|0;
      $306 = $303 & $305;
      $307 = (($306) + -1)|0;
      $308 = $307 >>> 12;
      $309 = $308 & 16;
      $310 = $307 >>> $309;
      $311 = $310 >>> 5;
      $312 = $311 & 8;
      $313 = $312 | $309;
      $314 = $310 >>> $312;
      $315 = $314 >>> 2;
      $316 = $315 & 4;
      $317 = $313 | $316;
      $318 = $314 >>> $316;
      $319 = $318 >>> 1;
      $320 = $319 & 2;
      $321 = $317 | $320;
      $322 = $318 >>> $320;
      $323 = $322 >>> 1;
      $324 = $323 & 1;
      $325 = $321 | $324;
      $326 = $322 >>> $324;
      $327 = (($325) + ($326))|0;
      $328 = ((628032 + ($327<<2)|0) + 304|0);
      $329 = HEAP32[$328>>2]|0;
      $t$2$ph$i = $329;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $330 = ($t$2$ph$i|0)==(0|0);
     if ($330) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$2$i;
      while(1) {
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if ($338) {
        $339 = (($t$230$i) + 20|0);
        $340 = HEAP32[$339>>2]|0;
        $341 = ($340|0)==(0|0);
        if ($341) {
         $$rsize$3$i$lcssa = $$rsize$3$i;$t$2$v$3$i$lcssa = $t$2$v$3$i;
         break;
        } else {
         $t$230$i$be = $340;
        }
       } else {
        $t$230$i$be = $337;
       }
       $rsize$331$i = $$rsize$3$i;$t$230$i = $t$230$i$be;$v$332$i = $t$2$v$3$i;
      }
      $rsize$3$lcssa$i = $$rsize$3$i$lcssa;$v$3$lcssa$i = $t$2$v$3$i$lcssa;
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((628032 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((628032 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18$ph = $368;$RP$0$i17$ph = $367;
          }
         } else {
          $R$0$i18$ph = $365;$RP$0$i17$ph = $364;
         }
         $R$0$i18 = $R$0$i18$ph;$RP$0$i17 = $RP$0$i17$ph;
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $373 = (($R$0$i18) + 16|0);
           $374 = HEAP32[$373>>2]|0;
           $375 = ($374|0)==(0|0);
           if ($375) {
            $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
            break;
           } else {
            $R$0$i18$be = $374;$RP$0$i17$be = $373;
           }
          } else {
           $R$0$i18$be = $371;$RP$0$i17$be = $370;
          }
          $R$0$i18 = $R$0$i18$be;$RP$0$i17 = $RP$0$i17$be;
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((628032 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((628032 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((628032 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((628032 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((628032 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((628032 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L95: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2338 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2338)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((628032 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[628032>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          do {
           if ($429) {
            $430 = $426 | $427;
            HEAP32[628032>>2] = $430;
            $$sum14$pre$i = (($424) + 2)|0;
            $$pre$i25 = ((628032 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
           } else {
            $$sum17$i = (($424) + 2)|0;
            $431 = ((628032 + ($$sum17$i<<2)|0) + 40|0);
            $432 = HEAP32[$431>>2]|0;
            $433 = HEAP32[((628032 + 16|0))>>2]|0;
            $434 = ($432>>>0)<($433>>>0);
            if (!($434)) {
             $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((628032 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((628032 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((628032 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$029$i = $483;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = ((($T$028$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa134 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $$lcssa137 = $487;
             label = 163;
             break;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           if ((label|0) == 163) {
            $T$0$lcssa$i = $$lcssa137;
            break;
           }
           $494 = HEAP32[((628032 + 16|0))>>2]|0;
           $495 = ($$lcssa134>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa134>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L95;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((628032 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((628032 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((628032 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((628032 + 20|0))>>2] = $514;
   HEAP32[((628032 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((628032 + 8|0))>>2] = 0;
   HEAP32[((628032 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[((628032 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((628032 + 12|0))>>2] = $528;
  $529 = HEAP32[((628032 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((628032 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[628504>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((628504 + 8|0))>>2] = $538;
    HEAP32[((628504 + 4|0))>>2] = $538;
    HEAP32[((628504 + 12|0))>>2] = -1;
    HEAP32[((628504 + 16|0))>>2] = -1;
    HEAP32[((628504 + 20|0))>>2] = 0;
    HEAP32[((628032 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[628504>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((628504 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[((628032 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((628032 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[((628032 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L279: do {
  if ($560) {
   $561 = HEAP32[((628032 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   do {
    if ($562) {
     label = 191;
    } else {
     $sp$0$i$i = ((628032 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa130 = $sp$0$i$i;$$lcssa132 = $565;$sp$0$i$i$lcssa = $sp$0$i$i;
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 190;
       break;
      } else {
       $sp$0$i$i = $570;
      }
     }
     if ((label|0) == 190) {
      label = 191;
      break;
     }
     $572 = ($sp$0$i$i$lcssa|0)==(0|0);
     if ($572) {
      label = 191;
     } else {
      $595 = HEAP32[((628032 + 12|0))>>2]|0;
      $596 = (($548) - ($595))|0;
      $597 = $596 & $549;
      $598 = ($597>>>0)<(2147483647);
      if ($598) {
       $599 = (_sbrk(($597|0))|0);
       $600 = HEAP32[$$lcssa130>>2]|0;
       $601 = HEAP32[$$lcssa132>>2]|0;
       $602 = (($600) + ($601)|0);
       $603 = ($599|0)==($602|0);
       if ($603) {
        $br$0$i = $599;$ssize$1$i = $597;
        label = 200;
       } else {
        $br$030$i = $599;$ssize$129$i = $597;
        label = 201;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 191) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if ($574) {
      $tsize$03141$i = 0;
     } else {
      $575 = $573;
      $576 = HEAP32[((628504 + 4|0))>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $550;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($550) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[((628032 + 432|0))>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $587 & $588;
      if ($or$cond$i29) {
       $589 = HEAP32[((628032 + 440|0))>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         $tsize$03141$i = 0;
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $br$0$i = $573;$ssize$1$i = $ssize$0$i;
        label = 200;
       } else {
        $br$030$i = $593;$ssize$129$i = $ssize$0$i;
        label = 201;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   L303: do {
    if ((label|0) == 200) {
     $604 = ($br$0$i|0)==((-1)|0);
     if ($604) {
      $tsize$03141$i = $ssize$1$i;
     } else {
      $tbase$245$i = $br$0$i;$tsize$244$i = $ssize$1$i;
      label = 211;
      break L279;
     }
    }
    else if ((label|0) == 201) {
     $605 = (0 - ($ssize$129$i))|0;
     $606 = ($br$030$i|0)!=((-1)|0);
     $607 = ($ssize$129$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $607;
     $608 = ($545>>>0)>($ssize$129$i>>>0);
     $or$cond4$i = $or$cond5$i & $608;
     do {
      if ($or$cond4$i) {
       $609 = HEAP32[((628504 + 8|0))>>2]|0;
       $610 = (($547) - ($ssize$129$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         $tsize$03141$i = 0;
         break L303;
        } else {
         $617 = (($613) + ($ssize$129$i))|0;
         $ssize$2$i = $617;
         break;
        }
       } else {
        $ssize$2$i = $ssize$129$i;
       }
      } else {
       $ssize$2$i = $ssize$129$i;
      }
     } while(0);
     $618 = ($br$030$i|0)==((-1)|0);
     if ($618) {
      $tsize$03141$i = 0;
     } else {
      $tbase$245$i = $br$030$i;$tsize$244$i = $ssize$2$i;
      label = 211;
      break L279;
     }
    }
   } while(0);
   $619 = HEAP32[((628032 + 444|0))>>2]|0;
   $620 = $619 | 4;
   HEAP32[((628032 + 444|0))>>2] = $620;
   $tsize$1$i = $tsize$03141$i;
   label = 208;
  } else {
   $tsize$1$i = 0;
   label = 208;
  }
 } while(0);
 if ((label|0) == 208) {
  $621 = ($550>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($550|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond3$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond6$i = $or$cond3$i & $626;
   if ($or$cond6$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$245$i = $622;$tsize$244$i = $$tsize$1$i;
     label = 211;
    }
   }
  }
 }
 if ((label|0) == 211) {
  $632 = HEAP32[((628032 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$244$i))|0;
  HEAP32[((628032 + 432|0))>>2] = $633;
  $634 = HEAP32[((628032 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((628032 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((628032 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L323: do {
   if ($637) {
    $638 = HEAP32[((628032 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$245$i>>>0)<($638>>>0);
    $or$cond8$i = $639 | $640;
    if ($or$cond8$i) {
     HEAP32[((628032 + 16|0))>>2] = $tbase$245$i;
    }
    HEAP32[((628032 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((628032 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((628032 + 460|0))>>2] = 0;
    $641 = HEAP32[628504>>2]|0;
    HEAP32[((628032 + 36|0))>>2] = $641;
    HEAP32[((628032 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((628032 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((628032 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((628032 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$244$i) + -40)|0;
    $648 = (($tbase$245$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$245$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((628032 + 24|0))>>2] = $654;
    HEAP32[((628032 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i12$i = (($655) + 4)|0;
    $658 = (($tbase$245$i) + ($$sum$i12$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$244$i) + -36)|0;
    $659 = (($tbase$245$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((628504 + 16|0))>>2]|0;
    HEAP32[((628032 + 28|0))>>2] = $660;
   } else {
    $sp$074$i = ((628032 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$074$i>>2]|0;
     $662 = (($sp$074$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$245$i|0)==($664|0);
     if ($665) {
      $$lcssa123 = $661;$$lcssa125 = $662;$$lcssa127 = $663;$sp$074$i$lcssa = $sp$074$i;
      label = 224;
      break;
     }
     $666 = (($sp$074$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      label = 229;
      break;
     } else {
      $sp$074$i = $667;
     }
    }
    if ((label|0) == 224) {
     $669 = (($sp$074$i$lcssa) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($$lcssa123>>>0);
      $674 = ($636>>>0)<($tbase$245$i>>>0);
      $or$cond47$i = $673 & $674;
      if ($or$cond47$i) {
       $675 = (($$lcssa127) + ($tsize$244$i))|0;
       HEAP32[$$lcssa125>>2] = $675;
       $676 = HEAP32[((628032 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$244$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((628032 + 24|0))>>2] = $684;
       HEAP32[((628032 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i16$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i16$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i17$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i17$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((628504 + 16|0))>>2]|0;
       HEAP32[((628032 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    else if ((label|0) == 229) {
    }
    $691 = HEAP32[((628032 + 16|0))>>2]|0;
    $692 = ($tbase$245$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((628032 + 16|0))>>2] = $tbase$245$i;
     $756 = $tbase$245$i;
    } else {
     $756 = $691;
    }
    $693 = (($tbase$245$i) + ($tsize$244$i)|0);
    $sp$173$i = ((628032 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$173$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      $$lcssa120 = $sp$173$i;$sp$173$i$lcssa = $sp$173$i;
      label = 235;
      break;
     }
     $696 = (($sp$173$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      label = 319;
      break;
     } else {
      $sp$173$i = $697;
     }
    }
    if ((label|0) == 235) {
     $699 = (($sp$173$i$lcssa) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$$lcssa120>>2] = $tbase$245$i;
      $703 = (($sp$173$i$lcssa) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$244$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$245$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$245$i) + ($713)|0);
      $$sum102$i = (($tsize$244$i) + 8)|0;
      $714 = (($tbase$245$i) + ($$sum102$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum103$i = (($720) + ($tsize$244$i))|0;
      $721 = (($tbase$245$i) + ($$sum103$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i19$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$245$i) + ($$sum$i19$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i20$i = (($713) + 4)|0;
      $728 = (($tbase$245$i) + ($$sum1$i20$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = ($721|0)==($636|0);
      L352: do {
       if ($729) {
        $730 = HEAP32[((628032 + 12|0))>>2]|0;
        $731 = (($730) + ($726))|0;
        HEAP32[((628032 + 12|0))>>2] = $731;
        HEAP32[((628032 + 24|0))>>2] = $725;
        $732 = $731 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $733 = (($tbase$245$i) + ($$sum42$i$i)|0);
        HEAP32[$733>>2] = $732;
       } else {
        $734 = HEAP32[((628032 + 20|0))>>2]|0;
        $735 = ($721|0)==($734|0);
        if ($735) {
         $736 = HEAP32[((628032 + 8|0))>>2]|0;
         $737 = (($736) + ($726))|0;
         HEAP32[((628032 + 8|0))>>2] = $737;
         HEAP32[((628032 + 20|0))>>2] = $725;
         $738 = $737 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $739 = (($tbase$245$i) + ($$sum40$i$i)|0);
         HEAP32[$739>>2] = $738;
         $$sum41$i$i = (($737) + ($$sum$i19$i))|0;
         $740 = (($tbase$245$i) + ($$sum41$i$i)|0);
         HEAP32[$740>>2] = $737;
         break;
        }
        $$sum2$i21$i = (($tsize$244$i) + 4)|0;
        $$sum104$i = (($$sum2$i21$i) + ($720))|0;
        $741 = (($tbase$245$i) + ($$sum104$i)|0);
        $742 = HEAP32[$741>>2]|0;
        $743 = $742 & 3;
        $744 = ($743|0)==(1);
        if ($744) {
         $745 = $742 & -8;
         $746 = $742 >>> 3;
         $747 = ($742>>>0)<(256);
         L360: do {
          if ($747) {
           $$sum3738$i$i = $720 | 8;
           $$sum114$i = (($$sum3738$i$i) + ($tsize$244$i))|0;
           $748 = (($tbase$245$i) + ($$sum114$i)|0);
           $749 = HEAP32[$748>>2]|0;
           $$sum39$i$i = (($tsize$244$i) + 12)|0;
           $$sum115$i = (($$sum39$i$i) + ($720))|0;
           $750 = (($tbase$245$i) + ($$sum115$i)|0);
           $751 = HEAP32[$750>>2]|0;
           $752 = $746 << 1;
           $753 = ((628032 + ($752<<2)|0) + 40|0);
           $754 = ($749|0)==($753|0);
           do {
            if (!($754)) {
             $755 = ($749>>>0)<($756>>>0);
             if ($755) {
              _abort();
              // unreachable;
             }
             $757 = (($749) + 12|0);
             $758 = HEAP32[$757>>2]|0;
             $759 = ($758|0)==($721|0);
             if ($759) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $760 = ($751|0)==($749|0);
           if ($760) {
            $761 = 1 << $746;
            $762 = $761 ^ -1;
            $763 = HEAP32[628032>>2]|0;
            $764 = $763 & $762;
            HEAP32[628032>>2] = $764;
            break;
           }
           $765 = ($751|0)==($753|0);
           do {
            if ($765) {
             $$pre58$i$i = (($751) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $766 = ($751>>>0)<($756>>>0);
             if ($766) {
              _abort();
              // unreachable;
             }
             $767 = (($751) + 8|0);
             $768 = HEAP32[$767>>2]|0;
             $769 = ($768|0)==($721|0);
             if ($769) {
              $$pre$phi59$i$iZ2D = $767;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $770 = (($749) + 12|0);
           HEAP32[$770>>2] = $751;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $749;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum105$i = (($$sum34$i$i) + ($tsize$244$i))|0;
           $771 = (($tbase$245$i) + ($$sum105$i)|0);
           $772 = HEAP32[$771>>2]|0;
           $$sum5$i$i = (($tsize$244$i) + 12)|0;
           $$sum106$i = (($$sum5$i$i) + ($720))|0;
           $773 = (($tbase$245$i) + ($$sum106$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $775 = ($774|0)==($721|0);
           do {
            if ($775) {
             $$sum67$i$i = $720 | 16;
             $$sum112$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $785 = (($tbase$245$i) + ($$sum112$i)|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==(0|0);
             if ($787) {
              $$sum113$i = (($$sum67$i$i) + ($tsize$244$i))|0;
              $788 = (($tbase$245$i) + ($$sum113$i)|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i$ph = $789;$RP$0$i$i$ph = $788;
              }
             } else {
              $R$0$i$i$ph = $786;$RP$0$i$i$ph = $785;
             }
             $R$0$i$i = $R$0$i$i$ph;$RP$0$i$i = $RP$0$i$i$ph;
             while(1) {
              $791 = (($R$0$i$i) + 20|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $794 = (($R$0$i$i) + 16|0);
               $795 = HEAP32[$794>>2]|0;
               $796 = ($795|0)==(0|0);
               if ($796) {
                $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
                break;
               } else {
                $R$0$i$i$be = $795;$RP$0$i$i$be = $794;
               }
              } else {
               $R$0$i$i$be = $792;$RP$0$i$i$be = $791;
              }
              $R$0$i$i = $R$0$i$i$be;$RP$0$i$i = $RP$0$i$i$be;
             }
             $797 = ($RP$0$i$i$lcssa>>>0)<($756>>>0);
             if ($797) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum107$i = (($$sum3536$i$i) + ($tsize$244$i))|0;
             $776 = (($tbase$245$i) + ($$sum107$i)|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777>>>0)<($756>>>0);
             if ($778) {
              _abort();
              // unreachable;
             }
             $779 = (($777) + 12|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($721|0);
             if (!($781)) {
              _abort();
              // unreachable;
             }
             $782 = (($774) + 8|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if ($784) {
              HEAP32[$779>>2] = $774;
              HEAP32[$782>>2] = $777;
              $R$1$i$i = $774;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $798 = ($772|0)==(0|0);
           if ($798) {
            break;
           }
           $$sum30$i$i = (($tsize$244$i) + 28)|0;
           $$sum108$i = (($$sum30$i$i) + ($720))|0;
           $799 = (($tbase$245$i) + ($$sum108$i)|0);
           $800 = HEAP32[$799>>2]|0;
           $801 = ((628032 + ($800<<2)|0) + 304|0);
           $802 = HEAP32[$801>>2]|0;
           $803 = ($721|0)==($802|0);
           do {
            if ($803) {
             HEAP32[$801>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $804 = 1 << $800;
             $805 = $804 ^ -1;
             $806 = HEAP32[((628032 + 4|0))>>2]|0;
             $807 = $806 & $805;
             HEAP32[((628032 + 4|0))>>2] = $807;
             break L360;
            } else {
             $808 = HEAP32[((628032 + 16|0))>>2]|0;
             $809 = ($772>>>0)<($808>>>0);
             if ($809) {
              _abort();
              // unreachable;
             }
             $810 = (($772) + 16|0);
             $811 = HEAP32[$810>>2]|0;
             $812 = ($811|0)==($721|0);
             if ($812) {
              HEAP32[$810>>2] = $R$1$i$i;
             } else {
              $813 = (($772) + 20|0);
              HEAP32[$813>>2] = $R$1$i$i;
             }
             $814 = ($R$1$i$i|0)==(0|0);
             if ($814) {
              break L360;
             }
            }
           } while(0);
           $815 = HEAP32[((628032 + 16|0))>>2]|0;
           $816 = ($R$1$i$i>>>0)<($815>>>0);
           if ($816) {
            _abort();
            // unreachable;
           }
           $817 = (($R$1$i$i) + 24|0);
           HEAP32[$817>>2] = $772;
           $$sum3132$i$i = $720 | 16;
           $$sum109$i = (($$sum3132$i$i) + ($tsize$244$i))|0;
           $818 = (($tbase$245$i) + ($$sum109$i)|0);
           $819 = HEAP32[$818>>2]|0;
           $820 = ($819|0)==(0|0);
           do {
            if (!($820)) {
             $821 = ($819>>>0)<($815>>>0);
             if ($821) {
              _abort();
              // unreachable;
             } else {
              $822 = (($R$1$i$i) + 16|0);
              HEAP32[$822>>2] = $819;
              $823 = (($819) + 24|0);
              HEAP32[$823>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum110$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $824 = (($tbase$245$i) + ($$sum110$i)|0);
           $825 = HEAP32[$824>>2]|0;
           $826 = ($825|0)==(0|0);
           if ($826) {
            break;
           }
           $827 = HEAP32[((628032 + 16|0))>>2]|0;
           $828 = ($825>>>0)<($827>>>0);
           if ($828) {
            _abort();
            // unreachable;
           } else {
            $829 = (($R$1$i$i) + 20|0);
            HEAP32[$829>>2] = $825;
            $830 = (($825) + 24|0);
            HEAP32[$830>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $745 | $720;
         $$sum111$i = (($$sum9$i$i) + ($tsize$244$i))|0;
         $831 = (($tbase$245$i) + ($$sum111$i)|0);
         $832 = (($745) + ($726))|0;
         $oldfirst$0$i$i = $831;$qsize$0$i$i = $832;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $833 = (($oldfirst$0$i$i) + 4|0);
        $834 = HEAP32[$833>>2]|0;
        $835 = $834 & -2;
        HEAP32[$833>>2] = $835;
        $836 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $837 = (($tbase$245$i) + ($$sum10$i$i)|0);
        HEAP32[$837>>2] = $836;
        $$sum11$i22$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $838 = (($tbase$245$i) + ($$sum11$i22$i)|0);
        HEAP32[$838>>2] = $qsize$0$i$i;
        $839 = $qsize$0$i$i >>> 3;
        $840 = ($qsize$0$i$i>>>0)<(256);
        if ($840) {
         $841 = $839 << 1;
         $842 = ((628032 + ($841<<2)|0) + 40|0);
         $843 = HEAP32[628032>>2]|0;
         $844 = 1 << $839;
         $845 = $843 & $844;
         $846 = ($845|0)==(0);
         do {
          if ($846) {
           $847 = $843 | $844;
           HEAP32[628032>>2] = $847;
           $$sum26$pre$i$i = (($841) + 2)|0;
           $$pre$i23$i = ((628032 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i24$iZ2D = $$pre$i23$i;$F4$0$i$i = $842;
          } else {
           $$sum29$i$i = (($841) + 2)|0;
           $848 = ((628032 + ($$sum29$i$i<<2)|0) + 40|0);
           $849 = HEAP32[$848>>2]|0;
           $850 = HEAP32[((628032 + 16|0))>>2]|0;
           $851 = ($849>>>0)<($850>>>0);
           if (!($851)) {
            $$pre$phi$i24$iZ2D = $848;$F4$0$i$i = $849;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i24$iZ2D>>2] = $725;
         $852 = (($F4$0$i$i) + 12|0);
         HEAP32[$852>>2] = $725;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $853 = (($tbase$245$i) + ($$sum27$i$i)|0);
         HEAP32[$853>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $854 = (($tbase$245$i) + ($$sum28$i$i)|0);
         HEAP32[$854>>2] = $842;
         break;
        }
        $855 = $qsize$0$i$i >>> 8;
        $856 = ($855|0)==(0);
        do {
         if ($856) {
          $I7$0$i$i = 0;
         } else {
          $857 = ($qsize$0$i$i>>>0)>(16777215);
          if ($857) {
           $I7$0$i$i = 31;
           break;
          }
          $858 = (($855) + 1048320)|0;
          $859 = $858 >>> 16;
          $860 = $859 & 8;
          $861 = $855 << $860;
          $862 = (($861) + 520192)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 4;
          $865 = $864 | $860;
          $866 = $861 << $864;
          $867 = (($866) + 245760)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 2;
          $870 = $865 | $869;
          $871 = (14 - ($870))|0;
          $872 = $866 << $869;
          $873 = $872 >>> 15;
          $874 = (($871) + ($873))|0;
          $875 = $874 << 1;
          $876 = (($874) + 7)|0;
          $877 = $qsize$0$i$i >>> $876;
          $878 = $877 & 1;
          $879 = $878 | $875;
          $I7$0$i$i = $879;
         }
        } while(0);
        $880 = ((628032 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $881 = (($tbase$245$i) + ($$sum12$i$i)|0);
        HEAP32[$881>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $882 = (($tbase$245$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $883 = (($tbase$245$i) + ($$sum14$i$i)|0);
        HEAP32[$883>>2] = 0;
        HEAP32[$882>>2] = 0;
        $884 = HEAP32[((628032 + 4|0))>>2]|0;
        $885 = 1 << $I7$0$i$i;
        $886 = $884 & $885;
        $887 = ($886|0)==(0);
        if ($887) {
         $888 = $884 | $885;
         HEAP32[((628032 + 4|0))>>2] = $888;
         HEAP32[$880>>2] = $725;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $889 = (($tbase$245$i) + ($$sum15$i$i)|0);
         HEAP32[$889>>2] = $880;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $890 = (($tbase$245$i) + ($$sum16$i$i)|0);
         HEAP32[$890>>2] = $725;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $891 = (($tbase$245$i) + ($$sum17$i$i)|0);
         HEAP32[$891>>2] = $725;
         break;
        }
        $892 = HEAP32[$880>>2]|0;
        $893 = ($I7$0$i$i|0)==(31);
        if ($893) {
         $901 = 0;
        } else {
         $894 = $I7$0$i$i >>> 1;
         $895 = (25 - ($894))|0;
         $901 = $895;
        }
        $896 = (($892) + 4|0);
        $897 = HEAP32[$896>>2]|0;
        $898 = $897 & -8;
        $899 = ($898|0)==($qsize$0$i$i|0);
        do {
         if ($899) {
          $T$0$lcssa$i26$i = $892;
         } else {
          $900 = $qsize$0$i$i << $901;
          $K8$053$i$i = $900;$T$052$i$i = $892;
          while(1) {
           $908 = $K8$053$i$i >>> 31;
           $909 = ((($T$052$i$i) + ($908<<2)|0) + 16|0);
           $904 = HEAP32[$909>>2]|0;
           $910 = ($904|0)==(0|0);
           if ($910) {
            $$lcssa = $909;$T$052$i$i$lcssa = $T$052$i$i;
            break;
           }
           $902 = $K8$053$i$i << 1;
           $903 = (($904) + 4|0);
           $905 = HEAP32[$903>>2]|0;
           $906 = $905 & -8;
           $907 = ($906|0)==($qsize$0$i$i|0);
           if ($907) {
            $$lcssa110 = $904;
            label = 314;
            break;
           } else {
            $K8$053$i$i = $902;$T$052$i$i = $904;
           }
          }
          if ((label|0) == 314) {
           $T$0$lcssa$i26$i = $$lcssa110;
           break;
          }
          $911 = HEAP32[((628032 + 16|0))>>2]|0;
          $912 = ($$lcssa>>>0)<($911>>>0);
          if ($912) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $725;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $913 = (($tbase$245$i) + ($$sum23$i$i)|0);
           HEAP32[$913>>2] = $T$052$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $914 = (($tbase$245$i) + ($$sum24$i$i)|0);
           HEAP32[$914>>2] = $725;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $915 = (($tbase$245$i) + ($$sum25$i$i)|0);
           HEAP32[$915>>2] = $725;
           break L352;
          }
         }
        } while(0);
        $916 = (($T$0$lcssa$i26$i) + 8|0);
        $917 = HEAP32[$916>>2]|0;
        $918 = HEAP32[((628032 + 16|0))>>2]|0;
        $919 = ($T$0$lcssa$i26$i>>>0)>=($918>>>0);
        $920 = ($917>>>0)>=($918>>>0);
        $or$cond$i27$i = $919 & $920;
        if ($or$cond$i27$i) {
         $921 = (($917) + 12|0);
         HEAP32[$921>>2] = $725;
         HEAP32[$916>>2] = $725;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $922 = (($tbase$245$i) + ($$sum20$i$i)|0);
         HEAP32[$922>>2] = $917;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $923 = (($tbase$245$i) + ($$sum21$i$i)|0);
         HEAP32[$923>>2] = $T$0$lcssa$i26$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $924 = (($tbase$245$i) + ($$sum22$i$i)|0);
         HEAP32[$924>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $925 = (($tbase$245$i) + ($$sum1819$i$i)|0);
      $mem$0 = $925;
      return ($mem$0|0);
     }
    }
    else if ((label|0) == 319) {
    }
    $sp$0$i$i$i = ((628032 + 448|0));
    while(1) {
     $926 = HEAP32[$sp$0$i$i$i>>2]|0;
     $927 = ($926>>>0)>($636>>>0);
     if (!($927)) {
      $928 = (($sp$0$i$i$i) + 4|0);
      $929 = HEAP32[$928>>2]|0;
      $930 = (($926) + ($929)|0);
      $931 = ($930>>>0)>($636>>>0);
      if ($931) {
       $$lcssa116 = $926;$$lcssa117 = $929;$$lcssa118 = $930;
       break;
      }
     }
     $932 = (($sp$0$i$i$i) + 8|0);
     $933 = HEAP32[$932>>2]|0;
     $sp$0$i$i$i = $933;
    }
    $$sum$i13$i = (($$lcssa117) + -47)|0;
    $$sum1$i14$i = (($$lcssa117) + -39)|0;
    $934 = (($$lcssa116) + ($$sum1$i14$i)|0);
    $935 = $934;
    $936 = $935 & 7;
    $937 = ($936|0)==(0);
    if ($937) {
     $940 = 0;
    } else {
     $938 = (0 - ($935))|0;
     $939 = $938 & 7;
     $940 = $939;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($940))|0;
    $941 = (($$lcssa116) + ($$sum2$i15$i)|0);
    $942 = (($636) + 16|0);
    $943 = ($941>>>0)<($942>>>0);
    $944 = $943 ? $636 : $941;
    $945 = (($944) + 8|0);
    $946 = (($tsize$244$i) + -40)|0;
    $947 = (($tbase$245$i) + 8|0);
    $948 = $947;
    $949 = $948 & 7;
    $950 = ($949|0)==(0);
    if ($950) {
     $954 = 0;
    } else {
     $951 = (0 - ($948))|0;
     $952 = $951 & 7;
     $954 = $952;
    }
    $953 = (($tbase$245$i) + ($954)|0);
    $955 = (($946) - ($954))|0;
    HEAP32[((628032 + 24|0))>>2] = $953;
    HEAP32[((628032 + 12|0))>>2] = $955;
    $956 = $955 | 1;
    $$sum$i$i$i = (($954) + 4)|0;
    $957 = (($tbase$245$i) + ($$sum$i$i$i)|0);
    HEAP32[$957>>2] = $956;
    $$sum2$i$i$i = (($tsize$244$i) + -36)|0;
    $958 = (($tbase$245$i) + ($$sum2$i$i$i)|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[((628504 + 16|0))>>2]|0;
    HEAP32[((628032 + 28|0))>>2] = $959;
    $960 = (($944) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$945+0>>2]=HEAP32[((628032 + 448|0))+0>>2]|0;HEAP32[$945+4>>2]=HEAP32[((628032 + 448|0))+4>>2]|0;HEAP32[$945+8>>2]=HEAP32[((628032 + 448|0))+8>>2]|0;HEAP32[$945+12>>2]=HEAP32[((628032 + 448|0))+12>>2]|0;
    HEAP32[((628032 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((628032 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((628032 + 460|0))>>2] = 0;
    HEAP32[((628032 + 456|0))>>2] = $945;
    $961 = (($944) + 28|0);
    HEAP32[$961>>2] = 7;
    $962 = (($944) + 32|0);
    $963 = ($962>>>0)<($$lcssa118>>>0);
    if ($963) {
     $965 = $961;
     while(1) {
      $964 = (($965) + 4|0);
      HEAP32[$964>>2] = 7;
      $966 = (($965) + 8|0);
      $967 = ($966>>>0)<($$lcssa118>>>0);
      if ($967) {
       $965 = $964;
      } else {
       break;
      }
     }
    }
    $968 = ($944|0)==($636|0);
    if (!($968)) {
     $969 = $944;
     $970 = $636;
     $971 = (($969) - ($970))|0;
     $972 = (($636) + ($971)|0);
     $$sum3$i$i = (($971) + 4)|0;
     $973 = (($636) + ($$sum3$i$i)|0);
     $974 = HEAP32[$973>>2]|0;
     $975 = $974 & -2;
     HEAP32[$973>>2] = $975;
     $976 = $971 | 1;
     $977 = (($636) + 4|0);
     HEAP32[$977>>2] = $976;
     HEAP32[$972>>2] = $971;
     $978 = $971 >>> 3;
     $979 = ($971>>>0)<(256);
     if ($979) {
      $980 = $978 << 1;
      $981 = ((628032 + ($980<<2)|0) + 40|0);
      $982 = HEAP32[628032>>2]|0;
      $983 = 1 << $978;
      $984 = $982 & $983;
      $985 = ($984|0)==(0);
      do {
       if ($985) {
        $986 = $982 | $983;
        HEAP32[628032>>2] = $986;
        $$sum10$pre$i$i = (($980) + 2)|0;
        $$pre$i$i = ((628032 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $981;
       } else {
        $$sum11$i$i = (($980) + 2)|0;
        $987 = ((628032 + ($$sum11$i$i<<2)|0) + 40|0);
        $988 = HEAP32[$987>>2]|0;
        $989 = HEAP32[((628032 + 16|0))>>2]|0;
        $990 = ($988>>>0)<($989>>>0);
        if (!($990)) {
         $$pre$phi$i$iZ2D = $987;$F$0$i$i = $988;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $991 = (($F$0$i$i) + 12|0);
      HEAP32[$991>>2] = $636;
      $992 = (($636) + 8|0);
      HEAP32[$992>>2] = $F$0$i$i;
      $993 = (($636) + 12|0);
      HEAP32[$993>>2] = $981;
      break;
     }
     $994 = $971 >>> 8;
     $995 = ($994|0)==(0);
     if ($995) {
      $I1$0$i$i = 0;
     } else {
      $996 = ($971>>>0)>(16777215);
      if ($996) {
       $I1$0$i$i = 31;
      } else {
       $997 = (($994) + 1048320)|0;
       $998 = $997 >>> 16;
       $999 = $998 & 8;
       $1000 = $994 << $999;
       $1001 = (($1000) + 520192)|0;
       $1002 = $1001 >>> 16;
       $1003 = $1002 & 4;
       $1004 = $1003 | $999;
       $1005 = $1000 << $1003;
       $1006 = (($1005) + 245760)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 2;
       $1009 = $1004 | $1008;
       $1010 = (14 - ($1009))|0;
       $1011 = $1005 << $1008;
       $1012 = $1011 >>> 15;
       $1013 = (($1010) + ($1012))|0;
       $1014 = $1013 << 1;
       $1015 = (($1013) + 7)|0;
       $1016 = $971 >>> $1015;
       $1017 = $1016 & 1;
       $1018 = $1017 | $1014;
       $I1$0$i$i = $1018;
      }
     }
     $1019 = ((628032 + ($I1$0$i$i<<2)|0) + 304|0);
     $1020 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1020>>2] = $I1$0$c$i$i;
     $1021 = (($636) + 20|0);
     HEAP32[$1021>>2] = 0;
     $1022 = (($636) + 16|0);
     HEAP32[$1022>>2] = 0;
     $1023 = HEAP32[((628032 + 4|0))>>2]|0;
     $1024 = 1 << $I1$0$i$i;
     $1025 = $1023 & $1024;
     $1026 = ($1025|0)==(0);
     if ($1026) {
      $1027 = $1023 | $1024;
      HEAP32[((628032 + 4|0))>>2] = $1027;
      HEAP32[$1019>>2] = $636;
      $1028 = (($636) + 24|0);
      HEAP32[$1028>>2] = $1019;
      $1029 = (($636) + 12|0);
      HEAP32[$1029>>2] = $636;
      $1030 = (($636) + 8|0);
      HEAP32[$1030>>2] = $636;
      break;
     }
     $1031 = HEAP32[$1019>>2]|0;
     $1032 = ($I1$0$i$i|0)==(31);
     if ($1032) {
      $1040 = 0;
     } else {
      $1033 = $I1$0$i$i >>> 1;
      $1034 = (25 - ($1033))|0;
      $1040 = $1034;
     }
     $1035 = (($1031) + 4|0);
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = $1036 & -8;
     $1038 = ($1037|0)==($971|0);
     do {
      if ($1038) {
       $T$0$lcssa$i$i = $1031;
      } else {
       $1039 = $971 << $1040;
       $K2$015$i$i = $1039;$T$014$i$i = $1031;
       while(1) {
        $1047 = $K2$015$i$i >>> 31;
        $1048 = ((($T$014$i$i) + ($1047<<2)|0) + 16|0);
        $1043 = HEAP32[$1048>>2]|0;
        $1049 = ($1043|0)==(0|0);
        if ($1049) {
         $$lcssa112 = $1048;$T$014$i$i$lcssa = $T$014$i$i;
         break;
        }
        $1041 = $K2$015$i$i << 1;
        $1042 = (($1043) + 4|0);
        $1044 = HEAP32[$1042>>2]|0;
        $1045 = $1044 & -8;
        $1046 = ($1045|0)==($971|0);
        if ($1046) {
         $$lcssa115 = $1043;
         label = 353;
         break;
        } else {
         $K2$015$i$i = $1041;$T$014$i$i = $1043;
        }
       }
       if ((label|0) == 353) {
        $T$0$lcssa$i$i = $$lcssa115;
        break;
       }
       $1050 = HEAP32[((628032 + 16|0))>>2]|0;
       $1051 = ($$lcssa112>>>0)<($1050>>>0);
       if ($1051) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa112>>2] = $636;
        $1052 = (($636) + 24|0);
        HEAP32[$1052>>2] = $T$014$i$i$lcssa;
        $1053 = (($636) + 12|0);
        HEAP32[$1053>>2] = $636;
        $1054 = (($636) + 8|0);
        HEAP32[$1054>>2] = $636;
        break L323;
       }
      }
     } while(0);
     $1055 = (($T$0$lcssa$i$i) + 8|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = HEAP32[((628032 + 16|0))>>2]|0;
     $1058 = ($T$0$lcssa$i$i>>>0)>=($1057>>>0);
     $1059 = ($1056>>>0)>=($1057>>>0);
     $or$cond$i$i = $1058 & $1059;
     if ($or$cond$i$i) {
      $1060 = (($1056) + 12|0);
      HEAP32[$1060>>2] = $636;
      HEAP32[$1055>>2] = $636;
      $1061 = (($636) + 8|0);
      HEAP32[$1061>>2] = $1056;
      $1062 = (($636) + 12|0);
      HEAP32[$1062>>2] = $T$0$lcssa$i$i;
      $1063 = (($636) + 24|0);
      HEAP32[$1063>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1064 = HEAP32[((628032 + 12|0))>>2]|0;
  $1065 = ($1064>>>0)>($nb$0>>>0);
  if ($1065) {
   $1066 = (($1064) - ($nb$0))|0;
   HEAP32[((628032 + 12|0))>>2] = $1066;
   $1067 = HEAP32[((628032 + 24|0))>>2]|0;
   $1068 = (($1067) + ($nb$0)|0);
   HEAP32[((628032 + 24|0))>>2] = $1068;
   $1069 = $1066 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1070 = (($1067) + ($$sum$i32)|0);
   HEAP32[$1070>>2] = $1069;
   $1071 = $nb$0 | 3;
   $1072 = (($1067) + 4|0);
   HEAP32[$1072>>2] = $1071;
   $1073 = (($1067) + 8|0);
   $mem$0 = $1073;
   return ($mem$0|0);
  }
 }
 $1074 = (___errno_location()|0);
 HEAP32[$1074>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$lcssa73 = 0, $$pre = 0, $$pre$phi66Z2D = 0, $$pre$phi68Z2D = 0, $$pre$phiZ2D = 0, $$pre65 = 0, $$pre67 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0;
 var $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$060 = 0, $R$0 = 0;
 var $R$0$be = 0, $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $R7$0 = 0, $R7$0$be = 0, $R7$0$lcssa = 0, $R7$0$ph = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$be = 0, $RP$0$lcssa = 0, $RP$0$ph = 0, $RP9$0 = 0, $RP9$0$be = 0, $RP9$0$lcssa = 0, $RP9$0$ph = 0, $T$0$lcssa = 0, $T$059 = 0, $T$059$lcssa = 0;
 var $cond = 0, $cond54 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((628032 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((628032 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((628032 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum26)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((628032 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[628032>>2]|0;
     $36 = $35 & $34;
     HEAP32[628032>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre67 = (($24) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi68Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi68Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $61;$RP$0$ph = $60;
      }
     } else {
      $R$0$ph = $58;$RP$0$ph = $57;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if ($65) {
       $66 = (($R$0) + 16|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ($67|0)==(0|0);
       if ($68) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $67;$RP$0$be = $66;
       }
      } else {
       $R$0$be = $64;$RP$0$be = $63;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((628032 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((628032 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((628032 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((628032 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((628032 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum34)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((628032 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum25)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((628032 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((628032 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((628032 + 12|0))>>2] = $120;
   HEAP32[((628032 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((628032 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[((628032 + 20|0))>>2] = 0;
   HEAP32[((628032 + 8|0))>>2] = 0;
   return;
  }
  $125 = HEAP32[((628032 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((628032 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((628032 + 8|0))>>2] = $128;
   HEAP32[((628032 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum2324 = $8 | 4;
    $138 = (($mem) + ($$sum2324)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((628032 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((628032 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[628032>>2]|0;
     $152 = $151 & $150;
     HEAP32[628032>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre65 = (($139) + 8|0);
     $$pre$phi66Z2D = $$pre65;
    } else {
     $154 = HEAP32[((628032 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi66Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi66Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0$ph = $179;$RP9$0$ph = $178;
       }
      } else {
       $R7$0$ph = $176;$RP9$0$ph = $175;
      }
      $R7$0 = $R7$0$ph;$RP9$0 = $RP9$0$ph;
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $184 = (($R7$0) + 16|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if ($186) {
         $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
         break;
        } else {
         $R7$0$be = $185;$RP9$0$be = $184;
        }
       } else {
        $R7$0$be = $182;$RP9$0$be = $181;
       }
       $R7$0 = $R7$0$be;$RP9$0 = $RP9$0$be;
      }
      $187 = HEAP32[((628032 + 16|0))>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((628032 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum18 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum18)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((628032 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((628032 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((628032 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((628032 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((628032 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum19 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum19)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum20)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((628032 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((628032 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((628032 + 8|0))>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((628032 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[628032>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[628032>>2] = $239;
   $$sum16$pre = (($233) + 2)|0;
   $$pre = ((628032 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum17 = (($233) + 2)|0;
   $240 = ((628032 + ($$sum17<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((628032 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((628032 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$273>>2] = $I18$0$c;
 $274 = (($p$0) + 20|0);
 HEAP32[$274>>2] = 0;
 $275 = (($p$0) + 16|0);
 HEAP32[$275>>2] = 0;
 $276 = HEAP32[((628032 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L205: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((628032 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$060 = $292;$T$059 = $284;
     while(1) {
      $300 = $K19$060 >>> 31;
      $301 = ((($T$059) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$059$lcssa = $T$059;
       break;
      }
      $294 = $K19$060 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $$lcssa73 = $296;
       label = 137;
       break;
      } else {
       $K19$060 = $294;$T$059 = $296;
      }
     }
     if ((label|0) == 137) {
      $T$0$lcssa = $$lcssa73;
      break;
     }
     $303 = HEAP32[((628032 + 16|0))>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$059$lcssa;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L205;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((628032 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((628032 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((628032 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if (!($319)) {
  return;
 }
 $sp$0$in$i = ((628032 + 456|0));
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((628032 + 32|0))>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return ($6|0);
 }
 $8 = (($6) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 if ($4) {
  $8 = 16;
 } else {
  $5 = (($bytes) + 11)|0;
  $6 = $5 & -8;
  $8 = $6;
 }
 $7 = (($oldmem) + -8|0);
 $9 = (_try_realloc_chunk($7,$8)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = (($9) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = (($oldmem) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 return ($2|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$124 = 0, $$125 = 0, $$22 = 0, $$23 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa109 = 0, $$lcssa110 = 0, $$lcssa111 = 0, $$lcssa112 = 0, $$lcssa113 = 0, $$lcssa114 = 0, $$sum = 0, $$sum14 = 0, $$sum1447 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum1867 = 0, $$sum19 = 0, $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$126 = 0, $c$2$be = 0, $c$2$be$lcssa = 0;
 var $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$373 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$5$be$lcssa = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$755 = 0, $c$8 = 0, $c$8$ph = 0, $c$9$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond42 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$084 = 0, $x$148 = 0, $x$268 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $279 = 0;$280 = 0;
  tempRet0 = $279;
  return ($280|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $$lcssa114 = $13;
   break;
  }
 }
 $16 = ($$lcssa114|0)==(45);
 do {
  if ((($$lcssa114|0) == 43) | (($$lcssa114|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = (($18) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $$lcssa114;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond5 = $27 & $28;
 do {
  if ($or$cond5) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = (($29) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    if ($25) {
     $$125 = 8;$c$126 = $37;
     label = 48;
     break;
    } else {
     $$1 = $base;$c$1 = $37;
     label = 32;
     break;
    }
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = (($39) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum20 = (($46) + 1)|0;
   $47 = (628528 + ($$sum20)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = (($52) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     return ($280|0);
    }
    if ($51) {
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     return ($280|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + -1|0);
    HEAP32[$3>>2] = $56;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    return ($280|0);
   } else {
    $$125 = 16;$c$126 = $46;
    label = 48;
   }
  } else {
   $$base21 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (628528 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base21>>>0);
   if ($60) {
    $$1 = $$base21;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = (($63) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    return ($280|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $71 = $67;$x$084 = 0;
    while(1) {
     $69 = ($x$084*10)|0;
     $70 = (($69) + ($71))|0;
     $72 = HEAP32[$3>>2]|0;
     $73 = HEAP32[$4>>2]|0;
     $74 = ($72>>>0)<($73>>>0);
     if ($74) {
      $75 = (($72) + 1|0);
      HEAP32[$3>>2] = $75;
      $76 = HEAP8[$72>>0]|0;
      $77 = $76&255;
      $c$2$be = $77;
     } else {
      $78 = (___shgetc($f)|0);
      $c$2$be = $78;
     }
     $79 = (($c$2$be) + -48)|0;
     $80 = ($79>>>0)<(10);
     $81 = ($70>>>0)<(429496729);
     $$ = $80 & $81;
     if ($$) {
      $71 = $79;$x$084 = $70;
     } else {
      $$lcssa113 = $70;$c$2$be$lcssa = $c$2$be;
      break;
     }
    }
    $281 = $$lcssa113;$282 = 0;$c$2$lcssa = $c$2$be$lcssa;
   } else {
    $281 = 0;$282 = 0;$c$2$lcssa = $c$1;
   }
   $82 = (($c$2$lcssa) + -48)|0;
   $83 = ($82>>>0)<(10);
   if ($83) {
    $84 = $281;$85 = $282;$88 = $82;$c$373 = $c$2$lcssa;
    while(1) {
     $86 = (___muldi3(($84|0),($85|0),10,0)|0);
     $87 = tempRet0;
     $89 = ($88|0)<(0);
     $90 = $89 << 31 >> 31;
     $91 = $88 ^ -1;
     $92 = $90 ^ -1;
     $93 = ($87>>>0)>($92>>>0);
     $94 = ($86>>>0)>($91>>>0);
     $95 = ($87|0)==($92|0);
     $96 = $95 & $94;
     $97 = $93 | $96;
     if ($97) {
      $$lcssa = $88;$283 = $84;$284 = $85;$c$3$lcssa = $c$373;
      break;
     }
     $98 = (_i64Add(($86|0),($87|0),($88|0),($90|0))|0);
     $99 = tempRet0;
     $100 = HEAP32[$3>>2]|0;
     $101 = HEAP32[$4>>2]|0;
     $102 = ($100>>>0)<($101>>>0);
     if ($102) {
      $103 = (($100) + 1|0);
      HEAP32[$3>>2] = $103;
      $104 = HEAP8[$100>>0]|0;
      $105 = $104&255;
      $c$3$be = $105;
     } else {
      $106 = (___shgetc($f)|0);
      $c$3$be = $106;
     }
     $107 = (($c$3$be) + -48)|0;
     $108 = ($107>>>0)<(10);
     $109 = ($99>>>0)<(429496729);
     $110 = ($98>>>0)<(2576980378);
     $111 = ($99|0)==(429496729);
     $112 = $111 & $110;
     $113 = $109 | $112;
     $or$cond7 = $108 & $113;
     if ($or$cond7) {
      $84 = $98;$85 = $99;$88 = $107;$c$373 = $c$3$be;
     } else {
      $$lcssa = $107;$283 = $98;$284 = $99;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $114 = ($$lcssa>>>0)>(9);
    if ($114) {
     $252 = $284;$254 = $283;
    } else {
     $$124 = 10;$285 = $283;$286 = $284;$c$8 = $c$3$lcssa;
     label = 79;
    }
   } else {
    $252 = $282;$254 = $281;
   }
  } else {
   $$125 = $$1;$c$126 = $c$1;
   label = 48;
  }
 }
 do {
  if ((label|0) == 48) {
   $115 = (($$125) + -1)|0;
   $116 = $115 & $$125;
   $117 = ($116|0)==(0);
   if ($117) {
    $122 = ($$125*23)|0;
    $123 = $122 >>> 5;
    $124 = $123 & 7;
    $125 = (628792 + ($124)|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126 << 24 >> 24;
    $$sum1447 = (($c$126) + 1)|0;
    $128 = (628528 + ($$sum1447)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = ($130>>>0)<($$125>>>0);
    if ($131) {
     $134 = $130;$x$148 = 0;
     while(1) {
      $132 = $x$148 << $127;
      $133 = $134 | $132;
      $135 = HEAP32[$3>>2]|0;
      $136 = HEAP32[$4>>2]|0;
      $137 = ($135>>>0)<($136>>>0);
      if ($137) {
       $138 = (($135) + 1|0);
       HEAP32[$3>>2] = $138;
       $139 = HEAP8[$135>>0]|0;
       $140 = $139&255;
       $c$4$be = $140;
      } else {
       $141 = (___shgetc($f)|0);
       $c$4$be = $141;
      }
      $$sum14 = (($c$4$be) + 1)|0;
      $142 = (628528 + ($$sum14)|0);
      $143 = HEAP8[$142>>0]|0;
      $144 = $143&255;
      $145 = ($144>>>0)<($$125>>>0);
      $146 = ($133>>>0)<(134217728);
      $$22 = $145 & $146;
      if ($$22) {
       $134 = $144;$x$148 = $133;
      } else {
       $$lcssa109 = $133;$$lcssa110 = $143;$c$4$be$lcssa = $c$4$be;
       break;
      }
     }
     $150 = $$lcssa110;$152 = 0;$154 = $$lcssa109;$c$4$lcssa = $c$4$be$lcssa;
    } else {
     $150 = $129;$152 = 0;$154 = 0;$c$4$lcssa = $c$126;
    }
    $147 = (_bitshift64Lshr(-1,-1,($127|0))|0);
    $148 = tempRet0;
    $149 = $150&255;
    $151 = ($149>>>0)>=($$125>>>0);
    $153 = ($152>>>0)>($148>>>0);
    $155 = ($154>>>0)>($147>>>0);
    $156 = ($152|0)==($148|0);
    $157 = $156 & $155;
    $158 = $153 | $157;
    $or$cond42 = $151 | $158;
    if ($or$cond42) {
     $$124 = $$125;$285 = $154;$286 = $152;$c$8 = $c$4$lcssa;
     label = 79;
     break;
    }
    $159 = $154;$160 = $152;$164 = $150;
    while(1) {
     $161 = (_bitshift64Shl(($159|0),($160|0),($127|0))|0);
     $162 = tempRet0;
     $163 = $164&255;
     $165 = $163 | $161;
     $166 = HEAP32[$3>>2]|0;
     $167 = HEAP32[$4>>2]|0;
     $168 = ($166>>>0)<($167>>>0);
     if ($168) {
      $169 = (($166) + 1|0);
      HEAP32[$3>>2] = $169;
      $170 = HEAP8[$166>>0]|0;
      $171 = $170&255;
      $c$5$be = $171;
     } else {
      $172 = (___shgetc($f)|0);
      $c$5$be = $172;
     }
     $$sum15 = (($c$5$be) + 1)|0;
     $173 = (628528 + ($$sum15)|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = $174&255;
     $176 = ($175>>>0)>=($$125>>>0);
     $177 = ($162>>>0)>($148>>>0);
     $178 = ($165>>>0)>($147>>>0);
     $179 = ($162|0)==($148|0);
     $180 = $179 & $178;
     $181 = $177 | $180;
     $or$cond = $176 | $181;
     if ($or$cond) {
      $289 = $165;$290 = $162;$c$5$be$lcssa = $c$5$be;
      break;
     } else {
      $159 = $165;$160 = $162;$164 = $174;
     }
    }
    $$124 = $$125;$285 = $289;$286 = $290;$c$8 = $c$5$be$lcssa;
    label = 79;
    break;
   }
   $$sum1867 = (($c$126) + 1)|0;
   $118 = (628528 + ($$sum1867)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = ($120>>>0)<($$125>>>0);
   if ($121) {
    $184 = $120;$x$268 = 0;
    while(1) {
     $182 = Math_imul($x$268, $$125)|0;
     $183 = (($184) + ($182))|0;
     $185 = HEAP32[$3>>2]|0;
     $186 = HEAP32[$4>>2]|0;
     $187 = ($185>>>0)<($186>>>0);
     if ($187) {
      $188 = (($185) + 1|0);
      HEAP32[$3>>2] = $188;
      $189 = HEAP8[$185>>0]|0;
      $190 = $189&255;
      $c$6$be = $190;
     } else {
      $191 = (___shgetc($f)|0);
      $c$6$be = $191;
     }
     $$sum18 = (($c$6$be) + 1)|0;
     $192 = (628528 + ($$sum18)|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = ($194>>>0)<($$125>>>0);
     $196 = ($183>>>0)<(119304647);
     $$23 = $195 & $196;
     if ($$23) {
      $184 = $194;$x$268 = $183;
     } else {
      $$lcssa111 = $183;$$lcssa112 = $193;$c$6$be$lcssa = $c$6$be;
      break;
     }
    }
    $198 = $$lcssa112;$287 = $$lcssa111;$288 = 0;$c$6$lcssa = $c$6$be$lcssa;
   } else {
    $198 = $119;$287 = 0;$288 = 0;$c$6$lcssa = $c$126;
   }
   $197 = $198&255;
   $199 = ($197>>>0)<($$125>>>0);
   if ($199) {
    $200 = (___udivdi3(-1,-1,($$125|0),0)|0);
    $201 = tempRet0;
    $202 = $288;$204 = $287;$212 = $198;$c$755 = $c$6$lcssa;
    while(1) {
     $203 = ($202>>>0)>($201>>>0);
     $205 = ($204>>>0)>($200>>>0);
     $206 = ($202|0)==($201|0);
     $207 = $206 & $205;
     $208 = $203 | $207;
     if ($208) {
      $291 = $204;$292 = $202;$c$8$ph = $c$755;
      break;
     }
     $209 = (___muldi3(($204|0),($202|0),($$125|0),0)|0);
     $210 = tempRet0;
     $211 = $212&255;
     $213 = $211 ^ -1;
     $214 = ($210>>>0)>(4294967295);
     $215 = ($209>>>0)>($213>>>0);
     $216 = ($210|0)==(-1);
     $217 = $216 & $215;
     $218 = $214 | $217;
     if ($218) {
      $291 = $204;$292 = $202;$c$8$ph = $c$755;
      break;
     }
     $219 = (_i64Add(($211|0),0,($209|0),($210|0))|0);
     $220 = tempRet0;
     $221 = HEAP32[$3>>2]|0;
     $222 = HEAP32[$4>>2]|0;
     $223 = ($221>>>0)<($222>>>0);
     if ($223) {
      $224 = (($221) + 1|0);
      HEAP32[$3>>2] = $224;
      $225 = HEAP8[$221>>0]|0;
      $226 = $225&255;
      $c$7$be = $226;
     } else {
      $227 = (___shgetc($f)|0);
      $c$7$be = $227;
     }
     $$sum19 = (($c$7$be) + 1)|0;
     $228 = (628528 + ($$sum19)|0);
     $229 = HEAP8[$228>>0]|0;
     $230 = $229&255;
     $231 = ($230>>>0)<($$125>>>0);
     if ($231) {
      $202 = $220;$204 = $219;$212 = $229;$c$755 = $c$7$be;
     } else {
      $291 = $219;$292 = $220;$c$8$ph = $c$7$be;
      break;
     }
    }
    $$124 = $$125;$285 = $291;$286 = $292;$c$8 = $c$8$ph;
    label = 79;
   } else {
    $$124 = $$125;$285 = $287;$286 = $288;$c$8 = $c$6$lcssa;
    label = 79;
   }
  }
 } while(0);
 if ((label|0) == 79) {
  $$sum16 = (($c$8) + 1)|0;
  $232 = (628528 + ($$sum16)|0);
  $233 = HEAP8[$232>>0]|0;
  $234 = $233&255;
  $235 = ($234>>>0)<($$124>>>0);
  if ($235) {
   while(1) {
    $236 = HEAP32[$3>>2]|0;
    $237 = HEAP32[$4>>2]|0;
    $238 = ($236>>>0)<($237>>>0);
    if ($238) {
     $239 = (($236) + 1|0);
     HEAP32[$3>>2] = $239;
     $240 = HEAP8[$236>>0]|0;
     $241 = $240&255;
     $c$9$be = $241;
    } else {
     $242 = (___shgetc($f)|0);
     $c$9$be = $242;
    }
    $$sum17 = (($c$9$be) + 1)|0;
    $243 = (628528 + ($$sum17)|0);
    $244 = HEAP8[$243>>0]|0;
    $245 = $244&255;
    $246 = ($245>>>0)<($$124>>>0);
    if (!($246)) {
     break;
    }
   }
   $247 = (___errno_location()|0);
   HEAP32[$247>>2] = 34;
   $252 = $1;$254 = $0;
  } else {
   $252 = $286;$254 = $285;
  }
 }
 $248 = HEAP32[$4>>2]|0;
 $249 = ($248|0)==(0|0);
 if (!($249)) {
  $250 = HEAP32[$3>>2]|0;
  $251 = (($250) + -1|0);
  HEAP32[$3>>2] = $251;
 }
 $253 = ($252>>>0)<($1>>>0);
 $255 = ($254>>>0)<($0>>>0);
 $256 = ($252|0)==($1|0);
 $257 = $256 & $255;
 $258 = $253 | $257;
 if (!($258)) {
  $259 = $0 & 1;
  $260 = ($259|0)!=(0);
  $261 = (0)!=(0);
  $262 = $260 | $261;
  $263 = ($neg$0|0)!=(0);
  $or$cond12 = $262 | $263;
  if (!($or$cond12)) {
   $264 = (___errno_location()|0);
   HEAP32[$264>>2] = 34;
   $265 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $266 = tempRet0;
   $279 = $266;$280 = $265;
   tempRet0 = $279;
   return ($280|0);
  }
  $267 = ($252>>>0)>($1>>>0);
  $268 = ($254>>>0)>($0>>>0);
  $269 = ($252|0)==($1|0);
  $270 = $269 & $268;
  $271 = $267 | $270;
  if ($271) {
   $272 = (___errno_location()|0);
   HEAP32[$272>>2] = 34;
   $279 = $1;$280 = $0;
   tempRet0 = $279;
   return ($280|0);
  }
 }
 $273 = ($neg$0|0)<(0);
 $274 = $273 << 31 >> 31;
 $275 = $254 ^ $neg$0;
 $276 = $252 ^ $274;
 $277 = (_i64Subtract(($275|0),($276|0),($neg$0|0),($274|0))|0);
 $278 = tempRet0;
 $279 = $278;$280 = $277;
 tempRet0 = $279;
 return ($280|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$012$i = 0, $$012$i$be = 0, $$012$i$lcssa = 0, $$013$i = 0, $$01332$i = 0, $$01333$i = 0, $$07$i = 0, $$0711$i = 0, $$0712$i = 0, $$1$be$i = 0, $$1$be$i$lcssa = 0, $$1$ph$i = 0, $$14$i = 0, $$2$i = 0, $$21$i = 0, $$3$be$i = 0, $$3$be$i$lcssa = 0, $$3$lcssa$i = 0;
 var $$3127$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa113 = 0, $$lcssa114 = 0, $$lcssa120 = 0, $$lcssa120$lcssa = 0, $$lcssa121 = 0, $$lcssa121$lcssa = 0, $$lcssa122 = 0, $$lcssa125 = 0, $$lcssa126 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa143 = 0, $$lcssa55$i = 0, $$lnz$0$i = 0, $$neg38$i = 0, $$old8 = 0;
 var $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i18 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us98$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0;
 var $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0;
 var $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0.0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0.0, $45 = 0, $450 = 0.0, $451 = 0.0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0.0, $476 = 0, $477 = 0.0, $478 = 0.0, $479 = 0, $48 = 0.0, $480 = 0.0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0.0;
 var $489 = 0, $49 = 0.0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0.0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0.0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0, $655 = 0.0, $656 = 0.0, $657 = 0.0, $658 = 0.0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0.0, $674 = 0.0, $675 = 0, $676 = 0, $677 = 0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0.0, $681 = 0.0, $682 = 0, $683 = 0, $684 = 0.0, $685 = 0, $686 = 0.0;
 var $687 = 0.0, $688 = 0.0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0.0, $694 = 0, $695 = 0, $696 = 0, $697 = 0.0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0.0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0, $711 = 0, $712 = 0.0, $713 = 0.0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa180$i = 0, $a$0106$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph44$i = 0, $a$2$ph44$i$lcssa = 0, $a$2$ph44$i$lcssa130 = 0, $a$2$ph44$i$ph = 0, $a$2$ph44$i131 = 0, $a$3$i = 0, $a$3$i$lcssa = 0, $a$3$i$lcssa119 = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$483$i = 0, $a$5$i = 0;
 var $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i24 = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$0$i$be = 0, $c$0$i$lcssa = 0, $c$0$i$ph = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$174 = 0, $c$2 = 0, $c$2$i = 0, $c$2$i$be = 0, $c$2$i$ph = 0, $c$2$lcssa$i = 0;
 var $c$372 = 0, $c$4 = 0, $c$5 = 0, $c$5$ph = 0, $c$6 = 0, $carry$0108$i = 0, $carry1$0$us$i = 0, $carry1$0$us94$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us$i$lcssa = 0, $carry1$1$us$i$lcssa$lcssa = 0, $carry1$1$us99$i = 0, $carry1$1$us99$i$lcssa = 0, $carry1$1$us99$i$lcssa$lcssa = 0, $carry3$086$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$030$i = 0;
 var $denormal$031$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$ph$i$lcssa = 0, $e2$0$us$i = 0, $e2$0$us89$i = 0, $e2$0$us89$i$lcssa = 0, $e2$1$i = 0, $e2$1$i$lcssa = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$1$ph$i$ph = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0;
 var $gotdig$0$i = 0, $gotdig$0$i$lcssa = 0, $gotdig$0$i$lcssa116 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa = 0, $gotdig$0$i12$lcssa141 = 0, $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i$ph = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3123$i = 0, $gotdig$3123$i$lcssa = 0, $gotdig$4$i = 0, $gotdig$4$i$lcssa = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i$ph = 0, $gotrad$0$i14 = 0;
 var $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1124$i = 0, $gotrad$2$i = 0, $gotrad$2$i$lcssa = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$073 = 0, $i$081$i = 0, $i$1 = 0, $i$1$i = 0, $i$271 = 0, $i$3 = 0, $i$3$ph = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0126$i = 0;
 var $j$0126$i$lcssa = 0, $j$072$i = 0, $j$073$i = 0, $j$074$i = 0, $j$2$i = 0, $j$2$i$lcssa = 0, $j$3115$i = 0, $k$0$lcssa$i = 0, $k$0125$i = 0, $k$0125$i$lcssa = 0, $k$068$i = 0, $k$069$i = 0, $k$070$i = 0, $k$2$i = 0, $k$2$i$lcssa = 0, $k$3$i = 0, $k$4107$i = 0, $k$5$in$us$i = 0, $k$5$in$us93$i = 0, $k$5$us$i = 0;
 var $k$5$us95$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us101$i = 0, $k$684$i = 0, $lnz$0$lcssa$i = 0, $lnz$0122$i = 0, $lnz$0122$i$lcssa = 0, $lnz$062$i = 0, $lnz$063$i = 0, $lnz$064$i = 0, $lnz$2$i = 0, $lnz$2$i$lcssa = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i17 = 0, $or$cond11$i = 0, $or$cond11119$i = 0, $or$cond16$i = 0;
 var $or$cond18$i = 0, $or$cond185$i = 0, $or$cond19$i = 0, $or$cond20$us$i = 0, $or$cond20$us100$i = 0, $or$cond22$i = 0, $or$cond23$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond7$i = 0, $or$cond9$i = 0, $or$cond9$i26 = 0, $or$cond9$not = 0, $rp$0$lcssa181$i = 0, $rp$0105$i = 0, $rp$1$i19 = 0, $rp$1$i19$lcssa = 0;
 var $rp$2$ph42$i = 0, $rp$2$ph42$i$lcssa = 0, $rp$2$ph42$i$ph = 0, $rp$3$i$ph = 0, $rp$3$ph40$i = 0, $rp$3$ph40$i$ph = 0, $rp$482$i = 0, $rp$5$i = 0, $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0;
 var $x$3$lcssa$i = 0, $x$325$i = 0, $x$4$lcssa$i = 0, $x$420$i = 0, $x$5$i = 0, $x$5$i$lcssa = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0, $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i25 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$321$i = 0.0, $y$4$i = 0.0, $y$4$i$lcssa = 0.0, $y$5$i = 0.0;
 var $z$0$i = 0, $z$1$ph43$i = 0, $z$1$ph43$i$lcssa = 0, $z$1$ph43$i$ph = 0, $z$1$us$i = 0, $z$1$us90$i = 0, $z$1$us90$i$lcssa = 0, $z$2$us$i = 0, $z$2$us92$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us$i$lcssa = 0, $z$3$us$i$lcssa$lcssa = 0, $z$3$us102$i = 0, $z$3$us102$i$lcssa = 0, $z$3$us102$i$lcssa$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$5$ph$i$lcssa = 0, $z$5$ph$i$ph = 0;
 var $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $$lcssa143 = $9;
   break;
  }
 }
 $12 = ($$lcssa143|0)==(45);
 do {
  if ((($$lcssa143|0) == 43) | (($$lcssa143|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $$lcssa143;$sign$0 = 1;
  }
 } while(0);
 $c$174 = $c$0;$i$073 = 0;
 while(1) {
  $23 = $c$174 | 32;
  $24 = (628808 + ($i$073)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$174;$i$0$lcssa = $i$073;
   break;
  }
  $28 = ($i$073>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$174;
   }
  } while(0);
  $36 = (($i$073) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$174 = $c$2;$i$073 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)>(3);
   $39 = ($pok|0)!=(0);
   $or$cond5 = $38 & $39;
   if ($or$cond5) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $51 = ($i$0$lcssa|0)==(0);
   if ($51) {
    $c$372 = $c$1$lcssa;$i$271 = 0;
    while(1) {
     $52 = $c$372 | 32;
     $53 = (629392 + ($i$271)|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54 << 24 >> 24;
     $56 = ($52|0)==($55|0);
     if (!($56)) {
      $c$5$ph = $c$372;$i$3$ph = $i$271;
      break;
     }
     $57 = ($i$271>>>0)<(2);
     do {
      if ($57) {
       $58 = HEAP32[$0>>2]|0;
       $59 = HEAP32[$1>>2]|0;
       $60 = ($58>>>0)<($59>>>0);
       if ($60) {
        $61 = (($58) + 1|0);
        HEAP32[$0>>2] = $61;
        $62 = HEAP8[$58>>0]|0;
        $63 = $62&255;
        $c$4 = $63;
        break;
       } else {
        $64 = (___shgetc($f)|0);
        $c$4 = $64;
        break;
       }
      } else {
       $c$4 = $c$372;
      }
     } while(0);
     $65 = (($i$271) + 1)|0;
     $66 = ($65>>>0)<(3);
     if ($66) {
      $c$372 = $c$4;$i$271 = $65;
     } else {
      $c$5$ph = $c$4;$i$3$ph = $65;
      break;
     }
    }
    $c$5 = $c$5$ph;$i$3 = $i$3$ph;
   } else {
    $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
   }
   if ((($i$3|0) == 0)) {
    $112 = ($c$5|0)==(48);
    do {
     if ($112) {
      $113 = HEAP32[$0>>2]|0;
      $114 = HEAP32[$1>>2]|0;
      $115 = ($113>>>0)<($114>>>0);
      if ($115) {
       $116 = (($113) + 1|0);
       HEAP32[$0>>2] = $116;
       $117 = HEAP8[$113>>0]|0;
       $118 = $117&255;
       $121 = $118;
      } else {
       $119 = (___shgetc($f)|0);
       $121 = $119;
      }
      $120 = $121 | 32;
      $122 = ($120|0)==(120);
      if (!($122)) {
       $324 = HEAP32[$1>>2]|0;
       $325 = ($324|0)==(0|0);
       if ($325) {
        $c$6 = 48;
        break;
       }
       $326 = HEAP32[$0>>2]|0;
       $327 = (($326) + -1|0);
       HEAP32[$0>>2] = $327;
       $c$6 = 48;
       break;
      }
      $123 = HEAP32[$0>>2]|0;
      $124 = HEAP32[$1>>2]|0;
      $125 = ($123>>>0)<($124>>>0);
      if ($125) {
       $126 = (($123) + 1|0);
       HEAP32[$0>>2] = $126;
       $127 = HEAP8[$123>>0]|0;
       $128 = $127&255;
       $c$0$i$ph = $128;
      } else {
       $129 = (___shgetc($f)|0);
       $c$0$i$ph = $129;
      }
      $c$0$i = $c$0$i$ph;$gotdig$0$i = 0;
      while(1) {
       if ((($c$0$i|0) == 46)) {
        $gotdig$0$i$lcssa116 = $gotdig$0$i;
        label = 78;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $c$0$i$lcssa = $c$0$i;$gotdig$0$i$lcssa = $gotdig$0$i;
        label = 88;
        break;
       }
       $130 = HEAP32[$0>>2]|0;
       $131 = HEAP32[$1>>2]|0;
       $132 = ($130>>>0)<($131>>>0);
       if ($132) {
        $133 = (($130) + 1|0);
        HEAP32[$0>>2] = $133;
        $134 = HEAP8[$130>>0]|0;
        $135 = $134&255;
        $c$0$i$be = $135;
       } else {
        $136 = (___shgetc($f)|0);
        $c$0$i$be = $136;
       }
       $c$0$i = $c$0$i$be;$gotdig$0$i = 1;
      }
      if ((label|0) == 78) {
       $137 = HEAP32[$0>>2]|0;
       $138 = HEAP32[$1>>2]|0;
       $139 = ($137>>>0)<($138>>>0);
       if ($139) {
        $140 = (($137) + 1|0);
        HEAP32[$0>>2] = $140;
        $141 = HEAP8[$137>>0]|0;
        $142 = $141&255;
        $c$1$ph$i = $142;
       } else {
        $143 = (___shgetc($f)|0);
        $c$1$ph$i = $143;
       }
       $144 = ($c$1$ph$i|0)==(48);
       if ($144) {
        $152 = 0;$153 = 0;
        while(1) {
         $145 = HEAP32[$0>>2]|0;
         $146 = HEAP32[$1>>2]|0;
         $147 = ($145>>>0)<($146>>>0);
         if ($147) {
          $148 = (($145) + 1|0);
          HEAP32[$0>>2] = $148;
          $149 = HEAP8[$145>>0]|0;
          $150 = $149&255;
          $156 = $150;
         } else {
          $151 = (___shgetc($f)|0);
          $156 = $151;
         }
         $154 = (_i64Add(($152|0),($153|0),-1,-1)|0);
         $155 = tempRet0;
         $157 = ($156|0)==(48);
         if ($157) {
          $152 = $154;$153 = $155;
         } else {
          $$lcssa114 = $156;$717 = $154;$718 = $155;
          break;
         }
        }
        $715 = $717;$716 = $718;$c$2$i$ph = $$lcssa114;$gotdig$2$i$ph = 1;$gotrad$0$i$ph = 1;
       } else {
        $715 = 0;$716 = 0;$c$2$i$ph = $c$1$ph$i;$gotdig$2$i$ph = $gotdig$0$i$lcssa116;$gotrad$0$i$ph = 1;
       }
      }
      else if ((label|0) == 88) {
       $715 = 0;$716 = 0;$c$2$i$ph = $c$0$i$lcssa;$gotdig$2$i$ph = $gotdig$0$i$lcssa;$gotrad$0$i$ph = 0;
      }
      $167 = 0;$169 = 0;$719 = $715;$720 = $716;$c$2$i = $c$2$i$ph;$gotdig$2$i = $gotdig$2$i$ph;$gotrad$0$i = $gotrad$0$i$ph;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
      L86: while(1) {
       $158 = (($c$2$i) + -48)|0;
       $159 = ($158>>>0)<(10);
       do {
        if ($159) {
         $d$0$i = $158;
         label = 95;
        } else {
         $160 = $c$2$i | 32;
         $161 = (($160) + -97)|0;
         $162 = ($161>>>0)<(6);
         $163 = ($c$2$i|0)==(46);
         $or$cond6$i = $162 | $163;
         if (!($or$cond6$i)) {
          $211 = $719;$212 = $169;$214 = $720;$215 = $167;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
          break L86;
         }
         if ($163) {
          $164 = ($gotrad$0$i|0)==(0);
          if ($164) {
           $721 = $169;$722 = $167;$723 = $169;$724 = $167;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $211 = $719;$212 = $169;$214 = $720;$215 = $167;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break L86;
          }
         } else {
          $165 = ($c$2$i|0)>(57);
          $166 = (($160) + -87)|0;
          $$$i = $165 ? $166 : $158;
          $d$0$i = $$$i;
          label = 95;
          break;
         }
        }
       } while(0);
       if ((label|0) == 95) {
        label = 0;
        $168 = ($167|0)<(0);
        $170 = ($169>>>0)<(8);
        $171 = ($167|0)==(0);
        $172 = $171 & $170;
        $173 = $168 | $172;
        do {
         if ($173) {
          $174 = $x$0$i << 4;
          $175 = (($d$0$i) + ($174))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $175;$y$1$i = $y$0$i;
         } else {
          $176 = ($167|0)<(0);
          $177 = ($169>>>0)<(14);
          $178 = ($167|0)==(0);
          $179 = $178 & $177;
          $180 = $176 | $179;
          if ($180) {
           $181 = (+($d$0$i|0));
           $182 = $scale$0$i * 0.0625;
           $183 = $182 * $181;
           $184 = $y$0$i + $183;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $182;$x$1$i = $x$0$i;$y$1$i = $184;
           break;
          }
          $185 = ($d$0$i|0)==(0);
          $186 = ($gottail$0$i|0)!=(0);
          $or$cond$i = $185 | $186;
          if ($or$cond$i) {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          } else {
           $187 = $scale$0$i * 0.5;
           $188 = $y$0$i + $187;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $188;
          }
         }
        } while(0);
        $189 = (_i64Add(($169|0),($167|0),1,0)|0);
        $190 = tempRet0;
        $721 = $719;$722 = $720;$723 = $189;$724 = $190;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $191 = HEAP32[$0>>2]|0;
       $192 = HEAP32[$1>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if ($193) {
        $194 = (($191) + 1|0);
        HEAP32[$0>>2] = $194;
        $195 = HEAP8[$191>>0]|0;
        $196 = $195&255;
        $c$2$i$be = $196;
       } else {
        $197 = (___shgetc($f)|0);
        $c$2$i$be = $197;
       }
       $167 = $724;$169 = $723;$719 = $721;$720 = $722;$c$2$i = $c$2$i$be;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
      }
      $198 = ($gotdig$2$i$lcssa|0)==(0);
      if ($198) {
       $199 = HEAP32[$1>>2]|0;
       $200 = ($199|0)==(0|0);
       if (!($200)) {
        $201 = HEAP32[$0>>2]|0;
        $202 = (($201) + -1|0);
        HEAP32[$0>>2] = $202;
       }
       $203 = ($pok|0)==(0);
       if ($203) {
        ___shlim($f,0);
       } else {
        if (!($200)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i$lcssa|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i$lcssa|0)==(0);
      $213 = $210 ? $212 : $211;
      $216 = $210 ? $215 : $214;
      $217 = ($215|0)<(0);
      $218 = ($212>>>0)<(8);
      $219 = ($215|0)==(0);
      $220 = $219 & $218;
      $221 = $217 | $220;
      if ($221) {
       $223 = $212;$224 = $215;$x$325$i = $x$0$i$lcssa;
       while(1) {
        $222 = $x$325$i << 4;
        $225 = (_i64Add(($223|0),($224|0),1,0)|0);
        $226 = tempRet0;
        $227 = ($226|0)<(0);
        $228 = ($225>>>0)<(8);
        $229 = ($226|0)==(0);
        $230 = $229 & $228;
        $231 = $227 | $230;
        if ($231) {
         $223 = $225;$224 = $226;$x$325$i = $222;
        } else {
         $$lcssa113 = $222;
         break;
        }
       }
       $x$3$lcssa$i = $$lcssa113;
      } else {
       $x$3$lcssa$i = $x$0$i$lcssa;
      }
      $232 = $c$2$lcssa$i | 32;
      $233 = ($232|0)==(112);
      do {
       if ($233) {
        $234 = (_scanexp($f,$pok)|0);
        $235 = tempRet0;
        $236 = ($234|0)==(0);
        $237 = ($235|0)==(-2147483648);
        $238 = $236 & $237;
        if ($238) {
         $239 = ($pok|0)==(0);
         if ($239) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $240 = HEAP32[$1>>2]|0;
          $241 = ($240|0)==(0|0);
          if ($241) {
           $252 = 0;$253 = 0;
           break;
          }
          $242 = HEAP32[$0>>2]|0;
          $243 = (($242) + -1|0);
          HEAP32[$0>>2] = $243;
          $252 = 0;$253 = 0;
          break;
         }
        } else {
         $252 = $234;$253 = $235;
        }
       } else {
        $244 = HEAP32[$1>>2]|0;
        $245 = ($244|0)==(0|0);
        if ($245) {
         $252 = 0;$253 = 0;
        } else {
         $246 = HEAP32[$0>>2]|0;
         $247 = (($246) + -1|0);
         HEAP32[$0>>2] = $247;
         $252 = 0;$253 = 0;
        }
       }
      } while(0);
      $248 = (_bitshift64Shl(($213|0),($216|0),2)|0);
      $249 = tempRet0;
      $250 = (_i64Add(($248|0),($249|0),-32,-1)|0);
      $251 = tempRet0;
      $254 = (_i64Add(($250|0),($251|0),($252|0),($253|0))|0);
      $255 = tempRet0;
      $256 = ($x$3$lcssa$i|0)==(0);
      if ($256) {
       $257 = (+($sign$0|0));
       $258 = $257 * 0.0;
       $$0 = $258;
       STACKTOP = sp;return (+$$0);
      }
      $259 = (0 - ($emin$0$ph))|0;
      $260 = ($255|0)>(0);
      $261 = ($254>>>0)>($259>>>0);
      $262 = ($255|0)==(0);
      $263 = $262 & $261;
      $264 = $260 | $263;
      if ($264) {
       $265 = (___errno_location()|0);
       HEAP32[$265>>2] = 34;
       $266 = (+($sign$0|0));
       $267 = $266 * 1.7976931348623157E+308;
       $268 = $267 * 1.7976931348623157E+308;
       $$0 = $268;
       STACKTOP = sp;return (+$$0);
      }
      $269 = (($emin$0$ph) + -106)|0;
      $270 = ($269|0)<(0);
      $271 = $270 << 31 >> 31;
      $272 = ($255|0)<($271|0);
      $273 = ($254>>>0)<($269>>>0);
      $274 = ($255|0)==($271|0);
      $275 = $274 & $273;
      $276 = $272 | $275;
      if ($276) {
       $278 = (___errno_location()|0);
       HEAP32[$278>>2] = 34;
       $279 = (+($sign$0|0));
       $280 = $279 * 2.2250738585072014E-308;
       $281 = $280 * 2.2250738585072014E-308;
       $$0 = $281;
       STACKTOP = sp;return (+$$0);
      }
      $277 = ($x$3$lcssa$i|0)>(-1);
      if ($277) {
       $286 = $254;$287 = $255;$x$420$i = $x$3$lcssa$i;$y$321$i = $y$0$i$lcssa;
       while(1) {
        $282 = !($y$321$i >= 0.5);
        $283 = $x$420$i << 1;
        if ($282) {
         $$pn$i = $y$321$i;$x$5$i = $283;
        } else {
         $284 = $283 | 1;
         $285 = $y$321$i + -1.0;
         $$pn$i = $285;$x$5$i = $284;
        }
        $y$4$i = $y$321$i + $$pn$i;
        $288 = (_i64Add(($286|0),($287|0),-1,-1)|0);
        $289 = tempRet0;
        $290 = ($x$5$i|0)>(-1);
        if ($290) {
         $286 = $288;$287 = $289;$x$420$i = $x$5$i;$y$321$i = $y$4$i;
        } else {
         $725 = $288;$726 = $289;$x$5$i$lcssa = $x$5$i;$y$4$i$lcssa = $y$4$i;
         break;
        }
       }
       $295 = $725;$296 = $726;$x$4$lcssa$i = $x$5$i$lcssa;$y$3$lcssa$i = $y$4$i$lcssa;
      } else {
       $295 = $254;$296 = $255;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
      }
      $291 = ($emin$0$ph|0)<(0);
      $292 = $291 << 31 >> 31;
      $293 = (_i64Subtract(32,0,($emin$0$ph|0),($292|0))|0);
      $294 = tempRet0;
      $297 = (_i64Add(($295|0),($296|0),($293|0),($294|0))|0);
      $298 = tempRet0;
      $299 = (0)>($298|0);
      $300 = ($bits$0$ph>>>0)>($297>>>0);
      $301 = (0)==($298|0);
      $302 = $301 & $300;
      $303 = $299 | $302;
      if ($303) {
       $304 = ($297|0)<(0);
       if ($304) {
        $$0711$i = 0;
        label = 143;
       } else {
        $$07$i = $297;
        label = 141;
       }
      } else {
       $$07$i = $bits$0$ph;
       label = 141;
      }
      if ((label|0) == 141) {
       $305 = ($$07$i|0)<(53);
       if ($305) {
        $$0711$i = $$07$i;
        label = 143;
       } else {
        $$pre$i = (+($sign$0|0));
        $$0712$i = $$07$i;$$pre$phi$iZ2D = $$pre$i;$bias$0$i = 0.0;
       }
      }
      if ((label|0) == 143) {
       $306 = (84 - ($$0711$i))|0;
       $307 = (+_scalbn(1.0,$306));
       $308 = (+($sign$0|0));
       $309 = (+_copysignl($307,$308));
       $$0712$i = $$0711$i;$$pre$phi$iZ2D = $308;$bias$0$i = $309;
      }
      $310 = ($$0712$i|0)<(32);
      $311 = $y$3$lcssa$i != 0.0;
      $or$cond4$i = $310 & $311;
      $312 = $x$4$lcssa$i & 1;
      $313 = ($312|0)==(0);
      $or$cond9$i = $or$cond4$i & $313;
      $314 = $or$cond9$i&1;
      $x$6$i = (($314) + ($x$4$lcssa$i))|0;
      $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
      $315 = (+($x$6$i>>>0));
      $316 = $$pre$phi$iZ2D * $315;
      $317 = $bias$0$i + $316;
      $318 = $$pre$phi$iZ2D * $y$5$i;
      $319 = $318 + $317;
      $320 = $319 - $bias$0$i;
      $321 = $320 != 0.0;
      if (!($321)) {
       $322 = (___errno_location()|0);
       HEAP32[$322>>2] = 34;
      }
      $323 = (+_scalbnl($320,$295));
      $$0 = $323;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $328 = (0 - ($sum$i))|0;
    $$012$i = $c$6;$gotdig$0$i12 = 0;
    while(1) {
     if ((($$012$i|0) == 46)) {
      $gotdig$0$i12$lcssa141 = $gotdig$0$i12;
      label = 155;
      break;
     } else if (!((($$012$i|0) == 48))) {
      $$012$i$lcssa = $$012$i;$gotdig$0$i12$lcssa = $gotdig$0$i12;
      label = 165;
      break;
     }
     $329 = HEAP32[$0>>2]|0;
     $330 = HEAP32[$1>>2]|0;
     $331 = ($329>>>0)<($330>>>0);
     if ($331) {
      $332 = (($329) + 1|0);
      HEAP32[$0>>2] = $332;
      $333 = HEAP8[$329>>0]|0;
      $334 = $333&255;
      $$012$i$be = $334;
     } else {
      $335 = (___shgetc($f)|0);
      $$012$i$be = $335;
     }
     $$012$i = $$012$i$be;$gotdig$0$i12 = 1;
    }
    if ((label|0) == 155) {
     $336 = HEAP32[$0>>2]|0;
     $337 = HEAP32[$1>>2]|0;
     $338 = ($336>>>0)<($337>>>0);
     if ($338) {
      $339 = (($336) + 1|0);
      HEAP32[$0>>2] = $339;
      $340 = HEAP8[$336>>0]|0;
      $341 = $340&255;
      $$1$ph$i = $341;
     } else {
      $342 = (___shgetc($f)|0);
      $$1$ph$i = $342;
     }
     $343 = ($$1$ph$i|0)==(48);
     if ($343) {
      $344 = 0;$345 = 0;
      while(1) {
       $346 = (_i64Add(($344|0),($345|0),-1,-1)|0);
       $347 = tempRet0;
       $348 = HEAP32[$0>>2]|0;
       $349 = HEAP32[$1>>2]|0;
       $350 = ($348>>>0)<($349>>>0);
       if ($350) {
        $351 = (($348) + 1|0);
        HEAP32[$0>>2] = $351;
        $352 = HEAP8[$348>>0]|0;
        $353 = $352&255;
        $$1$be$i = $353;
       } else {
        $354 = (___shgetc($f)|0);
        $$1$be$i = $354;
       }
       $355 = ($$1$be$i|0)==(48);
       if ($355) {
        $344 = $346;$345 = $347;
       } else {
        $$1$be$i$lcssa = $$1$be$i;$729 = $346;$730 = $347;
        break;
       }
      }
      $$2$i = $$1$be$i$lcssa;$727 = $729;$728 = $730;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
     } else {
      $$2$i = $$1$ph$i;$727 = 0;$728 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa141;$gotrad$0$i14 = 1;
     }
    }
    else if ((label|0) == 165) {
     $$2$i = $$012$i$lcssa;$727 = 0;$728 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa;$gotrad$0$i14 = 0;
    }
    HEAP32[$x$i>>2] = 0;
    $356 = (($$2$i) + -48)|0;
    $357 = ($356>>>0)<(10);
    $358 = ($$2$i|0)==(46);
    $or$cond11119$i = $357 | $358;
    do {
     if ($or$cond11119$i) {
      $359 = (($x$i) + 496|0);
      $$3127$i = $$2$i;$362 = 0;$363 = 0;$731 = $358;$732 = $356;$733 = $727;$734 = $728;$gotdig$3123$i = $gotdig$2$i13;$gotrad$1124$i = $gotrad$0$i14;$j$0126$i = 0;$k$0125$i = 0;$lnz$0122$i = 0;
      L199: while(1) {
       do {
        if ($731) {
         $cond$i = ($gotrad$1124$i|0)==(0);
         if ($cond$i) {
          $735 = $362;$736 = $363;$737 = $362;$738 = $363;$gotdig$4$i = $gotdig$3123$i;$gotrad$2$i = 1;$j$2$i = $j$0126$i;$k$2$i = $k$0125$i;$lnz$2$i = $lnz$0122$i;
         } else {
          $739 = $733;$740 = $734;$741 = $362;$742 = $363;$gotdig$3123$i$lcssa = $gotdig$3123$i;$j$0126$i$lcssa = $j$0126$i;$k$0125$i$lcssa = $k$0125$i;$lnz$0122$i$lcssa = $lnz$0122$i;
          label = 170;
          break L199;
         }
        } else {
         $361 = ($k$0125$i|0)<(125);
         $364 = (_i64Add(($362|0),($363|0),1,0)|0);
         $365 = tempRet0;
         $366 = ($$3127$i|0)!=(48);
         if (!($361)) {
          if (!($366)) {
           $735 = $733;$736 = $734;$737 = $364;$738 = $365;$gotdig$4$i = $gotdig$3123$i;$gotrad$2$i = $gotrad$1124$i;$j$2$i = $j$0126$i;$k$2$i = $k$0125$i;$lnz$2$i = $lnz$0122$i;
           break;
          }
          $376 = HEAP32[$359>>2]|0;
          $377 = $376 | 1;
          HEAP32[$359>>2] = $377;
          $735 = $733;$736 = $734;$737 = $364;$738 = $365;$gotdig$4$i = $gotdig$3123$i;$gotrad$2$i = $gotrad$1124$i;$j$2$i = $j$0126$i;$k$2$i = $k$0125$i;$lnz$2$i = $lnz$0122$i;
          break;
         }
         $$lnz$0$i = $366 ? $364 : $lnz$0122$i;
         $367 = ($j$0126$i|0)==(0);
         $368 = (($x$i) + ($k$0125$i<<2)|0);
         if ($367) {
          $storemerge$i = $732;
         } else {
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369*10)|0;
          $371 = (($$3127$i) + -48)|0;
          $372 = (($371) + ($370))|0;
          $storemerge$i = $372;
         }
         HEAP32[$368>>2] = $storemerge$i;
         $373 = (($j$0126$i) + 1)|0;
         $374 = ($373|0)==(9);
         $375 = $374&1;
         $$k$0$i = (($375) + ($k$0125$i))|0;
         $$14$i = $374 ? 0 : $373;
         $735 = $733;$736 = $734;$737 = $364;$738 = $365;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1124$i;$j$2$i = $$14$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $378 = HEAP32[$0>>2]|0;
       $379 = HEAP32[$1>>2]|0;
       $380 = ($378>>>0)<($379>>>0);
       if ($380) {
        $381 = (($378) + 1|0);
        HEAP32[$0>>2] = $381;
        $382 = HEAP8[$378>>0]|0;
        $383 = $382&255;
        $$3$be$i = $383;
       } else {
        $384 = (___shgetc($f)|0);
        $$3$be$i = $384;
       }
       $385 = (($$3$be$i) + -48)|0;
       $386 = ($385>>>0)<(10);
       $387 = ($$3$be$i|0)==(46);
       $or$cond11$i = $386 | $387;
       if ($or$cond11$i) {
        $$3127$i = $$3$be$i;$362 = $737;$363 = $738;$731 = $387;$732 = $385;$733 = $735;$734 = $736;$gotdig$3123$i = $gotdig$4$i;$gotrad$1124$i = $gotrad$2$i;$j$0126$i = $j$2$i;$k$0125$i = $k$2$i;$lnz$0122$i = $lnz$2$i;
       } else {
        $$3$be$i$lcssa = $$3$be$i;$748 = $737;$749 = $738;$750 = $735;$751 = $736;$gotdig$4$i$lcssa = $gotdig$4$i;$gotrad$2$i$lcssa = $gotrad$2$i;$j$2$i$lcssa = $j$2$i;$k$2$i$lcssa = $k$2$i;$lnz$2$i$lcssa = $lnz$2$i;
        label = 181;
        break;
       }
      }
      if ((label|0) == 170) {
       $360 = ($gotdig$3123$i$lcssa|0)!=(0);
       $743 = $741;$744 = $742;$745 = $739;$746 = $740;$747 = $360;$j$074$i = $j$0126$i$lcssa;$k$070$i = $k$0125$i$lcssa;$lnz$064$i = $lnz$0122$i$lcssa;
       label = 190;
       break;
      }
      else if ((label|0) == 181) {
       $$3$lcssa$i = $$3$be$i$lcssa;$389 = $750;$390 = $748;$392 = $751;$393 = $749;$gotdig$3$lcssa$i = $gotdig$4$i$lcssa;$gotrad$1$lcssa$i = $gotrad$2$i$lcssa;$j$0$lcssa$i = $j$2$i$lcssa;$k$0$lcssa$i = $k$2$i$lcssa;$lnz$0$lcssa$i = $lnz$2$i$lcssa;
       label = 182;
       break;
      }
     } else {
      $$3$lcssa$i = $$2$i;$389 = $727;$390 = 0;$392 = $728;$393 = 0;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 182;
     }
    } while(0);
    do {
     if ((label|0) == 182) {
      $388 = ($gotrad$1$lcssa$i|0)==(0);
      $391 = $388 ? $390 : $389;
      $394 = $388 ? $393 : $392;
      $395 = ($gotdig$3$lcssa$i|0)!=(0);
      $396 = $$3$lcssa$i | 32;
      $397 = ($396|0)==(101);
      $or$cond16$i = $395 & $397;
      if (!($or$cond16$i)) {
       $412 = ($$3$lcssa$i|0)>(-1);
       if ($412) {
        $743 = $390;$744 = $393;$745 = $391;$746 = $394;$747 = $395;$j$074$i = $j$0$lcssa$i;$k$070$i = $k$0$lcssa$i;$lnz$064$i = $lnz$0$lcssa$i;
        label = 190;
        break;
       } else {
        $752 = $390;$753 = $393;$754 = $395;$755 = $391;$756 = $394;$j$073$i = $j$0$lcssa$i;$k$069$i = $k$0$lcssa$i;$lnz$063$i = $lnz$0$lcssa$i;
        label = 192;
        break;
       }
      }
      $398 = (_scanexp($f,$pok)|0);
      $399 = tempRet0;
      $400 = ($398|0)==(0);
      $401 = ($399|0)==(-2147483648);
      $402 = $400 & $401;
      do {
       if ($402) {
        $403 = ($pok|0)==(0);
        if ($403) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $404 = HEAP32[$1>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $408 = 0;$409 = 0;
          break;
         }
         $406 = HEAP32[$0>>2]|0;
         $407 = (($406) + -1|0);
         HEAP32[$0>>2] = $407;
         $408 = 0;$409 = 0;
         break;
        }
       } else {
        $408 = $398;$409 = $399;
       }
      } while(0);
      $410 = (_i64Add(($408|0),($409|0),($391|0),($394|0))|0);
      $411 = tempRet0;
      $422 = $410;$424 = $390;$425 = $411;$427 = $393;$j$072$i = $j$0$lcssa$i;$k$068$i = $k$0$lcssa$i;$lnz$062$i = $lnz$0$lcssa$i;
     }
    } while(0);
    if ((label|0) == 190) {
     $413 = HEAP32[$1>>2]|0;
     $414 = ($413|0)==(0|0);
     if ($414) {
      $752 = $743;$753 = $744;$754 = $747;$755 = $745;$756 = $746;$j$073$i = $j$074$i;$k$069$i = $k$070$i;$lnz$063$i = $lnz$064$i;
      label = 192;
     } else {
      $415 = HEAP32[$0>>2]|0;
      $416 = (($415) + -1|0);
      HEAP32[$0>>2] = $416;
      if ($747) {
       $422 = $745;$424 = $743;$425 = $746;$427 = $744;$j$072$i = $j$074$i;$k$068$i = $k$070$i;$lnz$062$i = $lnz$064$i;
      } else {
       label = 193;
      }
     }
    }
    if ((label|0) == 192) {
     if ($754) {
      $422 = $755;$424 = $752;$425 = $756;$427 = $753;$j$072$i = $j$073$i;$k$068$i = $k$069$i;$lnz$062$i = $lnz$063$i;
     } else {
      label = 193;
     }
    }
    if ((label|0) == 193) {
     $417 = (___errno_location()|0);
     HEAP32[$417>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $418 = HEAP32[$x$i>>2]|0;
    $419 = ($418|0)==(0);
    if ($419) {
     $420 = (+($sign$0|0));
     $421 = $420 * 0.0;
     $$0 = $421;
     STACKTOP = sp;return (+$$0);
    }
    $423 = ($422|0)==($424|0);
    $426 = ($425|0)==($427|0);
    $428 = $423 & $426;
    $429 = ($427|0)<(0);
    $430 = ($424>>>0)<(10);
    $431 = ($427|0)==(0);
    $432 = $431 & $430;
    $433 = $429 | $432;
    $or$cond$i17 = $428 & $433;
    if ($or$cond$i17) {
     $434 = ($bits$0$ph>>>0)>(30);
     $435 = $418 >>> $bits$0$ph;
     $436 = ($435|0)==(0);
     $or$cond18$i = $434 | $436;
     if ($or$cond18$i) {
      $437 = (+($sign$0|0));
      $438 = (+($418>>>0));
      $439 = $437 * $438;
      $$0 = $439;
      STACKTOP = sp;return (+$$0);
     }
    }
    $440 = (($emin$0$ph|0) / -2)&-1;
    $441 = ($440|0)<(0);
    $442 = $441 << 31 >> 31;
    $443 = ($425|0)>($442|0);
    $444 = ($422>>>0)>($440>>>0);
    $445 = ($425|0)==($442|0);
    $446 = $445 & $444;
    $447 = $443 | $446;
    if ($447) {
     $448 = (___errno_location()|0);
     HEAP32[$448>>2] = 34;
     $449 = (+($sign$0|0));
     $450 = $449 * 1.7976931348623157E+308;
     $451 = $450 * 1.7976931348623157E+308;
     $$0 = $451;
     STACKTOP = sp;return (+$$0);
    }
    $452 = (($emin$0$ph) + -106)|0;
    $453 = ($452|0)<(0);
    $454 = $453 << 31 >> 31;
    $455 = ($425|0)<($454|0);
    $456 = ($422>>>0)<($452>>>0);
    $457 = ($425|0)==($454|0);
    $458 = $457 & $456;
    $459 = $455 | $458;
    if ($459) {
     $460 = (___errno_location()|0);
     HEAP32[$460>>2] = 34;
     $461 = (+($sign$0|0));
     $462 = $461 * 2.2250738585072014E-308;
     $463 = $462 * 2.2250738585072014E-308;
     $$0 = $463;
     STACKTOP = sp;return (+$$0);
    }
    $464 = ($j$072$i|0)==(0);
    if ($464) {
     $k$3$i = $k$068$i;
    } else {
     $465 = ($j$072$i|0)<(9);
     if ($465) {
      $466 = (($x$i) + ($k$068$i<<2)|0);
      $$promoted$i = HEAP32[$466>>2]|0;
      $468 = $$promoted$i;$j$3115$i = $j$072$i;
      while(1) {
       $467 = ($468*10)|0;
       $469 = (($j$3115$i) + 1)|0;
       $exitcond$i = ($469|0)==(9);
       if ($exitcond$i) {
        $$lcssa133 = $467;
        break;
       } else {
        $468 = $467;$j$3115$i = $469;
       }
      }
      HEAP32[$466>>2] = $$lcssa133;
     }
     $470 = (($k$068$i) + 1)|0;
     $k$3$i = $470;
    }
    $471 = ($lnz$062$i|0)<(9);
    if ($471) {
     $472 = ($lnz$062$i|0)<=($422|0);
     $473 = ($422|0)<(18);
     $or$cond3$i = $472 & $473;
     if ($or$cond3$i) {
      $474 = ($422|0)==(9);
      if ($474) {
       $475 = (+($sign$0|0));
       $476 = HEAP32[$x$i>>2]|0;
       $477 = (+($476>>>0));
       $478 = $475 * $477;
       $$0 = $478;
       STACKTOP = sp;return (+$$0);
      }
      $479 = ($422|0)<(9);
      if ($479) {
       $480 = (+($sign$0|0));
       $481 = HEAP32[$x$i>>2]|0;
       $482 = (+($481>>>0));
       $483 = $480 * $482;
       $484 = (8 - ($422))|0;
       $485 = (628832 + ($484<<2)|0);
       $486 = HEAP32[$485>>2]|0;
       $487 = (+($486|0));
       $488 = $483 / $487;
       $$0 = $488;
       STACKTOP = sp;return (+$$0);
      }
      $489 = Math_imul($422, -3)|0;
      $$neg38$i = (($bits$0$ph) + 27)|0;
      $490 = (($$neg38$i) + ($489))|0;
      $491 = ($490|0)>(30);
      $$pre$i18 = HEAP32[$x$i>>2]|0;
      $492 = $$pre$i18 >>> $490;
      $493 = ($492|0)==(0);
      $or$cond185$i = $491 | $493;
      if ($or$cond185$i) {
       $494 = (+($sign$0|0));
       $495 = (+($$pre$i18>>>0));
       $496 = $494 * $495;
       $497 = (($422) + -10)|0;
       $498 = (628832 + ($497<<2)|0);
       $499 = HEAP32[$498>>2]|0;
       $500 = (+($499|0));
       $501 = $496 * $500;
       $$0 = $501;
       STACKTOP = sp;return (+$$0);
      }
     }
    }
    $502 = (($422|0) % 9)&-1;
    $503 = ($502|0)==(0);
    if ($503) {
     $a$2$ph44$i$ph = 0;$rp$2$ph42$i$ph = $422;$z$1$ph43$i$ph = $k$3$i;
    } else {
     $504 = ($422|0)>(-1);
     $505 = (($502) + 9)|0;
     $506 = $504 ? $502 : $505;
     $507 = (8 - ($506))|0;
     $508 = (628832 + ($507<<2)|0);
     $509 = HEAP32[$508>>2]|0;
     $510 = ($k$3$i|0)==(0);
     if ($510) {
      $a$0$lcssa180$i = 0;$rp$0$lcssa181$i = $422;$z$0$i = 0;
     } else {
      $511 = (1000000000 / ($509|0))&-1;
      $a$0106$i = 0;$carry$0108$i = 0;$k$4107$i = 0;$rp$0105$i = $422;
      while(1) {
       $512 = (($x$i) + ($k$4107$i<<2)|0);
       $513 = HEAP32[$512>>2]|0;
       $514 = (($513>>>0) % ($509>>>0))&-1;
       $515 = (($513>>>0) / ($509>>>0))&-1;
       $516 = (($515) + ($carry$0108$i))|0;
       HEAP32[$512>>2] = $516;
       $517 = Math_imul($514, $511)|0;
       $518 = ($k$4107$i|0)==($a$0106$i|0);
       $519 = ($516|0)==(0);
       $or$cond19$i = $518 & $519;
       $520 = (($k$4107$i) + 1)|0;
       if ($or$cond19$i) {
        $521 = $520 & 127;
        $522 = (($rp$0105$i) + -9)|0;
        $a$1$i = $521;$rp$1$i19 = $522;
       } else {
        $a$1$i = $a$0106$i;$rp$1$i19 = $rp$0105$i;
       }
       $523 = ($520|0)==($k$3$i|0);
       if ($523) {
        $$lcssa132 = $517;$a$1$i$lcssa = $a$1$i;$rp$1$i19$lcssa = $rp$1$i19;
        break;
       } else {
        $a$0106$i = $a$1$i;$carry$0108$i = $517;$k$4107$i = $520;$rp$0105$i = $rp$1$i19;
       }
      }
      $524 = ($$lcssa132|0)==(0);
      if ($524) {
       $a$0$lcssa180$i = $a$1$i$lcssa;$rp$0$lcssa181$i = $rp$1$i19$lcssa;$z$0$i = $k$3$i;
      } else {
       $525 = (($k$3$i) + 1)|0;
       $526 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$526>>2] = $$lcssa132;
       $a$0$lcssa180$i = $a$1$i$lcssa;$rp$0$lcssa181$i = $rp$1$i19$lcssa;$z$0$i = $525;
      }
     }
     $527 = (9 - ($506))|0;
     $528 = (($527) + ($rp$0$lcssa181$i))|0;
     $a$2$ph44$i$ph = $a$0$lcssa180$i;$rp$2$ph42$i$ph = $528;$z$1$ph43$i$ph = $z$0$i;
    }
    $a$2$ph44$i = $a$2$ph44$i$ph;$e2$0$ph$i = 0;$rp$2$ph42$i = $rp$2$ph42$i$ph;$z$1$ph43$i = $z$1$ph43$i$ph;
    L294: while(1) {
     $529 = ($rp$2$ph42$i|0)<(18);
     $530 = (($x$i) + ($a$2$ph44$i<<2)|0);
     if ($529) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph43$i;
      while(1) {
       $532 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $532;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $533 = (($x$i) + ($k$5$us$i<<2)|0);
        $534 = HEAP32[$533>>2]|0;
        $535 = (_bitshift64Shl(($534|0),0,29)|0);
        $536 = tempRet0;
        $537 = (_i64Add(($535|0),($536|0),($carry1$0$us$i|0),0)|0);
        $538 = tempRet0;
        $539 = ($538>>>0)>(0);
        $540 = ($537>>>0)>(1000000000);
        $541 = ($538|0)==(0);
        $542 = $541 & $540;
        $543 = $539 | $542;
        if ($543) {
         $544 = (___udivdi3(($537|0),($538|0),1000000000,0)|0);
         $545 = tempRet0;
         $546 = (___uremdi3(($537|0),($538|0),1000000000,0)|0);
         $547 = tempRet0;
         $$sink$off0$us$i = $546;$carry1$1$us$i = $544;
        } else {
         $$sink$off0$us$i = $537;$carry1$1$us$i = 0;
        }
        HEAP32[$533>>2] = $$sink$off0$us$i;
        $548 = (($z$2$us$i) + 127)|0;
        $549 = $548 & 127;
        $550 = ($k$5$us$i|0)!=($549|0);
        $551 = ($k$5$us$i|0)==($a$2$ph44$i|0);
        $or$cond20$us$i = $550 | $551;
        if ($or$cond20$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $552 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $552 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $553 = (($k$5$us$i) + -1)|0;
        if ($551) {
         $carry1$1$us$i$lcssa = $carry1$1$us$i;$z$3$us$i$lcssa = $z$3$us$i;
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $553;$z$2$us$i = $z$3$us$i;
        }
       }
       $554 = (($e2$0$us$i) + -29)|0;
       $555 = ($carry1$1$us$i$lcssa|0)==(0);
       if ($555) {
        $e2$0$us$i = $554;$z$1$us$i = $z$3$us$i$lcssa;
       } else {
        $$lcssa126 = $554;$carry1$1$us$i$lcssa$lcssa = $carry1$1$us$i$lcssa;$z$3$us$i$lcssa$lcssa = $z$3$us$i$lcssa;
        break;
       }
      }
      $$lcssa55$i = $$lcssa126;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i$lcssa$lcssa;$z$3$lcssa$lcssa$i = $z$3$us$i$lcssa$lcssa;
     } else {
      $531 = ($rp$2$ph42$i|0)==(18);
      if (!($531)) {
       $a$2$ph44$i$lcssa = $a$2$ph44$i;$e2$0$ph$i$lcssa = $e2$0$ph$i;$rp$2$ph42$i$lcssa = $rp$2$ph42$i;$z$1$ph43$i$lcssa = $z$1$ph43$i;
       label = 240;
       break;
      }
      $e2$0$us89$i = $e2$0$ph$i;$z$1$us90$i = $z$1$ph43$i;
      while(1) {
       $556 = HEAP32[$530>>2]|0;
       $557 = ($556>>>0)<(9007199);
       if (!($557)) {
        $a$2$ph44$i$lcssa130 = $a$2$ph44$i;$e2$0$us89$i$lcssa = $e2$0$us89$i;$z$1$us90$i$lcssa = $z$1$us90$i;
        label = 239;
        break L294;
       }
       $558 = (($z$1$us90$i) + 127)|0;
       $carry1$0$us94$i = 0;$k$5$in$us93$i = $558;$z$2$us92$i = $z$1$us90$i;
       while(1) {
        $k$5$us95$i = $k$5$in$us93$i & 127;
        $559 = (($x$i) + ($k$5$us95$i<<2)|0);
        $560 = HEAP32[$559>>2]|0;
        $561 = (_bitshift64Shl(($560|0),0,29)|0);
        $562 = tempRet0;
        $563 = (_i64Add(($561|0),($562|0),($carry1$0$us94$i|0),0)|0);
        $564 = tempRet0;
        $565 = ($564>>>0)>(0);
        $566 = ($563>>>0)>(1000000000);
        $567 = ($564|0)==(0);
        $568 = $567 & $566;
        $569 = $565 | $568;
        if ($569) {
         $570 = (___udivdi3(($563|0),($564|0),1000000000,0)|0);
         $571 = tempRet0;
         $572 = (___uremdi3(($563|0),($564|0),1000000000,0)|0);
         $573 = tempRet0;
         $$sink$off0$us98$i = $572;$carry1$1$us99$i = $570;
        } else {
         $$sink$off0$us98$i = $563;$carry1$1$us99$i = 0;
        }
        HEAP32[$559>>2] = $$sink$off0$us98$i;
        $574 = (($z$2$us92$i) + 127)|0;
        $575 = $574 & 127;
        $576 = ($k$5$us95$i|0)!=($575|0);
        $577 = ($k$5$us95$i|0)==($a$2$ph44$i|0);
        $or$cond20$us100$i = $576 | $577;
        if ($or$cond20$us100$i) {
         $z$3$us102$i = $z$2$us92$i;
        } else {
         $578 = ($$sink$off0$us98$i|0)==(0);
         $k$5$z$2$us101$i = $578 ? $k$5$us95$i : $z$2$us92$i;
         $z$3$us102$i = $k$5$z$2$us101$i;
        }
        $579 = (($k$5$us95$i) + -1)|0;
        if ($577) {
         $carry1$1$us99$i$lcssa = $carry1$1$us99$i;$z$3$us102$i$lcssa = $z$3$us102$i;
         break;
        } else {
         $carry1$0$us94$i = $carry1$1$us99$i;$k$5$in$us93$i = $579;$z$2$us92$i = $z$3$us102$i;
        }
       }
       $580 = (($e2$0$us89$i) + -29)|0;
       $581 = ($carry1$1$us99$i$lcssa|0)==(0);
       if ($581) {
        $e2$0$us89$i = $580;$z$1$us90$i = $z$3$us102$i$lcssa;
       } else {
        $$lcssa125 = $580;$carry1$1$us99$i$lcssa$lcssa = $carry1$1$us99$i$lcssa;$z$3$us102$i$lcssa$lcssa = $z$3$us102$i$lcssa;
        break;
       }
      }
      $$lcssa55$i = $$lcssa125;$carry1$1$lcssa$lcssa$i = $carry1$1$us99$i$lcssa$lcssa;$z$3$lcssa$lcssa$i = $z$3$us102$i$lcssa$lcssa;
     }
     $582 = (($rp$2$ph42$i) + 9)|0;
     $583 = (($a$2$ph44$i) + 127)|0;
     $584 = $583 & 127;
     $585 = ($584|0)==($z$3$lcssa$lcssa$i|0);
     if ($585) {
      $586 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $587 = $586 & 127;
      $588 = (($x$i) + ($587<<2)|0);
      $589 = HEAP32[$588>>2]|0;
      $590 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $591 = $590 & 127;
      $592 = (($x$i) + ($591<<2)|0);
      $593 = HEAP32[$592>>2]|0;
      $594 = $593 | $589;
      HEAP32[$592>>2] = $594;
      $z$4$i = $587;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $595 = (($x$i) + ($584<<2)|0);
     HEAP32[$595>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph44$i = $584;$e2$0$ph$i = $$lcssa55$i;$rp$2$ph42$i = $582;$z$1$ph43$i = $z$4$i;
    }
    if ((label|0) == 239) {
     $a$2$ph44$i131 = $a$2$ph44$i$lcssa130;$e2$1$ph$i$ph = $e2$0$us89$i$lcssa;$rp$3$ph40$i$ph = 18;$z$5$ph$i$ph = $z$1$us90$i$lcssa;
    }
    else if ((label|0) == 240) {
     $a$2$ph44$i131 = $a$2$ph44$i$lcssa;$e2$1$ph$i$ph = $e2$0$ph$i$lcssa;$rp$3$ph40$i$ph = $rp$2$ph42$i$lcssa;$z$5$ph$i$ph = $z$1$ph43$i$lcssa;
    }
    $a$3$ph$i = $a$2$ph44$i131;$e2$1$ph$i = $e2$1$ph$i$ph;$rp$3$ph40$i = $rp$3$ph40$i$ph;$z$5$ph$i = $z$5$ph$i$ph;
    L333: while(1) {
     $632 = (($z$5$ph$i) + 1)|0;
     $629 = $632 & 127;
     $633 = (($z$5$ph$i) + 127)|0;
     $634 = $633 & 127;
     $635 = (($x$i) + ($634<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph40$i;
     while(1) {
      $608 = ($rp$3$i$ph|0)==(18);
      $636 = ($rp$3$i$ph|0)>(27);
      $$21$i = $636 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$081$i = 0;
       while(1) {
        $598 = (($i$081$i) + ($a$3$i))|0;
        $599 = $598 & 127;
        $600 = ($599|0)==($z$5$ph$i|0);
        if ($600) {
         $i$1$i = 2;
         break;
        }
        $601 = (($x$i) + ($599<<2)|0);
        $602 = HEAP32[$601>>2]|0;
        $603 = (628824 + ($i$081$i<<2)|0);
        $604 = HEAP32[$603>>2]|0;
        $605 = ($602>>>0)<($604>>>0);
        if ($605) {
         $i$1$i = 2;
         break;
        }
        $606 = ($602>>>0)>($604>>>0);
        $596 = (($i$081$i) + 1)|0;
        if ($606) {
         $i$1$i = $i$081$i;
         break;
        }
        $597 = ($596|0)<(2);
        if ($597) {
         $i$081$i = $596;
        } else {
         $i$1$i = $596;
         break;
        }
       }
       $607 = ($i$1$i|0)==(2);
       $or$cond7$i = $607 & $608;
       if ($or$cond7$i) {
        $$lcssa122 = $629;$a$3$i$lcssa = $a$3$i;$e2$1$i$lcssa = $e2$1$i;$z$5$ph$i$lcssa = $z$5$ph$i;
        break L333;
       }
       $611 = (($$21$i) + ($e2$1$i))|0;
       $612 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($612) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $611;
       } else {
        $$lcssa120 = $611;$a$3$i$lcssa119 = $a$3$i;
        break;
       }
      }
      $613 = 1 << $$21$i;
      $614 = (($613) + -1)|0;
      $615 = 1000000000 >>> $$21$i;
      $a$483$i = $a$3$i$lcssa119;$carry3$086$i = 0;$k$684$i = $a$3$i$lcssa119;$rp$482$i = $rp$3$i$ph;
      while(1) {
       $616 = (($x$i) + ($k$684$i<<2)|0);
       $617 = HEAP32[$616>>2]|0;
       $618 = $617 & $614;
       $619 = $617 >>> $$21$i;
       $620 = (($619) + ($carry3$086$i))|0;
       HEAP32[$616>>2] = $620;
       $621 = Math_imul($618, $615)|0;
       $622 = ($k$684$i|0)==($a$483$i|0);
       $623 = ($620|0)==(0);
       $or$cond22$i = $622 & $623;
       $624 = (($k$684$i) + 1)|0;
       $625 = $624 & 127;
       $626 = (($rp$482$i) + -9)|0;
       $rp$5$i = $or$cond22$i ? $626 : $rp$482$i;
       $a$5$i = $or$cond22$i ? $625 : $a$483$i;
       $627 = ($625|0)==($z$5$ph$i|0);
       if ($627) {
        $$lcssa121 = $621;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
        break;
       } else {
        $a$483$i = $a$5$i;$carry3$086$i = $621;$k$684$i = $625;$rp$482$i = $rp$5$i;
       }
      }
      $628 = ($$lcssa121|0)==(0);
      if (!($628)) {
       $630 = ($629|0)==($a$5$i$lcssa|0);
       if (!($630)) {
        $$lcssa120$lcssa = $$lcssa120;$$lcssa121$lcssa = $$lcssa121;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
        break;
       }
       $637 = HEAP32[$635>>2]|0;
       $638 = $637 | 1;
       HEAP32[$635>>2] = $638;
      }
      $a$3$i$ph = $a$5$i$lcssa;$e2$1$i$ph = $$lcssa120;$rp$3$i$ph = $rp$5$i$lcssa;
     }
     $631 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$631>>2] = $$lcssa121$lcssa;
     $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa120$lcssa;$rp$3$ph40$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $629;
    }
    $609 = $a$3$i$lcssa & 127;
    $610 = ($609|0)==($z$5$ph$i$lcssa|0);
    if ($610) {
     $639 = (($$lcssa122) + -1)|0;
     $640 = (($x$i) + ($639<<2)|0);
     HEAP32[$640>>2] = 0;
     $z$7$i = $$lcssa122;
    } else {
     $z$7$i = $z$5$ph$i$lcssa;
    }
    $641 = (($x$i) + ($609<<2)|0);
    $642 = HEAP32[$641>>2]|0;
    $643 = (+($642>>>0));
    $644 = (($a$3$i$lcssa) + 1)|0;
    $645 = $644 & 127;
    $646 = ($645|0)==($z$7$i|0);
    if ($646) {
     $705 = (($z$7$i) + 1)|0;
     $706 = $705 & 127;
     $707 = (($706) + -1)|0;
     $708 = (($x$i) + ($707<<2)|0);
     HEAP32[$708>>2] = 0;
     $z$7$1$i = $706;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $709 = $643 * 1.0E+9;
    $710 = (($x$i) + ($645<<2)|0);
    $711 = HEAP32[$710>>2]|0;
    $712 = (+($711>>>0));
    $713 = $709 + $712;
    $670 = (+($sign$0|0));
    $652 = $670 * $713;
    $690 = (($e2$1$i$lcssa) + 53)|0;
    $647 = (($690) - ($emin$0$ph))|0;
    $714 = ($647|0)<($bits$0$ph|0);
    if ($714) {
     $648 = ($647|0)<(0);
     if ($648) {
      $$01332$i = 0;$denormal$031$i = 1;
      label = 275;
     } else {
      $$013$i = $647;$denormal$0$i = 1;
      label = 274;
     }
    } else {
     $$013$i = $bits$0$ph;$denormal$0$i = 0;
     label = 274;
    }
    if ((label|0) == 274) {
     $649 = ($$013$i|0)<(53);
     if ($649) {
      $$01332$i = $$013$i;$denormal$031$i = $denormal$0$i;
      label = 275;
     } else {
      $$01333$i = $$013$i;$bias$0$i24 = 0.0;$denormal$030$i = $denormal$0$i;$frac$0$i = 0.0;$y$1$i23 = $652;
     }
    }
    if ((label|0) == 275) {
     $650 = (105 - ($$01332$i))|0;
     $651 = (+_scalbn(1.0,$650));
     $653 = (+_copysignl($651,$652));
     $654 = (53 - ($$01332$i))|0;
     $655 = (+_scalbn(1.0,$654));
     $656 = (+_fmodl($652,$655));
     $657 = $652 - $656;
     $658 = $653 + $657;
     $$01333$i = $$01332$i;$bias$0$i24 = $653;$denormal$030$i = $denormal$031$i;$frac$0$i = $656;$y$1$i23 = $658;
    }
    $659 = (($a$3$i$lcssa) + 2)|0;
    $660 = $659 & 127;
    $661 = ($660|0)==($z$7$1$i|0);
    do {
     if ($661) {
      $frac$2$i = $frac$0$i;
     } else {
      $662 = (($x$i) + ($660<<2)|0);
      $663 = HEAP32[$662>>2]|0;
      $664 = ($663>>>0)<(500000000);
      do {
       if ($664) {
        $665 = ($663|0)==(0);
        if ($665) {
         $666 = (($a$3$i$lcssa) + 3)|0;
         $667 = $666 & 127;
         $668 = ($667|0)==($z$7$1$i|0);
         if ($668) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $669 = $670 * 0.25;
        $671 = $669 + $frac$0$i;
        $frac$1$i = $671;
       } else {
        $672 = ($663>>>0)>(500000000);
        if ($672) {
         $673 = $670 * 0.75;
         $674 = $673 + $frac$0$i;
         $frac$1$i = $674;
         break;
        }
        $675 = (($a$3$i$lcssa) + 3)|0;
        $676 = $675 & 127;
        $677 = ($676|0)==($z$7$1$i|0);
        if ($677) {
         $678 = $670 * 0.5;
         $679 = $678 + $frac$0$i;
         $frac$1$i = $679;
         break;
        } else {
         $680 = $670 * 0.75;
         $681 = $680 + $frac$0$i;
         $frac$1$i = $681;
         break;
        }
       }
      } while(0);
      $682 = (53 - ($$01333$i))|0;
      $683 = ($682|0)>(1);
      if (!($683)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $684 = (+_fmodl($frac$1$i,1.0));
      $685 = $684 != 0.0;
      if ($685) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $686 = $frac$1$i + 1.0;
      $frac$2$i = $686;
     }
    } while(0);
    $687 = $y$1$i23 + $frac$2$i;
    $688 = $687 - $bias$0$i24;
    $689 = $690 & 2147483647;
    $691 = (-2 - ($sum$i))|0;
    $692 = ($689|0)>($691|0);
    do {
     if ($692) {
      $693 = (+Math_abs((+$688)));
      $694 = !($693 >= 9007199254740992.0);
      if ($694) {
       $denormal$2$i = $denormal$030$i;$e2$2$i = $e2$1$i$lcssa;$y$2$i25 = $688;
      } else {
       $695 = ($denormal$030$i|0)!=(0);
       $696 = ($$01333$i|0)==($647|0);
       $or$cond23$i = $695 & $696;
       $denormal$1$i = $or$cond23$i ? 0 : $denormal$030$i;
       $697 = $688 * 0.5;
       $698 = (($e2$1$i$lcssa) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $698;$y$2$i25 = $697;
      }
      $699 = (($e2$2$i) + 50)|0;
      $700 = ($699|0)>($328|0);
      if (!($700)) {
       $701 = ($denormal$2$i|0)!=(0);
       $702 = $frac$2$i != 0.0;
       $or$cond9$i26 = $701 & $702;
       if (!($or$cond9$i26)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i25;
        break;
       }
      }
      $703 = (___errno_location()|0);
      HEAP32[$703>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i25;
     } else {
      $e2$3$i = $e2$1$i$lcssa;$y$3$i = $688;
     }
    } while(0);
    $704 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $704;
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 3)) {
    $67 = HEAP32[$0>>2]|0;
    $68 = HEAP32[$1>>2]|0;
    $69 = ($67>>>0)<($68>>>0);
    if ($69) {
     $70 = (($67) + 1|0);
     HEAP32[$0>>2] = $70;
     $71 = HEAP8[$67>>0]|0;
     $72 = $71&255;
     $74 = $72;
    } else {
     $73 = (___shgetc($f)|0);
     $74 = $73;
    }
    $75 = ($74|0)==(40);
    if (!($75)) {
     $76 = HEAP32[$1>>2]|0;
     $77 = ($76|0)==(0|0);
     if ($77) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $78 = HEAP32[$0>>2]|0;
     $79 = (($78) + -1|0);
     HEAP32[$0>>2] = $79;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $i$4 = 1;
    while(1) {
     $80 = HEAP32[$0>>2]|0;
     $81 = HEAP32[$1>>2]|0;
     $82 = ($80>>>0)<($81>>>0);
     if ($82) {
      $83 = (($80) + 1|0);
      HEAP32[$0>>2] = $83;
      $84 = HEAP8[$80>>0]|0;
      $85 = $84&255;
      $88 = $85;
     } else {
      $86 = (___shgetc($f)|0);
      $88 = $86;
     }
     $87 = (($88) + -48)|0;
     $89 = ($87>>>0)<(10);
     $90 = (($88) + -65)|0;
     $91 = ($90>>>0)<(26);
     $or$cond = $89 | $91;
     if (!($or$cond)) {
      $92 = (($88) + -97)|0;
      $93 = ($92>>>0)<(26);
      $94 = ($88|0)==(95);
      $or$cond7 = $93 | $94;
      if (!($or$cond7)) {
       $$lcssa = $88;$i$4$lcssa = $i$4;
       break;
      }
     }
     $106 = (($i$4) + 1)|0;
     $i$4 = $106;
    }
    $95 = ($$lcssa|0)==(41);
    if ($95) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $96 = HEAP32[$1>>2]|0;
    $97 = ($96|0)==(0|0);
    if (!($97)) {
     $98 = HEAP32[$0>>2]|0;
     $99 = (($98) + -1|0);
     HEAP32[$0>>2] = $99;
    }
    if (!($39)) {
     $101 = (___errno_location()|0);
     HEAP32[$101>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $100 = ($i$4$lcssa|0)==(0);
    $brmerge107 = $100 | $97;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $$in = $i$4$lcssa;
    while(1) {
     $102 = (($$in) + -1)|0;
     $103 = HEAP32[$0>>2]|0;
     $104 = (($103) + -1|0);
     HEAP32[$0>>2] = $104;
     $105 = ($102|0)==(0);
     if ($105) {
      break;
     } else {
      $$in = $102;
     }
    }
    $$0 = nan;
    STACKTOP = sp;return (+$$0);
   } else {
    $107 = HEAP32[$1>>2]|0;
    $108 = ($107|0)==(0|0);
    if (!($108)) {
     $109 = HEAP32[$0>>2]|0;
     $110 = (($109) + -1|0);
     HEAP32[$0>>2] = $110;
    }
    $111 = (___errno_location()|0);
    HEAP32[$111>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond9$not = $notrhs | $notlhs;
  $brmerge = $or$cond9$not | $42;
  if (!($brmerge)) {
   $i$1 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$1) + -1)|0;
    $$old8 = ($47>>>0)>(3);
    if ($$old8) {
     $i$1 = $47;
    } else {
     break;
    }
   }
  }
 }
 $48 = (+($sign$0|0));
 $49 = $48 * inf;
 $50 = $49;
 $$0 = $50;
 STACKTOP = sp;return (+$$0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if (!($or$cond)) {
  $$sink = $2;
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $$sink;
  return;
 }
 $11 = (($4) + ($lim)|0);
 $$sink = $11;
 $12 = (($f) + 100|0);
 HEAP32[$12>>2] = $$sink;
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 return ($$0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _expm1($x) {
 $x = +$x;
 var $$0 = 0.0, $$02 = 0.0, $$pn = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0;
 var $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0;
 var $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $__x = 0.0;
 var $c$0 = 0.0, $hi$0 = 0.0, $k$0 = 0, $k$1 = 0, $lo$0 = 0.0, $y$0 = 0.0, $y$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 $3 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
 $4 = tempRet0;
 $5 = ($2>>>0)>(1078159481);
 if ($5) {
  $6 = $1 & 2147483647;
  $7 = ($6>>>0)>(2146435072);
  $8 = ($0>>>0)>(0);
  $9 = ($6|0)==(2146435072);
  $10 = $9 & $8;
  $11 = $7 | $10;
  if ($11) {
   $$0 = $x;
   STACKTOP = sp;return (+$$0);
  }
  $12 = ($3|0)==(0);
  if (!($12)) {
   $$0 = -1.0;
   STACKTOP = sp;return (+$$0);
  }
  $13 = $x > 709.78271289338397;
  if ($13) {
   $14 = $x * 8.9884656743115795E+307;
   $$0 = $14;
   STACKTOP = sp;return (+$$0);
  }
 }
 $15 = ($2>>>0)>(1071001154);
 if ($15) {
  $16 = ($2>>>0)<(1072734898);
  do {
   if ($16) {
    $17 = ($3|0)==(0);
    if ($17) {
     $18 = $x + -0.69314718036912382;
     $hi$0 = $18;$k$0 = 1;$lo$0 = 1.9082149292705877E-10;
     break;
    } else {
     $19 = $x + 0.69314718036912382;
     $hi$0 = $19;$k$0 = -1;$lo$0 = -1.9082149292705877E-10;
     break;
    }
   } else {
    $20 = $x * 1.4426950408889634;
    $21 = ($3|0)!=(0);
    $22 = $21 ? -0.5 : 0.5;
    $23 = $20 + $22;
    $24 = (~~(($23)));
    $25 = (+($24|0));
    $26 = $25 * 0.69314718036912382;
    $27 = $x - $26;
    $28 = $25 * 1.9082149292705877E-10;
    $hi$0 = $27;$k$0 = $24;$lo$0 = $28;
   }
  } while(0);
  $29 = $hi$0 - $lo$0;
  $30 = $hi$0 - $29;
  $31 = $30 - $lo$0;
  $$02 = $29;$c$0 = $31;$k$1 = $k$0;
 } else {
  $32 = ($2>>>0)<(1016070144);
  if ($32) {
   $33 = ($2>>>0)<(1048576);
   if (!($33)) {
    $$0 = $x;
    STACKTOP = sp;return (+$$0);
   }
   $34 = $x;
   $__x = $34;
   $$0 = $x;
   STACKTOP = sp;return (+$$0);
  } else {
   $$02 = $x;$c$0 = 0.0;$k$1 = 0;
  }
 }
 $35 = $$02 * 0.5;
 $36 = $$02 * $35;
 $37 = $36 * -2.0109921818362437E-7;
 $38 = $37 + 4.0082178273293624E-6;
 $39 = $36 * $38;
 $40 = $39 + -7.9365075786748794E-5;
 $41 = $36 * $40;
 $42 = $41 + 0.0015873015872548146;
 $43 = $36 * $42;
 $44 = $43 + -0.033333333333333132;
 $45 = $36 * $44;
 $46 = $45 + 1.0;
 $47 = $35 * $46;
 $48 = 3.0 - $47;
 $49 = $46 - $48;
 $50 = $$02 * $48;
 $51 = 6.0 - $50;
 $52 = $49 / $51;
 $53 = $36 * $52;
 $54 = ($k$1|0)==(0);
 if ($54) {
  $55 = $$02 * $53;
  $56 = $55 - $36;
  $57 = $$02 - $56;
  $$0 = $57;
  STACKTOP = sp;return (+$$0);
 }
 $58 = $53 - $c$0;
 $59 = $$02 * $58;
 $60 = $59 - $c$0;
 $61 = $60 - $36;
 if ((($k$1|0) == -1)) {
  $62 = $$02 - $61;
  $63 = $62 * 0.5;
  $64 = $63 + -0.5;
  $$0 = $64;
  STACKTOP = sp;return (+$$0);
 } else if ((($k$1|0) == 1)) {
  $65 = $$02 < -0.25;
  if ($65) {
   $66 = $$02 + 0.5;
   $67 = $61 - $66;
   $68 = $67 * -2.0;
   $$0 = $68;
   STACKTOP = sp;return (+$$0);
  } else {
   $69 = $$02 - $61;
   $70 = $69 * 2.0;
   $71 = $70 + 1.0;
   $$0 = $71;
   STACKTOP = sp;return (+$$0);
  }
 } else {
  $72 = (($k$1) + 1023)|0;
  $73 = (_bitshift64Shl(($72|0),0,52)|0);
  $74 = tempRet0;
  HEAP32[tempDoublePtr>>2] = $73;HEAP32[tempDoublePtr+4>>2] = $74;$75 = +HEAPF64[tempDoublePtr>>3];
  $76 = ($k$1>>>0)>(56);
  if ($76) {
   $77 = $$02 - $61;
   $78 = $77 + 1.0;
   $79 = ($k$1|0)==(1024);
   if ($79) {
    $80 = $78 * 2.0;
    $81 = $80 * 8.9884656743115795E+307;
    $y$0 = $81;
   } else {
    $82 = $75 * $78;
    $y$0 = $82;
   }
   $83 = $y$0 + -1.0;
   $$0 = $83;
   STACKTOP = sp;return (+$$0);
  } else {
   $84 = (1023 - ($k$1))|0;
   $85 = (_bitshift64Shl(($84|0),0,52)|0);
   $86 = tempRet0;
   $87 = ($k$1|0)<(20);
   if ($87) {
    $88 = $$02 - $61;
    HEAP32[tempDoublePtr>>2] = $85;HEAP32[tempDoublePtr+4>>2] = $86;$89 = +HEAPF64[tempDoublePtr>>3];
    $90 = 1.0 - $89;
    $91 = $90 + $88;
    $$pn = $91;
   } else {
    HEAP32[tempDoublePtr>>2] = $85;HEAP32[tempDoublePtr+4>>2] = $86;$92 = +HEAPF64[tempDoublePtr>>3];
    $93 = $92 + $61;
    $94 = $$02 - $93;
    $95 = $94 + 1.0;
    $$pn = $95;
   }
   $y$1 = $75 * $$pn;
   $$0 = $y$1;
   STACKTOP = sp;return (+$$0);
  }
 }
 return +(0.0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa41 = 0, $$lcssa43 = 0, $$lcssa45 = 0, $$lcssa46 = 0, $$lcssa47 = 0, $$lcssa7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 if (!($15)) {
  $16 = $3 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($2>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  $22 = ($6|0)==(2047);
  $or$cond = $21 | $22;
  if (!($or$cond)) {
   $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
   $26 = tempRet0;
   $27 = ($26>>>0)>($12>>>0);
   $28 = ($25>>>0)>($11>>>0);
   $29 = ($26|0)==($12|0);
   $30 = $29 & $28;
   $31 = $27 | $30;
   if (!($31)) {
    $32 = ($25|0)==($11|0);
    $33 = ($26|0)==($12|0);
    $34 = $32 & $33;
    if (!($34)) {
     $$0 = $x;
     return (+$$0);
    }
    $35 = $x * 0.0;
    $$0 = $35;
    return (+$$0);
   }
   $36 = ($6|0)==(0);
   if ($36) {
    $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
    $38 = tempRet0;
    $39 = ($38|0)>(-1);
    $40 = ($37>>>0)>(4294967295);
    $41 = ($38|0)==(-1);
    $42 = $41 & $40;
    $43 = $39 | $42;
    if ($43) {
     $45 = $37;$46 = $38;$ex$026 = 0;
     while(1) {
      $44 = (($ex$026) + -1)|0;
      $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
      $48 = tempRet0;
      $49 = ($48|0)>(-1);
      $50 = ($47>>>0)>(4294967295);
      $51 = ($48|0)==(-1);
      $52 = $51 & $50;
      $53 = $49 | $52;
      if ($53) {
       $45 = $47;$46 = $48;$ex$026 = $44;
      } else {
       $$lcssa47 = $44;
       break;
      }
     }
     $ex$0$lcssa = $$lcssa47;
    } else {
     $ex$0$lcssa = 0;
    }
    $54 = (1 - ($ex$0$lcssa))|0;
    $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
    $56 = tempRet0;
    $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
   } else {
    $57 = $1 & 1048575;
    $58 = $57 | 1048576;
    $83 = $0;$84 = $58;$ex$1 = $6;
   }
   $59 = ($9|0)==(0);
   if ($59) {
    $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
    $61 = tempRet0;
    $62 = ($61|0)>(-1);
    $63 = ($60>>>0)>(4294967295);
    $64 = ($61|0)==(-1);
    $65 = $64 & $63;
    $66 = $62 | $65;
    if ($66) {
     $68 = $60;$69 = $61;$ey$020 = 0;
     while(1) {
      $67 = (($ey$020) + -1)|0;
      $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
      $71 = tempRet0;
      $72 = ($71|0)>(-1);
      $73 = ($70>>>0)>(4294967295);
      $74 = ($71|0)==(-1);
      $75 = $74 & $73;
      $76 = $72 | $75;
      if ($76) {
       $68 = $70;$69 = $71;$ey$020 = $67;
      } else {
       $$lcssa46 = $67;
       break;
      }
     }
     $ey$0$lcssa = $$lcssa46;
    } else {
     $ey$0$lcssa = 0;
    }
    $77 = (1 - ($ey$0$lcssa))|0;
    $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
    $79 = tempRet0;
    $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
   } else {
    $80 = $3 & 1048575;
    $81 = $80 | 1048576;
    $85 = $2;$86 = $81;$ey$1$ph = $9;
   }
   $82 = ($ex$1|0)>($ey$1$ph|0);
   $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
   $88 = tempRet0;
   $89 = ($88|0)>(-1);
   $90 = ($87>>>0)>(4294967295);
   $91 = ($88|0)==(-1);
   $92 = $91 & $90;
   $93 = $89 | $92;
   do {
    if ($82) {
     $154 = $93;$155 = $87;$156 = $88;$94 = $83;$96 = $84;$ex$212 = $ex$1;
     while(1) {
      if ($154) {
       $95 = ($94|0)==($85|0);
       $97 = ($96|0)==($86|0);
       $98 = $95 & $97;
       if ($98) {
        break;
       } else {
        $100 = $155;$101 = $156;
       }
      } else {
       $100 = $94;$101 = $96;
      }
      $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
      $103 = tempRet0;
      $104 = (($ex$212) + -1)|0;
      $105 = ($104|0)>($ey$1$ph|0);
      $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
      $107 = tempRet0;
      $108 = ($107|0)>(-1);
      $109 = ($106>>>0)>(4294967295);
      $110 = ($107|0)==(-1);
      $111 = $110 & $109;
      $112 = $108 | $111;
      if ($105) {
       $154 = $112;$155 = $106;$156 = $107;$94 = $102;$96 = $103;$ex$212 = $104;
      } else {
       $$lcssa43 = $104;$$lcssa45 = $112;$157 = $106;$158 = $107;$159 = $102;$160 = $103;
       label = 27;
       break;
      }
     }
     if ((label|0) == 27) {
      $$lcssa7 = $$lcssa45;$113 = $159;$115 = $160;$152 = $157;$153 = $158;$ex$2$lcssa = $$lcssa43;
      break;
     }
     $99 = $x * 0.0;
     $$0 = $99;
     return (+$$0);
    } else {
     $$lcssa7 = $93;$113 = $83;$115 = $84;$152 = $87;$153 = $88;$ex$2$lcssa = $ex$1;
    }
   } while(0);
   if ($$lcssa7) {
    $114 = ($113|0)==($85|0);
    $116 = ($115|0)==($86|0);
    $117 = $114 & $116;
    if ($117) {
     $125 = $x * 0.0;
     $$0 = $125;
     return (+$$0);
    } else {
     $118 = $153;$120 = $152;
    }
   } else {
    $118 = $115;$120 = $113;
   }
   $119 = ($118>>>0)<(1048576);
   $121 = ($120>>>0)<(0);
   $122 = ($118|0)==(1048576);
   $123 = $122 & $121;
   $124 = $119 | $123;
   if ($124) {
    $126 = $120;$127 = $118;$ex$39 = $ex$2$lcssa;
    while(1) {
     $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
     $129 = tempRet0;
     $130 = (($ex$39) + -1)|0;
     $131 = ($129>>>0)<(1048576);
     $132 = ($128>>>0)<(0);
     $133 = ($129|0)==(1048576);
     $134 = $133 & $132;
     $135 = $131 | $134;
     if ($135) {
      $126 = $128;$127 = $129;$ex$39 = $130;
     } else {
      $$lcssa41 = $130;$161 = $128;$162 = $129;
      break;
     }
    }
    $137 = $161;$138 = $162;$ex$3$lcssa = $$lcssa41;
   } else {
    $137 = $120;$138 = $118;$ex$3$lcssa = $ex$2$lcssa;
   }
   $136 = ($ex$3$lcssa|0)>(0);
   if ($136) {
    $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
    $140 = tempRet0;
    $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
    $142 = tempRet0;
    $143 = $139 | $141;
    $144 = $140 | $142;
    $149 = $144;$151 = $143;
   } else {
    $145 = (1 - ($ex$3$lcssa))|0;
    $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
    $147 = tempRet0;
    $149 = $147;$151 = $146;
   }
   $148 = $149 | $10;
   HEAP32[tempDoublePtr>>2] = $151;HEAP32[tempDoublePtr+4>>2] = $148;$150 = +HEAPF64[tempDoublePtr>>3];
   $$0 = $150;
   return (+$$0);
  }
 }
 $23 = $x * $y;
 $24 = $23 / $23;
 $$0 = $24;
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _tanh($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $__x = 0.0, $t$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $2;$3 = +HEAPF64[tempDoublePtr>>3];
 $4 = ($2>>>0)>(1071748074);
 do {
  if ($4) {
   $5 = ($2>>>0)>(1077149696);
   if ($5) {
    $6 = 0.0 / $3;
    $7 = 1.0 - $6;
    $t$0 = $7;
    break;
   } else {
    $8 = $3 * 2.0;
    $9 = (+_expm1($8));
    $10 = $9 + 2.0;
    $11 = 2.0 / $10;
    $12 = 1.0 - $11;
    $t$0 = $12;
    break;
   }
  } else {
   $13 = ($2>>>0)>(1070618798);
   if ($13) {
    $14 = $3 * 2.0;
    $15 = (+_expm1($14));
    $16 = $15 + 2.0;
    $17 = $15 / $16;
    $t$0 = $17;
    break;
   }
   $18 = ($2>>>0)>(1048575);
   if ($18) {
    $19 = $3 * -2.0;
    $20 = (+_expm1($19));
    $21 = -$20;
    $22 = $20 + 2.0;
    $23 = $21 / $22;
    $t$0 = $23;
    break;
   } else {
    $24 = $3;
    $__x = $24;
    $t$0 = $3;
    break;
   }
  }
 } while(0);
 $25 = ($1|0)<(0);
 if (!($25)) {
  $27 = $t$0;
  STACKTOP = sp;return (+$27);
 }
 $26 = -$t$0;
 $27 = $26;
 STACKTOP = sp;return (+$27);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 127]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 127]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa7 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $7 = $$pre;
    break;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 127]($f,$s,$l)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     label = 12;
     break;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     $i$0$lcssa7 = $i$0;
     break;
    } else {
     $i$0 = $19;
    }
   }
   if ((label|0) == 12) {
    $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    break;
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 127]($f,$s,$i$0$lcssa7)|0);
   $26 = ($25>>>0)<($i$0$lcssa7>>>0);
   if ($26) {
    $$0 = $i$0$lcssa7;
    return ($$0|0);
   } else {
    $27 = (($s) + ($i$0$lcssa7)|0);
    $28 = (($l) - ($i$0$lcssa7))|0;
    $$pre6 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa7;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 127]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=629432+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function _atof($s) {
 $s = $s|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtod($s,0));
 return (+$0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$12 = 0, $$lcssa = 0, $$lcssa4 = 0, $$neg1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$lcssa = 0, $n$03 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = (($$0) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa4 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 if ((($6|0) == 45)) {
  $neg$0 = 1;
  label = 5;
 } else if ((($6|0) == 43)) {
  $neg$0 = 0;
  label = 5;
 } else {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa4>>0]|0;
  $$1$ph = $$lcssa4;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $9 = (_isdigit($7)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $n$0$lcssa = 0;
  $20 = ($neg$1$ph|0)!=(0);
  $21 = (0 - ($n$0$lcssa))|0;
  $22 = $20 ? $n$0$lcssa : $21;
  return ($22|0);
 }
 $$12 = $$1$ph;$n$03 = 0;
 while(1) {
  $11 = ($n$03*10)|0;
  $12 = (($$12) + 1|0);
  $13 = HEAP8[$$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $$neg1 = (($11) + 48)|0;
  $15 = (($$neg1) - ($14))|0;
  $16 = HEAP8[$12>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = (_isdigit($17)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $$lcssa = $15;
   break;
  } else {
   $$12 = $12;$n$03 = $15;
  }
 }
 $n$0$lcssa = $$lcssa;
 $20 = ($neg$1$ph|0)!=(0);
 $21 = (0 - ($n$0$lcssa))|0;
 $22 = $20 ? $n$0$lcssa : $21;
 return ($22|0);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i,0);
 $4 = (+___floatscan($f$i,1,1));
 $5 = (($f$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$019$lcssa = 0, $$1$lcssa = 0, $$1$lcssa$ph = 0, $$110 = 0, $$24 = 0, $$3 = 0, $$3$ph = 0, $$lcssa = 0, $$lcssa47 = 0, $$lcssa48 = 0, $$lcssa49 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$020$lcssa = 0, $s$15 = 0, $s$2 = 0, $s$2$ph = 0;
 var $w$0$lcssa = 0, $w$0$lcssa$ph = 0, $w$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $3 & $4;
 do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$019$lcssa = $$019;$s$020$lcssa = $s$020;
     label = 7;
     break;
    }
    $8 = (($s$020) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $12 & $13;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$lcssa47 = $8;$$lcssa48 = $9;$$lcssa49 = $13;
     label = 5;
     break;
    }
   }
   if ((label|0) == 5) {
    $$0$lcssa = $$lcssa48;$$lcssa = $$lcssa49;$s$0$lcssa = $$lcssa47;
    label = 6;
    break;
   }
   else if ((label|0) == 7) {
    $$0$lcssa44 = $$019$lcssa;$s$0$lcssa43 = $s$020$lcssa;
    break;
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
   $35 = ($$3|0)!=(0);
   $36 = $35 ? $s$2 : 0;
   return ($36|0);
  }
 }
 $14 = HEAP8[$s$0$lcssa43>>0]|0;
 $15 = $c&255;
 $16 = ($14<<24>>24)==($15<<24>>24);
 if ($16) {
  $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
  $35 = ($$3|0)!=(0);
  $36 = $35 ? $s$2 : 0;
  return ($36|0);
 }
 $17 = Math_imul($0, 16843009)|0;
 $18 = ($$0$lcssa44>>>0)>(3);
 if ($18) {
  $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
  while(1) {
   $19 = HEAP32[$w$011>>2]|0;
   $20 = $19 ^ $17;
   $21 = (($20) + -16843009)|0;
   $22 = $20 & -2139062144;
   $23 = $22 ^ -2139062144;
   $24 = $23 & $21;
   $25 = ($24|0)==(0);
   if (!($25)) {
    $$1$lcssa$ph = $$110;$w$0$lcssa$ph = $w$011;
    break;
   }
   $26 = (($w$011) + 4|0);
   $27 = (($$110) + -4)|0;
   $28 = ($27>>>0)>(3);
   if ($28) {
    $$110 = $27;$w$011 = $26;
   } else {
    $$1$lcssa$ph = $27;$w$0$lcssa$ph = $26;
    break;
   }
  }
  $$1$lcssa = $$1$lcssa$ph;$w$0$lcssa = $w$0$lcssa$ph;
 } else {
  $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
 }
 $29 = ($$1$lcssa|0)==(0);
 if ($29) {
  $$3 = 0;$s$2 = $w$0$lcssa;
  $35 = ($$3|0)!=(0);
  $36 = $35 ? $s$2 : 0;
  return ($36|0);
 }
 $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
 while(1) {
  $30 = HEAP8[$s$15>>0]|0;
  $31 = ($30<<24>>24)==($15<<24>>24);
  if ($31) {
   $$3$ph = $$24;$s$2$ph = $s$15;
   break;
  }
  $32 = (($s$15) + 1|0);
  $33 = (($$24) + -1)|0;
  $34 = ($33|0)==(0);
  if ($34) {
   $$3$ph = 0;$s$2$ph = $32;
   break;
  } else {
   $$24 = $33;$s$15 = $32;
  }
 }
 $$3 = $$3$ph;$s$2 = $s$2$ph;
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa10 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $11 = 0;
  return ($11|0);
 }
 $$03 = $n;$l$04 = $vl;$r$05 = $vr;
 while(1) {
  $1 = HEAP8[$l$04>>0]|0;
  $2 = HEAP8[$r$05>>0]|0;
  $3 = ($1<<24>>24)==($2<<24>>24);
  if (!($3)) {
   $$lcssa = $1;$$lcssa10 = $2;
   label = 5;
   break;
  }
  $4 = (($$03) + -1)|0;
  $5 = (($l$04) + 1|0);
  $6 = (($r$05) + 1|0);
  $7 = ($4|0)==(0);
  if ($7) {
   label = 6;
   break;
  } else {
   $$03 = $4;$l$04 = $5;$r$05 = $6;
  }
 }
 if ((label|0) == 5) {
  $8 = $$lcssa&255;
  $9 = $$lcssa10&255;
  $10 = (($8) - ($9))|0;
  $11 = $10;
  return ($11|0);
 }
 else if ((label|0) == 6) {
  $11 = 0;
  return ($11|0);
 }
 return (0)|0;
}
function _strcasecmp($_l,$_r) {
 $_l = $_l|0;
 $_r = $_r|0;
 var $$ph = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $l$03$lcssa18 = 0, $r$0$lcssa = 0, $r$0$lcssa$ph = 0, $r$04 = 0, $r$04$lcssa17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$_l>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $19 = 0;$r$0$lcssa = $_r;
  } else {
   $2 = $0&255;
   $5 = $0;$7 = $2;$l$03 = $_l;$r$04 = $_r;
   while(1) {
    $3 = HEAP8[$r$04>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$ph = $5;$r$0$lcssa$ph = $r$04;
     label = 8;
     break;
    }
    $6 = ($5<<24>>24)==($3<<24>>24);
    if (!($6)) {
     $8 = (_tolower($7)|0);
     $9 = HEAP8[$r$04>>0]|0;
     $10 = $9&255;
     $11 = (_tolower($10)|0);
     $12 = ($8|0)==($11|0);
     if (!($12)) {
      $l$03$lcssa18 = $l$03;$r$04$lcssa17 = $r$04;
      label = 7;
      break;
     }
    }
    $13 = (($l$03) + 1|0);
    $14 = (($r$04) + 1|0);
    $15 = HEAP8[$13>>0]|0;
    $16 = $15&255;
    $17 = ($15<<24>>24)==(0);
    if ($17) {
     $$ph = 0;$r$0$lcssa$ph = $14;
     label = 8;
     break;
    } else {
     $5 = $15;$7 = $16;$l$03 = $13;$r$04 = $14;
    }
   }
   if ((label|0) == 7) {
    $$pre = HEAP8[$l$03$lcssa18>>0]|0;
    $19 = $$pre;$r$0$lcssa = $r$04$lcssa17;
    break;
   }
   else if ((label|0) == 8) {
    $19 = $$ph;$r$0$lcssa = $r$0$lcssa$ph;
    break;
   }
  }
 } while(0);
 $18 = $19&255;
 $20 = (_tolower($18)|0);
 $21 = HEAP8[$r$0$lcssa>>0]|0;
 $22 = $21&255;
 $23 = (_tolower($22)|0);
 $24 = (($20) - ($23))|0;
 return ($24|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa10 = 0, $$lcssa2 = 0, $$lcssa9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $2 | $3;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = (($$014) + 1|0);
   $5 = (($$05) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $8 | $9;
   if ($or$cond) {
    $$lcssa10 = $7;$$lcssa9 = $6;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
  $$lcssa = $$lcssa9;$$lcssa2 = $$lcssa10;
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strncasecmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$04 = 0, $$08 = 0, $$08$in = 0, $$ph = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0, $l$06$lcssa22 = 0, $or$cond = 0, $r$0$lcssa = 0, $r$0$lcssa$ph = 0, $r$07 = 0, $r$07$lcssa21 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$04 = 0;
  return ($$04|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $21 = 0;$r$0$lcssa = $_r;
  } else {
   $3 = $1&255;
   $$08$in = $n;$7 = $1;$9 = $3;$l$06 = $_l;$r$07 = $_r;
   while(1) {
    $$08 = (($$08$in) + -1)|0;
    $4 = HEAP8[$r$07>>0]|0;
    $5 = ($4<<24>>24)!=(0);
    $6 = ($$08|0)!=(0);
    $or$cond = $5 & $6;
    if (!($or$cond)) {
     $$ph = $7;$r$0$lcssa$ph = $r$07;
     label = 9;
     break;
    }
    $8 = ($7<<24>>24)==($4<<24>>24);
    if (!($8)) {
     $10 = (_tolower($9)|0);
     $11 = HEAP8[$r$07>>0]|0;
     $12 = $11&255;
     $13 = (_tolower($12)|0);
     $14 = ($10|0)==($13|0);
     if (!($14)) {
      $l$06$lcssa22 = $l$06;$r$07$lcssa21 = $r$07;
      label = 8;
      break;
     }
    }
    $15 = (($l$06) + 1|0);
    $16 = (($r$07) + 1|0);
    $17 = HEAP8[$15>>0]|0;
    $18 = $17&255;
    $19 = ($17<<24>>24)==(0);
    if ($19) {
     $$ph = 0;$r$0$lcssa$ph = $16;
     label = 9;
     break;
    } else {
     $$08$in = $$08;$7 = $17;$9 = $18;$l$06 = $15;$r$07 = $16;
    }
   }
   if ((label|0) == 8) {
    $$pre = HEAP8[$l$06$lcssa22>>0]|0;
    $21 = $$pre;$r$0$lcssa = $r$07$lcssa21;
    break;
   }
   else if ((label|0) == 9) {
    $21 = $$ph;$r$0$lcssa = $r$0$lcssa$ph;
    break;
   }
  }
 } while(0);
 $20 = $21&255;
 $22 = (_tolower($20)|0);
 $23 = HEAP8[$r$0$lcssa>>0]|0;
 $24 = $23&255;
 $25 = (_tolower($24)|0);
 $26 = (($22) - ($25))|0;
 $$04 = $26;
 return ($$04|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$0$lcssa$ph = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $13 = 0;$r$0$lcssa = $_r;
 } else {
  $$08$in = $n;$6 = $1;$l$06 = $_l;$r$07 = $_r;
  while(1) {
   $$08 = (($$08$in) + -1)|0;
   $3 = HEAP8[$r$07>>0]|0;
   $4 = ($3<<24>>24)!=(0);
   $5 = ($$08|0)!=(0);
   $or$cond = $4 & $5;
   $7 = ($6<<24>>24)==($3<<24>>24);
   $or$cond4 = $or$cond & $7;
   if (!($or$cond4)) {
    $$ph = $6;$r$0$lcssa$ph = $r$07;
    break;
   }
   $8 = (($l$06) + 1|0);
   $9 = (($r$07) + 1|0);
   $10 = HEAP8[$8>>0]|0;
   $11 = ($10<<24>>24)==(0);
   if ($11) {
    $$ph = 0;$r$0$lcssa$ph = $9;
    break;
   } else {
    $$08$in = $$08;$6 = $10;$l$06 = $8;$r$07 = $9;
   }
  }
  $13 = $$ph;$r$0$lcssa = $r$0$lcssa$ph;
 }
 $12 = $13&255;
 $14 = HEAP8[$r$0$lcssa>>0]|0;
 $15 = $14&255;
 $16 = (($12) - ($15))|0;
 $$03 = $16;
 return ($$03|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$be = 0, $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $RP$0 = 0, $RP$0$be = 0, $RP$0$lcssa = 0;
 var $RP$0$ph = 0, $cond = 0, $newp$0 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((628032 + 16|0))>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[((628504 + 8|0))>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[((628032 + 24|0))>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[((628032 + 12|0))>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[((628032 + 24|0))>>2] = $36;
  HEAP32[((628032 + 12|0))>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[((628032 + 20|0))>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[((628032 + 8|0))>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((628032 + 8|0))>>2] = $storemerge21;
  HEAP32[((628032 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = ((628032 + ($77<<2)|0) + 40|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = (($74) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[628032>>2]|0;
    $88 = $87 & $86;
    HEAP32[628032>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = (($76) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = (($76) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = (($74) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $113;$RP$0$ph = $112;
      }
     } else {
      $R$0$ph = $110;$RP$0$ph = $109;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $115 = (($R$0) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if ($117) {
       $118 = (($R$0) + 16|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = ($119|0)==(0|0);
       if ($120) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $119;$RP$0$be = $118;
       }
      } else {
       $R$0$be = $116;$RP$0$be = $115;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = (($101) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = (($98) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((628032 + ($124<<2)|0) + 304|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[((628032 + 4|0))>>2]|0;
      $131 = $130 & $129;
      HEAP32[((628032 + 4|0))>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[((628032 + 16|0))>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = (($96) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = (($96) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[((628032 + 16|0))>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = (($R$1) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = (($R$1) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = (($143) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[((628032 + 16|0))>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = (($R$1) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = (($149) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$lcssa64 = 0, $$pre = 0, $$pre$phi57Z2D = 0, $$pre$phi59Z2D = 0, $$pre$phiZ2D = 0, $$pre56 = 0, $$pre58 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0;
 var $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$051 = 0, $R$0 = 0, $R$0$be = 0, $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $R7$0 = 0, $R7$0$be = 0, $R7$0$lcssa = 0, $R7$0$ph = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$be = 0;
 var $RP$0$lcssa = 0, $RP$0$ph = 0, $RP9$0 = 0, $RP9$0$be = 0, $RP9$0$lcssa = 0, $RP9$0$ph = 0, $T$0$lcssa = 0, $T$050 = 0, $T$050$lcssa = 0, $cond = 0, $cond46 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((628032 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((628032 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((628032 + 8|0))>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $105 = (($p) + ($$sum20)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((628032 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[628032>>2]|0;
     $32 = $31 & $30;
     HEAP32[628032>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre58 = (($20) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi59Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi59Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $57;$RP$0$ph = $56;
      }
     } else {
      $R$0$ph = $54;$RP$0$ph = $53;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if ($61) {
       $62 = (($R$0) + 16|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = ($63|0)==(0|0);
       if ($64) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $63;$RP$0$be = $62;
       }
      } else {
       $R$0$be = $60;$RP$0$be = $59;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((628032 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((628032 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((628032 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((628032 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((628032 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = (($R$1) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = (($87) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $92 = (($p) + ($$sum28)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[((628032 + 16|0))>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = (($R$1) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = (($93) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[((628032 + 16|0))>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[((628032 + 24|0))>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[((628032 + 12|0))>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[((628032 + 12|0))>>2] = $115;
   HEAP32[((628032 + 24|0))>>2] = $$0;
   $116 = $115 | 1;
   $117 = (($$0) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[((628032 + 20|0))>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[((628032 + 20|0))>>2] = 0;
   HEAP32[((628032 + 8|0))>>2] = 0;
   return;
  }
  $120 = HEAP32[((628032 + 20|0))>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[((628032 + 8|0))>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[((628032 + 8|0))>>2] = $123;
   HEAP32[((628032 + 20|0))>>2] = $$0;
   $124 = $123 | 1;
   $125 = (($$0) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum18 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum18)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum19)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = ((628032 + ($135<<2)|0) + 40|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = (($132) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[628032>>2]|0;
     $146 = $145 & $144;
     HEAP32[628032>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre56 = (($134) + 8|0);
     $$pre$phi57Z2D = $$pre56;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = (($134) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi57Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = (($132) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi57Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0$ph = $171;$RP9$0$ph = $170;
       }
      } else {
       $R7$0$ph = $168;$RP9$0$ph = $167;
      }
      $R7$0 = $R7$0$ph;$RP9$0 = $RP9$0$ph;
      while(1) {
       $173 = (($R7$0) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $176 = (($R7$0) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
         break;
        } else {
         $R7$0$be = $177;$RP9$0$be = $176;
        }
       } else {
        $R7$0$be = $174;$RP9$0$be = $173;
       }
       $R7$0 = $R7$0$be;$RP9$0 = $RP9$0$be;
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum17)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = (($159) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = (($156) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum14 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum14)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ((628032 + ($182<<2)|0) + 304|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[((628032 + 4|0))>>2]|0;
       $189 = $188 & $187;
       HEAP32[((628032 + 4|0))>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[((628032 + 16|0))>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = (($154) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = (($154) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[((628032 + 16|0))>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = (($R7$1) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum15 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum15)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = (($R7$1) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = (($201) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum16)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[((628032 + 16|0))>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = (($R7$1) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = (($207) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = (($$0) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[((628032 + 20|0))>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[((628032 + 8|0))>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = (($$0) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = ((628032 + ($224<<2)|0) + 40|0);
  $226 = HEAP32[628032>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[628032>>2] = $230;
   $$sum12$pre = (($224) + 2)|0;
   $$pre = ((628032 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $225;
  } else {
   $$sum13 = (($224) + 2)|0;
   $231 = ((628032 + ($$sum13<<2)|0) + 40|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[((628032 + 16|0))>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = (($F16$0) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = (($$0) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = (($$0) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = ((628032 + ($I19$0<<2)|0) + 304|0);
 $264 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$264>>2] = $I19$0$c;
 $265 = (($$0) + 20|0);
 HEAP32[$265>>2] = 0;
 $266 = (($$0) + 16|0);
 HEAP32[$266>>2] = 0;
 $267 = HEAP32[((628032 + 4|0))>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[((628032 + 4|0))>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = (($$0) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = (($$0) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = (($$0) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($I19$0|0)==(31);
 if ($276) {
  $284 = 0;
 } else {
  $277 = $I19$0 >>> 1;
  $278 = (25 - ($277))|0;
  $284 = $278;
 }
 $279 = (($275) + 4|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = $280 & -8;
 $282 = ($281|0)==($$1|0);
 do {
  if ($282) {
   $T$0$lcssa = $275;
  } else {
   $283 = $$1 << $284;
   $K20$051 = $283;$T$050 = $275;
   while(1) {
    $291 = $K20$051 >>> 31;
    $292 = ((($T$050) + ($291<<2)|0) + 16|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$050$lcssa = $T$050;
     break;
    }
    $285 = $K20$051 << 1;
    $286 = (($287) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $$lcssa64 = $287;
     label = 134;
     break;
    } else {
     $K20$051 = $285;$T$050 = $287;
    }
   }
   if ((label|0) == 134) {
    $T$0$lcssa = $$lcssa64;
    break;
   }
   $294 = HEAP32[((628032 + 16|0))>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = (($$0) + 24|0);
   HEAP32[$296>>2] = $T$050$lcssa;
   $297 = (($$0) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = (($$0) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = (($T$0$lcssa) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[((628032 + 16|0))>>2]|0;
 $302 = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = ($300>>>0)>=($301>>>0);
 $or$cond = $302 & $303;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $304 = (($300) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = (($$0) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = (($$0) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = (($$0) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $$lcssa17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$111 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $or$cond5 = 0, $x$012 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 if ((($9|0) == 43) | (($9|0) == 45)) {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $21 & $22;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
 } else {
  $c$0 = $9;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $96 = -2147483648;$97 = 0;
   tempRet0 = $96;
   return ($97|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $96 = -2147483648;$97 = 0;
  tempRet0 = $96;
  return ($97|0);
 }
 $c$111 = $c$0;$x$012 = 0;
 while(1) {
  $33 = ($x$012*10)|0;
  $34 = (($c$111) + -48)|0;
  $35 = (($34) + ($33))|0;
  $36 = HEAP32[$0>>2]|0;
  $37 = HEAP32[$2>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $39 = (($36) + 1|0);
   HEAP32[$0>>2] = $39;
   $40 = HEAP8[$36>>0]|0;
   $41 = $40&255;
   $c$1$be = $41;
  } else {
   $42 = (___shgetc($f)|0);
   $c$1$be = $42;
  }
  $43 = (($c$1$be) + -48)|0;
  $44 = ($43>>>0)<(10);
  $45 = ($35|0)<(214748364);
  $$ = $44 & $45;
  if ($$) {
   $c$111 = $c$1$be;$x$012 = $35;
  } else {
   $$lcssa17 = $35;$c$1$be$lcssa = $c$1$be;
   break;
  }
 }
 $46 = ($$lcssa17|0)<(0);
 $47 = $46 << 31 >> 31;
 $48 = (($c$1$be$lcssa) + -48)|0;
 $49 = ($48>>>0)<(10);
 if ($49) {
  $52 = $$lcssa17;$53 = $47;$c$27 = $c$1$be$lcssa;
  while(1) {
   $54 = (___muldi3(($52|0),($53|0),10,0)|0);
   $55 = tempRet0;
   $56 = ($c$27|0)<(0);
   $57 = $56 << 31 >> 31;
   $58 = (_i64Add(($c$27|0),($57|0),-48,-1)|0);
   $59 = tempRet0;
   $60 = (_i64Add(($58|0),($59|0),($54|0),($55|0))|0);
   $61 = tempRet0;
   $62 = HEAP32[$0>>2]|0;
   $63 = HEAP32[$2>>2]|0;
   $64 = ($62>>>0)<($63>>>0);
   if ($64) {
    $65 = (($62) + 1|0);
    HEAP32[$0>>2] = $65;
    $66 = HEAP8[$62>>0]|0;
    $67 = $66&255;
    $c$2$be = $67;
   } else {
    $68 = (___shgetc($f)|0);
    $c$2$be = $68;
   }
   $69 = (($c$2$be) + -48)|0;
   $70 = ($69>>>0)<(10);
   $71 = ($61|0)<(21474836);
   $72 = ($60>>>0)<(2061584302);
   $73 = ($61|0)==(21474836);
   $74 = $73 & $72;
   $75 = $71 | $74;
   $or$cond5 = $70 & $75;
   if ($or$cond5) {
    $52 = $60;$53 = $61;$c$27 = $c$2$be;
   } else {
    $98 = $60;$99 = $61;$c$2$be$lcssa = $c$2$be;
    break;
   }
  }
  $90 = $98;$91 = $99;$c$2$lcssa = $c$2$be$lcssa;
 } else {
  $90 = $$lcssa17;$91 = $47;$c$2$lcssa = $c$1$be$lcssa;
 }
 $50 = (($c$2$lcssa) + -48)|0;
 $51 = ($50>>>0)<(10);
 if ($51) {
  while(1) {
   $76 = HEAP32[$0>>2]|0;
   $77 = HEAP32[$2>>2]|0;
   $78 = ($76>>>0)<($77>>>0);
   if ($78) {
    $79 = (($76) + 1|0);
    HEAP32[$0>>2] = $79;
    $80 = HEAP8[$76>>0]|0;
    $81 = $80&255;
    $c$3$be = $81;
   } else {
    $82 = (___shgetc($f)|0);
    $c$3$be = $82;
   }
   $83 = (($c$3$be) + -48)|0;
   $84 = ($83>>>0)<(10);
   if (!($84)) {
    break;
   }
  }
 }
 $85 = HEAP32[$2>>2]|0;
 $86 = ($85|0)==(0|0);
 if (!($86)) {
  $87 = HEAP32[$0>>2]|0;
  $88 = (($87) + -1|0);
  HEAP32[$0>>2] = $88;
 }
 $89 = ($neg$0|0)!=(0);
 $92 = (_i64Subtract(0,0,($90|0),($91|0))|0);
 $93 = tempRet0;
 $94 = $89 ? $92 : $90;
 $95 = $89 ? $93 : $91;
 $96 = $95;$97 = $94;
 tempRet0 = $96;
 return ($97|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i105$i = 0, $$0$lcssa$i112$i = 0, $$0$lcssa$i136$i = 0, $$0$lcssa$i151$i = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i47$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i54 = 0, $$0$lcssa$i54$i = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i62 = 0, $$0$lcssa$i64$i = 0, $$0$lcssa$i69 = 0;
 var $$0$lcssa$i71$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i77$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i86 = 0, $$0$lcssa$i92$i = 0, $$0$ph = 0, $$0$ph287 = 0, $$01$i = 0, $$01$i$i = 0, $$01$i103$i = 0, $$01$i110$i = 0, $$01$i134$i = 0, $$01$i149$i = 0, $$01$i45 = 0, $$01$i45$i = 0, $$01$i52$i = 0, $$01$i60 = 0, $$01$i62$i = 0, $$01$i67 = 0;
 var $$01$i69$i = 0, $$01$i74 = 0, $$01$i75$i = 0, $$01$i82$i = 0, $$01$i84 = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i93$i = 0, $$012$i = 0, $$013$i = 0.0, $$019$i = 0, $$03$i49 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i87$i = 0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i120$i = 0, $$100 = 0, $$12$i = 0;
 var $$12$i$i = 0, $$12$i118$i = 0, $$12$i127$i = 0, $$12$i142$i = 0, $$12$i142$i$lcssa = 0, $$12$i95$i = 0, $$120$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$21 = 0, $$216$$29$i = 0, $$216$$31$i = 0, $$216$i = 0, $$25 = 0, $$26 = 0, $$26$i = 0, $$26$us$i = 0, $$27$i = 0, $$28$i = 0.0;
 var $$29$i = 0, $$3$i = 0.0, $$31$i = 0, $$317$i = 0, $$39$i = 0, $$4$i = 0.0, $$418$lcssa$i = 0, $$418193$i = 0, $$5205$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us309$i = 0, $$a$3$us310$i = 0, $$a$3$us310$i$lcssa = 0, $$a$3311$i = 0, $$a$3312$i = 0, $$a$3312$i$lcssa = 0, $$be = 0, $$be288 = 0, $$fl$4 = 0;
 var $$l10n$0 = 0, $$lcssa = 0, $$lcssa283$i = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$lcssa293 = 0, $$lcssa297 = 0, $$lcssa298 = 0, $$lcssa299 = 0, $$lcssa300 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $$lcssa303 = 0, $$lcssa304 = 0, $$lcssa305 = 0, $$lcssa306 = 0, $$lcssa307 = 0, $$lcssa308 = 0, $$lcssa309 = 0, $$lcssa310 = 0;
 var $$lcssa311 = 0, $$lcssa313 = 0, $$lcssa314 = 0, $$lcssa315 = 0, $$lcssa316 = 0, $$lcssa317 = 0, $$lcssa318 = 0, $$lcssa319 = 0, $$lcssa320 = 0, $$lcssa321 = 0, $$lcssa322 = 0, $$lcssa323 = 0, $$lcssa324 = 0.0, $$lcssa325 = 0, $$lcssa327 = 0, $$lcssa328 = 0, $$lcssa330 = 0, $$lcssa331 = 0, $$lcssa332 = 0, $$mask$i = 0;
 var $$mask$i39 = 0, $$mask1$i = 0, $$mask1$i38 = 0, $$neg159$i = 0, $$neg160$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$ph = 0, $$pn$i = 0, $$pr$i = 0, $$pr154$i = 0, $$pre = 0, $$pre$i = 0, $$pre269 = 0, $$pre270 = 0, $$pre308$i = 0, $$sum$i = 0, $$sum21$i = 0, $$sum22$i = 0;
 var $$z$3$i = 0, $$z$4$us$i = 0, $$z$4$us$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0;
 var $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0;
 var $1030 = 0.0, $1031 = 0.0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0;
 var $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $124$phi = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0.0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0;
 var $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0.0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0.0, $562 = 0.0;
 var $563 = 0.0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $579$phi = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0.0, $701 = 0.0, $702 = 0, $703 = 0.0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $879$phi = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0;
 var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0;
 var $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0;
 var $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0;
 var $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0;
 var $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0;
 var $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0;
 var $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1261$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$2$ph$i$lcssa = 0, $a$3$lcssa$i = 0, $a$3248$i = 0, $a$3248$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$6$i$lcssa = 0;
 var $a$7$i = 0, $a$8$ph$i = 0, $a$8$ph294$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0;
 var $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0;
 var $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0254$i = 0, $carry3$0242$i = 0, $carry3$0242$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0253$i = 0, $d$0255$i = 0;
 var $d$1241$i = 0, $d$1241$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4199$i = 0, $d$5192$i = 0, $d$6204$i = 0, $e$0237$i = 0, $e$1$i = 0, $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1209$i = 0, $estr$2$i = 0;
 var $exitcond$i = 0, $fl$0115 = 0, $fl$0115$ph = 0, $fl$0175 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt88$lcssa = 0, $fmt88$lcssa$ph = 0, $fmt88167 = 0, $fmt89 = 0, $fmt89$lcssa = 0, $fmt89$lcssa290 = 0, $fmt90 = 0, $fmt90$be = 0, $fmt91 = 0, $fmt93 = 0, $fmt93$lcssa294 = 0;
 var $fmt94 = 0, $i$0$lcssa = 0, $i$0$lcssa275 = 0, $i$0180 = 0, $i$0236$i = 0, $i$03$i = 0, $i$03$i31 = 0, $i$1$lcssa$i = 0, $i$1191 = 0, $i$1230$i = 0, $i$2166 = 0, $i$2166$lcssa = 0, $i$2217$i = 0, $i$3164 = 0, $i$3213$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i33 = 0, $isdigit10 = 0, $isdigit12 = 0;
 var $isdigit2$i = 0, $isdigit2$i29 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i32 = 0, $isdigittmp1$i = 0, $isdigittmp1$i28 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i30 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1214$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$be = 0, $l$0$i = 0;
 var $l$1$i = 0, $l$1179 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$be = 0, $l10n$0$lcssa = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i101$i = 0, $or$cond$i108$i = 0, $or$cond$i43$i = 0, $or$cond$i50$i = 0, $or$cond$i58 = 0;
 var $or$cond$i60$i = 0, $or$cond$i65 = 0, $or$cond$i67$i = 0, $or$cond$i72 = 0, $or$cond$i80 = 0, $or$cond$i80$i = 0, $or$cond$i82 = 0, $or$cond10$i = 0, $or$cond10191$i = 0, $or$cond12$i = 0, $or$cond15 = 0, $or$cond19 = 0, $or$cond23 = 0, $or$cond279 = 0, $or$cond35$i = 0, $or$cond37$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0;
 var $p$2$ = 0, $p$4274 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1187$i = 0, $round$0186$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0;
 var $s$0$us$i = 0, $s$0$us$us$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$i$lcssa = 0, $s$1$us$us$i = 0, $s$1$us$us$i$lcssa = 0, $s1$0$i = 0, $s7$0196$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0188$i = 0, $s8$0188$i$ph = 0, $s9$0$i = 0, $s9$1200$i = 0, $s9$2$i = 0, $sext = 0, $sext101 = 0;
 var $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa295 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8113 = 0, $storemerge8113$ph = 0, $storemerge8174 = 0, $t$0 = 0, $t$1 = 0, $uglygep$i = 0, $uglygep296$i = 0, $uglygep300$i = 0, $uglygep300301$i = 0, $umax$i = 0, $umax297$i = 0, $umax297298299$i = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$25$i = 0, $w$38$i = 0, $wc = 0, $ws$0181 = 0, $ws$1192 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i117$i = 0, $y$03$i126$i = 0, $y$03$i141$i = 0, $y$03$i94$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0$lcssa$ph = 0, $z$0168 = 0, $z$1$lcssa$i = 0, $z$1260$i = 0, $z$2 = 0;
 var $z$2$i = 0, $z$2$i$lcssa = 0, $z$2$i$lcssa$lcssa = 0, $z$3$lcssa$i = 0, $z$3247$i = 0, $z$3247$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$5$i$lcssa = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp;
 $buf$i = sp + 832|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 816|0;
 $pad$i = sp + 520|0;
 $buf = sp + 776|0;
 $wc = sp + 8|0;
 $mb = sp + 828|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = $wc;
 $7 = (($ebuf0$i) + 12|0);
 $8 = (($ebuf0$i) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = (($big$i) + 288|0);
 $14 = (($buf$i) + 9|0);
 $15 = $14;
 $16 = (($buf$i) + 8|0);
 $1039 = 0;$1040 = 0;$cnt$0 = 0;$fmt90 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$fmt90>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 426;
   break;
  }
  $1041 = $22;$fmt89 = $fmt90;
  while(1) {
   if ((($1041<<24>>24) == 37)) {
    $fmt89$lcssa = $fmt89;
    label = 9;
    break;
   } else if ((($1041<<24>>24) == 0)) {
    $fmt89$lcssa290 = $fmt89;
    label = 14;
    break;
   }
   $24 = (($fmt89) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1041 = $$pre;$fmt89 = $24;
  }
  if ((label|0) == 9) {
   label = 0;
   $fmt88167 = $fmt89$lcssa;$z$0168 = $fmt89$lcssa;
   while(1) {
    $25 = (($fmt88167) + 1|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = ($26<<24>>24)==(37);
    if (!($27)) {
     $fmt88$lcssa$ph = $fmt88167;$z$0$lcssa$ph = $z$0168;
     break;
    }
    $28 = (($z$0168) + 1|0);
    $29 = (($fmt88167) + 2|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = ($30<<24>>24)==(37);
    if ($31) {
     $fmt88167 = $29;$z$0168 = $28;
    } else {
     $fmt88$lcssa$ph = $29;$z$0$lcssa$ph = $28;
     break;
    }
   }
   $fmt88$lcssa = $fmt88$lcssa$ph;$z$0$lcssa = $z$0$lcssa$ph;
  }
  else if ((label|0) == 14) {
   label = 0;
   $fmt88$lcssa = $fmt89$lcssa290;$z$0$lcssa = $fmt89$lcssa290;
  }
  $32 = $z$0$lcssa;
  $33 = $fmt90;
  $34 = (($32) - ($33))|0;
  if ($1) {
   (___fwritex($fmt90,$34,$f)|0);
  }
  $35 = ($z$0$lcssa|0)==($fmt90|0);
  L24: do {
   if ($35) {
    $36 = (($fmt88$lcssa) + 1|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37 << 24 >> 24;
    $isdigittmp = (($38) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if ($isdigit) {
     $39 = (($fmt88$lcssa) + 2|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)==(36);
     $42 = (($fmt88$lcssa) + 3|0);
     $$100 = $41 ? $42 : $36;
     $$l10n$0 = $41 ? 1 : $l10n$0;
     $isdigittmp$ = $41 ? $isdigittmp : -1;
     $$pre269 = HEAP8[$$100>>0]|0;
     $44 = $$pre269;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$100;
    } else {
     $44 = $37;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $36;
    }
    $43 = $44 << 24 >> 24;
    $45 = $43 & -32;
    $46 = ($45|0)==(32);
    if ($46) {
     $48 = $43;$53 = $44;$fl$0175 = 0;$storemerge8174 = $storemerge;
     while(1) {
      $47 = (($48) + -32)|0;
      $49 = 1 << $47;
      $50 = $49 & 75913;
      $51 = ($50|0)==(0);
      if ($51) {
       $$ph = $53;$fl$0115$ph = $fl$0175;$storemerge8113$ph = $storemerge8174;
       break;
      }
      $52 = $53 << 24 >> 24;
      $54 = (($52) + -32)|0;
      $55 = 1 << $54;
      $56 = $55 | $fl$0175;
      $57 = (($storemerge8174) + 1|0);
      $58 = HEAP8[$57>>0]|0;
      $59 = $58 << 24 >> 24;
      $60 = $59 & -32;
      $61 = ($60|0)==(32);
      if ($61) {
       $48 = $59;$53 = $58;$fl$0175 = $56;$storemerge8174 = $57;
      } else {
       $$ph = $58;$fl$0115$ph = $56;$storemerge8113$ph = $57;
       break;
      }
     }
     $62 = $$ph;$fl$0115 = $fl$0115$ph;$storemerge8113 = $storemerge8113$ph;
    } else {
     $62 = $44;$fl$0115 = 0;$storemerge8113 = $storemerge;
    }
    $63 = ($62<<24>>24)==(42);
    do {
     if ($63) {
      $64 = (($storemerge8113) + 1|0);
      $65 = HEAP8[$64>>0]|0;
      $66 = $65 << 24 >> 24;
      $isdigittmp11 = (($66) + -48)|0;
      $isdigit12 = ($isdigittmp11>>>0)<(10);
      if ($isdigit12) {
       $67 = (($storemerge8113) + 2|0);
       $68 = HEAP8[$67>>0]|0;
       $69 = ($68<<24>>24)==(36);
       if ($69) {
        $70 = (($nl_type) + ($isdigittmp11<<2)|0);
        HEAP32[$70>>2] = 10;
        $71 = HEAP8[$64>>0]|0;
        $72 = $71 << 24 >> 24;
        $73 = (($72) + -48)|0;
        $74 = (($nl_arg) + ($73<<3)|0);
        $75 = $74;
        $76 = $75;
        $77 = HEAP32[$76>>2]|0;
        $78 = (($75) + 4)|0;
        $79 = $78;
        $80 = HEAP32[$79>>2]|0;
        $81 = (($storemerge8113) + 3|0);
        $l10n$2 = 1;$storemerge13 = $81;$w$0 = $77;
       } else {
        label = 29;
       }
      } else {
       label = 29;
      }
      if ((label|0) == 29) {
       label = 0;
       $82 = ($l10n$1|0)==(0);
       if (!($82)) {
        $$0$ph287 = -1;
        label = 449;
        break L1;
       }
       if (!($1)) {
        $fl$1 = $fl$0115;$fmt91 = $64;$l10n$3 = 0;$w$1 = 0;
        break;
       }
       $arglist_current = HEAP32[$ap>>2]|0;
       $83 = HEAP32[$arglist_current>>2]|0;
       $arglist_next = (($arglist_current) + 4|0);
       HEAP32[$ap>>2] = $arglist_next;
       $l10n$2 = 0;$storemerge13 = $64;$w$0 = $83;
      }
      $84 = ($w$0|0)<(0);
      if ($84) {
       $85 = $fl$0115 | 8192;
       $86 = (0 - ($w$0))|0;
       $fl$1 = $85;$fmt91 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $86;
      } else {
       $fl$1 = $fl$0115;$fmt91 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
      }
     } else {
      $87 = $62 << 24 >> 24;
      $isdigittmp1$i = (($87) + -48)|0;
      $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
      if ($isdigit2$i) {
       $91 = $storemerge8113;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
       while(1) {
        $88 = ($i$03$i*10)|0;
        $89 = (($88) + ($isdigittmp4$i))|0;
        $90 = (($91) + 1|0);
        $92 = HEAP8[$90>>0]|0;
        $93 = $92 << 24 >> 24;
        $isdigittmp$i = (($93) + -48)|0;
        $isdigit$i = ($isdigittmp$i>>>0)<(10);
        if ($isdigit$i) {
         $91 = $90;$i$03$i = $89;$isdigittmp4$i = $isdigittmp$i;
        } else {
         $$lcssa = $89;$$lcssa291 = $90;
         break;
        }
       }
       $94 = ($$lcssa|0)<(0);
       if ($94) {
        $$0$ph287 = -1;
        label = 449;
        break L1;
       } else {
        $fl$1 = $fl$0115;$fmt91 = $$lcssa291;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
       }
      } else {
       $fl$1 = $fl$0115;$fmt91 = $storemerge8113;$l10n$3 = $l10n$1;$w$1 = 0;
      }
     }
    } while(0);
    $95 = HEAP8[$fmt91>>0]|0;
    $96 = ($95<<24>>24)==(46);
    do {
     if ($96) {
      $97 = (($fmt91) + 1|0);
      $98 = HEAP8[$97>>0]|0;
      $99 = ($98<<24>>24)==(42);
      if (!($99)) {
       $120 = $98 << 24 >> 24;
       $isdigittmp1$i28 = (($120) + -48)|0;
       $isdigit2$i29 = ($isdigittmp1$i28>>>0)<(10);
       if (!($isdigit2$i29)) {
        $fmt94 = $97;$p$0 = 0;
        break;
       }
       $1042 = $97;$124 = $fmt91;$i$03$i31 = 0;$isdigittmp4$i30 = $isdigittmp1$i28;
       while(1) {
        $121 = ($i$03$i31*10)|0;
        $122 = (($121) + ($isdigittmp4$i30))|0;
        $123 = (($124) + 2|0);
        $125 = HEAP8[$123>>0]|0;
        $126 = $125 << 24 >> 24;
        $isdigittmp$i32 = (($126) + -48)|0;
        $isdigit$i33 = ($isdigittmp$i32>>>0)<(10);
        if ($isdigit$i33) {
         $124$phi = $1042;$1042 = $123;$i$03$i31 = $122;$isdigittmp4$i30 = $isdigittmp$i32;$124 = $124$phi;
        } else {
         $$lcssa292 = $122;$$lcssa293 = $123;
         break;
        }
       }
       $fmt94 = $$lcssa293;$p$0 = $$lcssa292;
       break;
      }
      $100 = (($fmt91) + 2|0);
      $101 = HEAP8[$100>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp9 = (($102) + -48)|0;
      $isdigit10 = ($isdigittmp9>>>0)<(10);
      if ($isdigit10) {
       $103 = (($fmt91) + 3|0);
       $104 = HEAP8[$103>>0]|0;
       $105 = ($104<<24>>24)==(36);
       if ($105) {
        $106 = (($nl_type) + ($isdigittmp9<<2)|0);
        HEAP32[$106>>2] = 10;
        $107 = HEAP8[$100>>0]|0;
        $108 = $107 << 24 >> 24;
        $109 = (($108) + -48)|0;
        $110 = (($nl_arg) + ($109<<3)|0);
        $111 = $110;
        $112 = $111;
        $113 = HEAP32[$112>>2]|0;
        $114 = (($111) + 4)|0;
        $115 = $114;
        $116 = HEAP32[$115>>2]|0;
        $117 = (($fmt91) + 4|0);
        $fmt94 = $117;$p$0 = $113;
        break;
       }
      }
      $118 = ($l10n$3|0)==(0);
      if (!($118)) {
       $$0$ph287 = -1;
       label = 449;
       break L1;
      }
      if ($1) {
       $arglist_current2 = HEAP32[$ap>>2]|0;
       $119 = HEAP32[$arglist_current2>>2]|0;
       $arglist_next3 = (($arglist_current2) + 4|0);
       HEAP32[$ap>>2] = $arglist_next3;
       $fmt94 = $100;$p$0 = $119;
      } else {
       $fmt94 = $100;$p$0 = 0;
      }
     } else {
      $fmt94 = $fmt91;$p$0 = -1;
     }
    } while(0);
    $fmt93 = $fmt94;$st$0 = 0;
    while(1) {
     $127 = HEAP8[$fmt93>>0]|0;
     $128 = $127 << 24 >> 24;
     $129 = (($128) + -65)|0;
     $130 = ($129>>>0)>(57);
     if ($130) {
      label = 448;
      break L1;
     }
     $131 = (($fmt93) + 1|0);
     $132 = ((628864 + (($st$0*58)|0)|0) + ($129)|0);
     $133 = HEAP8[$132>>0]|0;
     $134 = $133&255;
     $135 = (($134) + -1)|0;
     $136 = ($135>>>0)<(8);
     if ($136) {
      $fmt93 = $131;$st$0 = $134;
     } else {
      $$lcssa297 = $127;$$lcssa298 = $131;$$lcssa299 = $133;$$lcssa300 = $134;$fmt93$lcssa294 = $fmt93;$st$0$lcssa295 = $st$0;
      break;
     }
    }
    $137 = ($$lcssa299<<24>>24)==(0);
    if ($137) {
     $$0$ph287 = -1;
     label = 449;
     break L1;
    }
    $138 = ($$lcssa299<<24>>24)==(19);
    $139 = ($argpos$0|0)>(-1);
    L74: do {
     if ($138) {
      if ($139) {
       $$0$ph287 = -1;
       label = 449;
       break L1;
      } else {
       $1043 = $1039;$1044 = $1040;
       label = 71;
      }
     } else {
      if ($139) {
       $140 = (($nl_type) + ($argpos$0<<2)|0);
       HEAP32[$140>>2] = $$lcssa300;
       $141 = (($nl_arg) + ($argpos$0<<3)|0);
       $142 = $141;
       $143 = $142;
       $144 = HEAP32[$143>>2]|0;
       $145 = (($142) + 4)|0;
       $146 = $145;
       $147 = HEAP32[$146>>2]|0;
       $1043 = $144;$1044 = $147;
       label = 71;
       break;
      }
      if (!($1)) {
       $$0$ph287 = 0;
       label = 449;
       break L1;
      }
      $148 = ($$lcssa299&255)>(20);
      if ($148) {
       $182 = $$lcssa297;$190 = $1039;$217 = $1040;
      } else {
       do {
        switch ($$lcssa300|0) {
        case 14:  {
         $arglist_current20 = HEAP32[$ap>>2]|0;
         $167 = HEAP32[$arglist_current20>>2]|0;
         $arglist_next21 = (($arglist_current20) + 4|0);
         HEAP32[$ap>>2] = $arglist_next21;
         $$mask1$i38 = $167 & 65535;
         $1045 = 0;$1046 = $$mask1$i38;
         label = 72;
         break L74;
         break;
        }
        case 15:  {
         $arglist_current23 = HEAP32[$ap>>2]|0;
         $168 = HEAP32[$arglist_current23>>2]|0;
         $arglist_next24 = (($arglist_current23) + 4|0);
         HEAP32[$ap>>2] = $arglist_next24;
         $169 = $168&255;
         $170 = $169 << 24 >> 24;
         $171 = ($170|0)<(0);
         $172 = $171 << 31 >> 31;
         $sext = $168 << 24;
         $173 = $sext >> 24;
         $1045 = $172;$1046 = $173;
         label = 72;
         break L74;
         break;
        }
        case 11:  {
         $arglist_current11 = HEAP32[$ap>>2]|0;
         $154 = HEAP32[$arglist_current11>>2]|0;
         $arglist_next12 = (($arglist_current11) + 4|0);
         HEAP32[$ap>>2] = $arglist_next12;
         $1045 = 0;$1046 = $154;
         label = 72;
         break L74;
         break;
        }
        case 12:  {
         $arglist_current14 = HEAP32[$ap>>2]|0;
         $155 = $arglist_current14;
         $156 = $155;
         $157 = HEAP32[$156>>2]|0;
         $158 = (($155) + 4)|0;
         $159 = $158;
         $160 = HEAP32[$159>>2]|0;
         $arglist_next15 = (($arglist_current14) + 8|0);
         HEAP32[$ap>>2] = $arglist_next15;
         $1045 = $160;$1046 = $157;
         label = 72;
         break L74;
         break;
        }
        case 16:  {
         $arglist_current26 = HEAP32[$ap>>2]|0;
         $174 = HEAP32[$arglist_current26>>2]|0;
         $arglist_next27 = (($arglist_current26) + 4|0);
         HEAP32[$ap>>2] = $arglist_next27;
         $$mask$i39 = $174 & 255;
         $1045 = 0;$1046 = $$mask$i39;
         label = 72;
         break L74;
         break;
        }
        case 18:  {
         $arglist_current32 = HEAP32[$ap>>2]|0;
         HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$178 = +HEAPF64[tempDoublePtr>>3];
         $arglist_next33 = (($arglist_current32) + 8|0);
         HEAP32[$ap>>2] = $arglist_next33;
         HEAPF64[tempDoublePtr>>3] = $178;$179 = HEAP32[tempDoublePtr>>2]|0;
         $180 = HEAP32[tempDoublePtr+4>>2]|0;
         $1043 = $179;$1044 = $180;
         label = 71;
         break L74;
         break;
        }
        case 10:  {
         $arglist_current8 = HEAP32[$ap>>2]|0;
         $151 = HEAP32[$arglist_current8>>2]|0;
         $arglist_next9 = (($arglist_current8) + 4|0);
         HEAP32[$ap>>2] = $arglist_next9;
         $152 = ($151|0)<(0);
         $153 = $152 << 31 >> 31;
         $1045 = $153;$1046 = $151;
         label = 72;
         break L74;
         break;
        }
        case 13:  {
         $arglist_current17 = HEAP32[$ap>>2]|0;
         $161 = HEAP32[$arglist_current17>>2]|0;
         $arglist_next18 = (($arglist_current17) + 4|0);
         HEAP32[$ap>>2] = $arglist_next18;
         $162 = $161&65535;
         $163 = $162 << 16 >> 16;
         $164 = ($163|0)<(0);
         $165 = $164 << 31 >> 31;
         $sext101 = $161 << 16;
         $166 = $sext101 >> 16;
         $1045 = $165;$1046 = $166;
         label = 72;
         break L74;
         break;
        }
        case 9:  {
         $arglist_current5 = HEAP32[$ap>>2]|0;
         $149 = HEAP32[$arglist_current5>>2]|0;
         $arglist_next6 = (($arglist_current5) + 4|0);
         HEAP32[$ap>>2] = $arglist_next6;
         $150 = $149;
         $1045 = $1040;$1046 = $150;
         label = 72;
         break L74;
         break;
        }
        case 17:  {
         $arglist_current29 = HEAP32[$ap>>2]|0;
         HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$175 = +HEAPF64[tempDoublePtr>>3];
         $arglist_next30 = (($arglist_current29) + 8|0);
         HEAP32[$ap>>2] = $arglist_next30;
         HEAPF64[tempDoublePtr>>3] = $175;$176 = HEAP32[tempDoublePtr>>2]|0;
         $177 = HEAP32[tempDoublePtr+4>>2]|0;
         $1045 = $177;$1046 = $176;
         label = 72;
         break L74;
         break;
        }
        default: {
         $1045 = $1040;$1046 = $1039;
         label = 72;
         break L74;
        }
        }
       } while(0);
      }
     }
    } while(0);
    if ((label|0) == 71) {
     label = 0;
     if ($1) {
      $1045 = $1044;$1046 = $1043;
      label = 72;
     } else {
      $$be = $1043;$$be288 = $1044;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
      break;
     }
    }
    if ((label|0) == 72) {
     label = 0;
     $$pre270 = HEAP8[$fmt93$lcssa294>>0]|0;
     $182 = $$pre270;$190 = $1046;$217 = $1045;
    }
    $181 = $182 << 24 >> 24;
    $183 = ($st$0$lcssa295|0)!=(0);
    $184 = $181 & 15;
    $185 = ($184|0)==(3);
    $or$cond15 = $183 & $185;
    $186 = $181 & -33;
    $t$0 = $or$cond15 ? $186 : $181;
    $187 = $fl$1 & 8192;
    $188 = ($187|0)==(0);
    $189 = $fl$1 & -65537;
    $fl$1$ = $188 ? $fl$1 : $189;
    L98: do {
     switch ($t$0|0) {
     case 112:  {
      $212 = ($p$0>>>0)>(8);
      $213 = $212 ? $p$0 : 8;
      $214 = $fl$1$ | 8;
      $fl$3 = $214;$p$1 = $213;$t$1 = 120;
      label = 83;
      break;
     }
     case 88: case 120:  {
      $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
      label = 83;
      break;
     }
     case 110:  {
      switch ($st$0$lcssa295|0) {
      case 3:  {
       $200 = $cnt$1&65535;
       $201 = $190;
       HEAP16[$201>>1] = $200;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 2:  {
       $193 = ($cnt$1|0)<(0);
       $194 = $193 << 31 >> 31;
       $195 = $190;
       $196 = $195;
       $197 = $196;
       HEAP32[$197>>2] = $cnt$1;
       $198 = (($196) + 4)|0;
       $199 = $198;
       HEAP32[$199>>2] = $194;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 1:  {
       $192 = $190;
       HEAP32[$192>>2] = $cnt$1;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 4:  {
       $202 = $cnt$1&255;
       $203 = $190;
       HEAP8[$203>>0] = $202;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 7:  {
       $205 = ($cnt$1|0)<(0);
       $206 = $205 << 31 >> 31;
       $207 = $190;
       $208 = $207;
       $209 = $208;
       HEAP32[$209>>2] = $cnt$1;
       $210 = (($208) + 4)|0;
       $211 = $210;
       HEAP32[$211>>2] = $206;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 6:  {
       $204 = $190;
       HEAP32[$204>>2] = $cnt$1;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 0:  {
       $191 = $190;
       HEAP32[$191>>2] = $cnt$1;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      default: {
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
      }
      }
      break;
     }
     case 111:  {
      $238 = ($190|0)==(0);
      $239 = ($217|0)==(0);
      $240 = $238 & $239;
      if ($240) {
       $$0$lcssa$i52 = $2;
      } else {
       $$03$i49 = $2;$242 = $190;$246 = $217;
       while(1) {
        $241 = $242 & 7;
        $243 = $241 | 48;
        $244 = $243&255;
        $245 = (($$03$i49) + -1|0);
        HEAP8[$245>>0] = $244;
        $247 = (_bitshift64Lshr(($242|0),($246|0),3)|0);
        $248 = tempRet0;
        $249 = ($247|0)==(0);
        $250 = ($248|0)==(0);
        $251 = $249 & $250;
        if ($251) {
         $$lcssa331 = $245;
         break;
        } else {
         $$03$i49 = $245;$242 = $247;$246 = $248;
        }
       }
       $$0$lcssa$i52 = $$lcssa331;
      }
      $252 = $fl$1$ & 8;
      $253 = ($252|0)==(0);
      $or$cond19 = $253 | $240;
      $$25 = $or$cond19 ? 629328 : ((629328 + 5|0));
      $254 = $or$cond19&1;
      $$26 = $254 ^ 1;
      $292 = $190;$294 = $217;$a$0 = $$0$lcssa$i52;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$26;$prefix$1 = $$25;
      label = 105;
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      HEAP32[tempDoublePtr>>2] = $190;HEAP32[tempDoublePtr+4>>2] = $217;$355 = +HEAPF64[tempDoublePtr>>3];
      HEAP32[$e2$i>>2] = 0;
      $356 = ($217|0)<(0);
      if ($356) {
       $357 = -$355;
       $$013$i = $357;$pl$0$i = 1;$prefix$0$i = 629352;
      } else {
       $358 = $fl$1$ & 2048;
       $359 = ($358|0)==(0);
       if ($359) {
        $360 = $fl$1$ & 1;
        $361 = ($360|0)==(0);
        $$$i = $361 ? ((629352 + 1|0)) : ((629352 + 6|0));
        $$013$i = $355;$pl$0$i = $360;$prefix$0$i = $$$i;
       } else {
        $$013$i = $355;$pl$0$i = 1;$prefix$0$i = ((629352 + 3|0));
       }
      }
      HEAPF64[tempDoublePtr>>3] = $$013$i;$362 = HEAP32[tempDoublePtr>>2]|0;
      $363 = HEAP32[tempDoublePtr+4>>2]|0;
      $364 = $363 & 2146435072;
      $365 = ($364>>>0)<(2146435072);
      $366 = (0)<(0);
      $367 = ($364|0)==(2146435072);
      $368 = $367 & $366;
      $369 = $365 | $368;
      if (!($369)) {
       $370 = $t$0 & 32;
       $371 = ($370|0)!=(0);
       $372 = $371 ? 629376 : 629384;
       $373 = ($$013$i != $$013$i) | (0.0 != 0.0);
       if ($373) {
        $374 = $371 ? 629392 : 629400;
        $pl$1$i = 0;$s1$0$i = $374;
       } else {
        $pl$1$i = $pl$0$i;$s1$0$i = $372;
       }
       $375 = (($pl$1$i) + 3)|0;
       $376 = $fl$1$ & 8192;
       $377 = ($376|0)==(0);
       $378 = ($w$1|0)>($375|0);
       $or$cond$i43$i = $377 & $378;
       if ($or$cond$i43$i) {
        $379 = (($w$1) - ($375))|0;
        $380 = ($379>>>0)>(256);
        $381 = $380 ? 256 : $379;
        _memset(($pad$i|0),32,($381|0))|0;
        $382 = ($379>>>0)>(255);
        if ($382) {
         $$01$i45$i = $379;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $383 = (($$01$i45$i) + -256)|0;
          $384 = ($383>>>0)>(255);
          if ($384) {
           $$01$i45$i = $383;
          } else {
           break;
          }
         }
         $385 = $379 & 255;
         $$0$lcssa$i47$i = $385;
        } else {
         $$0$lcssa$i47$i = $379;
        }
        (___fwritex($pad$i,$$0$lcssa$i47$i,$f)|0);
       }
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       (___fwritex($s1$0$i,3,$f)|0);
       $386 = $fl$1$ & 73728;
       $387 = ($386|0)==(8192);
       $or$cond$i50$i = $387 & $378;
       if ($or$cond$i50$i) {
        $388 = (($w$1) - ($375))|0;
        $389 = ($388>>>0)>(256);
        $390 = $389 ? 256 : $388;
        _memset(($pad$i|0),32,($390|0))|0;
        $391 = ($388>>>0)>(255);
        if ($391) {
         $$01$i52$i = $388;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $392 = (($$01$i52$i) + -256)|0;
          $393 = ($392>>>0)>(255);
          if ($393) {
           $$01$i52$i = $392;
          } else {
           break;
          }
         }
         $394 = $388 & 255;
         $$0$lcssa$i54$i = $394;
        } else {
         $$0$lcssa$i54$i = $388;
        }
        (___fwritex($pad$i,$$0$lcssa$i54$i,$f)|0);
       }
       $w$$i = $378 ? $w$1 : $375;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $w$$i;$l10n$0$be = $l10n$3;
       break L24;
      }
      $395 = (+_frexpl($$013$i,$e2$i));
      $396 = $395 * 2.0;
      $397 = $396 != 0.0;
      if ($397) {
       $398 = HEAP32[$e2$i>>2]|0;
       $399 = (($398) + -1)|0;
       HEAP32[$e2$i>>2] = $399;
      }
      $400 = $t$0 | 32;
      $401 = ($400|0)==(97);
      if ($401) {
       $402 = $t$0 & 32;
       $403 = ($402|0)==(0);
       $404 = (($prefix$0$i) + 9|0);
       $prefix$0$$i = $403 ? $prefix$0$i : $404;
       $405 = $pl$0$i | 2;
       $406 = ($p$0>>>0)>(11);
       $407 = (12 - ($p$0))|0;
       $re$0$i = $406 ? 0 : $407;
       $408 = ($re$0$i|0)==(0);
       do {
        if ($408) {
         $$1$i = $396;
        } else {
         $re$1187$i = $re$0$i;$round$0186$i = 8.0;
         while(1) {
          $409 = (($re$1187$i) + -1)|0;
          $410 = $round$0186$i * 16.0;
          $411 = ($409|0)==(0);
          if ($411) {
           $$lcssa324 = $410;
           break;
          } else {
           $re$1187$i = $409;$round$0186$i = $410;
          }
         }
         $412 = HEAP8[$prefix$0$$i>>0]|0;
         $413 = ($412<<24>>24)==(45);
         if ($413) {
          $414 = -$396;
          $415 = $414 - $$lcssa324;
          $416 = $$lcssa324 + $415;
          $417 = -$416;
          $$1$i = $417;
          break;
         } else {
          $418 = $396 + $$lcssa324;
          $419 = $418 - $$lcssa324;
          $$1$i = $419;
          break;
         }
        }
       } while(0);
       $420 = HEAP32[$e2$i>>2]|0;
       $421 = ($420|0)<(0);
       $422 = (0 - ($420))|0;
       $423 = $421 ? $422 : $420;
       $424 = ($423|0)<(0);
       if ($424) {
        $425 = ($423|0)<(0);
        $426 = $425 << 31 >> 31;
        $$05$i$i = $7;$427 = $423;$428 = $426;
        while(1) {
         $429 = (___uremdi3(($427|0),($428|0),10,0)|0);
         $430 = tempRet0;
         $431 = $429 | 48;
         $432 = $431&255;
         $433 = (($$05$i$i) + -1|0);
         HEAP8[$433>>0] = $432;
         $434 = (___udivdi3(($427|0),($428|0),10,0)|0);
         $435 = tempRet0;
         $436 = ($428>>>0)>(9);
         $437 = ($427>>>0)>(4294967295);
         $438 = ($428|0)==(9);
         $439 = $438 & $437;
         $440 = $436 | $439;
         if ($440) {
          $$05$i$i = $433;$427 = $434;$428 = $435;
         } else {
          $$lcssa325 = $433;$1055 = $434;$1056 = $435;
          break;
         }
        }
        $$0$lcssa$i56$i = $$lcssa325;$$01$lcssa$off0$i$i = $1055;
       } else {
        $$0$lcssa$i56$i = $7;$$01$lcssa$off0$i$i = $423;
       }
       $441 = ($$01$lcssa$off0$i$i|0)==(0);
       if ($441) {
        $$1$lcssa$i$i = $$0$lcssa$i56$i;
       } else {
        $$12$i$i = $$0$lcssa$i56$i;$y$03$i$i = $$01$lcssa$off0$i$i;
        while(1) {
         $442 = (($y$03$i$i>>>0) % 10)&-1;
         $443 = $442 | 48;
         $444 = $443&255;
         $445 = (($$12$i$i) + -1|0);
         HEAP8[$445>>0] = $444;
         $446 = (($y$03$i$i>>>0) / 10)&-1;
         $447 = ($y$03$i$i>>>0)<(10);
         if ($447) {
          $$lcssa327 = $445;
          break;
         } else {
          $$12$i$i = $445;$y$03$i$i = $446;
         }
        }
        $$1$lcssa$i$i = $$lcssa327;
       }
       $448 = ($$1$lcssa$i$i|0)==($7|0);
       if ($448) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $$1$lcssa$i$i;
       }
       $449 = HEAP32[$e2$i>>2]|0;
       $450 = $449 >> 31;
       $451 = $450 & 2;
       $452 = (($451) + 43)|0;
       $453 = $452&255;
       $454 = (($estr$0$i) + -1|0);
       HEAP8[$454>>0] = $453;
       $455 = (($t$0) + 15)|0;
       $456 = $455&255;
       $457 = (($estr$0$i) + -2|0);
       HEAP8[$457>>0] = $456;
       $notrhs$i = ($p$0|0)<(1);
       do {
        if ($notrhs$i) {
         $458 = $fl$1$ & 8;
         $459 = ($458|0)==(0);
         if ($459) {
          $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
          while(1) {
           $460 = (~~(($$2$us$us$i)));
           $461 = (629408 + ($460)|0);
           $462 = HEAP8[$461>>0]|0;
           $463 = $462&255;
           $464 = $463 | $402;
           $465 = $464&255;
           $466 = (($s$0$us$us$i) + 1|0);
           HEAP8[$s$0$us$us$i>>0] = $465;
           $467 = (+($460|0));
           $468 = $$2$us$us$i - $467;
           $469 = $468 * 16.0;
           $470 = $466;
           $471 = (($470) - ($0))|0;
           $472 = ($471|0)!=(1);
           $notlhs$us$us$i = $469 == 0.0;
           $or$cond$i80 = $472 | $notlhs$us$us$i;
           if ($or$cond$i80) {
            $s$1$us$us$i = $466;
           } else {
            $473 = (($s$0$us$us$i) + 2|0);
            HEAP8[$466>>0] = 46;
            $s$1$us$us$i = $473;
           }
           $474 = $469 != 0.0;
           if ($474) {
            $$2$us$us$i = $469;$s$0$us$us$i = $s$1$us$us$i;
           } else {
            $s$1$us$us$i$lcssa = $s$1$us$us$i;
            break;
           }
          }
          $s$1$lcssa$i = $s$1$us$us$i$lcssa;
          break;
         } else {
          $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
          while(1) {
           $475 = (~~(($$2$us$i)));
           $476 = (629408 + ($475)|0);
           $477 = HEAP8[$476>>0]|0;
           $478 = $477&255;
           $479 = $478 | $402;
           $480 = $479&255;
           $481 = (($s$0$us$i) + 1|0);
           HEAP8[$s$0$us$i>>0] = $480;
           $482 = (+($475|0));
           $483 = $$2$us$i - $482;
           $484 = $483 * 16.0;
           $485 = $481;
           $486 = (($485) - ($0))|0;
           $487 = ($486|0)==(1);
           if ($487) {
            $488 = (($s$0$us$i) + 2|0);
            HEAP8[$481>>0] = 46;
            $s$1$us$i = $488;
           } else {
            $s$1$us$i = $481;
           }
           $489 = $484 != 0.0;
           if ($489) {
            $$2$us$i = $484;$s$0$us$i = $s$1$us$i;
           } else {
            $s$1$us$i$lcssa = $s$1$us$i;
            break;
           }
          }
          $s$1$lcssa$i = $s$1$us$i$lcssa;
          break;
         }
        } else {
         $$2$i = $$1$i;$s$0$i = $buf$i;
         while(1) {
          $490 = (~~(($$2$i)));
          $491 = (629408 + ($490)|0);
          $492 = HEAP8[$491>>0]|0;
          $493 = $492&255;
          $494 = $493 | $402;
          $495 = $494&255;
          $496 = (($s$0$i) + 1|0);
          HEAP8[$s$0$i>>0] = $495;
          $497 = (+($490|0));
          $498 = $$2$i - $497;
          $499 = $498 * 16.0;
          $500 = $496;
          $501 = (($500) - ($0))|0;
          $502 = ($501|0)==(1);
          if ($502) {
           $503 = (($s$0$i) + 2|0);
           HEAP8[$496>>0] = 46;
           $s$1$i = $503;
          } else {
           $s$1$i = $496;
          }
          $504 = $499 != 0.0;
          if ($504) {
           $$2$i = $499;$s$0$i = $s$1$i;
          } else {
           $s$1$i$lcssa = $s$1$i;
           break;
          }
         }
         $s$1$lcssa$i = $s$1$i$lcssa;
        }
       } while(0);
       $505 = ($p$0|0)!=(0);
       $$pre308$i = $s$1$lcssa$i;
       $506 = (($11) + ($$pre308$i))|0;
       $507 = ($506|0)<($p$0|0);
       $or$cond279 = $505 & $507;
       $508 = $457;
       if ($or$cond279) {
        $509 = (($12) + ($p$0))|0;
        $510 = (($509) - ($508))|0;
        $l$0$i = $510;
       } else {
        $511 = (($10) - ($508))|0;
        $512 = (($511) + ($$pre308$i))|0;
        $l$0$i = $512;
       }
       $513 = (($l$0$i) + ($405))|0;
       $514 = $fl$1$ & 73728;
       $515 = ($514|0)==(0);
       $516 = ($w$1|0)>($513|0);
       $or$cond$i60$i = $515 & $516;
       if ($or$cond$i60$i) {
        $517 = (($w$1) - ($513))|0;
        $518 = ($517>>>0)>(256);
        $519 = $518 ? 256 : $517;
        _memset(($pad$i|0),32,($519|0))|0;
        $520 = ($517>>>0)>(255);
        if ($520) {
         $$01$i62$i = $517;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $521 = (($$01$i62$i) + -256)|0;
          $522 = ($521>>>0)>(255);
          if ($522) {
           $$01$i62$i = $521;
          } else {
           break;
          }
         }
         $523 = $517 & 255;
         $$0$lcssa$i64$i = $523;
        } else {
         $$0$lcssa$i64$i = $517;
        }
        (___fwritex($pad$i,$$0$lcssa$i64$i,$f)|0);
       }
       (___fwritex($prefix$0$$i,$405,$f)|0);
       $524 = ($514|0)==(65536);
       $or$cond$i67$i = $524 & $516;
       if ($or$cond$i67$i) {
        $525 = (($w$1) - ($513))|0;
        $526 = ($525>>>0)>(256);
        $527 = $526 ? 256 : $525;
        _memset(($pad$i|0),48,($527|0))|0;
        $528 = ($525>>>0)>(255);
        if ($528) {
         $$01$i69$i = $525;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $529 = (($$01$i69$i) + -256)|0;
          $530 = ($529>>>0)>(255);
          if ($530) {
           $$01$i69$i = $529;
          } else {
           break;
          }
         }
         $531 = $525 & 255;
         $$0$lcssa$i71$i = $531;
        } else {
         $$0$lcssa$i71$i = $525;
        }
        (___fwritex($pad$i,$$0$lcssa$i71$i,$f)|0);
       }
       $532 = (($$pre308$i) - ($0))|0;
       (___fwritex($buf$i,$532,$f)|0);
       $533 = $457;
       $534 = (($9) - ($533))|0;
       $535 = (($l$0$i) - ($534))|0;
       $536 = (($535) - ($532))|0;
       $537 = ($536|0)>(0);
       if ($537) {
        $538 = ($536>>>0)>(256);
        $539 = $538 ? 256 : $536;
        _memset(($pad$i|0),48,($539|0))|0;
        $540 = ($536>>>0)>(255);
        if ($540) {
         $$01$i75$i = $536;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $541 = (($$01$i75$i) + -256)|0;
          $542 = ($541>>>0)>(255);
          if ($542) {
           $$01$i75$i = $541;
          } else {
           break;
          }
         }
         $543 = $536 & 255;
         $$0$lcssa$i77$i = $543;
        } else {
         $$0$lcssa$i77$i = $536;
        }
        (___fwritex($pad$i,$$0$lcssa$i77$i,$f)|0);
       }
       (___fwritex($457,$534,$f)|0);
       $544 = ($514|0)==(8192);
       $or$cond$i80$i = $544 & $516;
       if ($or$cond$i80$i) {
        $545 = (($w$1) - ($513))|0;
        $546 = ($545>>>0)>(256);
        $547 = $546 ? 256 : $545;
        _memset(($pad$i|0),32,($547|0))|0;
        $548 = ($545>>>0)>(255);
        if ($548) {
         $$01$i82$i = $545;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $549 = (($$01$i82$i) + -256)|0;
          $550 = ($549>>>0)>(255);
          if ($550) {
           $$01$i82$i = $549;
          } else {
           break;
          }
         }
         $551 = $545 & 255;
         $$0$lcssa$i84$i = $551;
        } else {
         $$0$lcssa$i84$i = $545;
        }
        (___fwritex($pad$i,$$0$lcssa$i84$i,$f)|0);
       }
       $w$25$i = $516 ? $w$1 : $513;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $w$25$i;$l10n$0$be = $l10n$3;
       break L24;
      }
      $552 = ($p$0|0)<(0);
      $$p$i = $552 ? 6 : $p$0;
      if ($397) {
       $553 = $396 * 268435456.0;
       $554 = HEAP32[$e2$i>>2]|0;
       $555 = (($554) + -28)|0;
       HEAP32[$e2$i>>2] = $555;
       $$3$i = $553;$556 = $555;
      } else {
       $$pre$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $396;$556 = $$pre$i;
      }
      $557 = ($556|0)<(0);
      $$39$i = $557 ? $big$i : $13;
      $558 = $$39$i;
      $$4$i = $$3$i;$z$0$i = $$39$i;
      while(1) {
       $559 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $559;
       $560 = (($z$0$i) + 4|0);
       $561 = (+($559>>>0));
       $562 = $$4$i - $561;
       $563 = $562 * 1.0E+9;
       $564 = $563 != 0.0;
       if ($564) {
        $$4$i = $563;$z$0$i = $560;
       } else {
        $$lcssa301 = $560;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $565 = ($$pr$i|0)>(0);
      if ($565) {
       $566 = $$pr$i;$a$1261$i = $$39$i;$z$1260$i = $$lcssa301;
       while(1) {
        $567 = ($566|0)>(29);
        $568 = $567 ? 29 : $566;
        $d$0253$i = (($z$1260$i) + -4|0);
        $569 = ($d$0253$i>>>0)<($a$1261$i>>>0);
        do {
         if ($569) {
          $a$2$ph$i = $a$1261$i;
         } else {
          $579 = $z$1260$i;$carry$0254$i = 0;$d$0255$i = $d$0253$i;
          while(1) {
           $570 = HEAP32[$d$0255$i>>2]|0;
           $571 = (_bitshift64Shl(($570|0),0,($568|0))|0);
           $572 = tempRet0;
           $573 = (_i64Add(($571|0),($572|0),($carry$0254$i|0),0)|0);
           $574 = tempRet0;
           $575 = (___uremdi3(($573|0),($574|0),1000000000,0)|0);
           $576 = tempRet0;
           HEAP32[$d$0255$i>>2] = $575;
           $577 = (___udivdi3(($573|0),($574|0),1000000000,0)|0);
           $578 = tempRet0;
           $d$0$i = (($579) + -8|0);
           $580 = ($d$0$i>>>0)<($a$1261$i>>>0);
           if ($580) {
            $$lcssa302 = $577;
            break;
           } else {
            $579$phi = $d$0255$i;$carry$0254$i = $577;$d$0255$i = $d$0$i;$579 = $579$phi;
           }
          }
          $581 = ($$lcssa302|0)==(0);
          if ($581) {
           $a$2$ph$i = $a$1261$i;
           break;
          }
          $582 = (($a$1261$i) + -4|0);
          HEAP32[$582>>2] = $$lcssa302;
          $a$2$ph$i = $582;
         }
        } while(0);
        $z$2$i = $z$1260$i;
        while(1) {
         $583 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($583)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $584 = (($z$2$i) + -4|0);
         $585 = HEAP32[$584>>2]|0;
         $586 = ($585|0)==(0);
         if ($586) {
          $z$2$i = $584;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $587 = HEAP32[$e2$i>>2]|0;
        $588 = (($587) - ($568))|0;
        HEAP32[$e2$i>>2] = $588;
        $589 = ($588|0)>(0);
        if ($589) {
         $566 = $588;$a$1261$i = $a$2$ph$i;$z$1260$i = $z$2$i$lcssa;
        } else {
         $$lcssa303 = $588;$a$2$ph$i$lcssa = $a$2$ph$i;$z$2$i$lcssa$lcssa = $z$2$i$lcssa;
         break;
        }
       }
       $$pr154$i = $$lcssa303;$a$1$lcssa$i = $a$2$ph$i$lcssa;$z$1$lcssa$i = $z$2$i$lcssa$lcssa;
      } else {
       $$pr154$i = $$pr$i;$a$1$lcssa$i = $$39$i;$z$1$lcssa$i = $$lcssa301;
      }
      $590 = ($$pr154$i|0)<(0);
      do {
       if ($590) {
        $591 = (($$p$i) + 25)|0;
        $592 = (($591|0) / 9)&-1;
        $593 = (($592) + 1)|0;
        $594 = ($400|0)==(102);
        if ($594) {
         $595 = (($$39$i) + ($593<<2)|0);
         $596 = $$pr154$i;$a$3248$us$i = $a$1$lcssa$i;$z$3247$us$i = $z$1$lcssa$i;
         while(1) {
          $597 = ($596|0)<(-9);
          $598 = (0 - ($596))|0;
          $$26$us$i = $597 ? 9 : $598;
          $599 = ($a$3248$us$i>>>0)<($z$3247$us$i>>>0);
          do {
           if ($599) {
            $624 = 1 << $$26$us$i;
            $617 = (($624) + -1)|0;
            $621 = 1000000000 >>> $$26$us$i;
            $carry3$0242$us$i = 0;$d$1241$us$i = $a$3248$us$i;
            while(1) {
             $615 = HEAP32[$d$1241$us$i>>2]|0;
             $616 = $615 & $617;
             $618 = $615 >>> $$26$us$i;
             $619 = (($618) + ($carry3$0242$us$i))|0;
             HEAP32[$d$1241$us$i>>2] = $619;
             $620 = Math_imul($616, $621)|0;
             $622 = (($d$1241$us$i) + 4|0);
             $623 = ($622>>>0)<($z$3247$us$i>>>0);
             if ($623) {
              $carry3$0242$us$i = $620;$d$1241$us$i = $622;
             } else {
              $$lcssa305 = $620;
              break;
             }
            }
            $603 = HEAP32[$a$3248$us$i>>2]|0;
            $604 = ($603|0)==(0);
            $605 = (($a$3248$us$i) + 4|0);
            $$a$3$us$i = $604 ? $605 : $a$3248$us$i;
            $606 = ($$lcssa305|0)==(0);
            if ($606) {
             $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $z$3247$us$i;
             break;
            }
            $607 = (($z$3247$us$i) + 4|0);
            HEAP32[$z$3247$us$i>>2] = $$lcssa305;
            $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $607;
           } else {
            $600 = HEAP32[$a$3248$us$i>>2]|0;
            $601 = ($600|0)==(0);
            $602 = (($a$3248$us$i) + 4|0);
            $$a$3$us309$i = $601 ? $602 : $a$3248$us$i;
            $$a$3$us310$i = $$a$3$us309$i;$z$4$us$i = $z$3247$us$i;
           }
          } while(0);
          $608 = $z$4$us$i;
          $609 = (($608) - ($558))|0;
          $610 = $609 >> 2;
          $611 = ($610|0)>($593|0);
          $$z$4$us$i = $611 ? $595 : $z$4$us$i;
          $612 = HEAP32[$e2$i>>2]|0;
          $613 = (($612) + ($$26$us$i))|0;
          HEAP32[$e2$i>>2] = $613;
          $614 = ($613|0)<(0);
          if ($614) {
           $596 = $613;$a$3248$us$i = $$a$3$us310$i;$z$3247$us$i = $$z$4$us$i;
          } else {
           $$a$3$us310$i$lcssa = $$a$3$us310$i;$$z$4$us$i$lcssa = $$z$4$us$i;
           break;
          }
         }
         $a$3$lcssa$i = $$a$3$us310$i$lcssa;$z$3$lcssa$i = $$z$4$us$i$lcssa;
         break;
        }
        $625 = $$pr154$i;$a$3248$i = $a$1$lcssa$i;$z$3247$i = $z$1$lcssa$i;
        while(1) {
         $626 = ($625|0)<(-9);
         $627 = (0 - ($625))|0;
         $$26$i = $626 ? 9 : $627;
         $628 = ($a$3248$i>>>0)<($z$3247$i>>>0);
         do {
          if ($628) {
           $632 = 1 << $$26$i;
           $633 = (($632) + -1)|0;
           $634 = 1000000000 >>> $$26$i;
           $carry3$0242$i = 0;$d$1241$i = $a$3248$i;
           while(1) {
            $635 = HEAP32[$d$1241$i>>2]|0;
            $636 = $635 & $633;
            $637 = $635 >>> $$26$i;
            $638 = (($637) + ($carry3$0242$i))|0;
            HEAP32[$d$1241$i>>2] = $638;
            $639 = Math_imul($636, $634)|0;
            $640 = (($d$1241$i) + 4|0);
            $641 = ($640>>>0)<($z$3247$i>>>0);
            if ($641) {
             $carry3$0242$i = $639;$d$1241$i = $640;
            } else {
             $$lcssa304 = $639;
             break;
            }
           }
           $642 = HEAP32[$a$3248$i>>2]|0;
           $643 = ($642|0)==(0);
           $644 = (($a$3248$i) + 4|0);
           $$a$3$i = $643 ? $644 : $a$3248$i;
           $645 = ($$lcssa304|0)==(0);
           if ($645) {
            $$a$3312$i = $$a$3$i;$z$4$i = $z$3247$i;
            break;
           }
           $646 = (($z$3247$i) + 4|0);
           HEAP32[$z$3247$i>>2] = $$lcssa304;
           $$a$3312$i = $$a$3$i;$z$4$i = $646;
          } else {
           $629 = HEAP32[$a$3248$i>>2]|0;
           $630 = ($629|0)==(0);
           $631 = (($a$3248$i) + 4|0);
           $$a$3311$i = $630 ? $631 : $a$3248$i;
           $$a$3312$i = $$a$3311$i;$z$4$i = $z$3247$i;
          }
         } while(0);
         $647 = $z$4$i;
         $648 = $$a$3312$i;
         $649 = (($647) - ($648))|0;
         $650 = $649 >> 2;
         $651 = ($650|0)>($593|0);
         if ($651) {
          $652 = (($$a$3312$i) + ($593<<2)|0);
          $z$5$i = $652;
         } else {
          $z$5$i = $z$4$i;
         }
         $653 = HEAP32[$e2$i>>2]|0;
         $654 = (($653) + ($$26$i))|0;
         HEAP32[$e2$i>>2] = $654;
         $655 = ($654|0)<(0);
         if ($655) {
          $625 = $654;$a$3248$i = $$a$3312$i;$z$3247$i = $z$5$i;
         } else {
          $$a$3312$i$lcssa = $$a$3312$i;$z$5$i$lcssa = $z$5$i;
          break;
         }
        }
        $a$3$lcssa$i = $$a$3312$i$lcssa;$z$3$lcssa$i = $z$5$i$lcssa;
       } else {
        $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
       }
      } while(0);
      $656 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($656) {
        $657 = $a$3$lcssa$i;
        $658 = (($558) - ($657))|0;
        $659 = $658 >> 2;
        $660 = ($659*9)|0;
        $661 = HEAP32[$a$3$lcssa$i>>2]|0;
        $662 = ($661>>>0)<(10);
        if ($662) {
         $e$1$i = $660;
         break;
        }
        $e$0237$i = $660;$i$0236$i = 10;
        while(1) {
         $663 = ($i$0236$i*10)|0;
         $664 = (($e$0237$i) + 1)|0;
         $665 = ($661>>>0)<($663>>>0);
         if ($665) {
          $$lcssa306 = $664;
          break;
         } else {
          $e$0237$i = $664;$i$0236$i = $663;
         }
        }
        $e$1$i = $$lcssa306;
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $666 = ($400|0)!=(102);
      $667 = $666 ? $e$1$i : 0;
      $668 = (($$p$i) - ($667))|0;
      $669 = ($400|0)==(103);
      $670 = ($$p$i|0)!=(0);
      $$27$i = $669 & $670;
      $$neg159$i = $$27$i << 31 >> 31;
      $671 = (($668) + ($$neg159$i))|0;
      $672 = $z$3$lcssa$i;
      $673 = (($672) - ($558))|0;
      $674 = $673 >> 2;
      $675 = ($674*9)|0;
      $676 = (($675) + -9)|0;
      $677 = ($671|0)<($676|0);
      if ($677) {
       $678 = (($671) + 9216)|0;
       $679 = (($678|0) / 9)&-1;
       $$sum$i = (($679) + -1023)|0;
       $680 = (($$39$i) + ($$sum$i<<2)|0);
       $681 = (($678|0) % 9)&-1;
       $j$0229$i = (($681) + 1)|0;
       $682 = ($j$0229$i|0)<(9);
       if ($682) {
        $i$1230$i = 10;$j$0231$i = $j$0229$i;
        while(1) {
         $683 = ($i$1230$i*10)|0;
         $j$0$i = (($j$0231$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $$lcssa307 = $683;
          break;
         } else {
          $i$1230$i = $683;$j$0231$i = $j$0$i;
         }
        }
        $i$1$lcssa$i = $$lcssa307;
       } else {
        $i$1$lcssa$i = 10;
       }
       $684 = HEAP32[$680>>2]|0;
       $685 = (($684>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $686 = ($685|0)==(0);
       if ($686) {
        $$sum21$i = (($679) + -1022)|0;
        $687 = (($$39$i) + ($$sum21$i<<2)|0);
        $688 = ($687|0)==($z$3$lcssa$i|0);
        if ($688) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $680;$e$3$i = $e$1$i;
        } else {
         label = 275;
        }
       } else {
        label = 275;
       }
       do {
        if ((label|0) == 275) {
         label = 0;
         $689 = (($684>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $690 = $689 & 1;
         $691 = ($690|0)==(0);
         $$28$i = $691 ? 9007199254740992.0 : 9007199254740994.0;
         $692 = (($i$1$lcssa$i|0) / 2)&-1;
         $693 = ($685>>>0)<($692>>>0);
         do {
          if ($693) {
           $small$0$i = 0.5;
          } else {
           $694 = ($685|0)==($692|0);
           if ($694) {
            $$sum22$i = (($679) + -1022)|0;
            $695 = (($$39$i) + ($$sum22$i<<2)|0);
            $696 = ($695|0)==($z$3$lcssa$i|0);
            if ($696) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $697 = ($pl$0$i|0)==(0);
         do {
          if ($697) {
           $round6$1$i = $$28$i;$small$1$i = $small$0$i;
          } else {
           $698 = HEAP8[$prefix$0$i>>0]|0;
           $699 = ($698<<24>>24)==(45);
           if (!($699)) {
            $round6$1$i = $$28$i;$small$1$i = $small$0$i;
            break;
           }
           $700 = -$$28$i;
           $701 = -$small$0$i;
           $round6$1$i = $700;$small$1$i = $701;
          }
         } while(0);
         $702 = (($684) - ($685))|0;
         HEAP32[$680>>2] = $702;
         $703 = $round6$1$i + $small$1$i;
         $704 = $703 != $round6$1$i;
         if (!($704)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $680;$e$3$i = $e$1$i;
          break;
         }
         $705 = (($702) + ($i$1$lcssa$i))|0;
         HEAP32[$680>>2] = $705;
         $706 = ($705>>>0)>(999999999);
         if ($706) {
          $a$5223$i = $a$3$lcssa$i;$d$2222$i = $680;
          while(1) {
           $707 = (($d$2222$i) + -4|0);
           HEAP32[$d$2222$i>>2] = 0;
           $708 = ($707>>>0)<($a$5223$i>>>0);
           if ($708) {
            $709 = (($a$5223$i) + -4|0);
            HEAP32[$709>>2] = 0;
            $a$6$i = $709;
           } else {
            $a$6$i = $a$5223$i;
           }
           $710 = HEAP32[$707>>2]|0;
           $711 = (($710) + 1)|0;
           HEAP32[$707>>2] = $711;
           $712 = ($711>>>0)>(999999999);
           if ($712) {
            $a$5223$i = $a$6$i;$d$2222$i = $707;
           } else {
            $$lcssa308 = $707;$a$6$i$lcssa = $a$6$i;
            break;
           }
          }
          $a$5$lcssa$i = $a$6$i$lcssa;$d$2$lcssa$i = $$lcssa308;
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $680;
         }
         $713 = $a$5$lcssa$i;
         $714 = (($558) - ($713))|0;
         $715 = $714 >> 2;
         $716 = ($715*9)|0;
         $717 = HEAP32[$a$5$lcssa$i>>2]|0;
         $718 = ($717>>>0)<(10);
         if ($718) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $716;
          break;
         }
         $e$2218$i = $716;$i$2217$i = 10;
         while(1) {
          $719 = ($i$2217$i*10)|0;
          $720 = (($e$2218$i) + 1)|0;
          $721 = ($717>>>0)<($719>>>0);
          if ($721) {
           $$lcssa309 = $720;
           break;
          } else {
           $e$2218$i = $720;$i$2217$i = $719;
          }
         }
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $$lcssa309;
        }
       } while(0);
       $722 = (($d$3$i) + 4|0);
       $723 = ($z$3$lcssa$i>>>0)>($722>>>0);
       $$z$3$i = $723 ? $722 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $a$8$ph294$i = $a$8$ph$i;
      $724 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $725 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($725)) {
        $$lcssa283$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $726 = (($z$6$i) + -4|0);
       $727 = HEAP32[$726>>2]|0;
       $728 = ($727|0)==(0);
       if ($728) {
        $z$6$i = $726;
       } else {
        $$lcssa283$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($669) {
        $729 = ($$p$i|0)==(0);
        $730 = $729&1;
        $$$p$i = (($730) + ($$p$i))|0;
        $731 = ($$$p$i|0)>($e$4$ph$i|0);
        $732 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $731 & $732;
        if ($or$cond6$i) {
         $733 = (($t$0) + -1)|0;
         $$neg160$i = (($$$p$i) + -1)|0;
         $734 = (($$neg160$i) - ($e$4$ph$i))|0;
         $$019$i = $733;$$216$i = $734;
        } else {
         $735 = (($t$0) + -2)|0;
         $736 = (($$$p$i) + -1)|0;
         $$019$i = $735;$$216$i = $736;
        }
        $737 = $fl$1$ & 8;
        $738 = ($737|0)==(0);
        if (!($738)) {
         $$120$i = $$019$i;$$317$i = $$216$i;
         break;
        }
        do {
         if ($$lcssa283$i) {
          $739 = (($z$6$i$lcssa) + -4|0);
          $740 = HEAP32[$739>>2]|0;
          $741 = ($740|0)==(0);
          if ($741) {
           $j$2$i = 9;
           break;
          }
          $742 = (($740>>>0) % 10)&-1;
          $743 = ($742|0)==(0);
          if (!($743)) {
           $j$2$i = 0;
           break;
          }
          $i$3213$i = 10;$j$1214$i = 0;
          while(1) {
           $744 = ($i$3213$i*10)|0;
           $745 = (($j$1214$i) + 1)|0;
           $746 = (($740>>>0) % ($744>>>0))&-1;
           $747 = ($746|0)==(0);
           if ($747) {
            $i$3213$i = $744;$j$1214$i = $745;
           } else {
            $$lcssa310 = $745;
            break;
           }
          }
          $j$2$i = $$lcssa310;
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $748 = $$019$i | 32;
        $749 = ($748|0)==(102);
        $750 = $z$6$i$lcssa;
        $751 = (($750) - ($558))|0;
        $752 = $751 >> 2;
        $753 = ($752*9)|0;
        $754 = (($753) + -9)|0;
        if ($749) {
         $755 = (($754) - ($j$2$i))|0;
         $756 = ($755|0)<(0);
         $$29$i = $756 ? 0 : $755;
         $757 = ($$216$i|0)<($$29$i|0);
         $$216$$29$i = $757 ? $$216$i : $$29$i;
         $$120$i = $$019$i;$$317$i = $$216$$29$i;
         break;
        } else {
         $758 = (($754) + ($e$4$ph$i))|0;
         $759 = (($758) - ($j$2$i))|0;
         $760 = ($759|0)<(0);
         $$31$i = $760 ? 0 : $759;
         $761 = ($$216$i|0)<($$31$i|0);
         $$216$$31$i = $761 ? $$216$i : $$31$i;
         $$120$i = $$019$i;$$317$i = $$216$$31$i;
         break;
        }
       } else {
        $$120$i = $t$0;$$317$i = $$p$i;
       }
      } while(0);
      $762 = ($$317$i|0)!=(0);
      if ($762) {
       $766 = 1;
      } else {
       $763 = $fl$1$ & 8;
       $764 = ($763|0)!=(0);
       $766 = $764;
      }
      $765 = $766&1;
      $767 = $$120$i | 32;
      $768 = ($767|0)==(102);
      if ($768) {
       $769 = ($e$4$ph$i|0)>(0);
       $770 = $769 ? $e$4$ph$i : 0;
       $$pn$i = $770;$estr$2$i = 0;
      } else {
       $771 = ($e$4$ph$i|0)<(0);
       $772 = $771 ? $724 : $e$4$ph$i;
       $773 = ($772|0)<(0);
       if ($773) {
        $774 = ($772|0)<(0);
        $775 = $774 << 31 >> 31;
        $$05$i87$i = $7;$776 = $772;$777 = $775;
        while(1) {
         $778 = (___uremdi3(($776|0),($777|0),10,0)|0);
         $779 = tempRet0;
         $780 = $778 | 48;
         $781 = $780&255;
         $782 = (($$05$i87$i) + -1|0);
         HEAP8[$782>>0] = $781;
         $783 = (___udivdi3(($776|0),($777|0),10,0)|0);
         $784 = tempRet0;
         $785 = ($777>>>0)>(9);
         $786 = ($776>>>0)>(4294967295);
         $787 = ($777|0)==(9);
         $788 = $787 & $786;
         $789 = $785 | $788;
         if ($789) {
          $$05$i87$i = $782;$776 = $783;$777 = $784;
         } else {
          $$lcssa311 = $782;$1057 = $783;$1058 = $784;
          break;
         }
        }
        $$0$lcssa$i92$i = $$lcssa311;$$01$lcssa$off0$i93$i = $1057;
       } else {
        $$0$lcssa$i92$i = $7;$$01$lcssa$off0$i93$i = $772;
       }
       $790 = ($$01$lcssa$off0$i93$i|0)==(0);
       if ($790) {
        $estr$1$ph$i = $$0$lcssa$i92$i;
       } else {
        $$12$i95$i = $$0$lcssa$i92$i;$y$03$i94$i = $$01$lcssa$off0$i93$i;
        while(1) {
         $791 = (($y$03$i94$i>>>0) % 10)&-1;
         $792 = $791 | 48;
         $793 = $792&255;
         $794 = (($$12$i95$i) + -1|0);
         HEAP8[$794>>0] = $793;
         $795 = (($y$03$i94$i>>>0) / 10)&-1;
         $796 = ($y$03$i94$i>>>0)<(10);
         if ($796) {
          $$lcssa313 = $794;
          break;
         } else {
          $$12$i95$i = $794;$y$03$i94$i = $795;
         }
        }
        $estr$1$ph$i = $$lcssa313;
       }
       $797 = $estr$1$ph$i;
       $798 = (($9) - ($797))|0;
       $799 = ($798|0)<(2);
       if ($799) {
        $estr$1209$i = $estr$1$ph$i;
        while(1) {
         $800 = (($estr$1209$i) + -1|0);
         HEAP8[$800>>0] = 48;
         $801 = $800;
         $802 = (($9) - ($801))|0;
         $803 = ($802|0)<(2);
         if ($803) {
          $estr$1209$i = $800;
         } else {
          $$lcssa314 = $800;
          break;
         }
        }
        $estr$1$lcssa$i = $$lcssa314;
       } else {
        $estr$1$lcssa$i = $estr$1$ph$i;
       }
       $804 = $e$4$ph$i >> 31;
       $805 = $804 & 2;
       $806 = (($805) + 43)|0;
       $807 = $806&255;
       $808 = (($estr$1$lcssa$i) + -1|0);
       HEAP8[$808>>0] = $807;
       $809 = $$120$i&255;
       $810 = (($estr$1$lcssa$i) + -2|0);
       HEAP8[$810>>0] = $809;
       $811 = $810;
       $812 = (($9) - ($811))|0;
       $$pn$i = $812;$estr$2$i = $810;
      }
      $813 = (($pl$0$i) + 1)|0;
      $814 = (($813) + ($$317$i))|0;
      $l$1$i = (($814) + ($765))|0;
      $815 = (($l$1$i) + ($$pn$i))|0;
      $816 = $fl$1$ & 73728;
      $817 = ($816|0)==(0);
      $818 = ($w$1|0)>($815|0);
      $or$cond$i101$i = $817 & $818;
      if ($or$cond$i101$i) {
       $819 = (($w$1) - ($815))|0;
       $820 = ($819>>>0)>(256);
       $821 = $820 ? 256 : $819;
       _memset(($pad$i|0),32,($821|0))|0;
       $822 = ($819>>>0)>(255);
       if ($822) {
        $$01$i103$i = $819;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $823 = (($$01$i103$i) + -256)|0;
         $824 = ($823>>>0)>(255);
         if ($824) {
          $$01$i103$i = $823;
         } else {
          break;
         }
        }
        $825 = $819 & 255;
        $$0$lcssa$i105$i = $825;
       } else {
        $$0$lcssa$i105$i = $819;
       }
       (___fwritex($pad$i,$$0$lcssa$i105$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      $826 = ($816|0)==(65536);
      $or$cond$i108$i = $826 & $818;
      if ($or$cond$i108$i) {
       $827 = (($w$1) - ($815))|0;
       $828 = ($827>>>0)>(256);
       $829 = $828 ? 256 : $827;
       _memset(($pad$i|0),48,($829|0))|0;
       $830 = ($827>>>0)>(255);
       if ($830) {
        $$01$i110$i = $827;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $831 = (($$01$i110$i) + -256)|0;
         $832 = ($831>>>0)>(255);
         if ($832) {
          $$01$i110$i = $831;
         } else {
          break;
         }
        }
        $833 = $827 & 255;
        $$0$lcssa$i112$i = $833;
       } else {
        $$0$lcssa$i112$i = $827;
       }
       (___fwritex($pad$i,$$0$lcssa$i112$i,$f)|0);
      }
      do {
       if ($768) {
        $834 = ($a$8$ph$i>>>0)>($$39$i>>>0);
        $r$0$a$8$i = $834 ? $$39$i : $a$8$ph$i;
        $835 = $558 ^ -1;
        $836 = $a$8$ph294$i ^ -1;
        $837 = ($835>>>0)>($836>>>0);
        $umax$i = $837 ? $835 : $836;
        $838 = (3 - ($umax$i))|0;
        $uglygep$i = (($$39$i) + 1|0);
        $uglygep296$i = $uglygep$i;
        $839 = ($838>>>0)>($uglygep296$i>>>0);
        $umax297$i = $839 ? $838 : $uglygep296$i;
        $umax297298299$i = $umax297$i;
        $uglygep300$i = (($umax297298299$i) + ($umax$i)|0);
        $uglygep300301$i = $uglygep300$i;
        $840 = $umax$i ^ -1;
        $d$4199$i = $r$0$a$8$i;
        while(1) {
         $841 = HEAP32[$d$4199$i>>2]|0;
         $842 = ($841|0)==(0);
         if ($842) {
          $$1$lcssa$i120$i = $14;
         } else {
          $$12$i118$i = $14;$y$03$i117$i = $841;
          while(1) {
           $843 = (($y$03$i117$i>>>0) % 10)&-1;
           $844 = $843 | 48;
           $845 = $844&255;
           $846 = (($$12$i118$i) + -1|0);
           HEAP8[$846>>0] = $845;
           $847 = (($y$03$i117$i>>>0) / 10)&-1;
           $848 = ($y$03$i117$i>>>0)<(10);
           if ($848) {
            $$lcssa318 = $846;
            break;
           } else {
            $$12$i118$i = $846;$y$03$i117$i = $847;
           }
          }
          $$1$lcssa$i120$i = $$lcssa318;
         }
         $849 = ($d$4199$i|0)==($r$0$a$8$i|0);
         do {
          if ($849) {
           $853 = ($$1$lcssa$i120$i|0)==($14|0);
           if (!($853)) {
            $s7$1$i = $$1$lcssa$i120$i;
            break;
           }
           HEAP8[$16>>0] = 48;
           $s7$1$i = $16;
          } else {
           $850 = ($$1$lcssa$i120$i>>>0)>($buf$i>>>0);
           if (!($850)) {
            $s7$1$i = $$1$lcssa$i120$i;
            break;
           }
           $s7$0196$i = $$1$lcssa$i120$i;
           while(1) {
            $851 = (($s7$0196$i) + -1|0);
            HEAP8[$851>>0] = 48;
            $852 = ($851>>>0)>($buf$i>>>0);
            if ($852) {
             $s7$0196$i = $851;
            } else {
             $$lcssa319 = $851;
             break;
            }
           }
           $s7$1$i = $$lcssa319;
          }
         } while(0);
         $854 = $s7$1$i;
         $855 = (($15) - ($854))|0;
         (___fwritex($s7$1$i,$855,$f)|0);
         $856 = (($d$4199$i) + 4|0);
         $857 = ($856>>>0)>($$39$i>>>0);
         if ($857) {
          $$lcssa320 = $856;
          break;
         } else {
          $d$4199$i = $856;
         }
        }
        $858 = $uglygep300301$i & -4;
        $859 = (($858) + ($840))|0;
        $860 = $859;
        $$not$i = $762 ^ 1;
        $861 = $fl$1$ & 8;
        $862 = ($861|0)==(0);
        $or$cond35$i = $862 & $$not$i;
        if (!($or$cond35$i)) {
         (___fwritex(629424,1,$f)|0);
        }
        $863 = ($$lcssa320>>>0)<($z$6$i$lcssa>>>0);
        $864 = ($$317$i|0)>(0);
        $or$cond10191$i = $863 & $864;
        if ($or$cond10191$i) {
         $$418193$i = $$317$i;$879 = $860;$d$5192$i = $$lcssa320;
         while(1) {
          $865 = HEAP32[$d$5192$i>>2]|0;
          $866 = ($865|0)==(0);
          if ($866) {
           $s8$0188$i$ph = $14;
           label = 362;
          } else {
           $$12$i127$i = $14;$y$03$i126$i = $865;
           while(1) {
            $867 = (($y$03$i126$i>>>0) % 10)&-1;
            $868 = $867 | 48;
            $869 = $868&255;
            $870 = (($$12$i127$i) + -1|0);
            HEAP8[$870>>0] = $869;
            $871 = (($y$03$i126$i>>>0) / 10)&-1;
            $872 = ($y$03$i126$i>>>0)<(10);
            if ($872) {
             $$lcssa321 = $870;
             break;
            } else {
             $$12$i127$i = $870;$y$03$i126$i = $871;
            }
           }
           $873 = ($$lcssa321>>>0)>($buf$i>>>0);
           if ($873) {
            $s8$0188$i$ph = $$lcssa321;
            label = 362;
           } else {
            $s8$0$lcssa$i = $$lcssa321;
           }
          }
          if ((label|0) == 362) {
           label = 0;
           $s8$0188$i = $s8$0188$i$ph;
           while(1) {
            $874 = (($s8$0188$i) + -1|0);
            HEAP8[$874>>0] = 48;
            $875 = ($874>>>0)>($buf$i>>>0);
            if ($875) {
             $s8$0188$i = $874;
            } else {
             $$lcssa322 = $874;
             break;
            }
           }
           $s8$0$lcssa$i = $$lcssa322;
          }
          $876 = ($$418193$i|0)>(9);
          $877 = $876 ? 9 : $$418193$i;
          (___fwritex($s8$0$lcssa$i,$877,$f)|0);
          $878 = (($879) + 8|0);
          $880 = (($$418193$i) + -9)|0;
          $881 = ($878>>>0)<($z$6$i$lcssa>>>0);
          $882 = ($880|0)>(0);
          $or$cond10$i = $881 & $882;
          if ($or$cond10$i) {
           $879$phi = $d$5192$i;$$418193$i = $880;$d$5192$i = $878;$879 = $879$phi;
          } else {
           $$lcssa323 = $880;
           break;
          }
         }
         $$418$lcssa$i = $$lcssa323;
        } else {
         $$418$lcssa$i = $$317$i;
        }
        $883 = ($$418$lcssa$i|0)>(0);
        if (!($883)) {
         break;
        }
        $884 = ($$418$lcssa$i>>>0)>(256);
        $885 = $884 ? 256 : $$418$lcssa$i;
        _memset(($pad$i|0),48,($885|0))|0;
        $886 = ($$418$lcssa$i>>>0)>(255);
        if ($886) {
         $$01$i134$i = $$418$lcssa$i;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $887 = (($$01$i134$i) + -256)|0;
          $888 = ($887>>>0)>(255);
          if ($888) {
           $$01$i134$i = $887;
          } else {
           break;
          }
         }
         $889 = $$418$lcssa$i & 255;
         $$0$lcssa$i136$i = $889;
        } else {
         $$0$lcssa$i136$i = $$418$lcssa$i;
        }
        (___fwritex($pad$i,$$0$lcssa$i136$i,$f)|0);
       } else {
        $890 = (($a$8$ph$i) + 4|0);
        $z$6$$i = $$lcssa283$i ? $z$6$i$lcssa : $890;
        $891 = ($$317$i|0)>(-1);
        do {
         if ($891) {
          $892 = $fl$1$ & 8;
          $893 = ($892|0)==(0);
          $$5205$i = $$317$i;$d$6204$i = $a$8$ph$i;
          while(1) {
           $894 = HEAP32[$d$6204$i>>2]|0;
           $895 = ($894|0)==(0);
           if ($895) {
            label = 379;
           } else {
            $$12$i142$i = $14;$y$03$i141$i = $894;
            while(1) {
             $896 = (($y$03$i141$i>>>0) % 10)&-1;
             $897 = $896 | 48;
             $898 = $897&255;
             $899 = (($$12$i142$i) + -1|0);
             HEAP8[$899>>0] = $898;
             $900 = (($y$03$i141$i>>>0) / 10)&-1;
             $901 = ($y$03$i141$i>>>0)<(10);
             if ($901) {
              $$12$i142$i$lcssa = $$12$i142$i;$$lcssa315 = $899;
              break;
             } else {
              $$12$i142$i = $899;$y$03$i141$i = $900;
             }
            }
            $902 = ($$lcssa315|0)==($14|0);
            if ($902) {
             label = 379;
            } else {
             $1059 = $$12$i142$i$lcssa;$s9$0$i = $$lcssa315;
            }
           }
           if ((label|0) == 379) {
            label = 0;
            HEAP8[$16>>0] = 48;
            $1059 = $14;$s9$0$i = $16;
           }
           $903 = ($d$6204$i|0)==($a$8$ph$i|0);
           do {
            if ($903) {
             (___fwritex($s9$0$i,1,$f)|0);
             $907 = ($$5205$i|0)<(1);
             $or$cond37$i = $907 & $893;
             if ($or$cond37$i) {
              $s9$2$i = $1059;
              break;
             }
             (___fwritex(629424,1,$f)|0);
             $s9$2$i = $1059;
            } else {
             $904 = ($s9$0$i>>>0)>($buf$i>>>0);
             if (!($904)) {
              $s9$2$i = $s9$0$i;
              break;
             }
             $s9$1200$i = $s9$0$i;
             while(1) {
              $905 = (($s9$1200$i) + -1|0);
              HEAP8[$905>>0] = 48;
              $906 = ($905>>>0)>($buf$i>>>0);
              if ($906) {
               $s9$1200$i = $905;
              } else {
               $$lcssa316 = $905;
               break;
              }
             }
             $s9$2$i = $$lcssa316;
            }
           } while(0);
           $908 = $s9$2$i;
           $909 = (($15) - ($908))|0;
           $910 = ($$5205$i|0)>($909|0);
           $$$5$i = $910 ? $909 : $$5205$i;
           (___fwritex($s9$2$i,$$$5$i,$f)|0);
           $911 = (($$5205$i) - ($909))|0;
           $912 = (($d$6204$i) + 4|0);
           $913 = ($912>>>0)<($z$6$$i>>>0);
           $914 = ($911|0)>(-1);
           $or$cond12$i = $913 & $914;
           if ($or$cond12$i) {
            $$5205$i = $911;$d$6204$i = $912;
           } else {
            $$lcssa317 = $911;
            break;
           }
          }
          $915 = ($$lcssa317|0)>(0);
          if (!($915)) {
           break;
          }
          $916 = ($$lcssa317>>>0)>(256);
          $917 = $916 ? 256 : $$lcssa317;
          _memset(($pad$i|0),48,($917|0))|0;
          $918 = ($$lcssa317>>>0)>(255);
          if ($918) {
           $$01$i149$i = $$lcssa317;
           while(1) {
            (___fwritex($pad$i,256,$f)|0);
            $919 = (($$01$i149$i) + -256)|0;
            $920 = ($919>>>0)>(255);
            if ($920) {
             $$01$i149$i = $919;
            } else {
             break;
            }
           }
           $921 = $$lcssa317 & 255;
           $$0$lcssa$i151$i = $921;
          } else {
           $$0$lcssa$i151$i = $$lcssa317;
          }
          (___fwritex($pad$i,$$0$lcssa$i151$i,$f)|0);
         }
        } while(0);
        $922 = $estr$2$i;
        $923 = (($9) - ($922))|0;
        (___fwritex($estr$2$i,$923,$f)|0);
       }
      } while(0);
      $924 = ($816|0)==(8192);
      $or$cond$i$i = $924 & $818;
      if ($or$cond$i$i) {
       $925 = (($w$1) - ($815))|0;
       $926 = ($925>>>0)>(256);
       $927 = $926 ? 256 : $925;
       _memset(($pad$i|0),32,($927|0))|0;
       $928 = ($925>>>0)>(255);
       if ($928) {
        $$01$i$i = $925;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $929 = (($$01$i$i) + -256)|0;
         $930 = ($929>>>0)>(255);
         if ($930) {
          $$01$i$i = $929;
         } else {
          break;
         }
        }
        $931 = $925 & 255;
        $$0$lcssa$i$i = $931;
       } else {
        $$0$lcssa$i$i = $925;
       }
       (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
      }
      $w$38$i = $818 ? $w$1 : $815;
      $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $w$38$i;$l10n$0$be = $l10n$3;
      break L24;
      break;
     }
     case 83:  {
      $316 = $190;
      $317 = ($p$0|0)==(0);
      if ($317) {
       $1053 = $190;$1054 = $316;$i$0$lcssa275 = 0;
       label = 120;
      } else {
       $1051 = $316;$1052 = $190;$p$4274 = $p$0;
       label = 115;
      }
      break;
     }
     case 105: case 100:  {
      $255 = ($217|0)<(0);
      if ($255) {
       $256 = (_i64Subtract(0,0,($190|0),($217|0))|0);
       $257 = tempRet0;
       $262 = $257;$264 = $256;$pl$0 = 1;$prefix$0 = 629328;
       label = 97;
       break L98;
      }
      $258 = $fl$1$ & 2048;
      $259 = ($258|0)==(0);
      if ($259) {
       $260 = $fl$1$ & 1;
       $261 = ($260|0)==(0);
       $$ = $261 ? 629328 : ((629328 + 2|0));
       $262 = $217;$264 = $190;$pl$0 = $260;$prefix$0 = $$;
       label = 97;
      } else {
       $262 = $217;$264 = $190;$pl$0 = 1;$prefix$0 = ((629328 + 1|0));
       label = 97;
      }
      break;
     }
     case 67:  {
      HEAP32[$wc>>2] = $190;
      HEAP32[$5>>2] = 0;
      $1051 = $wc;$1052 = $6;$p$4274 = -1;
      label = 115;
      break;
     }
     case 117:  {
      $262 = $217;$264 = $190;$pl$0 = 0;$prefix$0 = 629328;
      label = 97;
      break;
     }
     case 109:  {
      $305 = (___errno_location()|0);
      $306 = HEAP32[$305>>2]|0;
      $307 = (_strerror(($306|0))|0);
      $a$1 = $307;
      label = 110;
      break;
     }
     case 99:  {
      $304 = $190&255;
      HEAP8[$4>>0] = $304;
      $1047 = $190;$1048 = $217;$a$2 = $4;$fl$6 = $189;$p$5 = 1;$pl$2 = 0;$prefix$2 = 629328;$z$2 = $2;
      break;
     }
     case 115:  {
      $308 = $190;
      $309 = ($190|0)==(0);
      $$21 = $309 ? 629344 : $308;
      $a$1 = $$21;
      label = 110;
      break;
     }
     default: {
      $1047 = $190;$1048 = $217;$a$2 = $fmt90;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 629328;$z$2 = $2;
     }
     }
    } while(0);
    do {
     if ((label|0) == 83) {
      label = 0;
      $215 = $t$1 & 32;
      $216 = ($190|0)==(0);
      $218 = ($217|0)==(0);
      $219 = $216 & $218;
      if ($219) {
       $292 = $190;$294 = $217;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 629328;
       label = 105;
      } else {
       $$012$i = $2;$221 = $190;$228 = $217;
       while(1) {
        $220 = $221 & 15;
        $222 = (629408 + ($220)|0);
        $223 = HEAP8[$222>>0]|0;
        $224 = $223&255;
        $225 = $224 | $215;
        $226 = $225&255;
        $227 = (($$012$i) + -1|0);
        HEAP8[$227>>0] = $226;
        $229 = (_bitshift64Lshr(($221|0),($228|0),4)|0);
        $230 = tempRet0;
        $231 = ($229|0)==(0);
        $232 = ($230|0)==(0);
        $233 = $231 & $232;
        if ($233) {
         $$lcssa332 = $227;
         break;
        } else {
         $$012$i = $227;$221 = $229;$228 = $230;
        }
       }
       $234 = $fl$3 & 8;
       $235 = ($234|0)==(0);
       if ($235) {
        $292 = $190;$294 = $217;$a$0 = $$lcssa332;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 629328;
        label = 105;
       } else {
        $236 = $t$1 >> 4;
        $237 = (629328 + ($236)|0);
        $292 = $190;$294 = $217;$a$0 = $$lcssa332;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $237;
        label = 105;
       }
      }
     }
     else if ((label|0) == 97) {
      label = 0;
      $263 = ($262>>>0)>(0);
      $265 = ($264>>>0)>(4294967295);
      $266 = ($262|0)==(0);
      $267 = $266 & $265;
      $268 = $263 | $267;
      if ($268) {
       $$05$i = $2;$269 = $264;$270 = $262;
       while(1) {
        $271 = (___uremdi3(($269|0),($270|0),10,0)|0);
        $272 = tempRet0;
        $273 = $271 | 48;
        $274 = $273&255;
        $275 = (($$05$i) + -1|0);
        HEAP8[$275>>0] = $274;
        $276 = (___udivdi3(($269|0),($270|0),10,0)|0);
        $277 = tempRet0;
        $278 = ($270>>>0)>(9);
        $279 = ($269>>>0)>(4294967295);
        $280 = ($270|0)==(9);
        $281 = $280 & $279;
        $282 = $278 | $281;
        if ($282) {
         $$05$i = $275;$269 = $276;$270 = $277;
        } else {
         $$lcssa328 = $275;$1049 = $276;$1050 = $277;
         break;
        }
       }
       $$0$lcssa$i54 = $$lcssa328;$$01$lcssa$off0$i = $1049;
      } else {
       $$0$lcssa$i54 = $2;$$01$lcssa$off0$i = $264;
      }
      $283 = ($$01$lcssa$off0$i|0)==(0);
      if ($283) {
       $292 = $264;$294 = $262;$a$0 = $$0$lcssa$i54;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 105;
      } else {
       $$12$i = $$0$lcssa$i54;$y$03$i = $$01$lcssa$off0$i;
       while(1) {
        $284 = (($y$03$i>>>0) % 10)&-1;
        $285 = $284 | 48;
        $286 = $285&255;
        $287 = (($$12$i) + -1|0);
        HEAP8[$287>>0] = $286;
        $288 = (($y$03$i>>>0) / 10)&-1;
        $289 = ($y$03$i>>>0)<(10);
        if ($289) {
         $$lcssa330 = $287;
         break;
        } else {
         $$12$i = $287;$y$03$i = $288;
        }
       }
       $292 = $264;$294 = $262;$a$0 = $$lcssa330;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 105;
      }
     }
     else if ((label|0) == 110) {
      label = 0;
      $310 = (_memchr($a$1,0,$p$0)|0);
      $311 = ($310|0)==(0|0);
      if ($311) {
       $312 = (($a$1) + ($p$0)|0);
       $1047 = $190;$1048 = $217;$a$2 = $a$1;$fl$6 = $189;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 629328;$z$2 = $312;
       break;
      } else {
       $313 = $310;
       $314 = $a$1;
       $315 = (($313) - ($314))|0;
       $1047 = $190;$1048 = $217;$a$2 = $a$1;$fl$6 = $189;$p$5 = $315;$pl$2 = 0;$prefix$2 = 629328;$z$2 = $310;
       break;
      }
     }
     else if ((label|0) == 115) {
      label = 0;
      $i$0180 = 0;$l$1179 = 0;$ws$0181 = $1051;
      while(1) {
       $318 = HEAP32[$ws$0181>>2]|0;
       $319 = ($318|0)==(0);
       if ($319) {
        $i$0$lcssa = $i$0180;$l$2 = $l$1179;
        break;
       }
       $320 = (_wctomb($mb,$318)|0);
       $321 = ($320|0)<(0);
       $322 = (($p$4274) - ($i$0180))|0;
       $323 = ($320>>>0)>($322>>>0);
       $or$cond23 = $321 | $323;
       if ($or$cond23) {
        $i$0$lcssa = $i$0180;$l$2 = $320;
        break;
       }
       $324 = (($ws$0181) + 4|0);
       $325 = (($320) + ($i$0180))|0;
       $326 = ($p$4274>>>0)>($325>>>0);
       if ($326) {
        $i$0180 = $325;$l$1179 = $320;$ws$0181 = $324;
       } else {
        $i$0$lcssa = $325;$l$2 = $320;
        break;
       }
      }
      $327 = ($l$2|0)<(0);
      if ($327) {
       $$0$ph287 = -1;
       label = 449;
       break L1;
      } else {
       $1053 = $1052;$1054 = $1051;$i$0$lcssa275 = $i$0$lcssa;
       label = 120;
      }
     }
    } while(0);
    if ((label|0) == 105) {
     label = 0;
     $290 = ($p$2|0)>(-1);
     $291 = $fl$4 & -65537;
     $$fl$4 = $290 ? $291 : $fl$4;
     $293 = ($292|0)!=(0);
     $295 = ($294|0)!=(0);
     $296 = $293 | $295;
     $297 = ($p$2|0)!=(0);
     $or$cond = $296 | $297;
     if ($or$cond) {
      $298 = $a$0;
      $299 = (($3) - ($298))|0;
      $300 = $296&1;
      $301 = $300 ^ 1;
      $302 = (($301) + ($299))|0;
      $303 = ($p$2|0)>($302|0);
      $p$2$ = $303 ? $p$2 : $302;
      $1047 = $292;$1048 = $294;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
     } else {
      $1047 = $292;$1048 = $294;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
     }
    }
    else if ((label|0) == 120) {
     label = 0;
     $328 = $fl$1$ & 73728;
     $329 = ($328|0)==(0);
     $330 = ($w$1|0)>($i$0$lcssa275|0);
     $or$cond$i65 = $329 & $330;
     if ($or$cond$i65) {
      $331 = (($w$1) - ($i$0$lcssa275))|0;
      $332 = ($331>>>0)>(256);
      $333 = $332 ? 256 : $331;
      _memset(($pad$i|0),32,($333|0))|0;
      $334 = ($331>>>0)>(255);
      if ($334) {
       $$01$i67 = $331;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $335 = (($$01$i67) + -256)|0;
        $336 = ($335>>>0)>(255);
        if ($336) {
         $$01$i67 = $335;
        } else {
         break;
        }
       }
       $337 = $331 & 255;
       $$0$lcssa$i69 = $337;
      } else {
       $$0$lcssa$i69 = $331;
      }
      (___fwritex($pad$i,$$0$lcssa$i69,$f)|0);
     }
     $338 = ($i$0$lcssa275|0)==(0);
     if (!($338)) {
      $i$1191 = 0;$ws$1192 = $1054;
      while(1) {
       $339 = HEAP32[$ws$1192>>2]|0;
       $340 = ($339|0)==(0);
       if ($340) {
        break;
       }
       $341 = (_wctomb($mb,$339)|0);
       $342 = (($341) + ($i$1191))|0;
       $343 = ($342|0)>($i$0$lcssa275|0);
       if ($343) {
        break;
       }
       $344 = (($ws$1192) + 4|0);
       (___fwritex($mb,$341,$f)|0);
       $345 = ($342>>>0)<($i$0$lcssa275>>>0);
       if ($345) {
        $i$1191 = $342;$ws$1192 = $344;
       } else {
        break;
       }
      }
     }
     $346 = ($328|0)==(8192);
     $or$cond$i72 = $346 & $330;
     if ($or$cond$i72) {
      $347 = (($w$1) - ($i$0$lcssa275))|0;
      $348 = ($347>>>0)>(256);
      $349 = $348 ? 256 : $347;
      _memset(($pad$i|0),32,($349|0))|0;
      $350 = ($347>>>0)>(255);
      if ($350) {
       $$01$i74 = $347;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $351 = (($$01$i74) + -256)|0;
        $352 = ($351>>>0)>(255);
        if ($352) {
         $$01$i74 = $351;
        } else {
         break;
        }
       }
       $353 = $347 & 255;
       $$0$lcssa$i76 = $353;
      } else {
       $$0$lcssa$i76 = $347;
      }
      (___fwritex($pad$i,$$0$lcssa$i76,$f)|0);
     }
     $354 = $330 ? $w$1 : $i$0$lcssa275;
     $$be = $1053;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $354;$l10n$0$be = $l10n$3;
     break;
    }
    $932 = $z$2;
    $933 = $a$2;
    $934 = (($932) - ($933))|0;
    $935 = ($p$5|0)<($934|0);
    $$p$5 = $935 ? $934 : $p$5;
    $936 = (($pl$2) + ($$p$5))|0;
    $937 = ($w$1|0)<($936|0);
    $w$2 = $937 ? $936 : $w$1;
    $938 = $fl$6 & 73728;
    $939 = ($938|0)==(0);
    $940 = ($w$2|0)>($936|0);
    $or$cond$i82 = $939 & $940;
    if ($or$cond$i82) {
     $941 = (($w$2) - ($936))|0;
     $942 = ($941>>>0)>(256);
     $943 = $942 ? 256 : $941;
     _memset(($pad$i|0),32,($943|0))|0;
     $944 = ($941>>>0)>(255);
     if ($944) {
      $$01$i84 = $941;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $945 = (($$01$i84) + -256)|0;
       $946 = ($945>>>0)>(255);
       if ($946) {
        $$01$i84 = $945;
       } else {
        break;
       }
      }
      $947 = $941 & 255;
      $$0$lcssa$i86 = $947;
     } else {
      $$0$lcssa$i86 = $941;
     }
     (___fwritex($pad$i,$$0$lcssa$i86,$f)|0);
    }
    (___fwritex($prefix$2,$pl$2,$f)|0);
    $948 = ($938|0)==(65536);
    $or$cond$i58 = $948 & $940;
    if ($or$cond$i58) {
     $949 = (($w$2) - ($936))|0;
     $950 = ($949>>>0)>(256);
     $951 = $950 ? 256 : $949;
     _memset(($pad$i|0),48,($951|0))|0;
     $952 = ($949>>>0)>(255);
     if ($952) {
      $$01$i60 = $949;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $953 = (($$01$i60) + -256)|0;
       $954 = ($953>>>0)>(255);
       if ($954) {
        $$01$i60 = $953;
       } else {
        break;
       }
      }
      $955 = $949 & 255;
      $$0$lcssa$i62 = $955;
     } else {
      $$0$lcssa$i62 = $949;
     }
     (___fwritex($pad$i,$$0$lcssa$i62,$f)|0);
    }
    $956 = ($$p$5|0)>($934|0);
    if ($956) {
     $957 = (($$p$5) - ($934))|0;
     $958 = ($957>>>0)>(256);
     $959 = $958 ? 256 : $957;
     _memset(($pad$i|0),48,($959|0))|0;
     $960 = ($957>>>0)>(255);
     if ($960) {
      $$01$i45 = $957;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $961 = (($$01$i45) + -256)|0;
       $962 = ($961>>>0)>(255);
       if ($962) {
        $$01$i45 = $961;
       } else {
        break;
       }
      }
      $963 = $957 & 255;
      $$0$lcssa$i47 = $963;
     } else {
      $$0$lcssa$i47 = $957;
     }
     (___fwritex($pad$i,$$0$lcssa$i47,$f)|0);
    }
    (___fwritex($a$2,$934,$f)|0);
    $964 = ($938|0)==(8192);
    $or$cond$i = $964 & $940;
    if ($or$cond$i) {
     $965 = (($w$2) - ($936))|0;
     $966 = ($965>>>0)>(256);
     $967 = $966 ? 256 : $965;
     _memset(($pad$i|0),32,($967|0))|0;
     $968 = ($965>>>0)>(255);
     if ($968) {
      $$01$i = $965;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $969 = (($$01$i) + -256)|0;
       $970 = ($969>>>0)>(255);
       if ($970) {
        $$01$i = $969;
       } else {
        break;
       }
      }
      $971 = $965 & 255;
      $$0$lcssa$i = $971;
     } else {
      $$0$lcssa$i = $965;
     }
     (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
     $$be = $1047;$$be288 = $1048;$fmt90$be = $$lcssa298;$l$0$be = $w$2;$l10n$0$be = $l10n$3;
    } else {
     $$be = $1047;$$be288 = $1048;$fmt90$be = $$lcssa298;$l$0$be = $w$2;$l10n$0$be = $l10n$3;
    }
   } else {
    $$be = $1039;$$be288 = $1040;$fmt90$be = $fmt88$lcssa;$l$0$be = $34;$l10n$0$be = $l10n$0;
   }
  } while(0);
  $1039 = $$be;$1040 = $$be288;$cnt$0 = $cnt$1;$fmt90 = $fmt90$be;$l$0 = $l$0$be;$l10n$0 = $l10n$0$be;
 }
 if ((label|0) == 426) {
  $972 = ($f|0)==(0|0);
  if (!($972)) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  $973 = ($l10n$0$lcssa|0)==(0);
  if ($973) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $i$2166 = 1;
  while(1) {
   $974 = (($nl_type) + ($i$2166<<2)|0);
   $975 = HEAP32[$974>>2]|0;
   $976 = ($975|0)==(0);
   if ($976) {
    $i$2166$lcssa = $i$2166;
    break;
   }
   $977 = (($nl_arg) + ($i$2166<<3)|0);
   $978 = ($975>>>0)>(20);
   L610: do {
    if (!($978)) {
     do {
      switch ($975|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $979 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$977>>2] = $979;
       break L610;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $980 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $981 = ($980|0)<(0);
       $982 = $981 << 31 >> 31;
       $983 = $977;
       $984 = $983;
       HEAP32[$984>>2] = $980;
       $985 = (($983) + 4)|0;
       $986 = $985;
       HEAP32[$986>>2] = $982;
       break L610;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $987 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $988 = $977;
       $989 = $988;
       HEAP32[$989>>2] = $987;
       $990 = (($988) + 4)|0;
       $991 = $990;
       HEAP32[$991>>2] = 0;
       break L610;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $992 = $arglist_current44;
       $993 = $992;
       $994 = HEAP32[$993>>2]|0;
       $995 = (($992) + 4)|0;
       $996 = $995;
       $997 = HEAP32[$996>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $998 = $977;
       $999 = $998;
       HEAP32[$999>>2] = $994;
       $1000 = (($998) + 4)|0;
       $1001 = $1000;
       HEAP32[$1001>>2] = $997;
       break L610;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1002 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1003 = $1002&65535;
       $1004 = $1003 << 16 >> 16;
       $1005 = ($1004|0)<(0);
       $1006 = $1005 << 31 >> 31;
       $1007 = $977;
       $1008 = $1007;
       HEAP32[$1008>>2] = $1004;
       $1009 = (($1007) + 4)|0;
       $1010 = $1009;
       HEAP32[$1010>>2] = $1006;
       break L610;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1011 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1011 & 65535;
       $1012 = $977;
       $1013 = $1012;
       HEAP32[$1013>>2] = $$mask1$i;
       $1014 = (($1012) + 4)|0;
       $1015 = $1014;
       HEAP32[$1015>>2] = 0;
       break L610;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1016 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1017 = $1016&255;
       $1018 = $1017 << 24 >> 24;
       $1019 = ($1018|0)<(0);
       $1020 = $1019 << 31 >> 31;
       $1021 = $977;
       $1022 = $1021;
       HEAP32[$1022>>2] = $1018;
       $1023 = (($1021) + 4)|0;
       $1024 = $1023;
       HEAP32[$1024>>2] = $1020;
       break L610;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1025 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1025 & 255;
       $1026 = $977;
       $1027 = $1026;
       HEAP32[$1027>>2] = $$mask$i;
       $1028 = (($1026) + 4)|0;
       $1029 = $1028;
       HEAP32[$1029>>2] = 0;
       break L610;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1030 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$977>>3] = $1030;
       break L610;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1031 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$977>>3] = $1031;
       break L610;
       break;
      }
      default: {
       break L610;
      }
      }
     } while(0);
    }
   } while(0);
   $1032 = (($i$2166) + 1)|0;
   $1033 = ($1032|0)<(10);
   if ($1033) {
    $i$2166 = $1032;
   } else {
    label = 447;
    break;
   }
  }
  if ((label|0) == 447) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $i$3164 = $i$2166$lcssa;
  while(1) {
   $1036 = (($nl_type) + ($i$3164<<2)|0);
   $1037 = HEAP32[$1036>>2]|0;
   $1038 = ($1037|0)==(0);
   $1034 = (($i$3164) + 1)|0;
   if (!($1038)) {
    $$0$ph = -1;
    break;
   }
   $1035 = ($1034|0)<(10);
   if ($1035) {
    $i$3164 = $1034;
   } else {
    $$0$ph = 1;
    break;
   }
  }
  $$0 = $$0$ph;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 448) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 449) {
  $$0 = $$0$ph287;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
      HEAP8[(((pdest)+(i))>>0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _saveSetjmp(env, label, table, size) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    size = size|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < (size|0)) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        tempRet0 = size;
        return table | 0;
      }
      i = i+1|0;
    }
    // grow the table
    size = (size*2)|0;
    table = _realloc(table|0, 8*(size+1|0)|0) | 0;
    table = _saveSetjmp(env|0, label|0, table|0, size|0) | 0;
    tempRet0 = size;
    return table | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _testSetjmp(id, table, size) {
    id = id|0;
    table = table|0;
    size = size|0;
    var i = 0, curr = 0;
    while ((i|0) < (size|0)) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _strcat(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    var pdestEnd = 0;
    pdestEnd = (pdest + (_strlen(pdest)|0))|0;
    do {
      HEAP8[((pdestEnd+i)>>0)]=HEAP8[((psrc+i)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&127](a1|0,a2|0,a3|0)|0;
}


function dynCall_di(index,a1) {
  index = index|0;
  a1=a1|0;
  return +FUNCTION_TABLE_di[index&63](a1|0);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&127](a1|0);
}


function dynCall_dd(index,a1) {
  index = index|0;
  a1=+a1;
  return +FUNCTION_TABLE_dd[index&127](+a1);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&127](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&127](a1|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&127]();
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&127](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&127](a1|0,a2|0)|0;
}

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
function _fprintf__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _fprintf(p0|0,p1|0,p2|0)|0; }
function _fseek__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _fseek(p0|0,p1|0,p2|0)|0; }
function _fseeko__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _fseeko(p0|0,p1|0,p2|0)|0; }
function b1(p0) { p0 = p0|0; nullFunc_di(1);return +0; }
function b2(p0) { p0 = p0|0; nullFunc_vi(2); }
function _perror__wrapper(p0) { p0 = p0|0; _perror(p0|0); }
function b3(p0) { p0 = +p0; nullFunc_dd(3);return +0; }
function _sqrt__wrapper(p0) { p0 = +p0; return +_sqrt(+p0); }
function b4(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(4); }
function b5(p0) { p0 = p0|0; nullFunc_ii(5);return 0; }
function _putenv__wrapper(p0) { p0 = p0|0; return _putenv(p0|0)|0; }
function _puts__wrapper(p0) { p0 = p0|0; return _puts(p0|0)|0; }
function _abs__wrapper(p0) { p0 = p0|0; return _abs(p0|0)|0; }
function _isatty__wrapper(p0) { p0 = p0|0; return _isatty(p0|0)|0; }
function _fileno__wrapper(p0) { p0 = p0|0; return _fileno(p0|0)|0; }
function _fclose__wrapper(p0) { p0 = p0|0; return _fclose(p0|0)|0; }
function _ctime__wrapper(p0) { p0 = p0|0; return _ctime(p0|0)|0; }
function _putchar__wrapper(p0) { p0 = p0|0; return _putchar(p0|0)|0; }
function _strlen__wrapper(p0) { p0 = p0|0; return _strlen(p0|0)|0; }
function b6() { ; nullFunc_v(6); }
function b7(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(7);return 0; }
function _fread__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _fread(p0|0,p1|0,p2|0,p3|0)|0; }
function b8(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(8);return 0; }
function _printf__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _printf(p0|0,p1|0)|0; }
function _fopen__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _fopen(p0|0,p1|0)|0; }
function _utime__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _utime(p0|0,p1|0)|0; }
function _strcpy__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _strcpy(p0|0,p1|0)|0; }
function _strcat__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _strcat(p0|0,p1|0)|0; }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,_sn_write,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,_fprintf__wrapper,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_fseek__wrapper,b0,b0,b0,b0,b0,b0,b0,_fseeko__wrapper,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_sprintf,b0,_do_read,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_di = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,_atof,b1,b1];
var FUNCTION_TABLE_vi = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_perror__wrapper,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_free,b2,_bad_pixels,_subtract,b2
,b2,b2,b2,b2,b2,_xtrans_interpolate,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_dd = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_sqrt__wrapper,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_merror,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_ii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_putenv__wrapper,b5,_puts__wrapper,b5
,_isdigit,b5,b5,_atoi,_abs__wrapper,b5,_isatty__wrapper,_fileno__wrapper,_fclose__wrapper,b5,b5,b5,b5,b5,b5,_ctime__wrapper,b5,_putchar__wrapper,b5,_malloc,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_strlen__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_v = [b6,b6,_phase_one_load_raw,_phase_one_load_raw_c,_canon_load_raw,_lossless_jpeg_load_raw,_canon_600_load_raw,_sony_load_raw,_eight_bit_load_raw,_kodak_262_load_raw,_packed_load_raw,_nokia_load_raw,_panasonic_load_raw,_sinar_4shot_load_raw,_sony_arw_load_raw,_samsung_load_raw,_samsung2_load_raw,_samsung3_load_raw,_imacon_full_load_raw,_unpacked_load_raw,_sony_arw2_load_raw,_olympus_load_raw,_nikon_yuv_load_raw,_nikon_load_raw,_pentax_load_raw,_kodak_rgb_load_raw,_kodak_ycbcr_load_raw,_kodak_65000_load_raw,_layer_thumb
,_ppm_thumb,_ppm16_thumb,_kodak_thumb_load_raw,_rollei_thumb,_smal_v6_load_raw,_smal_v9_load_raw,_foveon_sd_load_raw,_foveon_dp_load_raw,_jpeg_thumb,_foveon_thumb,_quicktake_100_load_raw,_kodak_radc_load_raw,_canon_rmf_load_raw,_redcine_load_raw,_minolta_rd175_load_raw,_packed_dng_load_raw,_lossless_dng_load_raw,_lossy_dng_load_raw,_canon_sraw_load_raw,_hasselblad_load_raw,_leaf_hdr_load_raw,_kodak_c330_load_raw,_kodak_c603_load_raw,_kodak_dc120_load_raw,_kodak_jpeg_load_raw,_rollei_load_raw,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_identify,b6,_write_ppm_tiff,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_crop_masked_pixels,b6,_remove_zeroes,b6,b6,_foveon_interpolate
,_scale_colors,_pre_interpolate,_lin_interpolate,_vng_interpolate,_ppg_interpolate,b6,_ahd_interpolate,_median_filter,_blend_highlights,_recover_highlights,_fuji_rotate,_convert_to_rgb,_stretch,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_fread__wrapper,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_snprintf,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_iii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_printf__wrapper,b8,_strchr
,b8,b8,b8,b8,b8,_strcmp,b8,b8,b8,_fopen__wrapper,b8,b8,_utime__wrapper,b8,b8,b8,b8,b8,_fcol,b8,b8,_calloc,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_strcpy__wrapper,_strrchr,b8,b8,_strcat__wrapper,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8];

  return { _testSetjmp: _testSetjmp, _i64Subtract: _i64Subtract, _strcat: _strcat, _free: _free, _main: _main, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, _bitshift64Ashr: _bitshift64Ashr, _saveSetjmp: _saveSetjmp, _memset: _memset, _malloc: _malloc, _strncpy: _strncpy, _memcpy: _memcpy, _strlen: _strlen, _bitshift64Lshr: _bitshift64Lshr, _strcpy: _strcpy, _calloc: _calloc, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_di: dynCall_di, dynCall_vi: dynCall_vi, dynCall_dd: dynCall_dd, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_iii: dynCall_iii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__testSetjmp = asm["_testSetjmp"]; asm["_testSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__testSetjmp.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__strcat = asm["_strcat"]; asm["_strcat"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcat.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__bitshift64Ashr = asm["_bitshift64Ashr"]; asm["_bitshift64Ashr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Ashr.apply(null, arguments);
};

var real__saveSetjmp = asm["_saveSetjmp"]; asm["_saveSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__saveSetjmp.apply(null, arguments);
};

var real__strncpy = asm["_strncpy"]; asm["_strncpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strncpy.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcpy.apply(null, arguments);
};

var real__calloc = asm["_calloc"]; asm["_calloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__calloc.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _calloc = Module["_calloc"] = asm["_calloc"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_dd = Module["dynCall_dd"] = asm["dynCall_dd"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    function applyMemoryInitializer(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }
    var request = Module['memoryInitializerRequest'];
    if (request) {
      // a network request has already been created, just use that
      if (request.response) {
        setTimeout(function() {
          applyMemoryInitializer(request.response);
        }, 0); // it's already here; but, apply it asynchronously
      } else {
        request.addEventListener('load', function() { // wait for it
          if (request.status !== 200 && request.status !== 0) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status);
          }
          if (!request.response || typeof request.response !== 'object' || !request.response.byteLength) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest response (expected ArrayBuffer): ' + request.response);
          }
          applyMemoryInitializer(request.response);
        });
      }
    } else {
      // fetch it from the network ourselves
      Browser.asyncLoad(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (Module['onExit']) Module['onExit'](status);

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  abortDecorators.forEach(function(decorator) {
    output = decorator(output, what);
  });
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



